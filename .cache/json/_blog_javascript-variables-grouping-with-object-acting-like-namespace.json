{"data":{"mdx":{"frontmatter":{"title":"Javascript's variables grouping with object acting like namespace","date":"November 17, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Javascript's variables grouping with object acting like namespace\",\n  \"date\": \"2011-11-17\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In Javascript, if you need to have multiple global variable in a script you could finish with something like a chunk of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var v1; var v2; var v3; var v4; var v5; \\n\")), mdx(\"p\", null, \"This can cause problem because, maybe someone will need to define a variable with the same name (locally or globally). To reduce this problematic, you can use Javascript object notation (JSON). By using JSON syntax you can create a \\\"virtual\\\" namespace with an object. I say \\\"virtual namespace\\\" because it's not a namespace. In fact, it's an object... but it's created just to group variable instead if letting them wild at the top of a Javascript file. This is pretty important because if a web page include many Javascript file this could end having 2 files using the same variable name which would override the value of the other.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var mynamespace = { \\\"v1\\\":\\\"value1\\\" ,\\\"v2\\\":\\\"value2\\\" ,\\\"v3\\\":\\\"value3\\\" ,\\\"v4\\\":\\\"value4\\\" ,\\\"v5\\\":\\\"value5\\\" ,\\\"v6\\\":\\\"value6\\\" }; \\n\")), mdx(\"p\", null, \"This way, instead of using in your code v1 directly you use the object v1.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"mynamespace.v1 = \\\"Patrick\\\";\\n\\n//...\\n\\nif(mynamespace.v1 == \\\"Unknown\\\") { //... } \\n\")), mdx(\"p\", null, \"This post cover only the basic. You can have multiple level of deepest as JSON let you have inner array or \\\"object\\\". I'll cover this later.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6029803f-655c-54bc-a7f2-37bf9571aac0"}}