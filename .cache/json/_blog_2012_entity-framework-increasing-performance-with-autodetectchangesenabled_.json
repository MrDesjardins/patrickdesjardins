{"data":{"mdx":{"frontmatter":{"title":"Entity Framework increasing performance with AutoDetectChangesEnabled","date":"September 5, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework increasing performance with AutoDetectChangesEnabled\",\n  \"date\": \"2012-09-05\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you need to insert a lot of data into the framework with Microsoft Entity Framework you may want to set the AutoDetectChangesEnabled to false. This will improve performance because the DetectChanges won't execute the detection of changes in the objec.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public virtual void DetectChanges(bool force = false) { if (this.AutoDetectChangesEnabled || force) { this.ObjectContext.DetectChanges (); } } \\n\")), mdx(\"p\", null, \"To disable the auto detect changes you need to set the context to false. the AutoDetectChanges is inside the Configuration property. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" context.Configuration.AutoDetectChangesEnabled = false; \\n\")), mdx(\"p\", null, \"This method \\\"DetectChanges\\\" will be called when you use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add, Attach, Find, Local\"), \", or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Remove\"), \" members on DbSet. Also, it will be called if you use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GetValidationErrors\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Entry\"), \", or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SaveChanges\"), \" members on DbContext. This is the reason that batch Adding object with Entity Framework can be slow because the detection.\"), mdx(\"p\", null, \"DetectChanges do a copy of every entity added to the context and will verify if a change has been made when everything is commited to the database (Saved). Every time that DetectChange is called it has to go through all of your tracked entities each time its called, so the more stuff you have in your context the longer it takes to traverse.\"), mdx(\"p\", null, \"So, it's possible to disable the detect change and call it manually if you need to increase speed. But, in most case you can stay the detection automatically without a big loss of performance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" YourDbContext.ChangeTracker.DetectChanges(); //Manually detect changes \\n\")), mdx(\"p\", null, \"From my experience, the performance isn't affected if you play with less than 100 objects. It's easier to let the framework handle changes in this case. But, if you need to add or modify over 100 objects, I recommend that you manually remove the automatic changes detection and to manually call the DetectChanges.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"345f2186-3481-521d-9a41-254c6fe5a5aa","slug":"2012/entity-framework-increasing-performance-with-autodetectchangesenabled","__params":{"slug":"2012"}}}