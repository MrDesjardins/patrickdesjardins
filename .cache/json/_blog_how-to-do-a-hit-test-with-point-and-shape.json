{"data":{"mdx":{"frontmatter":{"title":"How to do a hit test with Point and Shape?","date":"February 6, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to do a hit test with Point and Shape?\",\n  \"date\": \"2012-02-06\",\n  \"categories\": [\"silverlight\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some situation, you may need to know if the mouse has hit a specific polygon drawn in a canvas. This can be easily done with Silverlight using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"VisualTreeHelper\"), \".\"), mdx(\"p\", null, \"First of all, you need to have a listener to the mouse even.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" void myCanvas_MouseRightButtonDown(object sender, MouseButtonEventArgs e) { e.Handled = true; Point currentMousePosition = e.GetPosition(this.myCanvas); var underMouseControls = GetControlFromCoordonate(currentMousePosition); } \\n\")), mdx(\"p\", null, \"The second step is to create the method \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"GetControlFromCoordonate\")), \" to return a list of Control that has been clicked.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public IEnumerable<Control> GetControlFromCoordonate (Point coordonate) { return VisualTreeHelper.FindElementsInHostCoordinates(coordonate, this.myCanvas).OfType<Control>(); } \\n\")), mdx(\"p\", null, \"This will return an enumeration of all UIElement which be cast to have only Control. You can even filter more if you search specific control.\"), mdx(\"p\", null, \"So, the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"VisualTreeHelper\"), \" may not have a HitTest method but with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FindElementsInHostCoordinates\"), \", you can filter the result to have the same result.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2c1991ca-0c8a-56da-afa4-c26644823788"}}