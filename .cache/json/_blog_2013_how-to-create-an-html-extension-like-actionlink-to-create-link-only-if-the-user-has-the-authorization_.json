{"data":{"mdx":{"frontmatter":{"title":"How to create an Html Extension like ActionLink to create link only if the user has the authorization","date":"May 8, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create an Html Extension like ActionLink to create link only if the user has the authorization\",\n  \"date\": \"2013-05-08\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The idea to create an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Html Extension\"), \" like ActionLink to create link only if the user has the authorization can be very helpful. The goal here is to display the link only if the action allow the user to execute the action. This way, every user will see link to action that it belong to. On the other hand, people with the access to these actions will see links to those action.\"), mdx(\"p\", null, \"Here is an example of the final product. The first line is the new ActionLink and the second line is the default one. The result will be that a user that has access to \\\"Edit\\\" will see the link when others that doesn't have access won't see it. The second line will show for every body the link for \\\"Details\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"@Html.Input().ActionLink(\\\"Edit\\\", \\\"Edit\\\", null, (new { id=item.Id })) @Html.ActionLink(\\\"Details\\\", \\\"Details\\\", new { id=item.Id })\",\n    \"@Html.Input().ActionLink(\\\"Edit\\\",\": true,\n    \"\\\"Edit\\\",\": true,\n    \"null,\": true,\n    \"(new\": true,\n    \"{\": true,\n    \"id\": \"item.Id\",\n    \"}))\": true,\n    \"@Html.ActionLink(\\\"Details\\\",\": true,\n    \"\\\"Details\\\",\": true,\n    \"new\": true,\n    \"})\": true\n  }, \"\")), mdx(\"p\", null, \"On the controller side, you will see the Edit action with the authorization attribute.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [HttpGet] [Authorize(Roles = Roles.ADMINISTRATOR)] public ActionResult Edit(int id) { //... } \\n\")), mdx(\"p\", null, \"First of all, we need to create a class to be able to get the attribute of the action. Here is the class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class AttributeHelper { private readonly HtmlHelper_htmlHelper; public AttributeHelper(HtmlHelper htmlHelper) {_htmlHelper = htmlHelper; }\\n\\npublic IEnumerable<Attribute> GetAttributes( string actionName, string controllerName, string method = \\\"GET\\\") { var controllerFactory = ControllerBuilder.Current.GetControllerFactory(); var otherController = (ControllerBase)controllerFactory.CreateController(new RequestContext(_htmlHelper.ViewContext.HttpContext, new RouteData()), controllerName); var controllerDescriptor = new ReflectedControllerDescriptor(otherController.GetType()); var controllerContext2 = new ControllerContext(new HttpContextWrapperWithHttpMethod(_htmlHelper.ViewContext.HttpContext.ApplicationInstance.Context, method), new RouteData(), otherController); var actionDescriptor = controllerDescriptor.FindAction(controllerContext2, actionName); var attributes = actionDescriptor.GetCustomAttributes(true).Cast<Attribute>().ToArray(); return attributes; }\\n\\nprivate class HttpContextWrapperWithHttpMethod : HttpContextWrapper { private readonly HttpRequestBase_request;\\n\\npublic HttpContextWrapperWithHttpMethod(HttpContext httpContext, string method): base(httpContext) { this._request = new HttpRequestWrapperWithHttpMethod(httpContext.Request, method); }\\n\\npublic override HttpRequestBase Request { get { return_request; } }\\n\\nprivate class HttpRequestWrapperWithHttpMethod : HttpRequestWrapper { private readonly string_httpMethod;\\n\\npublic HttpRequestWrapperWithHttpMethod(HttpRequest httpRequest, string httpMethod): base(httpRequest) { this._httpMethod = httpMethod; }\\n\\npublic override string HttpMethod { get { return_httpMethod; } } } }\\n\\n} \\n\")), mdx(\"p\", null, \"If you want to use it, you must call the method and then search for the required attribute. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var attributeHelper = new AttributeHelper(HtmlHelper); var att = attributeHelper.GetAttributes(actionName, controllerName).OfType<AuthorizeAttribute>(); var isInRole = att.Aggregate(false, (f, g) => f | HtmlHelper.ViewContext.HttpContext.User.IsInRole(g.Roles)); \\n``` Line 1 instantiate the helper that will give you the possibility to get attributes. The second line will filter to get AuthorizedAttribute. This can return multiple attribute so we have to use the third line to aggregate if the user is in one of the AuthorizedAttribute.\\n\\nThe Html helper can now use this to display or not the link. \\n```csharp\\n public MvcHtmlString ActionLink(string linkText , string actionName = null , string controllerName = null , object routeValues = null , object htmlAttributes=null) { if (actionName == null) { actionName = HtmlHelper.ViewContext.RouteData.GetRequiredString(\\\"action\\\"); } if (controllerName == null) { controllerName = HtmlHelper.ViewContext.RouteData.GetRequiredString(\\\"controller\\\"); } var routeValues2 = new RouteValueDictionary(routeValues); var attributes = (IDictionary<string, object>)HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes);\\n\\nif (string.IsNullOrEmpty(linkText)) throw new ArgumentException(\\\"linkText\\\"); else { var attributeHelper = new AttributeHelper(HtmlHelper); var att = attributeHelper.GetAttributes(actionName, controllerName).OfType<AuthorizeAttribute>(); var isInRole = att.Aggregate(false, (f, g) => f | HtmlHelper.ViewContext.HttpContext.User.IsInRole(g.Roles)); if (isInRole) { return MvcHtmlString.Create(HtmlHelper.GenerateLink(HtmlHelper.ViewContext.RequestContext, HtmlHelper.RouteCollection, linkText, (string)null, actionName, controllerName, routeValues2, attributes)); } return new MvcHtmlString(\\\"\\\"); } } \\n\")), mdx(\"p\", null, \"Line 9 and 13 are only there if the controller or and action is not defined. In practice, the controller shouldn't be used all the time because we are most of the time using an action that is inside the controller. For example, we are in the Index of the controller Muscle. If we want to Edit, Create, etc, all of theses action are in the controller, it doesn't require you to specify every time the controller.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"47de0f17-f2db-52ad-883b-45511115f164","slug":"2013/how-to-create-an-html-extension-like-actionlink-to-create-link-only-if-the-user-has-the-authorization","__params":{"slug":"2013"}}}