{"data":{"mdx":{"frontmatter":{"title":"Bootstrap Loading Spinner With CSS3","date":"May 25, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Bootstrap Loading Spinner With CSS3\",\n  \"date\": \"2015-05-25\",\n  \"categories\": [\"css\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using Bootstrap library and are using the button to load something from Ajax you may want to have the button to be disable and display a waiting message. The easiest way to do is to use the button with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"data-loading-text\"), \" attribute. This allow to use the button method to have the text in the attribute to be placed inside your button and once it is done to call again the button method to have the text reset back to the original value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html \\\"btn\",\n    \"metastring\": \"<button id=\\\"buttonSelector\\\" class=\\\"btn btn-primary\\\" data-loading-text=\\\"... Loading ...\\\"> Do long action here</button>\",\n    \"<button\": true,\n    \"id\": \"\\\"buttonSelector\\\"\",\n    \"btn-primary\\\"\": true,\n    \"data-loading-text\": \"\\\"...\",\n    \"Loading\": true,\n    \"...\\\">\": true,\n    \"Do\": true,\n    \"long\": true,\n    \"action\": true,\n    \"here</button>\": true\n  }, \"```  The JavaScript: ```typescript\\n$(\\\"#buttonSelector\\\").click(function () { $(this).button('loading'); // Long waiting operation here $(this).button('reset'); } ); \\n\")), mdx(\"p\", null, \"So far, the text is changing but their is not animation. A trick is to use a glyphicon, available with Bootstrapper, and to make this one animate with CSS3. The first modification is to set the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"data-loading-text\"), \" attribute with the glyphicon code. This mean that we will set html into the attribute. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html 'glyphicon-left\",\n    \"metastring\": \"<button id=\\\"buttonSelector\\\" class=\\\"btn btn-primary\\\" data-loading-text=\\\"<span class='glyphicon-left glyphicon glyphicon-refresh spinning'></span>... Loading ...\\\"> Do long action here</button>\",\n    \"<button\": true,\n    \"id\": \"\\\"buttonSelector\\\"\",\n    \"btn-primary\\\"\": true,\n    \"data-loading-text\": \"\\\"<span\",\n    \"glyphicon\": true,\n    \"glyphicon-refresh\": true,\n    \"spinning'></span>...\": true,\n    \"Loading\": true,\n    \"...\\\">\": true,\n    \"Do\": true,\n    \"long\": true,\n    \"action\": true,\n    \"here</button>\": true\n  }, \"```  The JavaScript remains the same but a new addition is required in the CSS. \\n```css\\n .glyphicon.spinning { animation: spin 1s infinite linear; -webkit-animation: spin2 1s infinite linear; }\\n\\n@keyframes spin { from { transform: scale(1) rotate(0deg);} to { transform: scale(1) rotate(360deg);} }\\n\\n@-webkit-keyframes spin2 { from { -webkit-transform: rotate(0deg);} to { -webkit-transform: rotate(360deg);} }\\n\\n.glyphicon-left { margin-right: 7px; } \\n\")), mdx(\"p\", null, \"The animation is 1 second long and is linear which mean that during the 1 second the animation will remain constant. The spin animation is a transform on the rotation from 0 degree to 360 degree which is a complete rotation. Here is the end result.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"images/BootstrapLoadingAnimationButton.gif.gif\",\n    \"alt\": null\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"01e1130d-1995-5849-91e0-12f5d2d0f667"}}