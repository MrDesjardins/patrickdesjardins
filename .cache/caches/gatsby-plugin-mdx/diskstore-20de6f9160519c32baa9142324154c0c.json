{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-49e02fe9ead28fe0e26e04ebf39262b5--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are using 1 dbcontext per repository, you may end by having problem with your reference between each of your object. Let say that you have an object A with an object B and A is handled by RepoA and you change the object B which is handled by the context inside repoB than you won't have any changes done. This is because the dbcontext contain only reference for RepoA in RepoA and it's not aware of what has been changed in the other dbcontext in RepoB.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":461,"offset":461},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":461,"offset":461},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The best way to solve this issue is to share the dbcontext between all your repositories. This can be easily done if you are using a repository factory (Abstract Factory pattern). When you create your repository factory you should create the database context and set it to all repository when they are instantiated.","position":{"start":{"line":4,"column":1,"offset":463},"end":{"line":4,"column":316,"offset":778},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":463},"end":{"line":4,"column":316,"offset":778},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class RepositoryFactory : IRepositoryFactory { private IClassA a; private IClassB b; private IClassC c;\n\nprivate readonly DatabaseContext dbContext;\n\npublic RepositoryFactory() { this.dbContext = new DatabaseContext(); }\n\npublic IClassA RepoA { get { return a ?? (a = new RepoA(this.dbContext)); } }\n\npublic IClassB RepoB { get { return b ?? (b = new RepoB(this.dbContext)); } }\n\npublic IClassC RepoC { get { return c ?? (c = new RepoC(this.dbContext)); } } } ","position":{"start":{"line":7,"column":1,"offset":781},"end":{"line":19,"column":4,"offset":1263},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Handling multiple repository with Entity Framework\",\"date\":\"2012-03-24\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":22,"column":1,"offset":1266},"end":{"line":22,"column":145,"offset":1410},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":22,"column":145,"offset":1410}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Handling multiple repository with Entity Framework\",\n  \"date\": \"2012-03-24\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using 1 dbcontext per repository, you may end by having problem with your reference between each of your object. Let say that you have an object A with an object B and A is handled by RepoA and you change the object B which is handled by the context inside repoB than you won't have any changes done. This is because the dbcontext contain only reference for RepoA in RepoA and it's not aware of what has been changed in the other dbcontext in RepoB.\"), mdx(\"p\", null, \"The best way to solve this issue is to share the dbcontext between all your repositories. This can be easily done if you are using a repository factory (Abstract Factory pattern). When you create your repository factory you should create the database context and set it to all repository when they are instantiated.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class RepositoryFactory : IRepositoryFactory { private IClassA a; private IClassB b; private IClassC c;\\n\\nprivate readonly DatabaseContext dbContext;\\n\\npublic RepositoryFactory() { this.dbContext = new DatabaseContext(); }\\n\\npublic IClassA RepoA { get { return a ?? (a = new RepoA(this.dbContext)); } }\\n\\npublic IClassB RepoB { get { return b ?? (b = new RepoB(this.dbContext)); } }\\n\\npublic IClassC RepoC { get { return c ?? (c = new RepoC(this.dbContext)); } } } \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Handling multiple repository with Entity Framework\",\n  \"date\": \"2012-03-24\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are using 1 dbcontext per repository, you may end by having problem with your reference between each of your object. Let say that you have an object A with an object B and A is handled by RepoA and you change the object B which is handled by the context inside repoB than you won't have any changes done. This is because the dbcontext contain only reference for RepoA in RepoA and it's not aware of what has been changed in the other dbcontext in RepoB.`}</p>\n    <p>{`The best way to solve this issue is to share the dbcontext between all your repositories. This can be easily done if you are using a repository factory (Abstract Factory pattern). When you create your repository factory you should create the database context and set it to all repository when they are instantiated.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class RepositoryFactory : IRepositoryFactory { private IClassA a; private IClassB b; private IClassC c;\n\nprivate readonly DatabaseContext dbContext;\n\npublic RepositoryFactory() { this.dbContext = new DatabaseContext(); }\n\npublic IClassA RepoA { get { return a ?? (a = new RepoA(this.dbContext)); } }\n\npublic IClassB RepoB { get { return b ?? (b = new RepoB(this.dbContext)); } }\n\npublic IClassC RepoC { get { return c ?? (c = new RepoC(this.dbContext)); } } } \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}