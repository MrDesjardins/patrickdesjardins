{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-34714d269072072e673d4178af2d589b--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"A quick search on Internet will provide many JavaScript implementations of Redux middleware which all look alike at first look: confusing with the three fat arrows. Here is an illustration of what I mean","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":204,"offset":204},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":204,"offset":204},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"const loggerMiddleware = (store) => (next) => (action) => {\n  console.log(\"Before\");\n  const result = next(action);\n  console.log(\"After\"); // Can use: store.getState()\n  return result;\n};","position":{"start":{"line":4,"column":1,"offset":206},"end":{"line":11,"column":4,"offset":412},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Not knowing the type of what is between the arrow, for the store, next or action is very confusing. This is where type can get help to get your head around what is going on. The following code is the same exact code using Microsoft TypeScript.","position":{"start":{"line":13,"column":1,"offset":414},"end":{"line":13,"column":244,"offset":657},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":414},"end":{"line":13,"column":244,"offset":657},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { Middleware, MiddlewareAPI, Dispatch, Action } from \"redux\";\nexport const loggerMiddleware: Middleware =\n  <S>(api: MiddlewareAPI<S>) =>\n  (next: Dispatch<S>) =>\n  <A extends Action>(action: A): A => {\n    console.log(\"Before\");\n    const result = next(action);\n    console.log(\"After\"); // Can use: api.getState()\n    return result;\n  };","position":{"start":{"line":15,"column":1,"offset":659},"end":{"line":26,"column":4,"offset":1023},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first line describes that the middleware is typed of ","position":{"start":{"line":28,"column":1,"offset":1025},"end":{"line":28,"column":58,"offset":1082},"indent":[]}},{"type":"inlineCode","value":"S","position":{"start":{"line":28,"column":58,"offset":1082},"end":{"line":28,"column":61,"offset":1085},"indent":[]}},{"type":"text","value":" which will be the \"state\" that the middleware can access. If you are using Redux ","position":{"start":{"line":28,"column":61,"offset":1085},"end":{"line":28,"column":143,"offset":1167},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"connect","position":{"start":{"line":28,"column":145,"offset":1169},"end":{"line":28,"column":152,"offset":1176},"indent":[]}}],"position":{"start":{"line":28,"column":143,"offset":1167},"end":{"line":28,"column":154,"offset":1178},"indent":[]}},{"type":"text","value":" function, this will be of the type of all your reducers. MiddlewareAPI have two members which one is a function ","position":{"start":{"line":28,"column":154,"offset":1178},"end":{"line":28,"column":267,"offset":1291},"indent":[]}},{"type":"inlineCode","value":"getState()","position":{"start":{"line":28,"column":267,"offset":1291},"end":{"line":28,"column":279,"offset":1303},"indent":[]}},{"type":"text","value":" that return an object of type ","position":{"start":{"line":28,"column":279,"offset":1303},"end":{"line":28,"column":310,"offset":1334},"indent":[]}},{"type":"inlineCode","value":"S","position":{"start":{"line":28,"column":310,"offset":1334},"end":{"line":28,"column":313,"offset":1337},"indent":[]}},{"type":"text","value":" and dispatch field of type ","position":{"start":{"line":28,"column":313,"offset":1337},"end":{"line":28,"column":341,"offset":1365},"indent":[]}},{"type":"inlineCode","value":"Dispatch S","position":{"start":{"line":28,"column":341,"offset":1365},"end":{"line":28,"column":353,"offset":1377},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":28,"column":353,"offset":1377},"end":{"line":28,"column":354,"offset":1378},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1025},"end":{"line":28,"column":354,"offset":1378},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's still not straightforward since the translated TypeScript also uses the three fat arrows. If we come back to the first line, the first confusion may be that it starts with ","position":{"start":{"line":30,"column":1,"offset":1380},"end":{"line":30,"column":178,"offset":1557},"indent":[]}},{"type":"inlineCode","value":"S","position":{"start":{"line":30,"column":178,"offset":1557},"end":{"line":30,"column":181,"offset":1560},"indent":[]}},{"type":"text","value":". The syntax is borrowed from a generic method which ","position":{"start":{"line":30,"column":181,"offset":1560},"end":{"line":30,"column":234,"offset":1613},"indent":[]}},{"type":"inlineCode","value":"loggerMiddleware","position":{"start":{"line":30,"column":234,"offset":1613},"end":{"line":30,"column":252,"offset":1631},"indent":[]}},{"type":"text","value":" use as an anonymous function. You can see this line as:","position":{"start":{"line":30,"column":252,"offset":1631},"end":{"line":30,"column":308,"offset":1687},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1380},"end":{"line":30,"column":308,"offset":1687},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"function loggerMiddleware<S>(api: MiddlewareAPI<S>); // ...","position":{"start":{"line":32,"column":1,"offset":1689},"end":{"line":34,"column":4,"offset":1766},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It would be better to have a stronger definition than relying on the generic type when accessing the state with ","position":{"start":{"line":36,"column":1,"offset":1768},"end":{"line":36,"column":113,"offset":1880},"indent":[]}},{"type":"inlineCode","value":"api.getSTate()","position":{"start":{"line":36,"column":113,"offset":1880},"end":{"line":36,"column":129,"offset":1896},"indent":[]}},{"type":"text","value":", however, the contract is defined to receive the generic in Redux.","position":{"start":{"line":36,"column":129,"offset":1896},"end":{"line":36,"column":196,"offset":1963},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1768},"end":{"line":36,"column":196,"offset":1963},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"export interface Middleware {\n  <S>(api: MiddlewareAPI<S>): (next: Dispatch<S>) => Dispatch<S>;\n}\n\nexport function applyMiddleware(\n  ...middlewares: Middleware[]\n): GenericStoreEnhancer;","position":{"start":{"line":38,"column":1,"offset":1965},"end":{"line":46,"column":4,"offset":2170},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you see, the Middleware function is used by ","position":{"start":{"line":48,"column":1,"offset":2172},"end":{"line":48,"column":48,"offset":2219},"indent":[]}},{"type":"inlineCode","value":"applyMiddleware","position":{"start":{"line":48,"column":48,"offset":2219},"end":{"line":48,"column":65,"offset":2236},"indent":[]}},{"type":"text","value":"to hold a collection of this one. This is why your middleware must conform to the same signature.","position":{"start":{"line":48,"column":65,"offset":2236},"end":{"line":48,"column":162,"offset":2333},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2172},"end":{"line":48,"column":162,"offset":2333},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One last detail is that even with the type ","position":{"start":{"line":50,"column":1,"offset":2335},"end":{"line":50,"column":44,"offset":2378},"indent":[]}},{"type":"inlineCode","value":"<S>","position":{"start":{"line":50,"column":44,"offset":2378},"end":{"line":50,"column":49,"offset":2383},"indent":[]}},{"type":"text","value":" at the ","position":{"start":{"line":50,"column":49,"offset":2383},"end":{"line":50,"column":57,"offset":2391},"indent":[]}},{"type":"inlineCode","value":"MiddlewareAPI<S>","position":{"start":{"line":50,"column":57,"offset":2391},"end":{"line":50,"column":75,"offset":2409},"indent":[]}},{"type":"text","value":" parameter level, this one won't give you a great experience when using ","position":{"start":{"line":50,"column":75,"offset":2409},"end":{"line":50,"column":147,"offset":2481},"indent":[]}},{"type":"inlineCode","value":"app.getState()","position":{"start":{"line":50,"column":147,"offset":2481},"end":{"line":50,"column":163,"offset":2497},"indent":[]}},{"type":"text","value":" because it won't be from your Redux State strongly type. To have MiddlewareAPI to still be generic but specific to your Redux state, you just need to extend this one to your type. Here is an example that also bring the ","position":{"start":{"line":50,"column":163,"offset":2497},"end":{"line":50,"column":383,"offset":2717},"indent":[]}},{"type":"inlineCode","value":"ExtendedMiddleware","position":{"start":{"line":50,"column":383,"offset":2717},"end":{"line":50,"column":403,"offset":2737},"indent":[]}},{"type":"text","value":" interface to have a strong middleware type but this is not required.","position":{"start":{"line":50,"column":403,"offset":2737},"end":{"line":50,"column":472,"offset":2806},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2335},"end":{"line":50,"column":472,"offset":2806},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { Middleware, MiddlewareAPI, Dispatch, Action } from \"redux\";\nexport interface ExtendedMiddleware<StateType> extends Middleware {\n  <S extends StateType>(api: MiddlewareAPI<S>): (\n    next: Dispatch<S>\n  ) => Dispatch<S>;\n}\n\nexport const loggerMiddleware: ExtendedMiddleware<YourApplicationReduxStateTypeHere> =\n\n    <S extends YourApplicationReduxStateTypeHere>(api: MiddlewareAPI<S>) =>\n    (next: Dispatch<S>) =>\n    <A extends Action>(action: A): A => {\n      console.log(\"Before\");\n      const result = next(action);\n      console.log(\"After\"); // Can use: api.getState()\n      return result;\n    };","position":{"start":{"line":52,"column":1,"offset":2808},"end":{"line":70,"column":4,"offset":3437},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, this post probably didn't demystify totally what is going on with Redux middleware but increased the awareness of each of these variables. Hopefully, if you are using TypeScript you will type your middleware to remove some confusions about what is the role of each of the variable passed down.","position":{"start":{"line":72,"column":1,"offset":3439},"end":{"line":72,"column":298,"offset":3736},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3439},"end":{"line":72,"column":298,"offset":3736},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to Create a Typed Redux Middleware in TypeScript\",\"date\":\"2017-10-20\",\"categories\":[\"react\",\"typescript\"]}","position":{"start":{"line":75,"column":1,"offset":3739},"end":{"line":75,"column":149,"offset":3887},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":149,"offset":3887}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Create a Typed Redux Middleware in TypeScript\",\n  \"date\": \"2017-10-20\",\n  \"categories\": [\"react\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A quick search on Internet will provide many JavaScript implementations of Redux middleware which all look alike at first look: confusing with the three fat arrows. Here is an illustration of what I mean\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const loggerMiddleware = (store) => (next) => (action) => {\\n  console.log(\\\"Before\\\");\\n  const result = next(action);\\n  console.log(\\\"After\\\"); // Can use: store.getState()\\n  return result;\\n};\\n\")), mdx(\"p\", null, \"Not knowing the type of what is between the arrow, for the store, next or action is very confusing. This is where type can get help to get your head around what is going on. The following code is the same exact code using Microsoft TypeScript.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { Middleware, MiddlewareAPI, Dispatch, Action } from \\\"redux\\\";\\nexport const loggerMiddleware: Middleware =\\n  <S>(api: MiddlewareAPI<S>) =>\\n  (next: Dispatch<S>) =>\\n  <A extends Action>(action: A): A => {\\n    console.log(\\\"Before\\\");\\n    const result = next(action);\\n    console.log(\\\"After\\\"); // Can use: api.getState()\\n    return result;\\n  };\\n\")), mdx(\"p\", null, \"The first line describes that the middleware is typed of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S\"), \" which will be the \\\"state\\\" that the middleware can access. If you are using Redux \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"connect\"), \" function, this will be of the type of all your reducers. MiddlewareAPI have two members which one is a function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getState()\"), \" that return an object of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S\"), \" and dispatch field of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dispatch S\"), \".\"), mdx(\"p\", null, \"It's still not straightforward since the translated TypeScript also uses the three fat arrows. If we come back to the first line, the first confusion may be that it starts with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S\"), \". The syntax is borrowed from a generic method which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loggerMiddleware\"), \" use as an anonymous function. You can see this line as:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function loggerMiddleware<S>(api: MiddlewareAPI<S>); // ...\\n\")), mdx(\"p\", null, \"It would be better to have a stronger definition than relying on the generic type when accessing the state with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api.getSTate()\"), \", however, the contract is defined to receive the generic in Redux.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export interface Middleware {\\n  <S>(api: MiddlewareAPI<S>): (next: Dispatch<S>) => Dispatch<S>;\\n}\\n\\nexport function applyMiddleware(\\n  ...middlewares: Middleware[]\\n): GenericStoreEnhancer;\\n\")), mdx(\"p\", null, \"As you see, the Middleware function is used by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"applyMiddleware\"), \"to hold a collection of this one. This is why your middleware must conform to the same signature.\"), mdx(\"p\", null, \"One last detail is that even with the type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<S>\"), \" at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MiddlewareAPI<S>\"), \" parameter level, this one won't give you a great experience when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.getState()\"), \" because it won't be from your Redux State strongly type. To have MiddlewareAPI to still be generic but specific to your Redux state, you just need to extend this one to your type. Here is an example that also bring the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExtendedMiddleware\"), \" interface to have a strong middleware type but this is not required.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { Middleware, MiddlewareAPI, Dispatch, Action } from \\\"redux\\\";\\nexport interface ExtendedMiddleware<StateType> extends Middleware {\\n  <S extends StateType>(api: MiddlewareAPI<S>): (\\n    next: Dispatch<S>\\n  ) => Dispatch<S>;\\n}\\n\\nexport const loggerMiddleware: ExtendedMiddleware<YourApplicationReduxStateTypeHere> =\\n\\n    <S extends YourApplicationReduxStateTypeHere>(api: MiddlewareAPI<S>) =>\\n    (next: Dispatch<S>) =>\\n    <A extends Action>(action: A): A => {\\n      console.log(\\\"Before\\\");\\n      const result = next(action);\\n      console.log(\\\"After\\\"); // Can use: api.getState()\\n      return result;\\n    };\\n\")), mdx(\"p\", null, \"So, this post probably didn't demystify totally what is going on with Redux middleware but increased the awareness of each of these variables. Hopefully, if you are using TypeScript you will type your middleware to remove some confusions about what is the role of each of the variable passed down.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to Create a Typed Redux Middleware in TypeScript\",\n  \"date\": \"2017-10-20\",\n  \"categories\": [\"react\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`A quick search on Internet will provide many JavaScript implementations of Redux middleware which all look alike at first look: confusing with the three fat arrows. Here is an illustration of what I mean`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const loggerMiddleware = (store) => (next) => (action) => {\n  console.log(\"Before\");\n  const result = next(action);\n  console.log(\"After\"); // Can use: store.getState()\n  return result;\n};\n`}</code></pre>\n    <p>{`Not knowing the type of what is between the arrow, for the store, next or action is very confusing. This is where type can get help to get your head around what is going on. The following code is the same exact code using Microsoft TypeScript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Middleware, MiddlewareAPI, Dispatch, Action } from \"redux\";\nexport const loggerMiddleware: Middleware =\n  <S>(api: MiddlewareAPI<S>) =>\n  (next: Dispatch<S>) =>\n  <A extends Action>(action: A): A => {\n    console.log(\"Before\");\n    const result = next(action);\n    console.log(\"After\"); // Can use: api.getState()\n    return result;\n  };\n`}</code></pre>\n    <p>{`The first line describes that the middleware is typed of `}<inlineCode parentName=\"p\">{`S`}</inlineCode>{` which will be the \"state\" that the middleware can access. If you are using Redux `}<strong parentName=\"p\">{`connect`}</strong>{` function, this will be of the type of all your reducers. MiddlewareAPI have two members which one is a function `}<inlineCode parentName=\"p\">{`getState()`}</inlineCode>{` that return an object of type `}<inlineCode parentName=\"p\">{`S`}</inlineCode>{` and dispatch field of type `}<inlineCode parentName=\"p\">{`Dispatch S`}</inlineCode>{`.`}</p>\n    <p>{`It's still not straightforward since the translated TypeScript also uses the three fat arrows. If we come back to the first line, the first confusion may be that it starts with `}<inlineCode parentName=\"p\">{`S`}</inlineCode>{`. The syntax is borrowed from a generic method which `}<inlineCode parentName=\"p\">{`loggerMiddleware`}</inlineCode>{` use as an anonymous function. You can see this line as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function loggerMiddleware<S>(api: MiddlewareAPI<S>); // ...\n`}</code></pre>\n    <p>{`It would be better to have a stronger definition than relying on the generic type when accessing the state with `}<inlineCode parentName=\"p\">{`api.getSTate()`}</inlineCode>{`, however, the contract is defined to receive the generic in Redux.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface Middleware {\n  <S>(api: MiddlewareAPI<S>): (next: Dispatch<S>) => Dispatch<S>;\n}\n\nexport function applyMiddleware(\n  ...middlewares: Middleware[]\n): GenericStoreEnhancer;\n`}</code></pre>\n    <p>{`As you see, the Middleware function is used by `}<inlineCode parentName=\"p\">{`applyMiddleware`}</inlineCode>{`to hold a collection of this one. This is why your middleware must conform to the same signature.`}</p>\n    <p>{`One last detail is that even with the type `}<inlineCode parentName=\"p\">{`<S>`}</inlineCode>{` at the `}<inlineCode parentName=\"p\">{`MiddlewareAPI<S>`}</inlineCode>{` parameter level, this one won't give you a great experience when using `}<inlineCode parentName=\"p\">{`app.getState()`}</inlineCode>{` because it won't be from your Redux State strongly type. To have MiddlewareAPI to still be generic but specific to your Redux state, you just need to extend this one to your type. Here is an example that also bring the `}<inlineCode parentName=\"p\">{`ExtendedMiddleware`}</inlineCode>{` interface to have a strong middleware type but this is not required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Middleware, MiddlewareAPI, Dispatch, Action } from \"redux\";\nexport interface ExtendedMiddleware<StateType> extends Middleware {\n  <S extends StateType>(api: MiddlewareAPI<S>): (\n    next: Dispatch<S>\n  ) => Dispatch<S>;\n}\n\nexport const loggerMiddleware: ExtendedMiddleware<YourApplicationReduxStateTypeHere> =\n\n    <S extends YourApplicationReduxStateTypeHere>(api: MiddlewareAPI<S>) =>\n    (next: Dispatch<S>) =>\n    <A extends Action>(action: A): A => {\n      console.log(\"Before\");\n      const result = next(action);\n      console.log(\"After\"); // Can use: api.getState()\n      return result;\n    };\n`}</code></pre>\n    <p>{`So, this post probably didn't demystify totally what is going on with Redux middleware but increased the awareness of each of these variables. Hopefully, if you are using TypeScript you will type your middleware to remove some confusions about what is the role of each of the variable passed down.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}