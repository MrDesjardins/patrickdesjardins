{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-8acb5b207b6ee91e12dbe74337d3f5a2--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Sometime, it's interesting to get a string value from a resource file without getting the one from the current Thread.CurrentThread.CurrentUICulture. Some scenario may be that you are logged in a specific language and you need to sent something to someone who is in a different language.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":288,"offset":288},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":288,"offset":288},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To be able to do this, you need to change the line of code that use the static property and to call the ResourceManager instead.","position":{"start":{"line":4,"column":1,"offset":290},"end":{"line":4,"column":129,"offset":418},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":290},"end":{"line":4,"column":129,"offset":418},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let say that your resource file name is \"MyResource.resx\". If you have set the visibility to public, the file MyResource.Designer.resx will contains a static property for all your entries. If you have a key value of \"Res1\" inside your file you will have a static property called \"Res1\" which will return a string.","position":{"start":{"line":6,"column":1,"offset":420},"end":{"line":6,"column":314,"offset":733},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":420},"end":{"line":6,"column":314,"offset":733},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class MyResource{ public static string Res1 { get { return ResourceManager.GetString(\"Res1\", resourceCulture); } } } ","position":{"start":{"line":9,"column":1,"offset":736},"end":{"line":11,"column":4,"offset":875},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to have access to a specific language without using the current resource culture, you need to instead calling the resource by this static property to call the resource manager directly.","position":{"start":{"line":13,"column":1,"offset":877},"end":{"line":13,"column":198,"offset":1074},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":877},"end":{"line":13,"column":198,"offset":1074},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" //Instead of : string myString = MyResource.Res1; //You have to call : string myString = MyResource.ResourceManager.GetString(\"Res1\", new CultureInfo(\"FR\")); ","position":{"start":{"line":16,"column":1,"offset":1077},"end":{"line":18,"column":4,"offset":1250},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's it. Of course, you have to make sure that you have the culture requested otherwise, an exception will be thrown.","position":{"start":{"line":20,"column":1,"offset":1252},"end":{"line":20,"column":120,"offset":1371},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1252},"end":{"line":20,"column":120,"offset":1371},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Getting resource value with explicit localization\",\"date\":\"2012-06-19\",\"categories\":[\"asp\",\"c-sharp\"]}","position":{"start":{"line":23,"column":1,"offset":1374},"end":{"line":23,"column":141,"offset":1514},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":141,"offset":1514}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting resource value with explicit localization\",\n  \"date\": \"2012-06-19\",\n  \"categories\": [\"asp\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometime, it's interesting to get a string value from a resource file without getting the one from the current Thread.CurrentThread.CurrentUICulture. Some scenario may be that you are logged in a specific language and you need to sent something to someone who is in a different language.\"), mdx(\"p\", null, \"To be able to do this, you need to change the line of code that use the static property and to call the ResourceManager instead.\"), mdx(\"p\", null, \"Let say that your resource file name is \\\"MyResource.resx\\\". If you have set the visibility to public, the file MyResource.Designer.resx will contains a static property for all your entries. If you have a key value of \\\"Res1\\\" inside your file you will have a static property called \\\"Res1\\\" which will return a string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class MyResource{ public static string Res1 { get { return ResourceManager.GetString(\\\"Res1\\\", resourceCulture); } } } \\n\")), mdx(\"p\", null, \"If you want to have access to a specific language without using the current resource culture, you need to instead calling the resource by this static property to call the resource manager directly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" //Instead of : string myString = MyResource.Res1; //You have to call : string myString = MyResource.ResourceManager.GetString(\\\"Res1\\\", new CultureInfo(\\\"FR\\\")); \\n\")), mdx(\"p\", null, \"That's it. Of course, you have to make sure that you have the culture requested otherwise, an exception will be thrown.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Getting resource value with explicit localization\",\n  \"date\": \"2012-06-19\",\n  \"categories\": [\"asp\", \"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Sometime, it's interesting to get a string value from a resource file without getting the one from the current Thread.CurrentThread.CurrentUICulture. Some scenario may be that you are logged in a specific language and you need to sent something to someone who is in a different language.`}</p>\n    <p>{`To be able to do this, you need to change the line of code that use the static property and to call the ResourceManager instead.`}</p>\n    <p>{`Let say that your resource file name is \"MyResource.resx\". If you have set the visibility to public, the file MyResource.Designer.resx will contains a static property for all your entries. If you have a key value of \"Res1\" inside your file you will have a static property called \"Res1\" which will return a string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class MyResource{ public static string Res1 { get { return ResourceManager.GetString(\"Res1\", resourceCulture); } } } \n`}</code></pre>\n    <p>{`If you want to have access to a specific language without using the current resource culture, you need to instead calling the resource by this static property to call the resource manager directly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` //Instead of : string myString = MyResource.Res1; //You have to call : string myString = MyResource.ResourceManager.GetString(\"Res1\", new CultureInfo(\"FR\")); \n`}</code></pre>\n    <p>{`That's it. Of course, you have to make sure that you have the culture requested otherwise, an exception will be thrown.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}