{"expireTime":9007200886478401000,"key":"gatsby-plugin-mdx-entire-payload-1237988953b9096af8f336fcb5b2020a--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"What is a persistence-ignorant object?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":39,"offset":39},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":39,"offset":39},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's an object that is not aware of any persistence. It doesn't know if it will be persisted with a database (or which one), neither if it will be saved in a XML file or a binary one. It's ignorant of that information. A POCO object is a persistence-ignorant class.","position":{"start":{"line":4,"column":1,"offset":41},"end":{"line":4,"column":266,"offset":306},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":41},"end":{"line":4,"column":266,"offset":306},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"POCO mean \"Plain Old CLR Object\"","position":{"start":{"line":6,"column":3,"offset":310},"end":{"line":6,"column":35,"offset":342},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":310},"end":{"line":6,"column":35,"offset":342},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":308},"end":{"line":6,"column":35,"offset":342},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can have POCO or peristence-ignorant object with Entity Framework.","position":{"start":{"line":8,"column":1,"offset":344},"end":{"line":8,"column":71,"offset":414},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":344},"end":{"line":8,"column":71,"offset":414},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Persistence-ignorant Object\",\"date\":\"2011-09-16\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":11,"column":1,"offset":417},"end":{"line":11,"column":122,"offset":538},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":122,"offset":538}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Persistence-ignorant Object\",\n  \"date\": \"2011-09-16\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"What is a persistence-ignorant object?\"), mdx(\"p\", null, \"It's an object that is not aware of any persistence. It doesn't know if it will be persisted with a database (or which one), neither if it will be saved in a XML file or a binary one. It's ignorant of that information. A POCO object is a persistence-ignorant class.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"POCO mean \\\"Plain Old CLR Object\\\"\")), mdx(\"p\", null, \"You can have POCO or peristence-ignorant object with Entity Framework.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Persistence-ignorant Object\",\n  \"date\": \"2011-09-16\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`What is a persistence-ignorant object?`}</p>\n    <p>{`It's an object that is not aware of any persistence. It doesn't know if it will be persisted with a database (or which one), neither if it will be saved in a XML file or a binary one. It's ignorant of that information. A POCO object is a persistence-ignorant class.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`POCO mean \"Plain Old CLR Object\"`}</p>\n    </blockquote>\n    <p>{`You can have POCO or peristence-ignorant object with Entity Framework.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}