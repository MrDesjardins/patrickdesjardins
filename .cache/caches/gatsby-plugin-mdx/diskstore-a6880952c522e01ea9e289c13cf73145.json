{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-80214374f4928b98799c0ea539a250cc--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Since few years, developer are more and more far from ADO.Net with the popularity of ORM (object relationnal mapper). Nevertheless, it's important to take the time to remember what is used behind those ORM or simply to remember how that we can still use ADO.Net classes to achieve the desired behavior with a database. This article describe a disconnect object that contains informations that came from a connected persistence container or/and that will be pushed to a persistence container. This is the role of the DataSet.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":525,"offset":525},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":525,"offset":525},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A DataSet is a snapshot of tables of your database but once it's filled, this one is not anymore connected to the database. A modification to the DataSet won't update the database's tables. It doesn't mean that we could not send the information back to the desired tables but it will requires a new connection to the database. The DataSet is a layer of abstraction between your application data and the persistence storage. By using a DataSet, you do not know exaclty if you are saving into one database or several databases, or if you are saving into XML file.","position":{"start":{"line":4,"column":1,"offset":527},"end":{"line":4,"column":562,"offset":1088},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":527},"end":{"line":4,"column":562,"offset":1088},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first property is the ","position":{"start":{"line":6,"column":1,"offset":1090},"end":{"line":6,"column":27,"offset":1116},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DataTableCollection","position":{"start":{"line":6,"column":29,"offset":1118},"end":{"line":6,"column":48,"offset":1137},"indent":[]}}],"position":{"start":{"line":6,"column":27,"offset":1116},"end":{"line":6,"column":50,"offset":1139},"indent":[]}},{"type":"text","value":". This property contains the set of DataTable which can be see as a SQL table columns. The definition of the DataTable ( metadata of the table) is defined by a collection of type DataColumnCollection. For data, these are located into DataRowCollection. This one is also a collection. So far, you can see a lot of similarity between DataSet properties and how SQL works. Both have tables, columns and rows.","position":{"start":{"line":6,"column":50,"offset":1139},"end":{"line":6,"column":455,"offset":1544},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1090},"end":{"line":6,"column":455,"offset":1544},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In SQL, you can use what is called a view to manipulate the output of a table or many tables. With a DataSet, the DataView act the same way by selecting what is shown. This is perfect to map data between your application and data from your persistence storage.","position":{"start":{"line":8,"column":1,"offset":1546},"end":{"line":8,"column":261,"offset":1806},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1546},"end":{"line":8,"column":261,"offset":1806},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The DataSet contains some properties and one of this one is the ","position":{"start":{"line":10,"column":1,"offset":1808},"end":{"line":10,"column":65,"offset":1872},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DataRelationCollection","position":{"start":{"line":10,"column":67,"offset":1874},"end":{"line":10,"column":89,"offset":1896},"indent":[]}}],"position":{"start":{"line":10,"column":65,"offset":1872},"end":{"line":10,"column":91,"offset":1898},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":91,"offset":1898},"end":{"line":10,"column":92,"offset":1899},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1808},"end":{"line":10,"column":92,"offset":1899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Usually, a DataSet is fill up with a DataAdapter which use a DbConnection with DbCommand. This fill up the DataSet and all connection can then be closed.","position":{"start":{"line":12,"column":1,"offset":1901},"end":{"line":12,"column":154,"offset":2054},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1901},"end":{"line":12,"column":154,"offset":2054},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var con = new SqlConnection(/*Connexion String*/); var dataset = new DataSet(); var adapter = new SqlDataAdapter(); adapter.SelectCommand = new SqlCommand(/*Your SELECT statement*/,con) con.Open(); adapter.Fill(dataset); //The dataset is fill up with data, it's now possible to close the connection and use the data con.Close(); ","position":{"start":{"line":15,"column":1,"offset":2057},"end":{"line":17,"column":4,"offset":2401},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The main advantage is that you are closing rapidly the connection to the database by releasing to the connection pool. You should always open the connection, do your query and close it. This will give the possibility to other request to connect to the database. It's a good practice because every database has a limited amount of connection that can be accepted in the same time.","position":{"start":{"line":19,"column":1,"offset":2403},"end":{"line":19,"column":380,"offset":2782},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2403},"end":{"line":19,"column":380,"offset":2782},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once the connection is closed and the dataset filled up, you can manipulate the data inside DataTableCollection. This can be done by two different way. The first way is to use the DataSet as a Typed DataSet.","position":{"start":{"line":21,"column":1,"offset":2784},"end":{"line":21,"column":208,"offset":2991},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2784},"end":{"line":21,"column":208,"offset":2991},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var dataset = new DataSet(); var prop = dataset.YourEntitiesSet[0].YourProperty; ","position":{"start":{"line":24,"column":1,"offset":2994},"end":{"line":26,"column":4,"offset":3090},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second way by using the UnTyped DataSet.","position":{"start":{"line":28,"column":1,"offset":3092},"end":{"line":28,"column":45,"offset":3136},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":3092},"end":{"line":28,"column":45,"offset":3136},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var dataset = new DataSet(); var prop = (string)dataset.Tables[\"YourEntitiesSet\"].Row[0].[\"YourProperty\"]; ","position":{"start":{"line":31,"column":1,"offset":3139},"end":{"line":33,"column":4,"offset":3261},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"ADO.NET DataSets in a nutshell\",\"date\":\"2013-07-29\",\"categories\":[\"ado-net\"]}","position":{"start":{"line":36,"column":1,"offset":3264},"end":{"line":36,"column":116,"offset":3379},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":116,"offset":3379}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ADO.NET DataSets in a nutshell\",\n  \"date\": \"2013-07-29\",\n  \"categories\": [\"ado-net\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Since few years, developer are more and more far from ADO.Net with the popularity of ORM (object relationnal mapper). Nevertheless, it's important to take the time to remember what is used behind those ORM or simply to remember how that we can still use ADO.Net classes to achieve the desired behavior with a database. This article describe a disconnect object that contains informations that came from a connected persistence container or/and that will be pushed to a persistence container. This is the role of the DataSet.\"), mdx(\"p\", null, \"A DataSet is a snapshot of tables of your database but once it's filled, this one is not anymore connected to the database. A modification to the DataSet won't update the database's tables. It doesn't mean that we could not send the information back to the desired tables but it will requires a new connection to the database. The DataSet is a layer of abstraction between your application data and the persistence storage. By using a DataSet, you do not know exaclty if you are saving into one database or several databases, or if you are saving into XML file.\"), mdx(\"p\", null, \"The first property is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DataTableCollection\"), \". This property contains the set of DataTable which can be see as a SQL table columns. The definition of the DataTable ( metadata of the table) is defined by a collection of type DataColumnCollection. For data, these are located into DataRowCollection. This one is also a collection. So far, you can see a lot of similarity between DataSet properties and how SQL works. Both have tables, columns and rows.\"), mdx(\"p\", null, \"In SQL, you can use what is called a view to manipulate the output of a table or many tables. With a DataSet, the DataView act the same way by selecting what is shown. This is perfect to map data between your application and data from your persistence storage.\"), mdx(\"p\", null, \"The DataSet contains some properties and one of this one is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DataRelationCollection\"), \".\"), mdx(\"p\", null, \"Usually, a DataSet is fill up with a DataAdapter which use a DbConnection with DbCommand. This fill up the DataSet and all connection can then be closed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var con = new SqlConnection(/*Connexion String*/); var dataset = new DataSet(); var adapter = new SqlDataAdapter(); adapter.SelectCommand = new SqlCommand(/*Your SELECT statement*/,con) con.Open(); adapter.Fill(dataset); //The dataset is fill up with data, it's now possible to close the connection and use the data con.Close(); \\n\")), mdx(\"p\", null, \"The main advantage is that you are closing rapidly the connection to the database by releasing to the connection pool. You should always open the connection, do your query and close it. This will give the possibility to other request to connect to the database. It's a good practice because every database has a limited amount of connection that can be accepted in the same time.\"), mdx(\"p\", null, \"Once the connection is closed and the dataset filled up, you can manipulate the data inside DataTableCollection. This can be done by two different way. The first way is to use the DataSet as a Typed DataSet.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var dataset = new DataSet(); var prop = dataset.YourEntitiesSet[0].YourProperty; \\n\")), mdx(\"p\", null, \"The second way by using the UnTyped DataSet.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var dataset = new DataSet(); var prop = (string)dataset.Tables[\\\"YourEntitiesSet\\\"].Row[0].[\\\"YourProperty\\\"]; \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"ADO.NET DataSets in a nutshell\",\n  \"date\": \"2013-07-29\",\n  \"categories\": [\"ado-net\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Since few years, developer are more and more far from ADO.Net with the popularity of ORM (object relationnal mapper). Nevertheless, it's important to take the time to remember what is used behind those ORM or simply to remember how that we can still use ADO.Net classes to achieve the desired behavior with a database. This article describe a disconnect object that contains informations that came from a connected persistence container or/and that will be pushed to a persistence container. This is the role of the DataSet.`}</p>\n    <p>{`A DataSet is a snapshot of tables of your database but once it's filled, this one is not anymore connected to the database. A modification to the DataSet won't update the database's tables. It doesn't mean that we could not send the information back to the desired tables but it will requires a new connection to the database. The DataSet is a layer of abstraction between your application data and the persistence storage. By using a DataSet, you do not know exaclty if you are saving into one database or several databases, or if you are saving into XML file.`}</p>\n    <p>{`The first property is the `}<strong parentName=\"p\">{`DataTableCollection`}</strong>{`. This property contains the set of DataTable which can be see as a SQL table columns. The definition of the DataTable ( metadata of the table) is defined by a collection of type DataColumnCollection. For data, these are located into DataRowCollection. This one is also a collection. So far, you can see a lot of similarity between DataSet properties and how SQL works. Both have tables, columns and rows.`}</p>\n    <p>{`In SQL, you can use what is called a view to manipulate the output of a table or many tables. With a DataSet, the DataView act the same way by selecting what is shown. This is perfect to map data between your application and data from your persistence storage.`}</p>\n    <p>{`The DataSet contains some properties and one of this one is the `}<strong parentName=\"p\">{`DataRelationCollection`}</strong>{`.`}</p>\n    <p>{`Usually, a DataSet is fill up with a DataAdapter which use a DbConnection with DbCommand. This fill up the DataSet and all connection can then be closed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var con = new SqlConnection(/*Connexion String*/); var dataset = new DataSet(); var adapter = new SqlDataAdapter(); adapter.SelectCommand = new SqlCommand(/*Your SELECT statement*/,con) con.Open(); adapter.Fill(dataset); //The dataset is fill up with data, it's now possible to close the connection and use the data con.Close(); \n`}</code></pre>\n    <p>{`The main advantage is that you are closing rapidly the connection to the database by releasing to the connection pool. You should always open the connection, do your query and close it. This will give the possibility to other request to connect to the database. It's a good practice because every database has a limited amount of connection that can be accepted in the same time.`}</p>\n    <p>{`Once the connection is closed and the dataset filled up, you can manipulate the data inside DataTableCollection. This can be done by two different way. The first way is to use the DataSet as a Typed DataSet.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var dataset = new DataSet(); var prop = dataset.YourEntitiesSet[0].YourProperty; \n`}</code></pre>\n    <p>{`The second way by using the UnTyped DataSet.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var dataset = new DataSet(); var prop = (string)dataset.Tables[\"YourEntitiesSet\"].Row[0].[\"YourProperty\"]; \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}