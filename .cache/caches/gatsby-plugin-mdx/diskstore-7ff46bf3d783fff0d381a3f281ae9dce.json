{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-f496501f9b5e0703ce9f47fae52cec4c--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In part 1 of how to migrate an existing JavaScript project to TypeScript, we saw that we can have only JavaScript files and use TypeScript as transpiler with almost no effort. This gave us the capability to transpile into a different version of EcmaScript, but also open the door to bringing typed object and primitives in an existing project. In this phase 2, we will change TypeScript to allows .ts file and benefit of strongly typed parameters and objects.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":460,"offset":460},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":460,"offset":460},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a reminder, the project that I was migrating to TypeScript was an AngularJS 1.5, with RequireJs as AMD loader that was using Grunt to workout the files. In part 1, we configured TypeScript to read only .js file. Now, we need to read both, but also to use AMD module. This wasn't required in the first place and still isn't because of the way the actual project was built -- it was explicitly using the requireJs library in all files. The tsconfig.json also specify what we want to include: .ts file. I added the \"checkjs\" to report errors in JavaScript file. This is not required, but since it's a phase 2, I desired to kick the notch up more in term of validation. However, the checkjs is limited since it relies on inference or JsDoc comment style which wasn't used in the project that I was converting.","position":{"start":{"line":4,"column":1,"offset":462},"end":{"line":4,"column":809,"offset":1270},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":462},"end":{"line":4,"column":809,"offset":1270},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Few changes are required in term of libraries. We need to bring some definition files for AngularJS, RequireJs, JQuery and Angular-ui-router and also the Angular library. This can be done easily with NPM, here is the JSON output.","position":{"start":{"line":6,"column":1,"offset":1272},"end":{"line":6,"column":230,"offset":1501},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1272},"end":{"line":6,"column":230,"offset":1501},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"\"angular\": \"^1.5.11\",\n\"@types/angular\": \"^1.5.23\",\n\"@types/angular-ui-router\": \"^1.1.37\",\n\"@types/jquery\": \"^3.2.10\",","position":{"start":{"line":8,"column":1,"offset":1503},"end":{"line":13,"column":4,"offset":1628},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Minor changes was required in the Gruntfile.js because if we recall, we were using the tsconfig.json file to do the heavy lifting. The main change was to bring .ts file into the final distribution folder since we want to debug the .ts with the map file.","position":{"start":{"line":15,"column":1,"offset":1630},"end":{"line":15,"column":254,"offset":1883},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1630},"end":{"line":15,"column":254,"offset":1883},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From there, I chose some JavaScript files, and changed the extension of the file to .ts. I started with the entry JavaScript file and went deeper and deeper. Without modifying anything, it was working. But, it wasn't leveraging the typed aspect of TypeScript. That is the reason, I started to change all requirejs type. When \"angular\" was injected, I added to the parameter the type. Almost every file needed to have ng.IAngularStatic","position":{"start":{"line":17,"column":1,"offset":1885},"end":{"line":17,"column":435,"offset":2319},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1885},"end":{"line":17,"column":435,"offset":2319},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"angular: ng.IAngularStatic","position":{"start":{"line":19,"column":1,"offset":2321},"end":{"line":21,"column":4,"offset":2365},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The definition file are well exhaustive and provides everything from compileProvider, to scsDelegateProvider, to httpProvider and so on. With the power of TypeScript, it's a matter of typing \"ng.\" and wait for Intellisense to come up suggesting type from AngularJS' definition file.","position":{"start":{"line":23,"column":1,"offset":2367},"end":{"line":23,"column":283,"offset":2649},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2367},"end":{"line":23,"column":283,"offset":2649},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, I went into a situation where this project was using another of our project that was written in JavaScript. No definition file was available. However, I wanted to have the return object to be typed. I ended up creating a folder, in the project I am converting, that I called \"CustomDefinitionFiles\" and I added the missing type and used it. Be sure to have the extension \".d.ts\" and you will be able to use it in your project. While it's better to have the definition files provided by the library, this give us a quick way to have typed content without forcing anything.","position":{"start":{"line":25,"column":1,"offset":2651},"end":{"line":25,"column":581,"offset":3231},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2651},"end":{"line":25,"column":581,"offset":3231},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At the end of these two phases, I was able to show that an existing JavaScript project can be converted to use TypeScript without any impact on the actual code. I demonstrate that it's possible to live in a hybrid mode where JavaScript and TypeScript co-exist. Finally, I demonstrated the power of type by not having a system that is getting type progressively without creating any burden for developers. No one in the team was affected by this transformation and in long term, the code base will get in better quality, easier to read and maintain.","position":{"start":{"line":27,"column":1,"offset":3233},"end":{"line":27,"column":549,"offset":3781},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3233},"end":{"line":27,"column":549,"offset":3781},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"how-i-migrated-an-existing-angularjs-project-from-javascript-to-typescript-part-1-of-2","children":[{"type":"text","value":"First part of AngularJs to React","position":{"start":{"line":29,"column":2,"offset":3784},"end":{"line":29,"column":34,"offset":3816},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3783},"end":{"line":29,"column":123,"offset":3905},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3783},"end":{"line":29,"column":123,"offset":3905},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How I Migrated an Existing AngularJs Project from JavaScript to TypeScript (Part 2 of 2)\",\"date\":\"2017-10-05\",\"categories\":[\"angular\",\"javascript\",\"typescript\"]}","position":{"start":{"line":32,"column":1,"offset":3908},"end":{"line":32,"column":200,"offset":4107},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":32,"column":200,"offset":4107}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How I Migrated an Existing AngularJs Project from JavaScript to TypeScript (Part 2 of 2)\",\n  \"date\": \"2017-10-05\",\n  \"categories\": [\"angular\", \"javascript\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In part 1 of how to migrate an existing JavaScript project to TypeScript, we saw that we can have only JavaScript files and use TypeScript as transpiler with almost no effort. This gave us the capability to transpile into a different version of EcmaScript, but also open the door to bringing typed object and primitives in an existing project. In this phase 2, we will change TypeScript to allows .ts file and benefit of strongly typed parameters and objects.\"), mdx(\"p\", null, \"As a reminder, the project that I was migrating to TypeScript was an AngularJS 1.5, with RequireJs as AMD loader that was using Grunt to workout the files. In part 1, we configured TypeScript to read only .js file. Now, we need to read both, but also to use AMD module. This wasn't required in the first place and still isn't because of the way the actual project was built -- it was explicitly using the requireJs library in all files. The tsconfig.json also specify what we want to include: .ts file. I added the \\\"checkjs\\\" to report errors in JavaScript file. This is not required, but since it's a phase 2, I desired to kick the notch up more in term of validation. However, the checkjs is limited since it relies on inference or JsDoc comment style which wasn't used in the project that I was converting.\"), mdx(\"p\", null, \"Few changes are required in term of libraries. We need to bring some definition files for AngularJS, RequireJs, JQuery and Angular-ui-router and also the Angular library. This can be done easily with NPM, here is the JSON output.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"angular\\\": \\\"^1.5.11\\\",\\n\\\"@types/angular\\\": \\\"^1.5.23\\\",\\n\\\"@types/angular-ui-router\\\": \\\"^1.1.37\\\",\\n\\\"@types/jquery\\\": \\\"^3.2.10\\\",\\n\")), mdx(\"p\", null, \"Minor changes was required in the Gruntfile.js because if we recall, we were using the tsconfig.json file to do the heavy lifting. The main change was to bring .ts file into the final distribution folder since we want to debug the .ts with the map file.\"), mdx(\"p\", null, \"From there, I chose some JavaScript files, and changed the extension of the file to .ts. I started with the entry JavaScript file and went deeper and deeper. Without modifying anything, it was working. But, it wasn't leveraging the typed aspect of TypeScript. That is the reason, I started to change all requirejs type. When \\\"angular\\\" was injected, I added to the parameter the type. Almost every file needed to have ng.IAngularStatic\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"angular: ng.IAngularStatic\\n\")), mdx(\"p\", null, \"The definition file are well exhaustive and provides everything from compileProvider, to scsDelegateProvider, to httpProvider and so on. With the power of TypeScript, it's a matter of typing \\\"ng.\\\" and wait for Intellisense to come up suggesting type from AngularJS' definition file.\"), mdx(\"p\", null, \"Finally, I went into a situation where this project was using another of our project that was written in JavaScript. No definition file was available. However, I wanted to have the return object to be typed. I ended up creating a folder, in the project I am converting, that I called \\\"CustomDefinitionFiles\\\" and I added the missing type and used it. Be sure to have the extension \\\".d.ts\\\" and you will be able to use it in your project. While it's better to have the definition files provided by the library, this give us a quick way to have typed content without forcing anything.\"), mdx(\"p\", null, \"At the end of these two phases, I was able to show that an existing JavaScript project can be converted to use TypeScript without any impact on the actual code. I demonstrate that it's possible to live in a hybrid mode where JavaScript and TypeScript co-exist. Finally, I demonstrated the power of type by not having a system that is getting type progressively without creating any burden for developers. No one in the team was affected by this transformation and in long term, the code base will get in better quality, easier to read and maintain.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"how-i-migrated-an-existing-angularjs-project-from-javascript-to-typescript-part-1-of-2\"\n  }, \"First part of AngularJs to React\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How I Migrated an Existing AngularJs Project from JavaScript to TypeScript (Part 2 of 2)\",\n  \"date\": \"2017-10-05\",\n  \"categories\": [\"angular\", \"javascript\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In part 1 of how to migrate an existing JavaScript project to TypeScript, we saw that we can have only JavaScript files and use TypeScript as transpiler with almost no effort. This gave us the capability to transpile into a different version of EcmaScript, but also open the door to bringing typed object and primitives in an existing project. In this phase 2, we will change TypeScript to allows .ts file and benefit of strongly typed parameters and objects.`}</p>\n    <p>{`As a reminder, the project that I was migrating to TypeScript was an AngularJS 1.5, with RequireJs as AMD loader that was using Grunt to workout the files. In part 1, we configured TypeScript to read only .js file. Now, we need to read both, but also to use AMD module. This wasn't required in the first place and still isn't because of the way the actual project was built -- it was explicitly using the requireJs library in all files. The tsconfig.json also specify what we want to include: .ts file. I added the \"checkjs\" to report errors in JavaScript file. This is not required, but since it's a phase 2, I desired to kick the notch up more in term of validation. However, the checkjs is limited since it relies on inference or JsDoc comment style which wasn't used in the project that I was converting.`}</p>\n    <p>{`Few changes are required in term of libraries. We need to bring some definition files for AngularJS, RequireJs, JQuery and Angular-ui-router and also the Angular library. This can be done easily with NPM, here is the JSON output.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"angular\": \"^1.5.11\",\n\"@types/angular\": \"^1.5.23\",\n\"@types/angular-ui-router\": \"^1.1.37\",\n\"@types/jquery\": \"^3.2.10\",\n`}</code></pre>\n    <p>{`Minor changes was required in the Gruntfile.js because if we recall, we were using the tsconfig.json file to do the heavy lifting. The main change was to bring .ts file into the final distribution folder since we want to debug the .ts with the map file.`}</p>\n    <p>{`From there, I chose some JavaScript files, and changed the extension of the file to .ts. I started with the entry JavaScript file and went deeper and deeper. Without modifying anything, it was working. But, it wasn't leveraging the typed aspect of TypeScript. That is the reason, I started to change all requirejs type. When \"angular\" was injected, I added to the parameter the type. Almost every file needed to have ng.IAngularStatic`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`angular: ng.IAngularStatic\n`}</code></pre>\n    <p>{`The definition file are well exhaustive and provides everything from compileProvider, to scsDelegateProvider, to httpProvider and so on. With the power of TypeScript, it's a matter of typing \"ng.\" and wait for Intellisense to come up suggesting type from AngularJS' definition file.`}</p>\n    <p>{`Finally, I went into a situation where this project was using another of our project that was written in JavaScript. No definition file was available. However, I wanted to have the return object to be typed. I ended up creating a folder, in the project I am converting, that I called \"CustomDefinitionFiles\" and I added the missing type and used it. Be sure to have the extension \".d.ts\" and you will be able to use it in your project. While it's better to have the definition files provided by the library, this give us a quick way to have typed content without forcing anything.`}</p>\n    <p>{`At the end of these two phases, I was able to show that an existing JavaScript project can be converted to use TypeScript without any impact on the actual code. I demonstrate that it's possible to live in a hybrid mode where JavaScript and TypeScript co-exist. Finally, I demonstrated the power of type by not having a system that is getting type progressively without creating any burden for developers. No one in the team was affected by this transformation and in long term, the code base will get in better quality, easier to read and maintain.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"how-i-migrated-an-existing-angularjs-project-from-javascript-to-typescript-part-1-of-2\"\n      }}>{`First part of AngularJs to React`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}