{"expireTime":9007200886478392000,"key":"gatsby-plugin-mdx-entire-payload-b351ded50cdc8d1ec84d305b4241f6b8--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You may want to have multiple button that submit your form and do something different in the action of your controller depending of which button has been used.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":160,"offset":160},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":160,"offset":160},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example that can raise is that you want to be able to create a new entity form the view but also be able to create in batch. One button will insert the entity into the database and return into the edit mode of the new added entity while a second button can simply reset the form to let you insert a new one.","position":{"start":{"line":4,"column":1,"offset":162},"end":{"line":4,"column":311,"offset":472},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":162},"end":{"line":4,"column":311,"offset":472},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The secret is that the submit button is also an input which can have a name and a value. You simply need to have the same name and two different values.","position":{"start":{"line":6,"column":1,"offset":474},"end":{"line":6,"column":153,"offset":626},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":474},"end":{"line":6,"column":153,"offset":626},"indent":[]}},{"type":"code","lang":"html","meta":"<button type=\"submit\" name=\"ActionSave\" value=\"insert\">Save</button> <button type=\"submit\" name=\"ActionSave\" value=\"insertAndContinue\">Save and continue</button>","value":"","position":{"start":{"line":9,"column":1,"offset":629},"end":{"line":10,"column":5,"offset":805},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"You can from here change your view model to have a property ActionSave (string) or you can go directly into the Form collection.","position":{"start":{"line":12,"column":1,"offset":807},"end":{"line":12,"column":129,"offset":935},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":807},"end":{"line":12,"column":129,"offset":935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are using the Form Collection, the action inside your controller will look like this:","position":{"start":{"line":14,"column":1,"offset":937},"end":{"line":14,"column":93,"offset":1029},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":937},"end":{"line":14,"column":93,"offset":1029},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" if (Request.Form[CommandButtonName] == SaveAndContinue) { // ... } else... ","position":{"start":{"line":17,"column":1,"offset":1032},"end":{"line":19,"column":4,"offset":1122},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, you will need to define 3 constants. One for the command button name, one for the Save and one for the SaveAndContinue.","position":{"start":{"line":21,"column":1,"offset":1124},"end":{"line":21,"column":136,"offset":1259},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1124},"end":{"line":21,"column":136,"offset":1259},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Otherwise, if you are using the ViewModel option, you need to check the value directly from the view model posted but also have 2 constants which will be Save and SaveAndContinue.","position":{"start":{"line":23,"column":1,"offset":1261},"end":{"line":23,"column":180,"offset":1440},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1261},"end":{"line":23,"column":180,"offset":1440},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" if (model.Action == SaveAndContinue) { // ... } ","position":{"start":{"line":26,"column":1,"offset":1443},"end":{"line":28,"column":4,"offset":1506},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to know which button submit a form to an Asp.Net MVC controller\",\"date\":\"2013-02-04\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":31,"column":1,"offset":1509},"end":{"line":31,"column":153,"offset":1661},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":31,"column":153,"offset":1661}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to know which button submit a form to an Asp.Net MVC controller\",\n  \"date\": \"2013-02-04\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You may want to have multiple button that submit your form and do something different in the action of your controller depending of which button has been used.\"), mdx(\"p\", null, \"An example that can raise is that you want to be able to create a new entity form the view but also be able to create in batch. One button will insert the entity into the database and return into the edit mode of the new added entity while a second button can simply reset the form to let you insert a new one.\"), mdx(\"p\", null, \"The secret is that the submit button is also an input which can have a name and a value. You simply need to have the same name and two different values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"<button type=\\\"submit\\\" name=\\\"ActionSave\\\" value=\\\"insert\\\">Save</button> <button type=\\\"submit\\\" name=\\\"ActionSave\\\" value=\\\"insertAndContinue\\\">Save and continue</button>\",\n    \"<button\": true,\n    \"type\": \"\\\"submit\\\"\",\n    \"name\": \"\\\"ActionSave\\\"\",\n    \"value\": \"\\\"insertAndContinue\\\">Save\",\n    \"and\": true,\n    \"continue</button>\": true\n  }, \"\")), mdx(\"p\", null, \"You can from here change your view model to have a property ActionSave (string) or you can go directly into the Form collection.\"), mdx(\"p\", null, \"If you are using the Form Collection, the action inside your controller will look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" if (Request.Form[CommandButtonName] == SaveAndContinue) { // ... } else... \\n\")), mdx(\"p\", null, \"As you can see, you will need to define 3 constants. One for the command button name, one for the Save and one for the SaveAndContinue.\"), mdx(\"p\", null, \"Otherwise, if you are using the ViewModel option, you need to check the value directly from the view model posted but also have 2 constants which will be Save and SaveAndContinue.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" if (model.Action == SaveAndContinue) { // ... } \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to know which button submit a form to an Asp.Net MVC controller\",\n  \"date\": \"2013-02-04\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You may want to have multiple button that submit your form and do something different in the action of your controller depending of which button has been used.`}</p>\n    <p>{`An example that can raise is that you want to be able to create a new entity form the view but also be able to create in batch. One button will insert the entity into the database and return into the edit mode of the new added entity while a second button can simply reset the form to let you insert a new one.`}</p>\n    <p>{`The secret is that the submit button is also an input which can have a name and a value. You simply need to have the same name and two different values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\",\n        \"metastring\": \"<button type=\\\"submit\\\" name=\\\"ActionSave\\\" value=\\\"insert\\\">Save</button> <button type=\\\"submit\\\" name=\\\"ActionSave\\\" value=\\\"insertAndContinue\\\">Save and continue</button>\",\n        \"<button\": true,\n        \"type\": \"\\\"submit\\\"\",\n        \"name\": \"\\\"ActionSave\\\"\",\n        \"value\": \"\\\"insertAndContinue\\\">Save\",\n        \"and\": true,\n        \"continue</button>\": true\n      }}>{``}</code></pre>\n    <p>{`You can from here change your view model to have a property ActionSave (string) or you can go directly into the Form collection.`}</p>\n    <p>{`If you are using the Form Collection, the action inside your controller will look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` if (Request.Form[CommandButtonName] == SaveAndContinue) { // ... } else... \n`}</code></pre>\n    <p>{`As you can see, you will need to define 3 constants. One for the command button name, one for the Save and one for the SaveAndContinue.`}</p>\n    <p>{`Otherwise, if you are using the ViewModel option, you need to check the value directly from the view model posted but also have 2 constants which will be Save and SaveAndContinue.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` if (model.Action == SaveAndContinue) { // ... } \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}