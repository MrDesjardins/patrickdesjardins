{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-95a64d675c00ddcc08271cbd61177480--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This situation occur if you have already the object inside the DbContext and you try to Attach your instance. Most of the time you can manage it but just remove the Attach method but in some case that you might not know if the instance is inside the DbContext you may would like to check it before attaching.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":309,"offset":309},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":309,"offset":309},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be done with the help of ","position":{"start":{"line":4,"column":1,"offset":311},"end":{"line":4,"column":35,"offset":345},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbSet","position":{"start":{"line":4,"column":37,"offset":347},"end":{"line":4,"column":42,"offset":352},"indent":[]}}],"position":{"start":{"line":4,"column":35,"offset":345},"end":{"line":4,"column":44,"offset":354},"indent":[]}},{"type":"text","value":" and its ","position":{"start":{"line":4,"column":44,"offset":354},"end":{"line":4,"column":53,"offset":363},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Local","position":{"start":{"line":4,"column":55,"offset":365},"end":{"line":4,"column":60,"offset":370},"indent":[]}}],"position":{"start":{"line":4,"column":53,"offset":363},"end":{"line":4,"column":62,"offset":372},"indent":[]}},{"type":"text","value":" property which is a collection of Locally attached entity.","position":{"start":{"line":4,"column":62,"offset":372},"end":{"line":4,"column":121,"offset":431},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":311},"end":{"line":4,"column":121,"offset":431},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" if (!Database.Set<MyObject>().Local.Any(e => e.ID == myObject.ID)) Database.MyObjects.Attach(myObject); else myObject = Database.Set<MyObject>().Local.Single(e => e.ID == myObject.ID); ","position":{"start":{"line":7,"column":1,"offset":434},"end":{"line":9,"column":4,"offset":634},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first line verify if the Local repositor contains or not your object. This line use the primary has identifier (ID). If it doesn't contain anything, the object is attached. Otherwise, your object will takes the reference of the one of the Local repository. This way, it won't create a new instance of your object. Without the fourth line, you could end up with a new entry into the database even if the primary key is the same as an existing one (Entity Framework will do an Insert and the ID will auto-increment).","position":{"start":{"line":11,"column":1,"offset":636},"end":{"line":11,"column":519,"offset":1154},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":636},"end":{"line":11,"column":519,"offset":1154},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I am still curious to know why in some simple project, I can simply attach and never having the possibility to have twice the same object in the Local property.","position":{"start":{"line":13,"column":1,"offset":1156},"end":{"line":13,"column":161,"offset":1316},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1156},"end":{"line":13,"column":161,"offset":1316},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework 4.3:  An object with the same key already exists in the ObjectStateManager\",\"date\":\"2012-04-16\",\"categories\":[\"entity-framework\",\"general\"]}","position":{"start":{"line":16,"column":1,"offset":1319},"end":{"line":16,"column":196,"offset":1514},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":196,"offset":1514}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework 4.3:  An object with the same key already exists in the ObjectStateManager\",\n  \"date\": \"2012-04-16\",\n  \"categories\": [\"entity-framework\", \"general\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This situation occur if you have already the object inside the DbContext and you try to Attach your instance. Most of the time you can manage it but just remove the Attach method but in some case that you might not know if the instance is inside the DbContext you may would like to check it before attaching.\"), mdx(\"p\", null, \"This can be done with the help of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbSet\"), \" and its \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Local\"), \" property which is a collection of Locally attached entity.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" if (!Database.Set<MyObject>().Local.Any(e => e.ID == myObject.ID)) Database.MyObjects.Attach(myObject); else myObject = Database.Set<MyObject>().Local.Single(e => e.ID == myObject.ID); \\n\")), mdx(\"p\", null, \"The first line verify if the Local repositor contains or not your object. This line use the primary has identifier (ID). If it doesn't contain anything, the object is attached. Otherwise, your object will takes the reference of the one of the Local repository. This way, it won't create a new instance of your object. Without the fourth line, you could end up with a new entry into the database even if the primary key is the same as an existing one (Entity Framework will do an Insert and the ID will auto-increment).\"), mdx(\"p\", null, \"I am still curious to know why in some simple project, I can simply attach and never having the possibility to have twice the same object in the Local property.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework 4.3:  An object with the same key already exists in the ObjectStateManager\",\n  \"date\": \"2012-04-16\",\n  \"categories\": [\"entity-framework\", \"general\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This situation occur if you have already the object inside the DbContext and you try to Attach your instance. Most of the time you can manage it but just remove the Attach method but in some case that you might not know if the instance is inside the DbContext you may would like to check it before attaching.`}</p>\n    <p>{`This can be done with the help of `}<strong parentName=\"p\">{`DbSet`}</strong>{` and its `}<strong parentName=\"p\">{`Local`}</strong>{` property which is a collection of Locally attached entity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` if (!Database.Set<MyObject>().Local.Any(e => e.ID == myObject.ID)) Database.MyObjects.Attach(myObject); else myObject = Database.Set<MyObject>().Local.Single(e => e.ID == myObject.ID); \n`}</code></pre>\n    <p>{`The first line verify if the Local repositor contains or not your object. This line use the primary has identifier (ID). If it doesn't contain anything, the object is attached. Otherwise, your object will takes the reference of the one of the Local repository. This way, it won't create a new instance of your object. Without the fourth line, you could end up with a new entry into the database even if the primary key is the same as an existing one (Entity Framework will do an Insert and the ID will auto-increment).`}</p>\n    <p>{`I am still curious to know why in some simple project, I can simply attach and never having the possibility to have twice the same object in the Local property.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}