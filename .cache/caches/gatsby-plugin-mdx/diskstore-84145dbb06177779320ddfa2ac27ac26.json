{"expireTime":9007200886478383000,"key":"gatsby-plugin-mdx-entire-payload-9427133abf180922d3aa32c9c0be5363--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This is the second article of three about differences between TypeScript and Flow. You can read the first part about high level of ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":132,"offset":132},"indent":[]}},{"type":"link","title":null,"url":"./typescript-vs-flow-part-1-of-3-who-they-are","children":[{"type":"text","value":"TypeScript vs Flow in this article.","position":{"start":{"line":2,"column":133,"offset":133},"end":{"line":2,"column":168,"offset":168},"indent":[]}}],"position":{"start":{"line":2,"column":132,"offset":132},"end":{"line":2,"column":216,"offset":216},"indent":[]}},{"type":"text","value":" The investigation I conducted was done on August 9 and August 10, 2017. It's a domain where it evolves a lot and my conclusion could change in few months or years. The first article goal was to bring fundamentals around what are TypeScript and Flow.","position":{"start":{"line":2,"column":216,"offset":216},"end":{"line":2,"column":466,"offset":466},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":466,"offset":466},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This article will focus on high-level coding feature that differentiates TypeScript and Flow. The get differences, I had to sample a subset of all the feature and the reason is that both support a lot of them and I have limited time. How I decided these features was to go with Flow first by using their documentation. My plan was to convert one TypeScript project already written to Flow and while doing so, I added features that were used which resulted to the features comparison matrix of this article. The result is of the 40 features tested is:","position":{"start":{"line":4,"column":1,"offset":468},"end":{"line":4,"column":551,"offset":1018},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":468},"end":{"line":4,"column":551,"offset":1018},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"11 features lean on TypeScript","position":{"start":{"line":6,"column":3,"offset":1022},"end":{"line":6,"column":33,"offset":1052},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":1022},"end":{"line":6,"column":33,"offset":1052},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1020},"end":{"line":6,"column":33,"offset":1052},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"4 features lean on Flow","position":{"start":{"line":7,"column":3,"offset":1055},"end":{"line":7,"column":26,"offset":1078},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":1055},"end":{"line":7,"column":26,"offset":1078},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":1053},"end":{"line":7,"column":26,"offset":1078},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"18 features that are neutrally equal","position":{"start":{"line":8,"column":3,"offset":1081},"end":{"line":8,"column":39,"offset":1117},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":1081},"end":{"line":8,"column":39,"offset":1117},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1079},"end":{"line":8,"column":39,"offset":1117},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"1 feature that is subjective who is better","position":{"start":{"line":9,"column":3,"offset":1120},"end":{"line":9,"column":45,"offset":1162},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":1120},"end":{"line":9,"column":45,"offset":1162},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":1118},"end":{"line":9,"column":45,"offset":1162},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1020},"end":{"line":9,"column":45,"offset":1162},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's spread the 40 features in a table to illustrate these details and then talk about them.","position":{"start":{"line":11,"column":1,"offset":1164},"end":{"line":11,"column":94,"offset":1257},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1164},"end":{"line":11,"column":94,"offset":1257},"indent":[]}},{"type":"table","align":[null,null,null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Feature","position":{"start":{"line":13,"column":3,"offset":1261},"end":{"line":13,"column":10,"offset":1268},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":1261},"end":{"line":13,"column":10,"offset":1268},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":13,"column":13,"offset":1271},"end":{"line":13,"column":23,"offset":1281},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":1271},"end":{"line":13,"column":23,"offset":1281},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Flow","position":{"start":{"line":13,"column":26,"offset":1284},"end":{"line":13,"column":30,"offset":1288},"indent":[]}}],"position":{"start":{"line":13,"column":26,"offset":1284},"end":{"line":13,"column":30,"offset":1288},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Winner?","position":{"start":{"line":13,"column":33,"offset":1291},"end":{"line":13,"column":40,"offset":1298},"indent":[]}}],"position":{"start":{"line":13,"column":33,"offset":1291},"end":{"line":13,"column":40,"offset":1298},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1259},"end":{"line":13,"column":42,"offset":1300},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Interface","position":{"start":{"line":15,"column":3,"offset":1329},"end":{"line":15,"column":12,"offset":1338},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1329},"end":{"line":15,"column":12,"offset":1338},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":15,"column":15,"offset":1341},"end":{"line":15,"column":18,"offset":1344},"indent":[]}}],"position":{"start":{"line":15,"column":15,"offset":1341},"end":{"line":15,"column":18,"offset":1344},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":15,"column":21,"offset":1347},"end":{"line":15,"column":24,"offset":1350},"indent":[]}}],"position":{"start":{"line":15,"column":21,"offset":1347},"end":{"line":15,"column":24,"offset":1350},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":15,"column":27,"offset":1353},"end":{"line":15,"column":31,"offset":1357},"indent":[]}}],"position":{"start":{"line":15,"column":27,"offset":1353},"end":{"line":15,"column":31,"offset":1357},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1327},"end":{"line":15,"column":33,"offset":1359},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Type (Alias)","position":{"start":{"line":16,"column":3,"offset":1362},"end":{"line":16,"column":15,"offset":1374},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1362},"end":{"line":16,"column":15,"offset":1374},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":16,"column":18,"offset":1377},"end":{"line":16,"column":21,"offset":1380},"indent":[]}}],"position":{"start":{"line":16,"column":18,"offset":1377},"end":{"line":16,"column":21,"offset":1380},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":16,"column":24,"offset":1383},"end":{"line":16,"column":27,"offset":1386},"indent":[]}}],"position":{"start":{"line":16,"column":24,"offset":1383},"end":{"line":16,"column":27,"offset":1386},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":16,"column":30,"offset":1389},"end":{"line":16,"column":34,"offset":1393},"indent":[]}}],"position":{"start":{"line":16,"column":30,"offset":1389},"end":{"line":16,"column":34,"offset":1393},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1360},"end":{"line":16,"column":36,"offset":1395},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Subtype","position":{"start":{"line":17,"column":3,"offset":1398},"end":{"line":17,"column":10,"offset":1405},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":1398},"end":{"line":17,"column":10,"offset":1405},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":17,"column":13,"offset":1408},"end":{"line":17,"column":16,"offset":1411},"indent":[]}}],"position":{"start":{"line":17,"column":13,"offset":1408},"end":{"line":17,"column":16,"offset":1411},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":17,"column":19,"offset":1414},"end":{"line":17,"column":22,"offset":1417},"indent":[]}}],"position":{"start":{"line":17,"column":19,"offset":1414},"end":{"line":17,"column":22,"offset":1417},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":17,"column":25,"offset":1420},"end":{"line":17,"column":29,"offset":1424},"indent":[]}}],"position":{"start":{"line":17,"column":25,"offset":1420},"end":{"line":17,"column":29,"offset":1424},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1396},"end":{"line":17,"column":31,"offset":1426},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Implementation","position":{"start":{"line":18,"column":3,"offset":1429},"end":{"line":18,"column":17,"offset":1443},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1429},"end":{"line":18,"column":17,"offset":1443},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":18,"column":20,"offset":1446},"end":{"line":18,"column":23,"offset":1449},"indent":[]}}],"position":{"start":{"line":18,"column":20,"offset":1446},"end":{"line":18,"column":23,"offset":1449},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":18,"column":26,"offset":1452},"end":{"line":18,"column":29,"offset":1455},"indent":[]}}],"position":{"start":{"line":18,"column":26,"offset":1452},"end":{"line":18,"column":29,"offset":1455},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":18,"column":32,"offset":1458},"end":{"line":18,"column":36,"offset":1462},"indent":[]}}],"position":{"start":{"line":18,"column":32,"offset":1458},"end":{"line":18,"column":36,"offset":1462},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1427},"end":{"line":18,"column":38,"offset":1464},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Encapsulation (private, protected, public)","position":{"start":{"line":19,"column":3,"offset":1467},"end":{"line":19,"column":45,"offset":1509},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1467},"end":{"line":19,"column":45,"offset":1509},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":19,"column":48,"offset":1512},"end":{"line":19,"column":51,"offset":1515},"indent":[]}}],"position":{"start":{"line":19,"column":48,"offset":1512},"end":{"line":19,"column":51,"offset":1515},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":19,"column":54,"offset":1518},"end":{"line":19,"column":56,"offset":1520},"indent":[]}}],"position":{"start":{"line":19,"column":54,"offset":1518},"end":{"line":19,"column":56,"offset":1520},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":19,"column":59,"offset":1523},"end":{"line":19,"column":69,"offset":1533},"indent":[]}}],"position":{"start":{"line":19,"column":59,"offset":1523},"end":{"line":19,"column":69,"offset":1533},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1465},"end":{"line":19,"column":71,"offset":1535},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Enum","position":{"start":{"line":20,"column":3,"offset":1538},"end":{"line":20,"column":7,"offset":1542},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1538},"end":{"line":20,"column":7,"offset":1542},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":20,"column":10,"offset":1545},"end":{"line":20,"column":13,"offset":1548},"indent":[]}}],"position":{"start":{"line":20,"column":10,"offset":1545},"end":{"line":20,"column":13,"offset":1548},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":20,"column":16,"offset":1551},"end":{"line":20,"column":18,"offset":1553},"indent":[]}}],"position":{"start":{"line":20,"column":16,"offset":1551},"end":{"line":20,"column":18,"offset":1553},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":20,"column":21,"offset":1556},"end":{"line":20,"column":31,"offset":1566},"indent":[]}}],"position":{"start":{"line":20,"column":21,"offset":1556},"end":{"line":20,"column":31,"offset":1566},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1536},"end":{"line":20,"column":33,"offset":1568},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"$key (utility type)","position":{"start":{"line":21,"column":3,"offset":1571},"end":{"line":21,"column":22,"offset":1590},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1571},"end":{"line":21,"column":22,"offset":1590},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":21,"column":25,"offset":1593},"end":{"line":21,"column":27,"offset":1595},"indent":[]}}],"position":{"start":{"line":21,"column":25,"offset":1593},"end":{"line":21,"column":27,"offset":1595},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":21,"column":30,"offset":1598},"end":{"line":21,"column":33,"offset":1601},"indent":[]}}],"position":{"start":{"line":21,"column":30,"offset":1598},"end":{"line":21,"column":33,"offset":1601},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Flow","position":{"start":{"line":21,"column":36,"offset":1604},"end":{"line":21,"column":40,"offset":1608},"indent":[]}}],"position":{"start":{"line":21,"column":36,"offset":1604},"end":{"line":21,"column":40,"offset":1608},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1569},"end":{"line":21,"column":42,"offset":1610},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"$diff (utility type)","position":{"start":{"line":22,"column":3,"offset":1613},"end":{"line":22,"column":23,"offset":1633},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1613},"end":{"line":22,"column":23,"offset":1633},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":22,"column":26,"offset":1636},"end":{"line":22,"column":28,"offset":1638},"indent":[]}}],"position":{"start":{"line":22,"column":26,"offset":1636},"end":{"line":22,"column":28,"offset":1638},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":22,"column":31,"offset":1641},"end":{"line":22,"column":34,"offset":1644},"indent":[]}}],"position":{"start":{"line":22,"column":31,"offset":1641},"end":{"line":22,"column":34,"offset":1644},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Flow","position":{"start":{"line":22,"column":37,"offset":1647},"end":{"line":22,"column":41,"offset":1651},"indent":[]}}],"position":{"start":{"line":22,"column":37,"offset":1647},"end":{"line":22,"column":41,"offset":1651},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1611},"end":{"line":22,"column":43,"offset":1653},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"* (utility type)","position":{"start":{"line":23,"column":3,"offset":1656},"end":{"line":23,"column":19,"offset":1672},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1656},"end":{"line":23,"column":19,"offset":1672},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":23,"column":22,"offset":1675},"end":{"line":23,"column":24,"offset":1677},"indent":[]}}],"position":{"start":{"line":23,"column":22,"offset":1675},"end":{"line":23,"column":24,"offset":1677},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":23,"column":27,"offset":1680},"end":{"line":23,"column":30,"offset":1683},"indent":[]}}],"position":{"start":{"line":23,"column":27,"offset":1680},"end":{"line":23,"column":30,"offset":1683},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Flow","position":{"start":{"line":23,"column":33,"offset":1686},"end":{"line":23,"column":37,"offset":1690},"indent":[]}}],"position":{"start":{"line":23,"column":33,"offset":1686},"end":{"line":23,"column":37,"offset":1690},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1654},"end":{"line":23,"column":39,"offset":1692},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Type Casting","position":{"start":{"line":24,"column":3,"offset":1695},"end":{"line":24,"column":15,"offset":1707},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1695},"end":{"line":24,"column":15,"offset":1707},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":24,"column":18,"offset":1710},"end":{"line":24,"column":21,"offset":1713},"indent":[]}}],"position":{"start":{"line":24,"column":18,"offset":1710},"end":{"line":24,"column":21,"offset":1713},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":24,"column":24,"offset":1716},"end":{"line":24,"column":27,"offset":1719},"indent":[]}}],"position":{"start":{"line":24,"column":24,"offset":1716},"end":{"line":24,"column":27,"offset":1719},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":24,"column":30,"offset":1722},"end":{"line":24,"column":34,"offset":1726},"indent":[]}}],"position":{"start":{"line":24,"column":30,"offset":1722},"end":{"line":24,"column":34,"offset":1726},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1693},"end":{"line":24,"column":36,"offset":1728},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"DefinitionFile or Librairie Definition","position":{"start":{"line":25,"column":3,"offset":1731},"end":{"line":25,"column":41,"offset":1769},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1731},"end":{"line":25,"column":41,"offset":1769},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":25,"column":44,"offset":1772},"end":{"line":25,"column":47,"offset":1775},"indent":[]}}],"position":{"start":{"line":25,"column":44,"offset":1772},"end":{"line":25,"column":47,"offset":1775},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":25,"column":50,"offset":1778},"end":{"line":25,"column":53,"offset":1781},"indent":[]}}],"position":{"start":{"line":25,"column":50,"offset":1778},"end":{"line":25,"column":53,"offset":1781},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":25,"column":56,"offset":1784},"end":{"line":25,"column":60,"offset":1788},"indent":[]}}],"position":{"start":{"line":25,"column":56,"offset":1784},"end":{"line":25,"column":60,"offset":1788},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1729},"end":{"line":25,"column":62,"offset":1790},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Non standard JS","position":{"start":{"line":26,"column":3,"offset":1793},"end":{"line":26,"column":18,"offset":1808},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1793},"end":{"line":26,"column":18,"offset":1808},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":26,"column":21,"offset":1811},"end":{"line":26,"column":24,"offset":1814},"indent":[]}}],"position":{"start":{"line":26,"column":21,"offset":1811},"end":{"line":26,"column":24,"offset":1814},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":26,"column":27,"offset":1817},"end":{"line":26,"column":30,"offset":1820},"indent":[]}}],"position":{"start":{"line":26,"column":27,"offset":1817},"end":{"line":26,"column":30,"offset":1820},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":26,"column":33,"offset":1823},"end":{"line":26,"column":37,"offset":1827},"indent":[]}}],"position":{"start":{"line":26,"column":33,"offset":1823},"end":{"line":26,"column":37,"offset":1827},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1791},"end":{"line":26,"column":39,"offset":1829},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Get definition file","position":{"start":{"line":27,"column":3,"offset":1832},"end":{"line":27,"column":22,"offset":1851},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1832},"end":{"line":27,"column":22,"offset":1851},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"NPM","position":{"start":{"line":27,"column":25,"offset":1854},"end":{"line":27,"column":28,"offset":1857},"indent":[]}}],"position":{"start":{"line":27,"column":25,"offset":1854},"end":{"line":27,"column":28,"offset":1857},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"cli","position":{"start":{"line":27,"column":31,"offset":1860},"end":{"line":27,"column":34,"offset":1863},"indent":[]}}],"position":{"start":{"line":27,"column":31,"offset":1860},"end":{"line":27,"column":34,"offset":1863},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":27,"column":37,"offset":1866},"end":{"line":27,"column":47,"offset":1876},"indent":[]}}],"position":{"start":{"line":27,"column":37,"offset":1866},"end":{"line":27,"column":47,"offset":1876},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1830},"end":{"line":27,"column":49,"offset":1878},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Readonly","position":{"start":{"line":28,"column":3,"offset":1881},"end":{"line":28,"column":11,"offset":1889},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1881},"end":{"line":28,"column":11,"offset":1889},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":28,"column":14,"offset":1892},"end":{"line":28,"column":17,"offset":1895},"indent":[]}}],"position":{"start":{"line":28,"column":14,"offset":1892},"end":{"line":28,"column":17,"offset":1895},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No (see covariance)","position":{"start":{"line":28,"column":20,"offset":1898},"end":{"line":28,"column":39,"offset":1917},"indent":[]}}],"position":{"start":{"line":28,"column":20,"offset":1898},"end":{"line":28,"column":39,"offset":1917},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":28,"column":42,"offset":1920},"end":{"line":28,"column":52,"offset":1930},"indent":[]}}],"position":{"start":{"line":28,"column":42,"offset":1920},"end":{"line":28,"column":52,"offset":1930},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1879},"end":{"line":28,"column":54,"offset":1932},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"React props/states","position":{"start":{"line":29,"column":3,"offset":1935},"end":{"line":29,"column":21,"offset":1953},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1935},"end":{"line":29,"column":21,"offset":1953},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":29,"column":24,"offset":1956},"end":{"line":29,"column":27,"offset":1959},"indent":[]}}],"position":{"start":{"line":29,"column":24,"offset":1956},"end":{"line":29,"column":27,"offset":1959},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":29,"column":30,"offset":1962},"end":{"line":29,"column":33,"offset":1965},"indent":[]}}],"position":{"start":{"line":29,"column":30,"offset":1962},"end":{"line":29,"column":33,"offset":1965},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":29,"column":36,"offset":1968},"end":{"line":29,"column":40,"offset":1972},"indent":[]}}],"position":{"start":{"line":29,"column":36,"offset":1968},"end":{"line":29,"column":40,"offset":1972},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1933},"end":{"line":29,"column":42,"offset":1974},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"maybe/optional parameter","position":{"start":{"line":30,"column":3,"offset":1977},"end":{"line":30,"column":27,"offset":2001},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1977},"end":{"line":30,"column":27,"offset":2001},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":30,"column":30,"offset":2004},"end":{"line":30,"column":33,"offset":2007},"indent":[]}}],"position":{"start":{"line":30,"column":30,"offset":2004},"end":{"line":30,"column":33,"offset":2007},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes (separate null/undefined)","position":{"start":{"line":30,"column":36,"offset":2010},"end":{"line":30,"column":65,"offset":2039},"indent":[]}}],"position":{"start":{"line":30,"column":36,"offset":2010},"end":{"line":30,"column":65,"offset":2039},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":30,"column":68,"offset":2042},"end":{"line":30,"column":72,"offset":2046},"indent":[]}}],"position":{"start":{"line":30,"column":68,"offset":2042},"end":{"line":30,"column":72,"offset":2046},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1975},"end":{"line":30,"column":74,"offset":2048},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Optional properties","position":{"start":{"line":31,"column":3,"offset":2051},"end":{"line":31,"column":22,"offset":2070},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":2051},"end":{"line":31,"column":22,"offset":2070},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes (same syntax)","position":{"start":{"line":31,"column":25,"offset":2073},"end":{"line":31,"column":42,"offset":2090},"indent":[]}}],"position":{"start":{"line":31,"column":25,"offset":2073},"end":{"line":31,"column":42,"offset":2090},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes (diff syntax)","position":{"start":{"line":31,"column":45,"offset":2093},"end":{"line":31,"column":62,"offset":2110},"indent":[]}}],"position":{"start":{"line":31,"column":45,"offset":2093},"end":{"line":31,"column":62,"offset":2110},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":31,"column":65,"offset":2113},"end":{"line":31,"column":69,"offset":2117},"indent":[]}}],"position":{"start":{"line":31,"column":65,"offset":2113},"end":{"line":31,"column":69,"offset":2117},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2049},"end":{"line":31,"column":71,"offset":2119},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Infer type","position":{"start":{"line":32,"column":3,"offset":2122},"end":{"line":32,"column":13,"offset":2132},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":2122},"end":{"line":32,"column":13,"offset":2132},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":32,"column":16,"offset":2135},"end":{"line":32,"column":19,"offset":2138},"indent":[]}}],"position":{"start":{"line":32,"column":16,"offset":2135},"end":{"line":32,"column":19,"offset":2138},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":32,"column":22,"offset":2141},"end":{"line":32,"column":25,"offset":2144},"indent":[]}}],"position":{"start":{"line":32,"column":22,"offset":2141},"end":{"line":32,"column":25,"offset":2144},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":32,"column":28,"offset":2147},"end":{"line":32,"column":32,"offset":2151},"indent":[]}}],"position":{"start":{"line":32,"column":28,"offset":2147},"end":{"line":32,"column":32,"offset":2151},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2120},"end":{"line":32,"column":34,"offset":2153},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Contravariant","position":{"start":{"line":33,"column":3,"offset":2156},"end":{"line":33,"column":16,"offset":2169},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":2156},"end":{"line":33,"column":16,"offset":2169},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":33,"column":19,"offset":2172},"end":{"line":33,"column":22,"offset":2175},"indent":[]}}],"position":{"start":{"line":33,"column":19,"offset":2172},"end":{"line":33,"column":22,"offset":2175},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":33,"column":25,"offset":2178},"end":{"line":33,"column":28,"offset":2181},"indent":[]}}],"position":{"start":{"line":33,"column":25,"offset":2178},"end":{"line":33,"column":28,"offset":2181},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":33,"column":31,"offset":2184},"end":{"line":33,"column":35,"offset":2188},"indent":[]}}],"position":{"start":{"line":33,"column":31,"offset":2184},"end":{"line":33,"column":35,"offset":2188},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2154},"end":{"line":33,"column":37,"offset":2190},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Covariance","position":{"start":{"line":34,"column":3,"offset":2193},"end":{"line":34,"column":13,"offset":2203},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":2193},"end":{"line":34,"column":13,"offset":2203},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No (see readonly)","position":{"start":{"line":34,"column":16,"offset":2206},"end":{"line":34,"column":33,"offset":2223},"indent":[]}}],"position":{"start":{"line":34,"column":16,"offset":2206},"end":{"line":34,"column":33,"offset":2223},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":34,"column":36,"offset":2226},"end":{"line":34,"column":39,"offset":2229},"indent":[]}}],"position":{"start":{"line":34,"column":36,"offset":2226},"end":{"line":34,"column":39,"offset":2229},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Flow","position":{"start":{"line":34,"column":42,"offset":2232},"end":{"line":34,"column":46,"offset":2236},"indent":[]}}],"position":{"start":{"line":34,"column":42,"offset":2232},"end":{"line":34,"column":46,"offset":2236},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2191},"end":{"line":34,"column":48,"offset":2238},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Abstract","position":{"start":{"line":35,"column":3,"offset":2241},"end":{"line":35,"column":11,"offset":2249},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":2241},"end":{"line":35,"column":11,"offset":2249},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":35,"column":14,"offset":2252},"end":{"line":35,"column":17,"offset":2255},"indent":[]}}],"position":{"start":{"line":35,"column":14,"offset":2252},"end":{"line":35,"column":17,"offset":2255},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":35,"column":20,"offset":2258},"end":{"line":35,"column":22,"offset":2260},"indent":[]}}],"position":{"start":{"line":35,"column":20,"offset":2258},"end":{"line":35,"column":22,"offset":2260},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":35,"column":25,"offset":2263},"end":{"line":35,"column":35,"offset":2273},"indent":[]}}],"position":{"start":{"line":35,"column":25,"offset":2263},"end":{"line":35,"column":35,"offset":2273},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":2239},"end":{"line":35,"column":37,"offset":2275},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Decorator","position":{"start":{"line":36,"column":3,"offset":2278},"end":{"line":36,"column":12,"offset":2287},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":2278},"end":{"line":36,"column":12,"offset":2287},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":36,"column":15,"offset":2290},"end":{"line":36,"column":18,"offset":2293},"indent":[]}}],"position":{"start":{"line":36,"column":15,"offset":2290},"end":{"line":36,"column":18,"offset":2293},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":36,"column":21,"offset":2296},"end":{"line":36,"column":23,"offset":2298},"indent":[]}}],"position":{"start":{"line":36,"column":21,"offset":2296},"end":{"line":36,"column":23,"offset":2298},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":36,"column":26,"offset":2301},"end":{"line":36,"column":36,"offset":2311},"indent":[]}}],"position":{"start":{"line":36,"column":26,"offset":2301},"end":{"line":36,"column":36,"offset":2311},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2276},"end":{"line":36,"column":38,"offset":2313},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Quick initialization (by ctor params)","position":{"start":{"line":37,"column":3,"offset":2316},"end":{"line":37,"column":40,"offset":2353},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":2316},"end":{"line":37,"column":40,"offset":2353},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":37,"column":43,"offset":2356},"end":{"line":37,"column":46,"offset":2359},"indent":[]}}],"position":{"start":{"line":37,"column":43,"offset":2356},"end":{"line":37,"column":46,"offset":2359},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"No","position":{"start":{"line":37,"column":49,"offset":2362},"end":{"line":37,"column":51,"offset":2364},"indent":[]}}],"position":{"start":{"line":37,"column":49,"offset":2362},"end":{"line":37,"column":51,"offset":2364},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":37,"column":54,"offset":2367},"end":{"line":37,"column":64,"offset":2377},"indent":[]}}],"position":{"start":{"line":37,"column":54,"offset":2367},"end":{"line":37,"column":64,"offset":2377},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2314},"end":{"line":37,"column":66,"offset":2379},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Static","position":{"start":{"line":38,"column":3,"offset":2382},"end":{"line":38,"column":9,"offset":2388},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":2382},"end":{"line":38,"column":9,"offset":2388},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":38,"column":12,"offset":2391},"end":{"line":38,"column":15,"offset":2394},"indent":[]}}],"position":{"start":{"line":38,"column":12,"offset":2391},"end":{"line":38,"column":15,"offset":2394},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Not all scenarios","position":{"start":{"line":38,"column":18,"offset":2397},"end":{"line":38,"column":35,"offset":2414},"indent":[]}}],"position":{"start":{"line":38,"column":18,"offset":2397},"end":{"line":38,"column":35,"offset":2414},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":38,"column":38,"offset":2417},"end":{"line":38,"column":48,"offset":2427},"indent":[]}}],"position":{"start":{"line":38,"column":38,"offset":2417},"end":{"line":38,"column":48,"offset":2427},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2380},"end":{"line":38,"column":50,"offset":2429},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Sealed","position":{"start":{"line":39,"column":3,"offset":2432},"end":{"line":39,"column":9,"offset":2438},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":2432},"end":{"line":39,"column":9,"offset":2438},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes by default","position":{"start":{"line":39,"column":12,"offset":2441},"end":{"line":39,"column":26,"offset":2455},"indent":[]}}],"position":{"start":{"line":39,"column":12,"offset":2441},"end":{"line":39,"column":26,"offset":2455},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes by default","position":{"start":{"line":39,"column":29,"offset":2458},"end":{"line":39,"column":43,"offset":2472},"indent":[]}}],"position":{"start":{"line":39,"column":29,"offset":2458},"end":{"line":39,"column":43,"offset":2472},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":39,"column":46,"offset":2475},"end":{"line":39,"column":50,"offset":2479},"indent":[]}}],"position":{"start":{"line":39,"column":46,"offset":2475},"end":{"line":39,"column":50,"offset":2479},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2430},"end":{"line":39,"column":52,"offset":2481},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Unsealed","position":{"start":{"line":40,"column":3,"offset":2484},"end":{"line":40,"column":11,"offset":2492},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":2484},"end":{"line":40,"column":11,"offset":2492},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Must cast","position":{"start":{"line":40,"column":14,"offset":2495},"end":{"line":40,"column":23,"offset":2504},"indent":[]}}],"position":{"start":{"line":40,"column":14,"offset":2495},"end":{"line":40,"column":23,"offset":2504},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Object defined by {}","position":{"start":{"line":40,"column":26,"offset":2507},"end":{"line":40,"column":46,"offset":2527},"indent":[]}}],"position":{"start":{"line":40,"column":26,"offset":2507},"end":{"line":40,"column":46,"offset":2527},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":40,"column":49,"offset":2530},"end":{"line":40,"column":53,"offset":2534},"indent":[]}}],"position":{"start":{"line":40,"column":49,"offset":2530},"end":{"line":40,"column":53,"offset":2534},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2482},"end":{"line":40,"column":55,"offset":2536},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Tuple","position":{"start":{"line":41,"column":3,"offset":2539},"end":{"line":41,"column":8,"offset":2544},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":2539},"end":{"line":41,"column":8,"offset":2544},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":41,"column":11,"offset":2547},"end":{"line":41,"column":14,"offset":2550},"indent":[]}}],"position":{"start":{"line":41,"column":11,"offset":2547},"end":{"line":41,"column":14,"offset":2550},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":41,"column":17,"offset":2553},"end":{"line":41,"column":20,"offset":2556},"indent":[]}}],"position":{"start":{"line":41,"column":17,"offset":2553},"end":{"line":41,"column":20,"offset":2556},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":41,"column":23,"offset":2559},"end":{"line":41,"column":27,"offset":2563},"indent":[]}}],"position":{"start":{"line":41,"column":23,"offset":2559},"end":{"line":41,"column":27,"offset":2563},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2537},"end":{"line":41,"column":29,"offset":2565},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Soundness","position":{"start":{"line":42,"column":3,"offset":2568},"end":{"line":42,"column":12,"offset":2577},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2568},"end":{"line":42,"column":12,"offset":2577},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Not completely","position":{"start":{"line":42,"column":15,"offset":2580},"end":{"line":42,"column":29,"offset":2594},"indent":[]}}],"position":{"start":{"line":42,"column":15,"offset":2580},"end":{"line":42,"column":29,"offset":2594},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":42,"column":32,"offset":2597},"end":{"line":42,"column":35,"offset":2600},"indent":[]}}],"position":{"start":{"line":42,"column":32,"offset":2597},"end":{"line":42,"column":35,"offset":2600},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"???","position":{"start":{"line":42,"column":38,"offset":2603},"end":{"line":42,"column":41,"offset":2606},"indent":[]}}],"position":{"start":{"line":42,"column":38,"offset":2603},"end":{"line":42,"column":41,"offset":2606},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2566},"end":{"line":42,"column":43,"offset":2608},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Type of typing","position":{"start":{"line":43,"column":3,"offset":2611},"end":{"line":43,"column":17,"offset":2625},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2611},"end":{"line":43,"column":17,"offset":2625},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Structural typing","position":{"start":{"line":43,"column":20,"offset":2628},"end":{"line":43,"column":37,"offset":2645},"indent":[]}}],"position":{"start":{"line":43,"column":20,"offset":2628},"end":{"line":43,"column":37,"offset":2645},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Nominally typing","position":{"start":{"line":43,"column":40,"offset":2648},"end":{"line":43,"column":56,"offset":2664},"indent":[]}}],"position":{"start":{"line":43,"column":40,"offset":2648},"end":{"line":43,"column":56,"offset":2664},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"TS is following JS","position":{"start":{"line":43,"column":59,"offset":2667},"end":{"line":43,"column":77,"offset":2685},"indent":[]}}],"position":{"start":{"line":43,"column":59,"offset":2667},"end":{"line":43,"column":77,"offset":2685},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2609},"end":{"line":43,"column":79,"offset":2687},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Generic Class","position":{"start":{"line":44,"column":3,"offset":2690},"end":{"line":44,"column":16,"offset":2703},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":2690},"end":{"line":44,"column":16,"offset":2703},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":44,"column":19,"offset":2706},"end":{"line":44,"column":22,"offset":2709},"indent":[]}}],"position":{"start":{"line":44,"column":19,"offset":2706},"end":{"line":44,"column":22,"offset":2709},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":44,"column":25,"offset":2712},"end":{"line":44,"column":28,"offset":2715},"indent":[]}}],"position":{"start":{"line":44,"column":25,"offset":2712},"end":{"line":44,"column":28,"offset":2715},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":44,"column":31,"offset":2718},"end":{"line":44,"column":35,"offset":2722},"indent":[]}}],"position":{"start":{"line":44,"column":31,"offset":2718},"end":{"line":44,"column":35,"offset":2722},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2688},"end":{"line":44,"column":37,"offset":2724},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Generic Interface","position":{"start":{"line":45,"column":3,"offset":2727},"end":{"line":45,"column":20,"offset":2744},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":2727},"end":{"line":45,"column":20,"offset":2744},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":45,"column":23,"offset":2747},"end":{"line":45,"column":26,"offset":2750},"indent":[]}}],"position":{"start":{"line":45,"column":23,"offset":2747},"end":{"line":45,"column":26,"offset":2750},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":45,"column":29,"offset":2753},"end":{"line":45,"column":32,"offset":2756},"indent":[]}}],"position":{"start":{"line":45,"column":29,"offset":2753},"end":{"line":45,"column":32,"offset":2756},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":45,"column":35,"offset":2759},"end":{"line":45,"column":39,"offset":2763},"indent":[]}}],"position":{"start":{"line":45,"column":35,"offset":2759},"end":{"line":45,"column":39,"offset":2763},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2725},"end":{"line":45,"column":41,"offset":2765},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Generic Function","position":{"start":{"line":46,"column":3,"offset":2768},"end":{"line":46,"column":19,"offset":2784},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2768},"end":{"line":46,"column":19,"offset":2784},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":46,"column":22,"offset":2787},"end":{"line":46,"column":25,"offset":2790},"indent":[]}}],"position":{"start":{"line":46,"column":22,"offset":2787},"end":{"line":46,"column":25,"offset":2790},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":46,"column":28,"offset":2793},"end":{"line":46,"column":31,"offset":2796},"indent":[]}}],"position":{"start":{"line":46,"column":28,"offset":2793},"end":{"line":46,"column":31,"offset":2796},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":46,"column":34,"offset":2799},"end":{"line":46,"column":38,"offset":2803},"indent":[]}}],"position":{"start":{"line":46,"column":34,"offset":2799},"end":{"line":46,"column":38,"offset":2803},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2766},"end":{"line":46,"column":40,"offset":2805},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Generic Type","position":{"start":{"line":47,"column":3,"offset":2808},"end":{"line":47,"column":15,"offset":2820},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2808},"end":{"line":47,"column":15,"offset":2820},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":47,"column":18,"offset":2823},"end":{"line":47,"column":21,"offset":2826},"indent":[]}}],"position":{"start":{"line":47,"column":18,"offset":2823},"end":{"line":47,"column":21,"offset":2826},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Yes","position":{"start":{"line":47,"column":24,"offset":2829},"end":{"line":47,"column":27,"offset":2832},"indent":[]}}],"position":{"start":{"line":47,"column":24,"offset":2829},"end":{"line":47,"column":27,"offset":2832},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Both","position":{"start":{"line":47,"column":30,"offset":2835},"end":{"line":47,"column":34,"offset":2839},"indent":[]}}],"position":{"start":{"line":47,"column":30,"offset":2835},"end":{"line":47,"column":34,"offset":2839},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2806},"end":{"line":47,"column":36,"offset":2841},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1259},"end":{"line":47,"column":36,"offset":2841},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's a lot of information and at the same time, just a sample of what Flow and TypeScript can offer. I'll try to cover the difference without focusing on the resemblances and more about what makes them apart.","position":{"start":{"line":49,"column":1,"offset":2843},"end":{"line":49,"column":211,"offset":3053},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2843},"end":{"line":49,"column":211,"offset":3053},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":51,"column":4,"offset":3058},"end":{"line":51,"column":17,"offset":3071},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":3055},"end":{"line":51,"column":17,"offset":3071},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Encapsulation or \"modifier\" is the first difference. I'll talk about the lack of private, public, protected keyword all at once. This level of protection doesn't exist in JavaScript, but TypeScript allows it if interested, otherwise, it's all open (public). TypeScript enforces it at the syntax level put the transpiled JavaScript doesn't have any trace of the encapsulation notion. For example:","position":{"start":{"line":53,"column":1,"offset":3073},"end":{"line":53,"column":396,"offset":3468},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":3073},"end":{"line":53,"column":396,"offset":3468},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nclass MyClass {\n    private privateMember: string;\n    public publicMember: string;\n    protected protectedMember: string;\n    constructor(message: string) {\n        this.privateMember = message;\n        this.publicMember = \"public\";\n        this.protectedMember = \"protected\";\n    }\n}\n","position":{"start":{"line":56,"column":1,"offset":3471},"end":{"line":69,"column":5,"offset":3777},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Transpile to:","position":{"start":{"line":73,"column":1,"offset":3783},"end":{"line":73,"column":14,"offset":3796},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3783},"end":{"line":73,"column":14,"offset":3796},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nvar MyClass = (function () {\n    function MyClass(message) {\n        this.privateMember = message;\n        this.publicMember = \"public\";\n        this.protectedMember = \"protected\";\n    }\n    return MyClass;\n}());\n","position":{"start":{"line":76,"column":1,"offset":3799},"end":{"line":87,"column":5,"offset":4032},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The encapsulation is not propagated in JavaScript, but could have been there with some ","position":{"start":{"line":90,"column":1,"offset":4035},"end":{"line":90,"column":88,"offset":4122},"indent":[]}},{"type":"link","title":null,"url":"./javascript-private-variable","children":[{"type":"text","value":"closure","position":{"start":{"line":90,"column":89,"offset":4123},"end":{"line":90,"column":96,"offset":4130},"indent":[]}}],"position":{"start":{"line":90,"column":88,"offset":4122},"end":{"line":90,"column":128,"offset":4162},"indent":[]}},{"type":"text","value":". In all circumstances, Flow decided to not enforce the encapsulation at all. The repercussion is interesting. First, the code becomes harder to maintain because it allows people to access members directly. A common scenario is to inject by constructor some specific class that represent services. You want to control the integrity when the class is instantiated, but if the injected objects are public, they could be modified by anyone in the lifetime of the object. There is much other justification why having a stronger encapsulation is good which will be the subject of future articles.","position":{"start":{"line":90,"column":128,"offset":4162},"end":{"line":90,"column":719,"offset":4753},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":4035},"end":{"line":90,"column":719,"offset":4753},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Enum","position":{"start":{"line":92,"column":4,"offset":4758},"end":{"line":92,"column":8,"offset":4762},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":4755},"end":{"line":92,"column":8,"offset":4762},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Enum is a convenient way to organize potential value for a type. For example, with TypeScript you can write an enum that will hold a specific group of language the following way:","position":{"start":{"line":94,"column":1,"offset":4764},"end":{"line":94,"column":179,"offset":4942},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":4764},"end":{"line":94,"column":179,"offset":4942},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nenum Language {\n    English,\n    French\n}\n","position":{"start":{"line":97,"column":1,"offset":4945},"end":{"line":104,"column":5,"offset":5007},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This syntax allows to assign easily with a good Intellisense support, but also enforce passing only the value from the enum by parameter.","position":{"start":{"line":107,"column":1,"offset":5010},"end":{"line":107,"column":138,"offset":5147},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5010},"end":{"line":107,"column":138,"offset":5147},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nvar myLanguage = Language.English;\nfunctTakeOnlyLanguage(myLanguage);\nfunction functTakeOnlyLanguage(param: Language){\n    // ...\n}\n","position":{"start":{"line":110,"column":1,"offset":5150},"end":{"line":118,"column":5,"offset":5302},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The notion of Enum doesn't exist in Flow ","position":{"start":{"line":121,"column":1,"offset":5305},"end":{"line":121,"column":42,"offset":5346},"indent":[]}},{"type":"linkReference","identifier":"2","label":"2","referenceType":"shortcut","children":[{"type":"text","value":"2","position":{"start":{"line":121,"column":43,"offset":5347},"end":{"line":121,"column":44,"offset":5348},"indent":[]}}],"position":{"start":{"line":121,"column":42,"offset":5346},"end":{"line":121,"column":45,"offset":5349},"indent":[]}},{"type":"text","value":". They have a workaround which more verbose ","position":{"start":{"line":121,"column":45,"offset":5349},"end":{"line":121,"column":89,"offset":5393},"indent":[]}},{"type":"linkReference","identifier":"3","label":"3","referenceType":"shortcut","children":[{"type":"text","value":"3","position":{"start":{"line":121,"column":90,"offset":5394},"end":{"line":121,"column":91,"offset":5395},"indent":[]}}],"position":{"start":{"line":121,"column":89,"offset":5393},"end":{"line":121,"column":92,"offset":5396},"indent":[]}},{"type":"text","value":" than the TypeScript keyword. Here is the same representation with Flow.","position":{"start":{"line":121,"column":92,"offset":5396},"end":{"line":121,"column":164,"offset":5468},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":5305},"end":{"line":121,"column":164,"offset":5468},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nexport const LANGUAGES_VALUE = {\n    French: \"French\",\n    English: \"English\"\n};\nexport type Language = $Values&lt;typeof LANGUAGES_VALUE&gt;;\n\nvar myLanguage = LANGUAGES_VALUE.English;\nfunctTakeOnlyLanguage(myLanguage);\nfunction functTakeOnlyLanguage(param: Language){\n    // ...\n}\n","position":{"start":{"line":124,"column":1,"offset":5471},"end":{"line":138,"column":5,"offset":5774},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using this type and constant with Flow require to have a special import when using.","position":{"start":{"line":141,"column":1,"offset":5777},"end":{"line":141,"column":84,"offset":5860},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":5777},"end":{"line":141,"column":84,"offset":5860},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nimport { LANGUAGES_VALUE } from \"../general/Language\";\nimport type { Language } from \"../general/Language\";\n","position":{"start":{"line":144,"column":1,"offset":5863},"end":{"line":149,"column":5,"offset":5991},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Flow version requires a little more work since you need to define the const and then use a \"magic utility type\" to create a type, and after you need two imports which one is non-standard. The use of \"magic\" seems pejorative, but it's how it is called. Also, it might be the configuration issue between my VsCode and Flow during my investigation, but the type of Language was \"any\", hence the Intellisense wasn't great. Overall, TypeScript have an edge here on a simple thing that makes developer life just a little easier.","position":{"start":{"line":152,"column":1,"offset":5994},"end":{"line":152,"column":527,"offset":6520},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":5994},"end":{"line":152,"column":527,"offset":6520},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Utility Type","position":{"start":{"line":154,"column":4,"offset":6525},"end":{"line":154,"column":16,"offset":6537},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":6522},"end":{"line":154,"column":16,"offset":6537},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Flow is having something TypeScript does not literally have called utility type ","position":{"start":{"line":156,"column":1,"offset":6539},"end":{"line":156,"column":81,"offset":6619},"indent":[]}},{"type":"linkReference","identifier":"3","label":"3","referenceType":"shortcut","children":[{"type":"text","value":"3","position":{"start":{"line":156,"column":82,"offset":6620},"end":{"line":156,"column":83,"offset":6621},"indent":[]}}],"position":{"start":{"line":156,"column":81,"offset":6619},"end":{"line":156,"column":84,"offset":6622},"indent":[]}},{"type":"text","value":" or magic utility type. We already saw the potential with Enum with the ","position":{"start":{"line":156,"column":84,"offset":6622},"end":{"line":156,"column":156,"offset":6694},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"$keys","position":{"start":{"line":156,"column":158,"offset":6696},"end":{"line":156,"column":163,"offset":6701},"indent":[]}}],"position":{"start":{"line":156,"column":156,"offset":6694},"end":{"line":156,"column":165,"offset":6703},"indent":[]}},{"type":"text","value":" one. TypeScript lets you do something similar with ","position":{"start":{"line":156,"column":165,"offset":6703},"end":{"line":156,"column":217,"offset":6755},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"keyof","position":{"start":{"line":156,"column":219,"offset":6757},"end":{"line":156,"column":224,"offset":6762},"indent":[]}}],"position":{"start":{"line":156,"column":217,"offset":6755},"end":{"line":156,"column":226,"offset":6764},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":156,"column":226,"offset":6764},"end":{"line":156,"column":227,"offset":6765},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":6539},"end":{"line":156,"column":227,"offset":6765},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Flow has also $Diff<a,b> which returns a type that is the difference between two types. There is also few others which are not all implemented. </a,b>","position":{"start":{"line":158,"column":1,"offset":6767},"end":{"line":158,"column":151,"offset":6917},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":6767},"end":{"line":158,"column":151,"offset":6917},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, at first glance, it's a pro and I marked it as well. However, the more I was thinking about it and the more I was wondering why Flow has these utility method. It should belong somewhere else than inside a type checker tool. These utility methods would dwell well in a Babel plugin, or in a library like lodash, or directly in TypeScript. I do not have the full context, but it seems that it was added to fulfill a need with React which is a close team Flow is working with.","position":{"start":{"line":160,"column":1,"offset":6919},"end":{"line":160,"column":478,"offset":7396},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":6919},"end":{"line":160,"column":478,"offset":7396},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting Definition Files","position":{"start":{"line":162,"column":4,"offset":7401},"end":{"line":162,"column":28,"offset":7425},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":7398},"end":{"line":162,"column":28,"offset":7425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Getting definition files is different between TypeScript and Flow. The reason is that Flow doesn't use the same definition file than TypeScript. There is no way to translate one to the other, and both persist their definition files in an independent repository. This creates fragmentation in the community that needs to create two kinds of definition file. As mentioned in the first part, TypeScript has above three thousand definition files while Flow has reached few week ago three hundred. Besides the number of libraries, the major difference is how to get the definition files. TypeScript has a long history of ways to do it. At the time I am writing this article, we are at the third iteration which seem to be stable and better in many ways. It's now using NPM, a tool that every JavaScript developers have familiarity since it is the most common way to get library. It makes sense to have the definition file by the same way. Using NPM allows using the same syntax and configuration file (package.json). This is convenient to store data, but also convenient to get the definition file from a repository that you do not own. By installing with \"npm install\" you are getting all the libraries as well as all the definition files.","position":{"start":{"line":164,"column":1,"offset":7427},"end":{"line":164,"column":1236,"offset":8662},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":7427},"end":{"line":164,"column":1236,"offset":8662},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nnpm install --save-dev @types/redux\n","position":{"start":{"line":167,"column":1,"offset":8665},"end":{"line":171,"column":5,"offset":8721},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With Flow, getting library definition is not hard, but it's not a paved way what we are used to ride on. It requires using a cli (command line)","position":{"start":{"line":174,"column":1,"offset":8724},"end":{"line":174,"column":144,"offset":8867},"indent":[]}},{"type":"linkReference","identifier":"4","label":"4","referenceType":"shortcut","children":[{"type":"text","value":"4","position":{"start":{"line":174,"column":145,"offset":8868},"end":{"line":174,"column":146,"offset":8869},"indent":[]}}],"position":{"start":{"line":174,"column":144,"offset":8867},"end":{"line":174,"column":147,"offset":8870},"indent":[]}},{"type":"text","value":". This cli is available from npm (npm install -g flow-typed) and from there, you can use flow-typed to get a library that will be installed into a flow-typed folder at the root of your project. One requirement is that you must specify a version.","position":{"start":{"line":174,"column":147,"offset":8870},"end":{"line":174,"column":392,"offset":9115},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":8724},"end":{"line":174,"column":392,"offset":9115},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nflow-typed install redux@2.3.x\n","position":{"start":{"line":177,"column":1,"offset":9118},"end":{"line":181,"column":5,"offset":9169},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you get a project and needs to get the library, you will need to use ","position":{"start":{"line":184,"column":1,"offset":9172},"end":{"line":184,"column":73,"offset":9244},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"npm install","position":{"start":{"line":184,"column":74,"offset":9245},"end":{"line":184,"column":85,"offset":9256},"indent":[]}}],"position":{"start":{"line":184,"column":73,"offset":9244},"end":{"line":184,"column":86,"offset":9257},"indent":[]}},{"type":"text","value":" but also ","position":{"start":{"line":184,"column":86,"offset":9257},"end":{"line":184,"column":96,"offset":9267},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"flow-typed install","position":{"start":{"line":184,"column":97,"offset":9268},"end":{"line":184,"column":115,"offset":9286},"indent":[]}}],"position":{"start":{"line":184,"column":96,"offset":9267},"end":{"line":184,"column":116,"offset":9287},"indent":[]}},{"type":"text","value":". Since we need to handle the second tool, Flow doesn't gain a point in that comparison. TypeScript matured into using NPM and that choice simplify the access to third party definition file.","position":{"start":{"line":184,"column":116,"offset":9287},"end":{"line":184,"column":306,"offset":9477},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":9172},"end":{"line":184,"column":306,"offset":9477},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Readonly","position":{"start":{"line":186,"column":4,"offset":9482},"end":{"line":186,"column":12,"offset":9490},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":9479},"end":{"line":186,"column":12,"offset":9490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TypeScript has the keyword ","position":{"start":{"line":188,"column":1,"offset":9492},"end":{"line":188,"column":28,"offset":9519},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"readonly","position":{"start":{"line":188,"column":30,"offset":9521},"end":{"line":188,"column":38,"offset":9529},"indent":[]}}],"position":{"start":{"line":188,"column":28,"offset":9519},"end":{"line":188,"column":40,"offset":9531},"indent":[]}},{"type":"text","value":". Flow does not. However, Flow has something similar which is the \"+\" sign for covariance. The goal is to do like in C# or another language which is to set a value directly in the class where we the field is declared or when in the constructor when the class is instantiated. At the end, the value cannot change. This allows having values that are set dynamically and only once.","position":{"start":{"line":188,"column":40,"offset":9531},"end":{"line":188,"column":418,"offset":9909},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":9492},"end":{"line":188,"column":418,"offset":9909},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Flow doesn't have the keyword read only. It has the concept of covariance that TypeScript doesn't have. To mimic this behavior, in Flow it requires having a \"+\" sign in front of the variable. The difference is small for a field but subtle. For example, it works well if you know the value and assigns it directly to the field of the class. However, if you want to assign it in the constructor, it won't work in Flow. Let's see some code:","position":{"start":{"line":190,"column":1,"offset":9911},"end":{"line":190,"column":438,"offset":10348},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":9911},"end":{"line":190,"column":438,"offset":10348},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nclass Person {\n  +name: string;\n  constructor(name: string) {\n    this.name = name; // This doesn't work in Flow\n  }\n}\n","position":{"start":{"line":193,"column":1,"offset":10351},"end":{"line":202,"column":5,"offset":10490},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But the equivalence work in TypeScript:","position":{"start":{"line":205,"column":1,"offset":10493},"end":{"line":205,"column":40,"offset":10532},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":10493},"end":{"line":205,"column":40,"offset":10532},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\nclass Person {\n  readonly name: string;\n  constructor(name: string) {\n    this.name = name\n  }\n}\n","position":{"start":{"line":208,"column":1,"offset":10535},"end":{"line":217,"column":5,"offset":10652},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The case of read only is simpler with TypeScript and work like many other languages, hence seem to be slightly favorable for TypeScript.","position":{"start":{"line":220,"column":1,"offset":10655},"end":{"line":220,"column":137,"offset":10791},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":10655},"end":{"line":220,"column":137,"offset":10791},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Optional Parameter and Optional Field","position":{"start":{"line":222,"column":4,"offset":10796},"end":{"line":222,"column":41,"offset":10833},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":10793},"end":{"line":222,"column":41,"offset":10833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Both have a different way to achieve optional value to be provided for parameter of a function or to have a field defined (in an interface for example). TypeScript use the question mark in both cases.","position":{"start":{"line":224,"column":1,"offset":10835},"end":{"line":224,"column":201,"offset":11035},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":10835},"end":{"line":224,"column":201,"offset":11035},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\n// Optional Field\ninterface IInterface{ propertyName?: string } //Allow null amp;amp;amp;amp; undefined\n\n// Optional Parameter\nfunction myFunc( param?: string ) //Allow null amp;amp;amp;amp; undefined\n","position":{"start":{"line":227,"column":1,"offset":11038},"end":{"line":235,"column":5,"offset":11259},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is different from Flow which will not be that loose. With Flow, you can pass nothing (which is undefined) but cannot explicitly pass null for something optional.","position":{"start":{"line":238,"column":1,"offset":11262},"end":{"line":238,"column":167,"offset":11428},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":11262},"end":{"line":238,"column":167,"offset":11428},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\n// Optional Field\ninterface IInterface{ propertyName?: string } //Allow undefined\n\n// Optional Parameter\nfunction myFunc( param?: string ) //Allow undefined\n","position":{"start":{"line":241,"column":1,"offset":11431},"end":{"line":249,"column":5,"offset":11608},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to pass null, you need to use the concept of \"maybe\" which is unique to Flow. The syntax is also with the question mark, but this time before the type.","position":{"start":{"line":252,"column":1,"offset":11611},"end":{"line":252,"column":164,"offset":11774},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":11611},"end":{"line":252,"column":164,"offset":11774},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"\n// Optional Parameter\nfunction myFunc( param: ?string ) //Allow null amp;amp;amp;amp; undefined\n","position":{"start":{"line":255,"column":1,"offset":11777},"end":{"line":260,"column":5,"offset":11893},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This goes in the sense that Flow is more \"sound\" than TypeScript. Flow has more control about what you want to pass. TypeScript is following JavaScript and is less strict in that matter. At the end, both sides can be pros or cons. TypeScript shines by having a single place to put the question mark and it's always the same logic which is that it allows value, null and undefined. On the other hand, Flow has more option by being able to allow value an undefined as well as null if using the maybe type. However, the syntax is very similar to the other type of optional which can cause confusion. At the end, they have different pros and cons and I consider no winner.","position":{"start":{"line":263,"column":1,"offset":11896},"end":{"line":263,"column":669,"offset":12564},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":11896},"end":{"line":263,"column":669,"offset":12564},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Abstract","position":{"start":{"line":265,"column":4,"offset":12569},"end":{"line":265,"column":12,"offset":12577},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":12566},"end":{"line":265,"column":12,"offset":12577},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Abstract is available in TypeScript; it's not in Flow. Abstract is an object oriented concept, and it wasn't available 3 years and half ago when I started using TypeScript and it was a tool that I missed. Since about 2 years, it's available and I used it few times. I do not want to explain why it can be useful or not in this comparison article, but it's a concept that some kind of developers like while other doesn't. TypeScript doesn't force you to use it, and give you the ability to if you want. By giving the developer the choice instead of not providing it, TypeScript wins.","position":{"start":{"line":267,"column":1,"offset":12579},"end":{"line":267,"column":583,"offset":13161},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":12579},"end":{"line":267,"column":583,"offset":13161},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Decorator","position":{"start":{"line":269,"column":4,"offset":13166},"end":{"line":269,"column":13,"offset":13175},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":13163},"end":{"line":269,"column":13,"offset":13175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TypeScript requires having a configuration flag to true in the tsconfig.json. Flow requires having a babel plugin. It needs a little more work, like getting the right package, but nothing significant. I started using the babel decorator, but was getting a warning message that conducted me to using the decorator-legacy.","position":{"start":{"line":271,"column":1,"offset":13177},"end":{"line":271,"column":321,"offset":13497},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":13177},"end":{"line":271,"column":321,"offset":13497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From there, Flow was giving an error saying that this feature was experimental. Flow, at this time, doesn’t support decorator ","position":{"start":{"line":273,"column":1,"offset":13499},"end":{"line":273,"column":127,"offset":13625},"indent":[]}},{"type":"linkReference","identifier":"5","label":"5","referenceType":"shortcut","children":[{"type":"text","value":"5","position":{"start":{"line":273,"column":128,"offset":13626},"end":{"line":273,"column":129,"offset":13627},"indent":[]}}],"position":{"start":{"line":273,"column":127,"offset":13625},"end":{"line":273,"column":130,"offset":13628},"indent":[]}},{"type":"text","value":". I ended up by having to ignore the EcmaScript proposal in the .flowconfig file. TypeScript won. However, if you are not using Angular2+ or MobX than you might do not mind. However, more and more libraries and frameworks use decorator which is nice to have some type checking as well.","position":{"start":{"line":273,"column":130,"offset":13628},"end":{"line":273,"column":415,"offset":13913},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":13499},"end":{"line":273,"column":415,"offset":13913},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Quick Initialization","position":{"start":{"line":275,"column":4,"offset":13918},"end":{"line":275,"column":24,"offset":13938},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":13915},"end":{"line":275,"column":24,"offset":13938},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I'll be brief. Since Flow doesn't have encapsulation than it's obvious that quick initialization doesn't exist in Flow. This feature allows to not declare inside a class the field and avoid having line of code to set the constructor's argument to the field manually. This is handy and a recent addition to TypeScript. It's clean up the code by still having a great encapsulation. TypeScript wins by default.","position":{"start":{"line":277,"column":1,"offset":13940},"end":{"line":277,"column":408,"offset":14347},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":13940},"end":{"line":277,"column":408,"offset":14347},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Statics","position":{"start":{"line":279,"column":4,"offset":14352},"end":{"line":279,"column":11,"offset":14359},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":14349},"end":{"line":279,"column":11,"offset":14359},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On this one, I wasn't very thorough. I had code that was defining readonly static field in TypeScript and couldn't have them static (without readonly) in Flow. So, I had to choose about having the value defined once or the field to be static. TypeScript acted more like I was used to see in Java or C#. Because of that, I'm giving a weak win to TypeScript.","position":{"start":{"line":281,"column":1,"offset":14361},"end":{"line":281,"column":357,"offset":14717},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":14361},"end":{"line":281,"column":357,"offset":14717},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Type of Typing","position":{"start":{"line":283,"column":4,"offset":14722},"end":{"line":283,"column":18,"offset":14736},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":14719},"end":{"line":283,"column":18,"offset":14736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TypeScript is using a structural typing ","position":{"start":{"line":285,"column":1,"offset":14738},"end":{"line":285,"column":41,"offset":14778},"indent":[]}},{"type":"linkReference","identifier":"6","label":"6","referenceType":"shortcut","children":[{"type":"text","value":"6","position":{"start":{"line":285,"column":42,"offset":14779},"end":{"line":285,"column":43,"offset":14780},"indent":[]}}],"position":{"start":{"line":285,"column":41,"offset":14778},"end":{"line":285,"column":44,"offset":14781},"indent":[]}},{"type":"text","value":". Flow is following nominally typing","position":{"start":{"line":285,"column":44,"offset":14781},"end":{"line":285,"column":80,"offset":14817},"indent":[]}},{"type":"linkReference","identifier":"7","label":"7","referenceType":"shortcut","children":[{"type":"text","value":"7","position":{"start":{"line":285,"column":81,"offset":14818},"end":{"line":285,"column":82,"offset":14819},"indent":[]}}],"position":{"start":{"line":285,"column":80,"offset":14817},"end":{"line":285,"column":83,"offset":14820},"indent":[]}},{"type":"text","value":". It means that for TypeScript, if you have two interfaces or classes with the same members but with a different name, hence are a different type, they are assignable. This is to mimic how JavaScript works. However, Flow is nominally typed which means that every class or interface defined is unique and cannot be assigned to another one even if they have the same members. I could elaborate more, but I suggest you read the TypeScript documentation about type compatibility. So who is winning? It’s a hard one. Flow wins if we want something more strict. TypeScript wins if we want not to invent a new language on top of JavaScript. To be noted is that, even if JavaScript doesn’t have keywords for encapsulation and abstraction, the language allow it with closures and other JavaScript tricks. So at the end, TypeScript seems to be the winner since it doesn’t try to change the nature of JavaScript, which Flow is doing…and maybe for the best? I guess that is debatable.","position":{"start":{"line":285,"column":83,"offset":14820},"end":{"line":285,"column":1055,"offset":15792},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":14738},"end":{"line":285,"column":1055,"offset":15792},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":287,"column":4,"offset":15797},"end":{"line":287,"column":14,"offset":15807},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":15794},"end":{"line":287,"column":14,"offset":15807},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This part is getting long. I’ll end it here. In the first part, we saw some fundamental differences between TypeScript and Flow. In this second part, we saw that the two type checkers are pretty close in features. Even if I write about the differences, there were so many similarities that I got impressed and surprised. In the last and third part, I’ll take the time to show in terms of code the similarities and differences. Before closing this part two, if you are still hesitating on which one to use, you won’t find more answers in the third part. The next article will confirm the idea that both of them are pretty similar. I suggest that you read again the first part and this one to make your decision and read the third one only for your curiosity.","position":{"start":{"line":289,"column":1,"offset":15809},"end":{"line":289,"column":758,"offset":16566},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":15809},"end":{"line":289,"column":758,"offset":16566},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Parts of the serie:","position":{"start":{"line":291,"column":3,"offset":16570},"end":{"line":291,"column":22,"offset":16589},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":16568},"end":{"line":291,"column":24,"offset":16591},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":16568},"end":{"line":291,"column":24,"offset":16591},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"./typescript-vs-flow-part-3-of-3-syntax-difference","children":[{"type":"text","value":"TypeScript vs Flow (Part 1 of 3) – Who are they?","position":{"start":{"line":293,"column":4,"offset":16596},"end":{"line":293,"column":52,"offset":16644},"indent":[]}}],"position":{"start":{"line":293,"column":3,"offset":16595},"end":{"line":293,"column":105,"offset":16697},"indent":[]}}],"position":{"start":{"line":293,"column":3,"offset":16595},"end":{"line":293,"column":105,"offset":16697},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":16593},"end":{"line":293,"column":105,"offset":16697},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"./typescript-vs-flow-part-2-of-3-high-level-coding","children":[{"type":"text","value":"TypeScript vs Flow (Part 2 of 3) – High Level Coding","position":{"start":{"line":294,"column":4,"offset":16701},"end":{"line":294,"column":56,"offset":16753},"indent":[]}}],"position":{"start":{"line":294,"column":3,"offset":16700},"end":{"line":294,"column":109,"offset":16806},"indent":[]}}],"position":{"start":{"line":294,"column":3,"offset":16700},"end":{"line":294,"column":109,"offset":16806},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":16698},"end":{"line":294,"column":109,"offset":16806},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"./typescript-vs-flow-part-3-of-3-syntax-difference","children":[{"type":"text","value":"TypeScript vs Flow (Part 3 of 3) – Syntax Difference","position":{"start":{"line":295,"column":4,"offset":16810},"end":{"line":295,"column":56,"offset":16862},"indent":[]}}],"position":{"start":{"line":295,"column":3,"offset":16809},"end":{"line":295,"column":109,"offset":16915},"indent":[]}}],"position":{"start":{"line":295,"column":3,"offset":16809},"end":{"line":295,"column":109,"offset":16915},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":16807},"end":{"line":295,"column":109,"offset":16915},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":16593},"end":{"line":295,"column":109,"offset":16915},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"References","position":{"start":{"line":297,"column":4,"offset":16920},"end":{"line":297,"column":14,"offset":16930},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":16917},"end":{"line":297,"column":14,"offset":16930},"indent":[]}},{"type":"paragraph","children":[{"type":"linkReference","identifier":"1","label":"1","referenceType":"shortcut","children":[{"type":"text","value":"1","position":{"start":{"line":299,"column":2,"offset":16933},"end":{"line":299,"column":3,"offset":16934},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":16932},"end":{"line":299,"column":4,"offset":16935},"indent":[]}},{"type":"text","value":" - \n","position":{"start":{"line":299,"column":4,"offset":16935},"end":{"line":300,"column":1,"offset":16939},"indent":[1]}},{"type":"linkReference","identifier":"2","label":"2","referenceType":"shortcut","children":[{"type":"text","value":"2","position":{"start":{"line":300,"column":2,"offset":16940},"end":{"line":300,"column":3,"offset":16941},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":16939},"end":{"line":300,"column":4,"offset":16942},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":300,"column":4,"offset":16942},"end":{"line":300,"column":5,"offset":16943},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/flow/issues/627","children":[{"type":"text","value":"https://github.com/facebook/flow/issues/627","position":{"start":{"line":300,"column":5,"offset":16943},"end":{"line":300,"column":48,"offset":16986},"indent":[]}}],"position":{"start":{"line":300,"column":5,"offset":16943},"end":{"line":300,"column":48,"offset":16986},"indent":[]}},{"type":"break","position":{"start":{"line":300,"column":48,"offset":16986},"end":{"line":301,"column":1,"offset":16989},"indent":[1]}},{"type":"linkReference","identifier":"3","label":"3","referenceType":"shortcut","children":[{"type":"text","value":"3","position":{"start":{"line":301,"column":2,"offset":16990},"end":{"line":301,"column":3,"offset":16991},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":16989},"end":{"line":301,"column":4,"offset":16992},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":301,"column":4,"offset":16992},"end":{"line":301,"column":5,"offset":16993},"indent":[]}},{"type":"link","title":null,"url":"https://flow.org/en/docs/types/utilities/","children":[{"type":"text","value":"https://flow.org/en/docs/types/utilities/","position":{"start":{"line":301,"column":5,"offset":16993},"end":{"line":301,"column":46,"offset":17034},"indent":[]}}],"position":{"start":{"line":301,"column":5,"offset":16993},"end":{"line":301,"column":46,"offset":17034},"indent":[]}},{"type":"break","position":{"start":{"line":301,"column":46,"offset":17034},"end":{"line":302,"column":1,"offset":17037},"indent":[1]}},{"type":"linkReference","identifier":"4","label":"4","referenceType":"shortcut","children":[{"type":"text","value":"4","position":{"start":{"line":302,"column":2,"offset":17038},"end":{"line":302,"column":3,"offset":17039},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":17037},"end":{"line":302,"column":4,"offset":17040},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":302,"column":4,"offset":17040},"end":{"line":302,"column":5,"offset":17041},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/flowtype/flow-typed/blob/master/README.md","children":[{"type":"text","value":"https://github.com/flowtype/flow-typed/blob/master/README.md","position":{"start":{"line":302,"column":5,"offset":17041},"end":{"line":302,"column":65,"offset":17101},"indent":[]}}],"position":{"start":{"line":302,"column":5,"offset":17041},"end":{"line":302,"column":65,"offset":17101},"indent":[]}},{"type":"break","position":{"start":{"line":302,"column":65,"offset":17101},"end":{"line":303,"column":1,"offset":17104},"indent":[1]}},{"type":"linkReference","identifier":"5","label":"5","referenceType":"shortcut","children":[{"type":"text","value":"5","position":{"start":{"line":303,"column":2,"offset":17105},"end":{"line":303,"column":3,"offset":17106},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":17104},"end":{"line":303,"column":4,"offset":17107},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":303,"column":4,"offset":17107},"end":{"line":303,"column":5,"offset":17108},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/facebook/flow/issues/3405","children":[{"type":"text","value":"https://github.com/facebook/flow/issues/3405","position":{"start":{"line":303,"column":5,"offset":17108},"end":{"line":303,"column":49,"offset":17152},"indent":[]}}],"position":{"start":{"line":303,"column":5,"offset":17108},"end":{"line":303,"column":49,"offset":17152},"indent":[]}},{"type":"break","position":{"start":{"line":303,"column":49,"offset":17152},"end":{"line":304,"column":1,"offset":17155},"indent":[1]}},{"type":"linkReference","identifier":"6","label":"6","referenceType":"shortcut","children":[{"type":"text","value":"6","position":{"start":{"line":304,"column":2,"offset":17156},"end":{"line":304,"column":3,"offset":17157},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":17155},"end":{"line":304,"column":4,"offset":17158},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":304,"column":4,"offset":17158},"end":{"line":304,"column":5,"offset":17159},"indent":[]}},{"type":"link","title":null,"url":"https://www.typescriptlang.org/docs/handbook/type-compatibility.html","children":[{"type":"text","value":"https://www.typescriptlang.org/docs/handbook/type-compatibility.html","position":{"start":{"line":304,"column":5,"offset":17159},"end":{"line":304,"column":73,"offset":17227},"indent":[]}}],"position":{"start":{"line":304,"column":5,"offset":17159},"end":{"line":304,"column":73,"offset":17227},"indent":[]}},{"type":"break","position":{"start":{"line":304,"column":73,"offset":17227},"end":{"line":305,"column":1,"offset":17230},"indent":[1]}},{"type":"linkReference","identifier":"7","label":"7","referenceType":"shortcut","children":[{"type":"text","value":"7","position":{"start":{"line":305,"column":2,"offset":17231},"end":{"line":305,"column":3,"offset":17232},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":17230},"end":{"line":305,"column":4,"offset":17233},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":305,"column":4,"offset":17233},"end":{"line":305,"column":5,"offset":17234},"indent":[]}},{"type":"link","title":null,"url":"https://flow.org/en/docs/types/classes/","children":[{"type":"text","value":"https://flow.org/en/docs/types/classes/","position":{"start":{"line":305,"column":5,"offset":17234},"end":{"line":305,"column":44,"offset":17273},"indent":[]}}],"position":{"start":{"line":305,"column":5,"offset":17234},"end":{"line":305,"column":44,"offset":17273},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":16932},"end":{"line":305,"column":44,"offset":17273},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"TypeScript vs Flow (Part 2 of 3) - High Level Coding\",\"date\":\"2017-08-23\",\"categories\":[\"flow\",\"typescript\"]}","position":{"start":{"line":308,"column":1,"offset":17276},"end":{"line":308,"column":148,"offset":17423},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":308,"column":148,"offset":17423}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript vs Flow (Part 2 of 3) - High Level Coding\",\n  \"date\": \"2017-08-23\",\n  \"categories\": [\"flow\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is the second article of three about differences between TypeScript and Flow. You can read the first part about high level of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./typescript-vs-flow-part-1-of-3-who-they-are\"\n  }, \"TypeScript vs Flow in this article.\"), \" The investigation I conducted was done on August 9 and August 10, 2017. It's a domain where it evolves a lot and my conclusion could change in few months or years. The first article goal was to bring fundamentals around what are TypeScript and Flow.\"), mdx(\"p\", null, \"This article will focus on high-level coding feature that differentiates TypeScript and Flow. The get differences, I had to sample a subset of all the feature and the reason is that both support a lot of them and I have limited time. How I decided these features was to go with Flow first by using their documentation. My plan was to convert one TypeScript project already written to Flow and while doing so, I added features that were used which resulted to the features comparison matrix of this article. The result is of the 40 features tested is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"11 features lean on TypeScript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"4 features lean on Flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"18 features that are neutrally equal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 feature that is subjective who is better\")), mdx(\"p\", null, \"Let's spread the 40 features in a table to illustrate these details and then talk about them.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Feature\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Flow\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Winner?\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interface\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type (Alias)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Subtype\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Implementation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Encapsulation (private, protected, public)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Enum\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"$key (utility type)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Flow\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"$diff (utility type)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Flow\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"* (utility type)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Flow\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type Casting\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DefinitionFile or Librairie Definition\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non standard JS\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Get definition file\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NPM\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cli\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Readonly\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No (see covariance)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"React props/states\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maybe/optional parameter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes (separate null/undefined)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Optional properties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes (same syntax)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes (diff syntax)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Infer type\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Contravariant\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Covariance\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No (see readonly)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Flow\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Decorator\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Quick initialization (by ctor params)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"No\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Static\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Not all scenarios\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TypeScript\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Sealed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes by default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes by default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unsealed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Must cast\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object defined by {}\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tuple\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Soundness\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Not completely\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"???\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type of typing\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Structural typing\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Nominally typing\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TS is following JS\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Generic Class\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Generic Interface\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Generic Function\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Generic Type\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Yes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Both\")))), mdx(\"p\", null, \"That's a lot of information and at the same time, just a sample of what Flow and TypeScript can offer. I'll try to cover the difference without focusing on the resemblances and more about what makes them apart.\"), mdx(\"h2\", null, \"Encapsulation\"), mdx(\"p\", null, \"Encapsulation or \\\"modifier\\\" is the first difference. I'll talk about the lack of private, public, protected keyword all at once. This level of protection doesn't exist in JavaScript, but TypeScript allows it if interested, otherwise, it's all open (public). TypeScript enforces it at the syntax level put the transpiled JavaScript doesn't have any trace of the encapsulation notion. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nclass MyClass {\\n    private privateMember: string;\\n    public publicMember: string;\\n    protected protectedMember: string;\\n    constructor(message: string) {\\n        this.privateMember = message;\\n        this.publicMember = \\\"public\\\";\\n        this.protectedMember = \\\"protected\\\";\\n    }\\n}\\n\\n\")), mdx(\"p\", null, \"Transpile to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nvar MyClass = (function () {\\n    function MyClass(message) {\\n        this.privateMember = message;\\n        this.publicMember = \\\"public\\\";\\n        this.protectedMember = \\\"protected\\\";\\n    }\\n    return MyClass;\\n}());\\n\\n\")), mdx(\"p\", null, \"The encapsulation is not propagated in JavaScript, but could have been there with some \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./javascript-private-variable\"\n  }, \"closure\"), \". In all circumstances, Flow decided to not enforce the encapsulation at all. The repercussion is interesting. First, the code becomes harder to maintain because it allows people to access members directly. A common scenario is to inject by constructor some specific class that represent services. You want to control the integrity when the class is instantiated, but if the injected objects are public, they could be modified by anyone in the lifetime of the object. There is much other justification why having a stronger encapsulation is good which will be the subject of future articles.\"), mdx(\"h2\", null, \"Enum\"), mdx(\"p\", null, \"Enum is a convenient way to organize potential value for a type. For example, with TypeScript you can write an enum that will hold a specific group of language the following way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nenum Language {\\n    English,\\n    French\\n}\\n\\n\")), mdx(\"p\", null, \"This syntax allows to assign easily with a good Intellisense support, but also enforce passing only the value from the enum by parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nvar myLanguage = Language.English;\\nfunctTakeOnlyLanguage(myLanguage);\\nfunction functTakeOnlyLanguage(param: Language){\\n    // ...\\n}\\n\\n\")), mdx(\"p\", null, \"The notion of Enum doesn't exist in Flow \", \"[2]\", \". They have a workaround which more verbose \", \"[3]\", \" than the TypeScript keyword. Here is the same representation with Flow.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nexport const LANGUAGES_VALUE = {\\n    French: \\\"French\\\",\\n    English: \\\"English\\\"\\n};\\nexport type Language = $Values&lt;typeof LANGUAGES_VALUE&gt;;\\n\\nvar myLanguage = LANGUAGES_VALUE.English;\\nfunctTakeOnlyLanguage(myLanguage);\\nfunction functTakeOnlyLanguage(param: Language){\\n    // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Using this type and constant with Flow require to have a special import when using.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nimport { LANGUAGES_VALUE } from \\\"../general/Language\\\";\\nimport type { Language } from \\\"../general/Language\\\";\\n\\n\")), mdx(\"p\", null, \"The Flow version requires a little more work since you need to define the const and then use a \\\"magic utility type\\\" to create a type, and after you need two imports which one is non-standard. The use of \\\"magic\\\" seems pejorative, but it's how it is called. Also, it might be the configuration issue between my VsCode and Flow during my investigation, but the type of Language was \\\"any\\\", hence the Intellisense wasn't great. Overall, TypeScript have an edge here on a simple thing that makes developer life just a little easier.\"), mdx(\"h2\", null, \"Utility Type\"), mdx(\"p\", null, \"Flow is having something TypeScript does not literally have called utility type \", \"[3]\", \" or magic utility type. We already saw the potential with Enum with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"$keys\"), \" one. TypeScript lets you do something similar with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"keyof\"), \".\"), mdx(\"p\", null, \"Flow has also $Diff<a,b> which returns a type that is the difference between two types. There is also few others which are not all implemented. </a,b>\"), mdx(\"p\", null, \"So, at first glance, it's a pro and I marked it as well. However, the more I was thinking about it and the more I was wondering why Flow has these utility method. It should belong somewhere else than inside a type checker tool. These utility methods would dwell well in a Babel plugin, or in a library like lodash, or directly in TypeScript. I do not have the full context, but it seems that it was added to fulfill a need with React which is a close team Flow is working with.\"), mdx(\"h2\", null, \"Getting Definition Files\"), mdx(\"p\", null, \"Getting definition files is different between TypeScript and Flow. The reason is that Flow doesn't use the same definition file than TypeScript. There is no way to translate one to the other, and both persist their definition files in an independent repository. This creates fragmentation in the community that needs to create two kinds of definition file. As mentioned in the first part, TypeScript has above three thousand definition files while Flow has reached few week ago three hundred. Besides the number of libraries, the major difference is how to get the definition files. TypeScript has a long history of ways to do it. At the time I am writing this article, we are at the third iteration which seem to be stable and better in many ways. It's now using NPM, a tool that every JavaScript developers have familiarity since it is the most common way to get library. It makes sense to have the definition file by the same way. Using NPM allows using the same syntax and configuration file (package.json). This is convenient to store data, but also convenient to get the definition file from a repository that you do not own. By installing with \\\"npm install\\\" you are getting all the libraries as well as all the definition files.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nnpm install --save-dev @types/redux\\n\\n\")), mdx(\"p\", null, \"With Flow, getting library definition is not hard, but it's not a paved way what we are used to ride on. It requires using a cli (command line)\", \"[4]\", \". This cli is available from npm (npm install -g flow-typed) and from there, you can use flow-typed to get a library that will be installed into a flow-typed folder at the root of your project. One requirement is that you must specify a version.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nflow-typed install redux@2.3.x\\n\\n\")), mdx(\"p\", null, \"If you get a project and needs to get the library, you will need to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"npm install\"), \" but also \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flow-typed install\"), \". Since we need to handle the second tool, Flow doesn't gain a point in that comparison. TypeScript matured into using NPM and that choice simplify the access to third party definition file.\"), mdx(\"h2\", null, \"Readonly\"), mdx(\"p\", null, \"TypeScript has the keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"readonly\"), \". Flow does not. However, Flow has something similar which is the \\\"+\\\" sign for covariance. The goal is to do like in C# or another language which is to set a value directly in the class where we the field is declared or when in the constructor when the class is instantiated. At the end, the value cannot change. This allows having values that are set dynamically and only once.\"), mdx(\"p\", null, \"Flow doesn't have the keyword read only. It has the concept of covariance that TypeScript doesn't have. To mimic this behavior, in Flow it requires having a \\\"+\\\" sign in front of the variable. The difference is small for a field but subtle. For example, it works well if you know the value and assigns it directly to the field of the class. However, if you want to assign it in the constructor, it won't work in Flow. Let's see some code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nclass Person {\\n  +name: string;\\n  constructor(name: string) {\\n    this.name = name; // This doesn't work in Flow\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"But the equivalence work in TypeScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\nclass Person {\\n  readonly name: string;\\n  constructor(name: string) {\\n    this.name = name\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"The case of read only is simpler with TypeScript and work like many other languages, hence seem to be slightly favorable for TypeScript.\"), mdx(\"h2\", null, \"Optional Parameter and Optional Field\"), mdx(\"p\", null, \"Both have a different way to achieve optional value to be provided for parameter of a function or to have a field defined (in an interface for example). TypeScript use the question mark in both cases.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\n// Optional Field\\ninterface IInterface{ propertyName?: string } //Allow null amp;amp;amp;amp; undefined\\n\\n// Optional Parameter\\nfunction myFunc( param?: string ) //Allow null amp;amp;amp;amp; undefined\\n\\n\")), mdx(\"p\", null, \"This is different from Flow which will not be that loose. With Flow, you can pass nothing (which is undefined) but cannot explicitly pass null for something optional.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\n// Optional Field\\ninterface IInterface{ propertyName?: string } //Allow undefined\\n\\n// Optional Parameter\\nfunction myFunc( param?: string ) //Allow undefined\\n\\n\")), mdx(\"p\", null, \"If you want to pass null, you need to use the concept of \\\"maybe\\\" which is unique to Flow. The syntax is also with the question mark, but this time before the type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"\\n// Optional Parameter\\nfunction myFunc( param: ?string ) //Allow null amp;amp;amp;amp; undefined\\n\\n\")), mdx(\"p\", null, \"This goes in the sense that Flow is more \\\"sound\\\" than TypeScript. Flow has more control about what you want to pass. TypeScript is following JavaScript and is less strict in that matter. At the end, both sides can be pros or cons. TypeScript shines by having a single place to put the question mark and it's always the same logic which is that it allows value, null and undefined. On the other hand, Flow has more option by being able to allow value an undefined as well as null if using the maybe type. However, the syntax is very similar to the other type of optional which can cause confusion. At the end, they have different pros and cons and I consider no winner.\"), mdx(\"h2\", null, \"Abstract\"), mdx(\"p\", null, \"Abstract is available in TypeScript; it's not in Flow. Abstract is an object oriented concept, and it wasn't available 3 years and half ago when I started using TypeScript and it was a tool that I missed. Since about 2 years, it's available and I used it few times. I do not want to explain why it can be useful or not in this comparison article, but it's a concept that some kind of developers like while other doesn't. TypeScript doesn't force you to use it, and give you the ability to if you want. By giving the developer the choice instead of not providing it, TypeScript wins.\"), mdx(\"h2\", null, \"Decorator\"), mdx(\"p\", null, \"TypeScript requires having a configuration flag to true in the tsconfig.json. Flow requires having a babel plugin. It needs a little more work, like getting the right package, but nothing significant. I started using the babel decorator, but was getting a warning message that conducted me to using the decorator-legacy.\"), mdx(\"p\", null, \"From there, Flow was giving an error saying that this feature was experimental. Flow, at this time, doesn\\u2019t support decorator \", \"[5]\", \". I ended up by having to ignore the EcmaScript proposal in the .flowconfig file. TypeScript won. However, if you are not using Angular2+ or MobX than you might do not mind. However, more and more libraries and frameworks use decorator which is nice to have some type checking as well.\"), mdx(\"h2\", null, \"Quick Initialization\"), mdx(\"p\", null, \"I'll be brief. Since Flow doesn't have encapsulation than it's obvious that quick initialization doesn't exist in Flow. This feature allows to not declare inside a class the field and avoid having line of code to set the constructor's argument to the field manually. This is handy and a recent addition to TypeScript. It's clean up the code by still having a great encapsulation. TypeScript wins by default.\"), mdx(\"h2\", null, \"Statics\"), mdx(\"p\", null, \"On this one, I wasn't very thorough. I had code that was defining readonly static field in TypeScript and couldn't have them static (without readonly) in Flow. So, I had to choose about having the value defined once or the field to be static. TypeScript acted more like I was used to see in Java or C#. Because of that, I'm giving a weak win to TypeScript.\"), mdx(\"h2\", null, \"Type of Typing\"), mdx(\"p\", null, \"TypeScript is using a structural typing \", \"[6]\", \". Flow is following nominally typing\", \"[7]\", \". It means that for TypeScript, if you have two interfaces or classes with the same members but with a different name, hence are a different type, they are assignable. This is to mimic how JavaScript works. However, Flow is nominally typed which means that every class or interface defined is unique and cannot be assigned to another one even if they have the same members. I could elaborate more, but I suggest you read the TypeScript documentation about type compatibility. So who is winning? It\\u2019s a hard one. Flow wins if we want something more strict. TypeScript wins if we want not to invent a new language on top of JavaScript. To be noted is that, even if JavaScript doesn\\u2019t have keywords for encapsulation and abstraction, the language allow it with closures and other JavaScript tricks. So at the end, TypeScript seems to be the winner since it doesn\\u2019t try to change the nature of JavaScript, which Flow is doing\\u2026and maybe for the best? I guess that is debatable.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"This part is getting long. I\\u2019ll end it here. In the first part, we saw some fundamental differences between TypeScript and Flow. In this second part, we saw that the two type checkers are pretty close in features. Even if I write about the differences, there were so many similarities that I got impressed and surprised. In the last and third part, I\\u2019ll take the time to show in terms of code the similarities and differences. Before closing this part two, if you are still hesitating on which one to use, you won\\u2019t find more answers in the third part. The next article will confirm the idea that both of them are pretty similar. I suggest that you read again the first part and this one to make your decision and read the third one only for your curiosity.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parts of the serie:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-vs-flow-part-3-of-3-syntax-difference\"\n  }, \"TypeScript vs Flow (Part 1 of 3) \\u2013 Who are they?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-vs-flow-part-2-of-3-high-level-coding\"\n  }, \"TypeScript vs Flow (Part 2 of 3) \\u2013 High Level Coding\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-vs-flow-part-3-of-3-syntax-difference\"\n  }, \"TypeScript vs Flow (Part 3 of 3) \\u2013 Syntax Difference\"))), mdx(\"h2\", null, \"References\"), mdx(\"p\", null, \"[1]\", \" -\\n\", \"[2]\", \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/facebook/flow/issues/627\"\n  }, \"https://github.com/facebook/flow/issues/627\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"[3]\", \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://flow.org/en/docs/types/utilities/\"\n  }, \"https://flow.org/en/docs/types/utilities/\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"[4]\", \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/flowtype/flow-typed/blob/master/README.md\"\n  }, \"https://github.com/flowtype/flow-typed/blob/master/README.md\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"[5]\", \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/facebook/flow/issues/3405\"\n  }, \"https://github.com/facebook/flow/issues/3405\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"[6]\", \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/type-compatibility.html\"\n  }, \"https://www.typescriptlang.org/docs/handbook/type-compatibility.html\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"[7]\", \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://flow.org/en/docs/types/classes/\"\n  }, \"https://flow.org/en/docs/types/classes/\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"TypeScript vs Flow (Part 2 of 3) - High Level Coding\",\n  \"date\": \"2017-08-23\",\n  \"categories\": [\"flow\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This is the second article of three about differences between TypeScript and Flow. You can read the first part about high level of `}<a parentName=\"p\" {...{\n        \"href\": \"./typescript-vs-flow-part-1-of-3-who-they-are\"\n      }}>{`TypeScript vs Flow in this article.`}</a>{` The investigation I conducted was done on August 9 and August 10, 2017. It's a domain where it evolves a lot and my conclusion could change in few months or years. The first article goal was to bring fundamentals around what are TypeScript and Flow.`}</p>\n    <p>{`This article will focus on high-level coding feature that differentiates TypeScript and Flow. The get differences, I had to sample a subset of all the feature and the reason is that both support a lot of them and I have limited time. How I decided these features was to go with Flow first by using their documentation. My plan was to convert one TypeScript project already written to Flow and while doing so, I added features that were used which resulted to the features comparison matrix of this article. The result is of the 40 features tested is:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`11 features lean on TypeScript`}</li>\n      <li parentName=\"ul\">{`4 features lean on Flow`}</li>\n      <li parentName=\"ul\">{`18 features that are neutrally equal`}</li>\n      <li parentName=\"ul\">{`1 feature that is subjective who is better`}</li>\n    </ul>\n    <p>{`Let's spread the 40 features in a table to illustrate these details and then talk about them.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Feature`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flow`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Winner?`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Interface`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type (Alias)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Subtype`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Implementation`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Encapsulation (private, protected, public)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Enum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$key (utility type)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flow`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$diff (utility type)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flow`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`* (utility type)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flow`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type Casting`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DefinitionFile or Librairie Definition`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Non standard JS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get definition file`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`NPM`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cli`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Readonly`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No (see covariance)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`React props/states`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maybe/optional parameter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes (separate null/undefined)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional properties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes (same syntax)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes (diff syntax)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Infer type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Contravariant`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Covariance`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No (see readonly)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flow`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Abstract`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Decorator`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quick initialization (by ctor params)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Static`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Not all scenarios`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TypeScript`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sealed`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes by default`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes by default`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unsealed`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Must cast`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Object defined by {}`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tuple`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Soundness`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Not completely`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`???`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type of typing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Structural typing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Nominally typing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TS is following JS`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generic Class`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generic Interface`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generic Function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generic Type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Both`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`That's a lot of information and at the same time, just a sample of what Flow and TypeScript can offer. I'll try to cover the difference without focusing on the resemblances and more about what makes them apart.`}</p>\n    <h2>{`Encapsulation`}</h2>\n    <p>{`Encapsulation or \"modifier\" is the first difference. I'll talk about the lack of private, public, protected keyword all at once. This level of protection doesn't exist in JavaScript, but TypeScript allows it if interested, otherwise, it's all open (public). TypeScript enforces it at the syntax level put the transpiled JavaScript doesn't have any trace of the encapsulation notion. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass MyClass {\n    private privateMember: string;\n    public publicMember: string;\n    protected protectedMember: string;\n    constructor(message: string) {\n        this.privateMember = message;\n        this.publicMember = \"public\";\n        this.protectedMember = \"protected\";\n    }\n}\n\n`}</code></pre>\n    <p>{`Transpile to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nvar MyClass = (function () {\n    function MyClass(message) {\n        this.privateMember = message;\n        this.publicMember = \"public\";\n        this.protectedMember = \"protected\";\n    }\n    return MyClass;\n}());\n\n`}</code></pre>\n    <p>{`The encapsulation is not propagated in JavaScript, but could have been there with some `}<a parentName=\"p\" {...{\n        \"href\": \"./javascript-private-variable\"\n      }}>{`closure`}</a>{`. In all circumstances, Flow decided to not enforce the encapsulation at all. The repercussion is interesting. First, the code becomes harder to maintain because it allows people to access members directly. A common scenario is to inject by constructor some specific class that represent services. You want to control the integrity when the class is instantiated, but if the injected objects are public, they could be modified by anyone in the lifetime of the object. There is much other justification why having a stronger encapsulation is good which will be the subject of future articles.`}</p>\n    <h2>{`Enum`}</h2>\n    <p>{`Enum is a convenient way to organize potential value for a type. For example, with TypeScript you can write an enum that will hold a specific group of language the following way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nenum Language {\n    English,\n    French\n}\n\n`}</code></pre>\n    <p>{`This syntax allows to assign easily with a good Intellisense support, but also enforce passing only the value from the enum by parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nvar myLanguage = Language.English;\nfunctTakeOnlyLanguage(myLanguage);\nfunction functTakeOnlyLanguage(param: Language){\n    // ...\n}\n\n`}</code></pre>\n    <p>{`The notion of Enum doesn't exist in Flow `}{`[2]`}{`. They have a workaround which more verbose `}{`[3]`}{` than the TypeScript keyword. Here is the same representation with Flow.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nexport const LANGUAGES_VALUE = {\n    French: \"French\",\n    English: \"English\"\n};\nexport type Language = $Values&lt;typeof LANGUAGES_VALUE&gt;;\n\nvar myLanguage = LANGUAGES_VALUE.English;\nfunctTakeOnlyLanguage(myLanguage);\nfunction functTakeOnlyLanguage(param: Language){\n    // ...\n}\n\n`}</code></pre>\n    <p>{`Using this type and constant with Flow require to have a special import when using.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nimport { LANGUAGES_VALUE } from \"../general/Language\";\nimport type { Language } from \"../general/Language\";\n\n`}</code></pre>\n    <p>{`The Flow version requires a little more work since you need to define the const and then use a \"magic utility type\" to create a type, and after you need two imports which one is non-standard. The use of \"magic\" seems pejorative, but it's how it is called. Also, it might be the configuration issue between my VsCode and Flow during my investigation, but the type of Language was \"any\", hence the Intellisense wasn't great. Overall, TypeScript have an edge here on a simple thing that makes developer life just a little easier.`}</p>\n    <h2>{`Utility Type`}</h2>\n    <p>{`Flow is having something TypeScript does not literally have called utility type `}{`[3]`}{` or magic utility type. We already saw the potential with Enum with the `}<strong parentName=\"p\">{`$keys`}</strong>{` one. TypeScript lets you do something similar with `}<strong parentName=\"p\">{`keyof`}</strong>{`.`}</p>\n    <p>{`Flow has also $Diff<a,b> which returns a type that is the difference between two types. There is also few others which are not all implemented. </a,b>`}</p>\n    <p>{`So, at first glance, it's a pro and I marked it as well. However, the more I was thinking about it and the more I was wondering why Flow has these utility method. It should belong somewhere else than inside a type checker tool. These utility methods would dwell well in a Babel plugin, or in a library like lodash, or directly in TypeScript. I do not have the full context, but it seems that it was added to fulfill a need with React which is a close team Flow is working with.`}</p>\n    <h2>{`Getting Definition Files`}</h2>\n    <p>{`Getting definition files is different between TypeScript and Flow. The reason is that Flow doesn't use the same definition file than TypeScript. There is no way to translate one to the other, and both persist their definition files in an independent repository. This creates fragmentation in the community that needs to create two kinds of definition file. As mentioned in the first part, TypeScript has above three thousand definition files while Flow has reached few week ago three hundred. Besides the number of libraries, the major difference is how to get the definition files. TypeScript has a long history of ways to do it. At the time I am writing this article, we are at the third iteration which seem to be stable and better in many ways. It's now using NPM, a tool that every JavaScript developers have familiarity since it is the most common way to get library. It makes sense to have the definition file by the same way. Using NPM allows using the same syntax and configuration file (package.json). This is convenient to store data, but also convenient to get the definition file from a repository that you do not own. By installing with \"npm install\" you are getting all the libraries as well as all the definition files.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nnpm install --save-dev @types/redux\n\n`}</code></pre>\n    <p>{`With Flow, getting library definition is not hard, but it's not a paved way what we are used to ride on. It requires using a cli (command line)`}{`[4]`}{`. This cli is available from npm (npm install -g flow-typed) and from there, you can use flow-typed to get a library that will be installed into a flow-typed folder at the root of your project. One requirement is that you must specify a version.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nflow-typed install redux@2.3.x\n\n`}</code></pre>\n    <p>{`If you get a project and needs to get the library, you will need to use `}<em parentName=\"p\">{`npm install`}</em>{` but also `}<em parentName=\"p\">{`flow-typed install`}</em>{`. Since we need to handle the second tool, Flow doesn't gain a point in that comparison. TypeScript matured into using NPM and that choice simplify the access to third party definition file.`}</p>\n    <h2>{`Readonly`}</h2>\n    <p>{`TypeScript has the keyword `}<strong parentName=\"p\">{`readonly`}</strong>{`. Flow does not. However, Flow has something similar which is the \"+\" sign for covariance. The goal is to do like in C# or another language which is to set a value directly in the class where we the field is declared or when in the constructor when the class is instantiated. At the end, the value cannot change. This allows having values that are set dynamically and only once.`}</p>\n    <p>{`Flow doesn't have the keyword read only. It has the concept of covariance that TypeScript doesn't have. To mimic this behavior, in Flow it requires having a \"+\" sign in front of the variable. The difference is small for a field but subtle. For example, it works well if you know the value and assigns it directly to the field of the class. However, if you want to assign it in the constructor, it won't work in Flow. Let's see some code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass Person {\n  +name: string;\n  constructor(name: string) {\n    this.name = name; // This doesn't work in Flow\n  }\n}\n\n`}</code></pre>\n    <p>{`But the equivalence work in TypeScript:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass Person {\n  readonly name: string;\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\n`}</code></pre>\n    <p>{`The case of read only is simpler with TypeScript and work like many other languages, hence seem to be slightly favorable for TypeScript.`}</p>\n    <h2>{`Optional Parameter and Optional Field`}</h2>\n    <p>{`Both have a different way to achieve optional value to be provided for parameter of a function or to have a field defined (in an interface for example). TypeScript use the question mark in both cases.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Optional Field\ninterface IInterface{ propertyName?: string } //Allow null amp;amp;amp;amp; undefined\n\n// Optional Parameter\nfunction myFunc( param?: string ) //Allow null amp;amp;amp;amp; undefined\n\n`}</code></pre>\n    <p>{`This is different from Flow which will not be that loose. With Flow, you can pass nothing (which is undefined) but cannot explicitly pass null for something optional.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Optional Field\ninterface IInterface{ propertyName?: string } //Allow undefined\n\n// Optional Parameter\nfunction myFunc( param?: string ) //Allow undefined\n\n`}</code></pre>\n    <p>{`If you want to pass null, you need to use the concept of \"maybe\" which is unique to Flow. The syntax is also with the question mark, but this time before the type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Optional Parameter\nfunction myFunc( param: ?string ) //Allow null amp;amp;amp;amp; undefined\n\n`}</code></pre>\n    <p>{`This goes in the sense that Flow is more \"sound\" than TypeScript. Flow has more control about what you want to pass. TypeScript is following JavaScript and is less strict in that matter. At the end, both sides can be pros or cons. TypeScript shines by having a single place to put the question mark and it's always the same logic which is that it allows value, null and undefined. On the other hand, Flow has more option by being able to allow value an undefined as well as null if using the maybe type. However, the syntax is very similar to the other type of optional which can cause confusion. At the end, they have different pros and cons and I consider no winner.`}</p>\n    <h2>{`Abstract`}</h2>\n    <p>{`Abstract is available in TypeScript; it's not in Flow. Abstract is an object oriented concept, and it wasn't available 3 years and half ago when I started using TypeScript and it was a tool that I missed. Since about 2 years, it's available and I used it few times. I do not want to explain why it can be useful or not in this comparison article, but it's a concept that some kind of developers like while other doesn't. TypeScript doesn't force you to use it, and give you the ability to if you want. By giving the developer the choice instead of not providing it, TypeScript wins.`}</p>\n    <h2>{`Decorator`}</h2>\n    <p>{`TypeScript requires having a configuration flag to true in the tsconfig.json. Flow requires having a babel plugin. It needs a little more work, like getting the right package, but nothing significant. I started using the babel decorator, but was getting a warning message that conducted me to using the decorator-legacy.`}</p>\n    <p>{`From there, Flow was giving an error saying that this feature was experimental. Flow, at this time, doesn’t support decorator `}{`[5]`}{`. I ended up by having to ignore the EcmaScript proposal in the .flowconfig file. TypeScript won. However, if you are not using Angular2+ or MobX than you might do not mind. However, more and more libraries and frameworks use decorator which is nice to have some type checking as well.`}</p>\n    <h2>{`Quick Initialization`}</h2>\n    <p>{`I'll be brief. Since Flow doesn't have encapsulation than it's obvious that quick initialization doesn't exist in Flow. This feature allows to not declare inside a class the field and avoid having line of code to set the constructor's argument to the field manually. This is handy and a recent addition to TypeScript. It's clean up the code by still having a great encapsulation. TypeScript wins by default.`}</p>\n    <h2>{`Statics`}</h2>\n    <p>{`On this one, I wasn't very thorough. I had code that was defining readonly static field in TypeScript and couldn't have them static (without readonly) in Flow. So, I had to choose about having the value defined once or the field to be static. TypeScript acted more like I was used to see in Java or C#. Because of that, I'm giving a weak win to TypeScript.`}</p>\n    <h2>{`Type of Typing`}</h2>\n    <p>{`TypeScript is using a structural typing `}{`[6]`}{`. Flow is following nominally typing`}{`[7]`}{`. It means that for TypeScript, if you have two interfaces or classes with the same members but with a different name, hence are a different type, they are assignable. This is to mimic how JavaScript works. However, Flow is nominally typed which means that every class or interface defined is unique and cannot be assigned to another one even if they have the same members. I could elaborate more, but I suggest you read the TypeScript documentation about type compatibility. So who is winning? It’s a hard one. Flow wins if we want something more strict. TypeScript wins if we want not to invent a new language on top of JavaScript. To be noted is that, even if JavaScript doesn’t have keywords for encapsulation and abstraction, the language allow it with closures and other JavaScript tricks. So at the end, TypeScript seems to be the winner since it doesn’t try to change the nature of JavaScript, which Flow is doing…and maybe for the best? I guess that is debatable.`}</p>\n    <h2>{`Conclusion`}</h2>\n    <p>{`This part is getting long. I’ll end it here. In the first part, we saw some fundamental differences between TypeScript and Flow. In this second part, we saw that the two type checkers are pretty close in features. Even if I write about the differences, there were so many similarities that I got impressed and surprised. In the last and third part, I’ll take the time to show in terms of code the similarities and differences. Before closing this part two, if you are still hesitating on which one to use, you won’t find more answers in the third part. The next article will confirm the idea that both of them are pretty similar. I suggest that you read again the first part and this one to make your decision and read the third one only for your curiosity.`}</p>\n    <p><strong parentName=\"p\">{`Parts of the serie:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./typescript-vs-flow-part-3-of-3-syntax-difference\"\n        }}>{`TypeScript vs Flow (Part 1 of 3) – Who are they?`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./typescript-vs-flow-part-2-of-3-high-level-coding\"\n        }}>{`TypeScript vs Flow (Part 2 of 3) – High Level Coding`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./typescript-vs-flow-part-3-of-3-syntax-difference\"\n        }}>{`TypeScript vs Flow (Part 3 of 3) – Syntax Difference`}</a></li>\n    </ul>\n    <h2>{`References`}</h2>\n    <p>{`[1]`}{` -\n`}{`[2]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/flow/issues/627\"\n      }}>{`https://github.com/facebook/flow/issues/627`}</a><br parentName=\"p\"></br>{`\n`}{`[3]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://flow.org/en/docs/types/utilities/\"\n      }}>{`https://flow.org/en/docs/types/utilities/`}</a><br parentName=\"p\"></br>{`\n`}{`[4]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/flowtype/flow-typed/blob/master/README.md\"\n      }}>{`https://github.com/flowtype/flow-typed/blob/master/README.md`}</a><br parentName=\"p\"></br>{`\n`}{`[5]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/flow/issues/3405\"\n      }}>{`https://github.com/facebook/flow/issues/3405`}</a><br parentName=\"p\"></br>{`\n`}{`[6]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/type-compatibility.html\"\n      }}>{`https://www.typescriptlang.org/docs/handbook/type-compatibility.html`}</a><br parentName=\"p\"></br>{`\n`}{`[7]`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://flow.org/en/docs/types/classes/\"\n      }}>{`https://flow.org/en/docs/types/classes/`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}