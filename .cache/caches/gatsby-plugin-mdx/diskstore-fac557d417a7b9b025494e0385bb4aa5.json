{"expireTime":9007200886478388000,"key":"gatsby-plugin-mdx-entire-payload-e2bc6721e2adee282adad9dc3e8b4bcf--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Using Antiforgery is pretty straightforward with normal form. You need to add an attribute on the top of the action and use a simple Html helper inside your form. The attribute will check for a specific value in session that has been calculated to be unique for the form. The Html helper create an hidden field with the value. Once the request is sent to the server, a comparison between the hidden field and the value in session is done. If they are not equal, an exception is thrown. This is a security mechanism that increase the security against malicious use of your cookie. For example, no one can just force a user to post a form that use the cookie for credential because this one will miss the antiforgery token. That said, with Ajax you have to do a little bit more.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":777,"offset":777},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":777,"offset":777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, you still need to add the antiforgery token at the top of your controller's action.","position":{"start":{"line":4,"column":1,"offset":779},"end":{"line":4,"column":91,"offset":869},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":779},"end":{"line":4,"column":91,"offset":869},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [HttpPost] [ValidateAntiForgeryToken] public ActionResult SymbolChangeList(SymbolToRenameAddViewModel symbolToSave) { //... } ","position":{"start":{"line":7,"column":1,"offset":872},"end":{"line":9,"column":4,"offset":1013},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The helper is also required. You have different option. First, you can re-use an existing antiforgery html helper if your page already have a form that is currently use this mechanism. For example, the login/logout form at the top of your site is using this by default. However, I prefer to create one for the Ajax call. It allows me to create an unique html's container to have an easy access to it in JavaScript.","position":{"start":{"line":11,"column":1,"offset":1015},"end":{"line":11,"column":415,"offset":1429},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1015},"end":{"line":11,"column":415,"offset":1429},"indent":[]}},{"type":"code","lang":"html","meta":"<div id=\"anti-forgery-token\"> @Html.AntiForgeryToken() </div>","value":"","position":{"start":{"line":14,"column":1,"offset":1432},"end":{"line":15,"column":5,"offset":1508},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"From there, you just need to add the value of the hidden field inside your post arguments.","position":{"start":{"line":17,"column":1,"offset":1510},"end":{"line":17,"column":91,"offset":1600},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1510},"end":{"line":17,"column":91,"offset":1600},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$.ajax({ url: \"/yourpage/here\", type: 'POST', data: { idSymbolRename: id, /*Others variables to send */,__RequestVerificationToken: $('#anti-forgery-token [name=__RequestVerificationToken]').val() }, cache: true, dataType: 'json', success: function (json) { // Success code here }, error: function (xmlHttpRequest, textStatus, errorThrown) { // Error code here } }); ","position":{"start":{"line":19,"column":1,"offset":1602},"end":{"line":21,"column":5,"offset":1988},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you see, we need to specify a value for the ","position":{"start":{"line":24,"column":1,"offset":1991},"end":{"line":24,"column":48,"offset":2038},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"__RequestVerificationToken","position":{"start":{"line":24,"column":50,"offset":2040},"end":{"line":24,"column":76,"offset":2066},"indent":[]}}],"position":{"start":{"line":24,"column":48,"offset":2038},"end":{"line":24,"column":78,"offset":2068},"indent":[]}},{"type":"text","value":" value and we get this one from the generated hidden field from the Html Helper.","position":{"start":{"line":24,"column":78,"offset":2068},"end":{"line":24,"column":158,"offset":2148},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1991},"end":{"line":24,"column":158,"offset":2148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This code does not require a lot of modification from any Ajax call done with JQuery. The only detail that change is that you need to add the request verification token into the data sent to the server and you are up to go with a protected Post method.","position":{"start":{"line":26,"column":1,"offset":2150},"end":{"line":26,"column":253,"offset":2402},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2150},"end":{"line":26,"column":253,"offset":2402},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Using Antiforgery with Ajax Jquery Call\",\"date\":\"2015-06-25\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":29,"column":1,"offset":2405},"end":{"line":29,"column":125,"offset":2529},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":29,"column":125,"offset":2529}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using Antiforgery with Ajax Jquery Call\",\n  \"date\": \"2015-06-25\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Using Antiforgery is pretty straightforward with normal form. You need to add an attribute on the top of the action and use a simple Html helper inside your form. The attribute will check for a specific value in session that has been calculated to be unique for the form. The Html helper create an hidden field with the value. Once the request is sent to the server, a comparison between the hidden field and the value in session is done. If they are not equal, an exception is thrown. This is a security mechanism that increase the security against malicious use of your cookie. For example, no one can just force a user to post a form that use the cookie for credential because this one will miss the antiforgery token. That said, with Ajax you have to do a little bit more.\"), mdx(\"p\", null, \"First, you still need to add the antiforgery token at the top of your controller's action.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [HttpPost] [ValidateAntiForgeryToken] public ActionResult SymbolChangeList(SymbolToRenameAddViewModel symbolToSave) { //... } \\n\")), mdx(\"p\", null, \"The helper is also required. You have different option. First, you can re-use an existing antiforgery html helper if your page already have a form that is currently use this mechanism. For example, the login/logout form at the top of your site is using this by default. However, I prefer to create one for the Ajax call. It allows me to create an unique html's container to have an easy access to it in JavaScript.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"<div id=\\\"anti-forgery-token\\\"> @Html.AntiForgeryToken() </div>\",\n    \"<div\": true,\n    \"id\": \"\\\"anti-forgery-token\\\">\",\n    \"@Html.AntiForgeryToken()\": true,\n    \"</div>\": true\n  }, \"\")), mdx(\"p\", null, \"From there, you just need to add the value of the hidden field inside your post arguments.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$.ajax({ url: \\\"/yourpage/here\\\", type: 'POST', data: { idSymbolRename: id, /*Others variables to send */,__RequestVerificationToken: $('#anti-forgery-token [name=__RequestVerificationToken]').val() }, cache: true, dataType: 'json', success: function (json) { // Success code here }, error: function (xmlHttpRequest, textStatus, errorThrown) { // Error code here } }); \\n\")), mdx(\"p\", null, \"As you see, we need to specify a value for the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"__RequestVerificationToken\"), \" value and we get this one from the generated hidden field from the Html Helper.\"), mdx(\"p\", null, \"This code does not require a lot of modification from any Ajax call done with JQuery. The only detail that change is that you need to add the request verification token into the data sent to the server and you are up to go with a protected Post method.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Using Antiforgery with Ajax Jquery Call\",\n  \"date\": \"2015-06-25\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Using Antiforgery is pretty straightforward with normal form. You need to add an attribute on the top of the action and use a simple Html helper inside your form. The attribute will check for a specific value in session that has been calculated to be unique for the form. The Html helper create an hidden field with the value. Once the request is sent to the server, a comparison between the hidden field and the value in session is done. If they are not equal, an exception is thrown. This is a security mechanism that increase the security against malicious use of your cookie. For example, no one can just force a user to post a form that use the cookie for credential because this one will miss the antiforgery token. That said, with Ajax you have to do a little bit more.`}</p>\n    <p>{`First, you still need to add the antiforgery token at the top of your controller's action.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [HttpPost] [ValidateAntiForgeryToken] public ActionResult SymbolChangeList(SymbolToRenameAddViewModel symbolToSave) { //... } \n`}</code></pre>\n    <p>{`The helper is also required. You have different option. First, you can re-use an existing antiforgery html helper if your page already have a form that is currently use this mechanism. For example, the login/logout form at the top of your site is using this by default. However, I prefer to create one for the Ajax call. It allows me to create an unique html's container to have an easy access to it in JavaScript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\",\n        \"metastring\": \"<div id=\\\"anti-forgery-token\\\"> @Html.AntiForgeryToken() </div>\",\n        \"<div\": true,\n        \"id\": \"\\\"anti-forgery-token\\\">\",\n        \"@Html.AntiForgeryToken()\": true,\n        \"</div>\": true\n      }}>{``}</code></pre>\n    <p>{`From there, you just need to add the value of the hidden field inside your post arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$.ajax({ url: \"/yourpage/here\", type: 'POST', data: { idSymbolRename: id, /*Others variables to send */,__RequestVerificationToken: $('#anti-forgery-token [name=__RequestVerificationToken]').val() }, cache: true, dataType: 'json', success: function (json) { // Success code here }, error: function (xmlHttpRequest, textStatus, errorThrown) { // Error code here } }); \n`}</code></pre>\n    <p>{`As you see, we need to specify a value for the `}<strong parentName=\"p\">{`__RequestVerificationToken`}</strong>{` value and we get this one from the generated hidden field from the Html Helper.`}</p>\n    <p>{`This code does not require a lot of modification from any Ajax call done with JQuery. The only detail that change is that you need to add the request verification token into the data sent to the server and you are up to go with a protected Post method.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}