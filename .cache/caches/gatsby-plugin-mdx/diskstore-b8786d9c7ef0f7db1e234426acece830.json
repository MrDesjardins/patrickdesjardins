{"expireTime":9007200886478398000,"key":"gatsby-plugin-mdx-entire-payload-b1b9856779f1d46caaf3a13b42490057--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Sometime it can be useful to get some tracing line when debugging. For quick trace, I usually use System.Diagnostics.Debug.WriteLine method. This is still working with Silverlight. Also, the System.Diagnostics.Debugger.Log method can also log into the Output windows (Under Debug) of Visual Studio.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":299,"offset":299},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":299,"offset":299},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" System.Diagnostics.Debug.WriteLine(\"~~~~~ WriteLine ~~~~~\"); System.Diagnostics.Debugger.Log(0, null, \"########### Log ##########\\\\n\"); ","position":{"start":{"line":5,"column":1,"offset":302},"end":{"line":7,"column":4,"offset":453},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Debugging trace with Silverlight 4\",\"date\":\"2011-09-01\",\"categories\":[\"silverlight\",\"visual-studio\"]}","position":{"start":{"line":10,"column":1,"offset":456},"end":{"line":10,"column":140,"offset":595},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":10,"column":140,"offset":595}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Debugging trace with Silverlight 4\",\n  \"date\": \"2011-09-01\",\n  \"categories\": [\"silverlight\", \"visual-studio\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometime it can be useful to get some tracing line when debugging. For quick trace, I usually use System.Diagnostics.Debug.WriteLine method. This is still working with Silverlight. Also, the System.Diagnostics.Debugger.Log method can also log into the Output windows (Under Debug) of Visual Studio.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" System.Diagnostics.Debug.WriteLine(\\\"~~~~~ WriteLine ~~~~~\\\"); System.Diagnostics.Debugger.Log(0, null, \\\"########### Log ##########\\\\\\\\n\\\"); \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Debugging trace with Silverlight 4\",\n  \"date\": \"2011-09-01\",\n  \"categories\": [\"silverlight\", \"visual-studio\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Sometime it can be useful to get some tracing line when debugging. For quick trace, I usually use System.Diagnostics.Debug.WriteLine method. This is still working with Silverlight. Also, the System.Diagnostics.Debugger.Log method can also log into the Output windows (Under Debug) of Visual Studio.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` System.Diagnostics.Debug.WriteLine(\"~~~~~ WriteLine ~~~~~\"); System.Diagnostics.Debugger.Log(0, null, \"########### Log ##########\\\\\\\\n\"); \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}