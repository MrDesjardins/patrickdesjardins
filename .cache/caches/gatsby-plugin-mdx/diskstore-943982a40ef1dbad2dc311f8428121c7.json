{"expireTime":9007200886478388000,"key":"gatsby-plugin-mdx-entire-payload-f46fa93347e7cff34dde25314aeb4255--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In some use case you are forced to have classes that has ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"constructor with parameters","position":{"start":{"line":2,"column":60,"offset":60},"end":{"line":2,"column":87,"offset":87},"indent":[]}}],"position":{"start":{"line":2,"column":58,"offset":58},"end":{"line":2,"column":89,"offset":89},"indent":[]}},{"type":"text","value":". This is more rare if you are using Entity Framework (EF) because it requires to have parameterless constructor. However, if the scenario occurs, remember that ","position":{"start":{"line":2,"column":89,"offset":89},"end":{"line":2,"column":250,"offset":250},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"AutoMapper","position":{"start":{"line":2,"column":252,"offset":252},"end":{"line":2,"column":262,"offset":262},"indent":[]}}],"position":{"start":{"line":2,"column":250,"offset":250},"end":{"line":2,"column":264,"offset":264},"indent":[]}},{"type":"text","value":" does not have this constrain. In fact, you can have a private parameterless constructor for Entity Framework (EF) and force the use of a public constructor with parameters when using in your code.","position":{"start":{"line":2,"column":264,"offset":264},"end":{"line":2,"column":461,"offset":461},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":461,"offset":461},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, during the mapping configuration, you must use ","position":{"start":{"line":4,"column":1,"offset":463},"end":{"line":4,"column":62,"offset":524},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ConstructUsingServiceLocator","position":{"start":{"line":4,"column":64,"offset":526},"end":{"line":4,"column":92,"offset":554},"indent":[]}}],"position":{"start":{"line":4,"column":62,"offset":524},"end":{"line":4,"column":94,"offset":556},"indent":[]}},{"type":"text","value":" method. ","position":{"start":{"line":4,"column":94,"offset":556},"end":{"line":4,"column":103,"offset":565},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":463},"end":{"line":4,"column":103,"offset":565},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" Mapper.CreateMap<ContestEditableViewModel, Model.Entities.Contest.Contest>() .ConstructUsingServiceLocator(); ","position":{"start":{"line":5,"column":1,"offset":566},"end":{"line":7,"column":4,"offset":691},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This instruct AutoMapper to check for the option ","position":{"start":{"line":9,"column":1,"offset":693},"end":{"line":9,"column":50,"offset":742},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ConstructServicesUsing","position":{"start":{"line":9,"column":52,"offset":744},"end":{"line":9,"column":74,"offset":766},"indent":[]}}],"position":{"start":{"line":9,"column":50,"offset":742},"end":{"line":9,"column":76,"offset":768},"indent":[]}},{"type":"text","value":" method that can be provided during the mapping instruction.","position":{"start":{"line":9,"column":76,"offset":768},"end":{"line":9,"column":136,"offset":828},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":693},"end":{"line":9,"column":136,"offset":828},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Second, when you are using AutoMapper to map between classes, you must specify every parameters.","position":{"start":{"line":11,"column":1,"offset":830},"end":{"line":11,"column":97,"offset":926},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":830},"end":{"line":11,"column":97,"offset":926},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var model = AutoMapper.Mapper.Map<ContestEditableViewModel, Model.Entities.Contest.Contest>(viewModel , options=>options.ConstructServicesUsing( t=>new Model.Entities.Contest.Contest(yourFirstParameter, yourSecondParameter, /*and so on*/) ) ); ","position":{"start":{"line":14,"column":1,"offset":929},"end":{"line":16,"column":4,"offset":1188},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This way, you can have classes that have parameters and control how to provided them values.","position":{"start":{"line":18,"column":1,"offset":1190},"end":{"line":18,"column":93,"offset":1282},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1190},"end":{"line":18,"column":93,"offset":1282},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"AutoMapper and constructor with parameters\",\"date\":\"2014-05-06\",\"categories\":[\"automapper\"]}","position":{"start":{"line":21,"column":1,"offset":1285},"end":{"line":21,"column":131,"offset":1415},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":131,"offset":1415}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"AutoMapper and constructor with parameters\",\n  \"date\": \"2014-05-06\",\n  \"categories\": [\"automapper\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some use case you are forced to have classes that has \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"constructor with parameters\"), \". This is more rare if you are using Entity Framework (EF) because it requires to have parameterless constructor. However, if the scenario occurs, remember that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AutoMapper\"), \" does not have this constrain. In fact, you can have a private parameterless constructor for Entity Framework (EF) and force the use of a public constructor with parameters when using in your code.\"), mdx(\"p\", null, \"First of all, during the mapping configuration, you must use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ConstructUsingServiceLocator\"), \" method. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" Mapper.CreateMap<ContestEditableViewModel, Model.Entities.Contest.Contest>() .ConstructUsingServiceLocator(); \\n\")), mdx(\"p\", null, \"This instruct AutoMapper to check for the option \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ConstructServicesUsing\"), \" method that can be provided during the mapping instruction.\"), mdx(\"p\", null, \"Second, when you are using AutoMapper to map between classes, you must specify every parameters.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var model = AutoMapper.Mapper.Map<ContestEditableViewModel, Model.Entities.Contest.Contest>(viewModel , options=>options.ConstructServicesUsing( t=>new Model.Entities.Contest.Contest(yourFirstParameter, yourSecondParameter, /*and so on*/) ) ); \\n\")), mdx(\"p\", null, \"This way, you can have classes that have parameters and control how to provided them values.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"AutoMapper and constructor with parameters\",\n  \"date\": \"2014-05-06\",\n  \"categories\": [\"automapper\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In some use case you are forced to have classes that has `}<strong parentName=\"p\">{`constructor with parameters`}</strong>{`. This is more rare if you are using Entity Framework (EF) because it requires to have parameterless constructor. However, if the scenario occurs, remember that `}<strong parentName=\"p\">{`AutoMapper`}</strong>{` does not have this constrain. In fact, you can have a private parameterless constructor for Entity Framework (EF) and force the use of a public constructor with parameters when using in your code.`}</p>\n    <p>{`First of all, during the mapping configuration, you must use `}<strong parentName=\"p\">{`ConstructUsingServiceLocator`}</strong>{` method. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` Mapper.CreateMap<ContestEditableViewModel, Model.Entities.Contest.Contest>() .ConstructUsingServiceLocator(); \n`}</code></pre>\n    <p>{`This instruct AutoMapper to check for the option `}<strong parentName=\"p\">{`ConstructServicesUsing`}</strong>{` method that can be provided during the mapping instruction.`}</p>\n    <p>{`Second, when you are using AutoMapper to map between classes, you must specify every parameters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var model = AutoMapper.Mapper.Map<ContestEditableViewModel, Model.Entities.Contest.Contest>(viewModel , options=>options.ConstructServicesUsing( t=>new Model.Entities.Contest.Contest(yourFirstParameter, yourSecondParameter, /*and so on*/) ) ); \n`}</code></pre>\n    <p>{`This way, you can have classes that have parameters and control how to provided them values.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}