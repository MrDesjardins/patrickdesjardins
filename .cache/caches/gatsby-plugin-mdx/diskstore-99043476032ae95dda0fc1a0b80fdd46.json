{"expireTime":9007200886478397000,"key":"gatsby-plugin-mdx-entire-payload-819dd026f08adfb94f2531682b7fc0a5--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Memorystream","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":15,"offset":15},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17},"indent":[]}},{"type":"text","value":" that is initialized with the constructor that take another stream can raise the exception \"Invalid Operation Exception\".","position":{"start":{"line":2,"column":17,"offset":17},"end":{"line":2,"column":138,"offset":138},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":138,"offset":138},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The proper way to is to use the ","position":{"start":{"line":4,"column":1,"offset":140},"end":{"line":4,"column":33,"offset":172},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Write","position":{"start":{"line":4,"column":35,"offset":174},"end":{"line":4,"column":40,"offset":179},"indent":[]}}],"position":{"start":{"line":4,"column":33,"offset":172},"end":{"line":4,"column":42,"offset":181},"indent":[]}},{"type":"text","value":" property after using the empty constructor.","position":{"start":{"line":4,"column":42,"offset":181},"end":{"line":4,"column":86,"offset":225},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":140},"end":{"line":4,"column":86,"offset":225},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var encoding= new UnicodeEncoding(); Byte[] bytesToCompress = encoding.GetBytes(\"Test123); var streamToCompress = new MemoryStream(); streamToCompress .Write(bytesToCompress, 0, bytesToCompress.Length); ","position":{"start":{"line":7,"column":1,"offset":228},"end":{"line":9,"column":4,"offset":446},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can use Unicode encoding but also UTF8 or any other file encoding available.","position":{"start":{"line":11,"column":1,"offset":448},"end":{"line":11,"column":81,"offset":528},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":448},"end":{"line":11,"column":81,"offset":528},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Memorystream : Invalid Operation Exception\",\"date\":\"2012-06-13\",\"categories\":[\"c-sharp\"]}","position":{"start":{"line":14,"column":1,"offset":531},"end":{"line":14,"column":128,"offset":658},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":128,"offset":658}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Memorystream : Invalid Operation Exception\",\n  \"date\": \"2012-06-13\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Memorystream\"), \" that is initialized with the constructor that take another stream can raise the exception \\\"Invalid Operation Exception\\\".\"), mdx(\"p\", null, \"The proper way to is to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Write\"), \" property after using the empty constructor.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var encoding= new UnicodeEncoding(); Byte[] bytesToCompress = encoding.GetBytes(\\\"Test123); var streamToCompress = new MemoryStream(); streamToCompress .Write(bytesToCompress, 0, bytesToCompress.Length); \\n\")), mdx(\"p\", null, \"You can use Unicode encoding but also UTF8 or any other file encoding available.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Memorystream : Invalid Operation Exception\",\n  \"date\": \"2012-06-13\",\n  \"categories\": [\"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><strong parentName=\"p\">{`Memorystream`}</strong>{` that is initialized with the constructor that take another stream can raise the exception \"Invalid Operation Exception\".`}</p>\n    <p>{`The proper way to is to use the `}<strong parentName=\"p\">{`Write`}</strong>{` property after using the empty constructor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var encoding= new UnicodeEncoding(); Byte[] bytesToCompress = encoding.GetBytes(\"Test123); var streamToCompress = new MemoryStream(); streamToCompress .Write(bytesToCompress, 0, bytesToCompress.Length); \n`}</code></pre>\n    <p>{`You can use Unicode encoding but also UTF8 or any other file encoding available.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}