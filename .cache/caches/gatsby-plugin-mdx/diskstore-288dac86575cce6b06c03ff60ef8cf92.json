{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-14ce3fde66077c2ade8f2389f6423781--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Entity Framework can raise an error concerning a conflict with reference when deleting an entity. One of this error is the following one.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":138,"offset":138},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":138,"offset":138},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The DELETE statement conflicted with the REFERENCE constraint.","position":{"start":{"line":4,"column":3,"offset":142},"end":{"line":4,"column":65,"offset":204},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":142},"end":{"line":4,"column":65,"offset":204},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":140},"end":{"line":4,"column":65,"offset":204},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this issue we need to delete cascade instead of a simple remove. We have seen in a previous post how to use ","position":{"start":{"line":6,"column":1,"offset":206},"end":{"line":6,"column":118,"offset":323},"indent":[]}},{"type":"link","title":null,"url":"./entity-framework-4-3-delete-cascade-with-code-first-poco","children":[{"type":"text","value":"delete in cascade with Entity Framework","position":{"start":{"line":6,"column":119,"offset":324},"end":{"line":6,"column":158,"offset":363},"indent":[]}}],"position":{"start":{"line":6,"column":118,"offset":323},"end":{"line":6,"column":219,"offset":424},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":219,"offset":424},"end":{"line":6,"column":220,"offset":425},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":206},"end":{"line":6,"column":220,"offset":425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In short, you have to specify the many side to the other side (required or optional) and then specify the delete cascade statement with the true parameter.","position":{"start":{"line":8,"column":1,"offset":427},"end":{"line":8,"column":156,"offset":582},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":427},"end":{"line":8,"column":156,"offset":582},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" ...HasMany(e => e.ParentDetails) .WithOptional(s => s.Parent) .WillCascadeOnDelete(true); ","position":{"start":{"line":11,"column":1,"offset":585},"end":{"line":13,"column":4,"offset":690},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework and the error The DELETE statement conflicted with the REFERENCE constraint.\",\"date\":\"2013-02-19\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":16,"column":1,"offset":693},"end":{"line":16,"column":188,"offset":880},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":188,"offset":880}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework and the error The DELETE statement conflicted with the REFERENCE constraint.\",\n  \"date\": \"2013-02-19\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Entity Framework can raise an error concerning a conflict with reference when deleting an entity. One of this error is the following one.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The DELETE statement conflicted with the REFERENCE constraint.\")), mdx(\"p\", null, \"To solve this issue we need to delete cascade instead of a simple remove. We have seen in a previous post how to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./entity-framework-4-3-delete-cascade-with-code-first-poco\"\n  }, \"delete in cascade with Entity Framework\"), \".\"), mdx(\"p\", null, \"In short, you have to specify the many side to the other side (required or optional) and then specify the delete cascade statement with the true parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" ...HasMany(e => e.ParentDetails) .WithOptional(s => s.Parent) .WillCascadeOnDelete(true); \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework and the error The DELETE statement conflicted with the REFERENCE constraint.\",\n  \"date\": \"2013-02-19\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Entity Framework can raise an error concerning a conflict with reference when deleting an entity. One of this error is the following one.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The DELETE statement conflicted with the REFERENCE constraint.`}</p>\n    </blockquote>\n    <p>{`To solve this issue we need to delete cascade instead of a simple remove. We have seen in a previous post how to use `}<a parentName=\"p\" {...{\n        \"href\": \"./entity-framework-4-3-delete-cascade-with-code-first-poco\"\n      }}>{`delete in cascade with Entity Framework`}</a>{`.`}</p>\n    <p>{`In short, you have to specify the many side to the other side (required or optional) and then specify the delete cascade statement with the true parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` ...HasMany(e => e.ParentDetails) .WithOptional(s => s.Parent) .WillCascadeOnDelete(true); \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}