{"expireTime":9007200886478394000,"key":"gatsby-plugin-mdx-entire-payload-7412710c2d3f438a2b58c382663d34a3--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are trying to use a static string in an attribute for an action inside a Asp.Net MVC's controller, you will get a strange error.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":136,"offset":136},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":136,"offset":136},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type","position":{"start":{"line":4,"column":3,"offset":140},"end":{"line":4,"column":133,"offset":270},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":140},"end":{"line":4,"column":133,"offset":270},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":138},"end":{"line":4,"column":133,"offset":270},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is because you are using static string instead of constant.","position":{"start":{"line":6,"column":1,"offset":272},"end":{"line":6,"column":65,"offset":336},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":272},"end":{"line":6,"column":65,"offset":336},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static string AdministratorRole=\"admin\"; ","position":{"start":{"line":9,"column":1,"offset":339},"end":{"line":11,"column":4,"offset":402},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code below works because it's a ","position":{"start":{"line":13,"column":1,"offset":404},"end":{"line":13,"column":37,"offset":440},"indent":[]}},{"type":"inlineCode","value":"public const string","position":{"start":{"line":13,"column":37,"offset":440},"end":{"line":13,"column":58,"offset":461},"indent":[]}},{"type":"text","value":" instead of a public static string.","position":{"start":{"line":13,"column":58,"offset":461},"end":{"line":13,"column":93,"offset":496},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":404},"end":{"line":13,"column":93,"offset":496},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public const string AdministratorRole=\"admin\"; ","position":{"start":{"line":16,"column":1,"offset":499},"end":{"line":18,"column":4,"offset":561},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\",\"date\":\"2012-11-09\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":21,"column":1,"offset":564},"end":{"line":21,"column":216,"offset":779},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":216,"offset":779}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\",\n  \"date\": \"2012-11-09\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are trying to use a static string in an attribute for an action inside a Asp.Net MVC's controller, you will get a strange error.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\")), mdx(\"p\", null, \"This is because you are using static string instead of constant.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static string AdministratorRole=\\\"admin\\\"; \\n\")), mdx(\"p\", null, \"The code below works because it's a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public const string\"), \" instead of a public static string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public const string AdministratorRole=\\\"admin\\\"; \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\",\n  \"date\": \"2012-11-09\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are trying to use a static string in an attribute for an action inside a Asp.Net MVC's controller, you will get a strange error.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type`}</p>\n    </blockquote>\n    <p>{`This is because you are using static string instead of constant.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static string AdministratorRole=\"admin\"; \n`}</code></pre>\n    <p>{`The code below works because it's a `}<inlineCode parentName=\"p\">{`public const string`}</inlineCode>{` instead of a public static string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public const string AdministratorRole=\"admin\"; \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}