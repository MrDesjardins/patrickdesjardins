{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-5f66ff7cc0b900b06d1e4921c7c5e3fc--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Let say that you want to use a JQuery function and do something when this one end. This is possible with callback that most of JQuery function does have. Unfortunatly, you might want to pass data to the call back function when this one may not let you. How to handle this situation? This is what we will see in this short article concerning JQuery and call back function.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":372,"offset":372},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":372,"offset":372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, why would we want to pass information to callback? Couldn't we simply use anonymous function and access data from the outer scope? True, but this may lead to big chunk of code and also cause to repeat code. Let take the following example where an Ajax call is done. We want to hide a division, set the value from the ajax call and then display the division again. But, we may not the division already visible, in this case we just want to set the data and display the division.","position":{"start":{"line":4,"column":1,"offset":374},"end":{"line":4,"column":492,"offset":865},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":374},"end":{"line":4,"column":492,"offset":865},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"$.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150, /*Set data from Ajax call here + Show Division Again*/); } else { /*Set data from Ajax call here + Show Division Again*/ } } }); ","position":{"start":{"line":6,"column":1,"offset":867},"end":{"line":8,"column":5,"offset":1305},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This illustrate the goal of this article. How can you \"set the data from Ajax and show the division\" without having twice the same code. The first reflex may be to create a function but let's write first the code repeated in both place to illustrate a functionnal code that is simply just not optimized.","position":{"start":{"line":11,"column":1,"offset":1308},"end":{"line":11,"column":304,"offset":1611},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1308},"end":{"line":11,"column":304,"offset":1611},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"$.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150, function(){ $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); }); } else { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); } } }); ","position":{"start":{"line":13,"column":1,"offset":1613},"end":{"line":15,"column":5,"offset":2211},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, it's not pretty because we duplicate code but it works.","position":{"start":{"line":18,"column":1,"offset":2214},"end":{"line":18,"column":72,"offset":2285},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":2214},"end":{"line":18,"column":72,"offset":2285},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second step is to create a function but the main problem is that slideUp takes only a call back function that doesn't have any parameter.","position":{"start":{"line":20,"column":1,"offset":2287},"end":{"line":20,"column":142,"offset":2428},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2287},"end":{"line":20,"column":142,"offset":2428},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var showResult = function(resultJson) { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); } $.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150,showResult); } else { showResult(resultJson); } } }); ","position":{"start":{"line":22,"column":1,"offset":2430},"end":{"line":24,"column":5,"offset":2962},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This won't work because we do not pass to showResult method any parameter, and even by writing 'showResult(resultJson)' it won't do much more. In fact, we need to pass a pointer to a function without parameter.","position":{"start":{"line":27,"column":1,"offset":2965},"end":{"line":27,"column":211,"offset":3175},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2965},"end":{"line":27,"column":211,"offset":3175},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var showResult = function(resultJson) { return function() { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); }; }; $.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150,showResult(resultJson)); } else { showResult(resultJson)(); } } }); ","position":{"start":{"line":29,"column":1,"offset":3177},"end":{"line":31,"column":5,"offset":3747},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here you can see multiple modification. First, the function return an other function. This is because we need a parameterless function for the callback. The first method lets you send additionnal information and return a pointer to a method that have access (because of the closure principle of Javascript) to the parameter of the outer function. The second modifification is in the else. You now call the method which take a single parameter but it requires you to call again the return anonymous function. This is why you have 'showResult(resultJson)()';","position":{"start":{"line":34,"column":1,"offset":3750},"end":{"line":34,"column":557,"offset":4306},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3750},"end":{"line":34,"column":557,"offset":4306},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to have a JQuery function using call back with parameter\",\"date\":\"2012-12-21\",\"categories\":[\"javascript\"]}","position":{"start":{"line":37,"column":1,"offset":4309},"end":{"line":37,"column":149,"offset":4457},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":37,"column":149,"offset":4457}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to have a JQuery function using call back with parameter\",\n  \"date\": \"2012-12-21\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let say that you want to use a JQuery function and do something when this one end. This is possible with callback that most of JQuery function does have. Unfortunatly, you might want to pass data to the call back function when this one may not let you. How to handle this situation? This is what we will see in this short article concerning JQuery and call back function.\"), mdx(\"p\", null, \"First of all, why would we want to pass information to callback? Couldn't we simply use anonymous function and access data from the outer scope? True, but this may lead to big chunk of code and also cause to repeat code. Let take the following example where an Ajax call is done. We want to hide a division, set the value from the ajax call and then display the division again. But, we may not the division already visible, in this case we just want to set the data and display the division.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"$.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\\\"#myDivisionWhereTheDataBelong\\\").is(\\\":visible\\\")) { $(\\\"#myDivisionWhereTheDataBelong\\\").slideUp(150, /*Set data from Ajax call here + Show Division Again*/); } else { /*Set data from Ajax call here + Show Division Again*/ } } }); \\n\")), mdx(\"p\", null, \"This illustrate the goal of this article. How can you \\\"set the data from Ajax and show the division\\\" without having twice the same code. The first reflex may be to create a function but let's write first the code repeated in both place to illustrate a functionnal code that is simply just not optimized.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"$.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\\\"#myDivisionWhereTheDataBelong\\\").is(\\\":visible\\\")) { $(\\\"#myDivisionWhereTheDataBelong\\\").slideUp(150, function(){ $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\\\"myDivisionWhereTheDataBelong\\\").slideDown(150); }); } else { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\\\"myDivisionWhereTheDataBelong\\\").slideDown(150); } } }); \\n\")), mdx(\"p\", null, \"As you can see, it's not pretty because we duplicate code but it works.\"), mdx(\"p\", null, \"The second step is to create a function but the main problem is that slideUp takes only a call back function that doesn't have any parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var showResult = function(resultJson) { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\\\"myDivisionWhereTheDataBelong\\\").slideDown(150); } $.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\\\"#myDivisionWhereTheDataBelong\\\").is(\\\":visible\\\")) { $(\\\"#myDivisionWhereTheDataBelong\\\").slideUp(150,showResult); } else { showResult(resultJson); } } }); \\n\")), mdx(\"p\", null, \"This won't work because we do not pass to showResult method any parameter, and even by writing 'showResult(resultJson)' it won't do much more. In fact, we need to pass a pointer to a function without parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var showResult = function(resultJson) { return function() { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\\\"myDivisionWhereTheDataBelong\\\").slideDown(150); }; }; $.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\\\"#myDivisionWhereTheDataBelong\\\").is(\\\":visible\\\")) { $(\\\"#myDivisionWhereTheDataBelong\\\").slideUp(150,showResult(resultJson)); } else { showResult(resultJson)(); } } }); \\n\")), mdx(\"p\", null, \"Here you can see multiple modification. First, the function return an other function. This is because we need a parameterless function for the callback. The first method lets you send additionnal information and return a pointer to a method that have access (because of the closure principle of Javascript) to the parameter of the outer function. The second modifification is in the else. You now call the method which take a single parameter but it requires you to call again the return anonymous function. This is why you have 'showResult(resultJson)()';\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to have a JQuery function using call back with parameter\",\n  \"date\": \"2012-12-21\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Let say that you want to use a JQuery function and do something when this one end. This is possible with callback that most of JQuery function does have. Unfortunatly, you might want to pass data to the call back function when this one may not let you. How to handle this situation? This is what we will see in this short article concerning JQuery and call back function.`}</p>\n    <p>{`First of all, why would we want to pass information to callback? Couldn't we simply use anonymous function and access data from the outer scope? True, but this may lead to big chunk of code and also cause to repeat code. Let take the following example where an Ajax call is done. We want to hide a division, set the value from the ajax call and then display the division again. But, we may not the division already visible, in this case we just want to set the data and display the division.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`$.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150, /*Set data from Ajax call here + Show Division Again*/); } else { /*Set data from Ajax call here + Show Division Again*/ } } }); \n`}</code></pre>\n    <p>{`This illustrate the goal of this article. How can you \"set the data from Ajax and show the division\" without having twice the same code. The first reflex may be to create a function but let's write first the code repeated in both place to illustrate a functionnal code that is simply just not optimized.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`$.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150, function(){ $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); }); } else { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); } } }); \n`}</code></pre>\n    <p>{`As you can see, it's not pretty because we duplicate code but it works.`}</p>\n    <p>{`The second step is to create a function but the main problem is that slideUp takes only a call back function that doesn't have any parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var showResult = function(resultJson) { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); } $.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150,showResult); } else { showResult(resultJson); } } }); \n`}</code></pre>\n    <p>{`This won't work because we do not pass to showResult method any parameter, and even by writing 'showResult(resultJson)' it won't do much more. In fact, we need to pass a pointer to a function without parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var showResult = function(resultJson) { return function() { $('#FormInput1').val(resultJson.Val1); $('#FormInput2').val(resultJson.Val2); $(\"myDivisionWhereTheDataBelong\").slideDown(150); }; }; $.ajax({ type: 'POST', contentType: 'application/json; charset=utf-8', data: /*...*/, dataType: 'json', url: /*...*/, success: function (result) { var resultJson = $.parseJSON(result); if ($(\"#myDivisionWhereTheDataBelong\").is(\":visible\")) { $(\"#myDivisionWhereTheDataBelong\").slideUp(150,showResult(resultJson)); } else { showResult(resultJson)(); } } }); \n`}</code></pre>\n    <p>{`Here you can see multiple modification. First, the function return an other function. This is because we need a parameterless function for the callback. The first method lets you send additionnal information and return a pointer to a method that have access (because of the closure principle of Javascript) to the parameter of the outer function. The second modifification is in the else. You now call the method which take a single parameter but it requires you to call again the return anonymous function. This is why you have 'showResult(resultJson)()';`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}