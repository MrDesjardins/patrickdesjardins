{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-441503e45195c6668dfbeb9cba665274--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When you want to load a specific resource like a Javascript file or a CSS file depending of a view, you can use a ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":115,"offset":115},"indent":[]}},{"type":"link","title":null,"url":"./how-to-add-javascript-and-css-dynamically-to-your-view-with-asp-net-mvc4","children":[{"type":"text","value":"RenderSection","position":{"start":{"line":2,"column":116,"offset":116},"end":{"line":2,"column":129,"offset":129},"indent":[]}}],"position":{"start":{"line":2,"column":115,"offset":115},"end":{"line":2,"column":206,"offset":206},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":206,"offset":206},"end":{"line":2,"column":207,"offset":207},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":207,"offset":207},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On the other hand, if you always want to load this Javascript file (or CSS) but not in some folder, how can you do it? This can be resolved by using_ViewStart.cshtml file. Every folders can have a defined_ViewStart.cshtml which allow you to choose which Layout to use.","position":{"start":{"line":4,"column":1,"offset":209},"end":{"line":4,"column":269,"offset":477},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":209},"end":{"line":4,"column":269,"offset":477},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" @{ Layout = \"~/Views/Shared/_MasterPage.cshtml\"; } ","position":{"start":{"line":7,"column":1,"offset":480},"end":{"line":9,"column":4,"offset":546},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is an example of a_ViewStart.cshtml page that define the Layout. If you are using Area within your application, you can have an Area which doesn't use the same Layout. This can be defined by adding this file to the folder of your views and you change the Layout. It can be at the root of the Area's view folder or directly into the folder of a specific view. Asp.Net MVC will execute ALL_ViewStart.cshtml from the root to the view. That mean that if you define something at the root, this will remain if not overwritten. It work's fine with the Layout property which can be redefined in a folder which will override the default_ViewStart.cshtml value.","position":{"start":{"line":11,"column":1,"offset":548},"end":{"line":11,"column":657,"offset":1204},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":548},"end":{"line":11,"column":657,"offset":1204},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, if you want to load a Javascript file for all view except one Area, you cannot do :","position":{"start":{"line":13,"column":1,"offset":1206},"end":{"line":13,"column":88,"offset":1293},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1206},"end":{"line":13,"column":88,"offset":1293},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" //_ViewStart.cshtml : At the root for every views @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; <script src=\"@Url.Content(\"~/Scripts/myFile.js\")\" type=\"text/javascript\" > </script> } ","position":{"start":{"line":16,"column":1,"offset":1296},"end":{"line":18,"column":5,"offset":1494},"indent":[1,1]}},{"type":"code","lang":"csharp","meta":null,"value":" //_ViewStart.cshtml : Inside the View directory of the Area @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; } \n``` This won't work because the_ViewStart.cshtml will be executed first and add the script.\n\nTo solve this issue you can use TempData.\n\n\n```csharp\n //_ViewStart.cshtml : At the root for every views @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; ViewContext.TempData.Add(\"MyFileKey\", @Url.Content(\"~/Scripts/MyFile.js\")); } ","position":{"start":{"line":19,"column":1,"offset":1495},"end":{"line":28,"column":5,"offset":1940},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"csharp","meta":null,"value":" //_ViewStart.cshtml : Inside the View directory of the Area @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; ViewContext.TempData.Remove(\"MyFileKey\"); } ","position":{"start":{"line":29,"column":1,"offset":1941},"end":{"line":31,"column":4,"offset":2105},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This require you to modify the Layout also : ","position":{"start":{"line":33,"column":1,"offset":2107},"end":{"line":33,"column":46,"offset":2152},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2107},"end":{"line":33,"column":46,"offset":2152},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" <head> ... @if(ViewContext.TempData.ContainsKey(\"MyFileKey\")) { <script src=\"@ViewContext.TempData[\"MyFileKey\"]\" type=\"text/javascript\" > </script> } ... </head> ","position":{"start":{"line":34,"column":1,"offset":2153},"end":{"line":36,"column":4,"offset":2330},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's it. You have now the Javascript file loaded for the whole application except those areas where it removes it from the TempData. Of course, a even better solution would be to use an object that can have multiple resources which are then handled in the Layout. The goal here is just to show you a way to handle Javascript and CSS file with the perspective of Area where this one remove additionnal resource.","position":{"start":{"line":38,"column":1,"offset":2332},"end":{"line":38,"column":413,"offset":2744},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2332},"end":{"line":38,"column":413,"offset":2744},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to load Javascript for the whole application except few folders or area?\",\"date\":\"2012-12-27\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":41,"column":1,"offset":2747},"end":{"line":41,"column":162,"offset":2908},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":162,"offset":2908}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to load Javascript for the whole application except few folders or area?\",\n  \"date\": \"2012-12-27\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you want to load a specific resource like a Javascript file or a CSS file depending of a view, you can use a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./how-to-add-javascript-and-css-dynamically-to-your-view-with-asp-net-mvc4\"\n  }, \"RenderSection\"), \".\"), mdx(\"p\", null, \"On the other hand, if you always want to load this Javascript file (or CSS) but not in some folder, how can you do it? This can be resolved by using_ViewStart.cshtml file. Every folders can have a defined_ViewStart.cshtml which allow you to choose which Layout to use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @{ Layout = \\\"~/Views/Shared/_MasterPage.cshtml\\\"; } \\n\")), mdx(\"p\", null, \"This is an example of a_ViewStart.cshtml page that define the Layout. If you are using Area within your application, you can have an Area which doesn't use the same Layout. This can be defined by adding this file to the folder of your views and you change the Layout. It can be at the root of the Area's view folder or directly into the folder of a specific view. Asp.Net MVC will execute ALL_ViewStart.cshtml from the root to the view. That mean that if you define something at the root, this will remain if not overwritten. It work's fine with the Layout property which can be redefined in a folder which will override the default_ViewStart.cshtml value.\"), mdx(\"p\", null, \"So, if you want to load a Javascript file for all view except one Area, you cannot do :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" //_ViewStart.cshtml : At the root for every views @{ Layout = \\\"~/Views/Shared/_Layout.cshtml\\\"; <script src=\\\"@Url.Content(\\\"~/Scripts/myFile.js\\\")\\\" type=\\\"text/javascript\\\" > </script> } \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" //_ViewStart.cshtml : Inside the View directory of the Area @{ Layout = \\\"~/Views/Shared/_Layout.cshtml\\\"; } \\n``` This won't work because the_ViewStart.cshtml will be executed first and add the script.\\n\\nTo solve this issue you can use TempData.\\n\\n\\n```csharp\\n //_ViewStart.cshtml : At the root for every views @{ Layout = \\\"~/Views/Shared/_Layout.cshtml\\\"; ViewContext.TempData.Add(\\\"MyFileKey\\\", @Url.Content(\\\"~/Scripts/MyFile.js\\\")); } \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" //_ViewStart.cshtml : Inside the View directory of the Area @{ Layout = \\\"~/Views/Shared/_Layout.cshtml\\\"; ViewContext.TempData.Remove(\\\"MyFileKey\\\"); } \\n\")), mdx(\"p\", null, \"This require you to modify the Layout also : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" <head> ... @if(ViewContext.TempData.ContainsKey(\\\"MyFileKey\\\")) { <script src=\\\"@ViewContext.TempData[\\\"MyFileKey\\\"]\\\" type=\\\"text/javascript\\\" > </script> } ... </head> \\n\")), mdx(\"p\", null, \"That's it. You have now the Javascript file loaded for the whole application except those areas where it removes it from the TempData. Of course, a even better solution would be to use an object that can have multiple resources which are then handled in the Layout. The goal here is just to show you a way to handle Javascript and CSS file with the perspective of Area where this one remove additionnal resource.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to load Javascript for the whole application except few folders or area?\",\n  \"date\": \"2012-12-27\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When you want to load a specific resource like a Javascript file or a CSS file depending of a view, you can use a `}<a parentName=\"p\" {...{\n        \"href\": \"./how-to-add-javascript-and-css-dynamically-to-your-view-with-asp-net-mvc4\"\n      }}>{`RenderSection`}</a>{`.`}</p>\n    <p>{`On the other hand, if you always want to load this Javascript file (or CSS) but not in some folder, how can you do it? This can be resolved by using_ViewStart.cshtml file. Every folders can have a defined_ViewStart.cshtml which allow you to choose which Layout to use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` @{ Layout = \"~/Views/Shared/_MasterPage.cshtml\"; } \n`}</code></pre>\n    <p>{`This is an example of a_ViewStart.cshtml page that define the Layout. If you are using Area within your application, you can have an Area which doesn't use the same Layout. This can be defined by adding this file to the folder of your views and you change the Layout. It can be at the root of the Area's view folder or directly into the folder of a specific view. Asp.Net MVC will execute ALL_ViewStart.cshtml from the root to the view. That mean that if you define something at the root, this will remain if not overwritten. It work's fine with the Layout property which can be redefined in a folder which will override the default_ViewStart.cshtml value.`}</p>\n    <p>{`So, if you want to load a Javascript file for all view except one Area, you cannot do :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` //_ViewStart.cshtml : At the root for every views @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; <script src=\"@Url.Content(\"~/Scripts/myFile.js\")\" type=\"text/javascript\" > </script> } \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` //_ViewStart.cshtml : Inside the View directory of the Area @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; } \n\\`\\`\\` This won't work because the_ViewStart.cshtml will be executed first and add the script.\n\nTo solve this issue you can use TempData.\n\n\n\\`\\`\\`csharp\n //_ViewStart.cshtml : At the root for every views @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; ViewContext.TempData.Add(\"MyFileKey\", @Url.Content(\"~/Scripts/MyFile.js\")); } \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` //_ViewStart.cshtml : Inside the View directory of the Area @{ Layout = \"~/Views/Shared/_Layout.cshtml\"; ViewContext.TempData.Remove(\"MyFileKey\"); } \n`}</code></pre>\n    <p>{`This require you to modify the Layout also : `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` <head> ... @if(ViewContext.TempData.ContainsKey(\"MyFileKey\")) { <script src=\"@ViewContext.TempData[\"MyFileKey\"]\" type=\"text/javascript\" > </script> } ... </head> \n`}</code></pre>\n    <p>{`That's it. You have now the Javascript file loaded for the whole application except those areas where it removes it from the TempData. Of course, a even better solution would be to use an object that can have multiple resources which are then handled in the Layout. The goal here is just to show you a way to handle Javascript and CSS file with the perspective of Area where this one remove additionnal resource.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}