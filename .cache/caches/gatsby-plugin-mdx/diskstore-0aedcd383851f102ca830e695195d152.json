{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-97012b2206413f6ecfcef104fa98b384--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I see often people using substring to remove the last character if this one is a slash in a path or url. This can if misused lead to an error because maybe the string is empty and doesn't have count()-1 over 0.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":211,"offset":211},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":211,"offset":211},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, this require to have a conditional statement to verify if the string contain at its latest position a slash.","position":{"start":{"line":4,"column":1,"offset":213},"end":{"line":4,"column":115,"offset":327},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":213},"end":{"line":4,"column":115,"offset":327},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A cleaner way to proceed with this kind of string clean up it's to use the TRIM function of the string. The method TrimEnd let you specify an array of char that you want to remove at the end of the specified string.","position":{"start":{"line":6,"column":1,"offset":329},"end":{"line":6,"column":216,"offset":544},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":329},"end":{"line":6,"column":216,"offset":544},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example:","position":{"start":{"line":8,"column":1,"offset":546},"end":{"line":8,"column":20,"offset":565},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":546},"end":{"line":8,"column":20,"offset":565},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string fileName = \"Test/\"; fileName= fileName.TrimEnd(new[] { '/' }); ","position":{"start":{"line":11,"column":1,"offset":568},"end":{"line":13,"column":4,"offset":653},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With this method you can also specify multiple characters so you may want to remove all slash or backslash using the array.","position":{"start":{"line":15,"column":1,"offset":655},"end":{"line":15,"column":124,"offset":778},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":655},"end":{"line":15,"column":124,"offset":778},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string fileName = \"Test\\\\\\\\\"; fileName= fileName.TrimEnd(new[] { '/', '\\\\\\\\' }); ","position":{"start":{"line":18,"column":1,"offset":781},"end":{"line":20,"column":4,"offset":877},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Do not forget that this method will trim more than only the last character but all ending characters. This mean that a string ending with two slashes will see both slashes removed. I think it's even better!","position":{"start":{"line":22,"column":1,"offset":879},"end":{"line":22,"column":207,"offset":1085},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":879},"end":{"line":22,"column":207,"offset":1085},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to remove trailing slash in C#\",\"date\":\"2012-06-26\",\"categories\":[\"c-sharp\"]}","position":{"start":{"line":25,"column":1,"offset":1088},"end":{"line":25,"column":120,"offset":1207},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":25,"column":120,"offset":1207}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to remove trailing slash in C#\",\n  \"date\": \"2012-06-26\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I see often people using substring to remove the last character if this one is a slash in a path or url. This can if misused lead to an error because maybe the string is empty and doesn't have count()-1 over 0.\"), mdx(\"p\", null, \"Also, this require to have a conditional statement to verify if the string contain at its latest position a slash.\"), mdx(\"p\", null, \"A cleaner way to proceed with this kind of string clean up it's to use the TRIM function of the string. The method TrimEnd let you specify an array of char that you want to remove at the end of the specified string.\"), mdx(\"p\", null, \"Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string fileName = \\\"Test/\\\"; fileName= fileName.TrimEnd(new[] { '/' }); \\n\")), mdx(\"p\", null, \"With this method you can also specify multiple characters so you may want to remove all slash or backslash using the array.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string fileName = \\\"Test\\\\\\\\\\\\\\\\\\\"; fileName= fileName.TrimEnd(new[] { '/', '\\\\\\\\\\\\\\\\' }); \\n\")), mdx(\"p\", null, \"Do not forget that this method will trim more than only the last character but all ending characters. This mean that a string ending with two slashes will see both slashes removed. I think it's even better!\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to remove trailing slash in C#\",\n  \"date\": \"2012-06-26\",\n  \"categories\": [\"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`I see often people using substring to remove the last character if this one is a slash in a path or url. This can if misused lead to an error because maybe the string is empty and doesn't have count()-1 over 0.`}</p>\n    <p>{`Also, this require to have a conditional statement to verify if the string contain at its latest position a slash.`}</p>\n    <p>{`A cleaner way to proceed with this kind of string clean up it's to use the TRIM function of the string. The method TrimEnd let you specify an array of char that you want to remove at the end of the specified string.`}</p>\n    <p>{`Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string fileName = \"Test/\"; fileName= fileName.TrimEnd(new[] { '/' }); \n`}</code></pre>\n    <p>{`With this method you can also specify multiple characters so you may want to remove all slash or backslash using the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string fileName = \"Test\\\\\\\\\\\\\\\\\"; fileName= fileName.TrimEnd(new[] { '/', '\\\\\\\\\\\\\\\\' }); \n`}</code></pre>\n    <p>{`Do not forget that this method will trim more than only the last character but all ending characters. This mean that a string ending with two slashes will see both slashes removed. I think it's even better!`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}