{"expireTime":9007200886478390000,"key":"gatsby-plugin-mdx-entire-payload-84b34a8f2dab8e6c02bf61947eca47be--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You can define templates in the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":33,"offset":33},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DisplayTemplates","position":{"start":{"line":2,"column":35,"offset":35},"end":{"line":2,"column":51,"offset":51},"indent":[]}}],"position":{"start":{"line":2,"column":33,"offset":33},"end":{"line":2,"column":53,"offset":53},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":2,"column":53,"offset":53},"end":{"line":2,"column":58,"offset":58},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"EditorTemplates","position":{"start":{"line":2,"column":60,"offset":60},"end":{"line":2,"column":75,"offset":75},"indent":[]}}],"position":{"start":{"line":2,"column":58,"offset":58},"end":{"line":2,"column":77,"offset":77},"indent":[]}},{"type":"text","value":". If you define one template for integer your can have an error saying that the model item require a string.","position":{"start":{"line":2,"column":77,"offset":77},"end":{"line":2,"column":185,"offset":185},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":185,"offset":185},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The model item passed into the dictionary is of type 'System.Int32', but this dictionary requires a model item of type 'System.String'","position":{"start":{"line":4,"column":3,"offset":189},"end":{"line":4,"column":137,"offset":323},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":189},"end":{"line":4,"column":137,"offset":323},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":4,"column":137,"offset":323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This error occurs if you name the template int.cshtml or integer.cshtml. Even if you have defined the ","position":{"start":{"line":6,"column":1,"offset":325},"end":{"line":6,"column":103,"offset":427},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"@model int","position":{"start":{"line":6,"column":104,"offset":428},"end":{"line":6,"column":114,"offset":438},"indent":[]}}],"position":{"start":{"line":6,"column":103,"offset":427},"end":{"line":6,"column":115,"offset":439},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":6,"column":115,"offset":439},"end":{"line":6,"column":119,"offset":443},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"@model int?","position":{"start":{"line":6,"column":120,"offset":444},"end":{"line":6,"column":131,"offset":455},"indent":[]}}],"position":{"start":{"line":6,"column":119,"offset":443},"end":{"line":6,"column":132,"offset":456},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":132,"offset":456},"end":{"line":6,"column":133,"offset":457},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":325},"end":{"line":6,"column":133,"offset":457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution is to name the file ","position":{"start":{"line":8,"column":1,"offset":459},"end":{"line":8,"column":34,"offset":492},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Int32.cshtml","position":{"start":{"line":8,"column":36,"offset":494},"end":{"line":8,"column":48,"offset":506},"indent":[]}}],"position":{"start":{"line":8,"column":34,"offset":492},"end":{"line":8,"column":50,"offset":508},"indent":[]}},{"type":"text","value":". CLR type name are used and not C# alias.","position":{"start":{"line":8,"column":50,"offset":508},"end":{"line":8,"column":92,"offset":550},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":459},"end":{"line":8,"column":92,"offset":550},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another detail important to remember is that if you want to have ","position":{"start":{"line":10,"column":1,"offset":552},"end":{"line":10,"column":66,"offset":617},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"integer","position":{"start":{"line":10,"column":68,"offset":619},"end":{"line":10,"column":75,"offset":626},"indent":[]}}],"position":{"start":{"line":10,"column":66,"offset":617},"end":{"line":10,"column":77,"offset":628},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":10,"column":77,"offset":628},"end":{"line":10,"column":82,"offset":633},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"nullable integer","position":{"start":{"line":10,"column":84,"offset":635},"end":{"line":10,"column":100,"offset":651},"indent":[]}}],"position":{"start":{"line":10,"column":82,"offset":633},"end":{"line":10,"column":102,"offset":653},"indent":[]}},{"type":"text","value":" you can only do it withing one template. So, always define the type with its nullable type. For example, the integer should be in the file Int32.cshtml and the template could be something like this (for DisplayTemplate):","position":{"start":{"line":10,"column":102,"offset":653},"end":{"line":10,"column":323,"offset":874},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":552},"end":{"line":10,"column":323,"offset":874},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" @model int? @if (Model.HasValue) { @Html.Raw(Model) } else { @:- } ","position":{"start":{"line":13,"column":1,"offset":877},"end":{"line":15,"column":4,"offset":959},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Integer DisplayTemplates, EditorTemplates and Nullable Value\",\"date\":\"2014-06-10\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":18,"column":1,"offset":962},"end":{"line":18,"column":146,"offset":1107},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":146,"offset":1107}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Integer DisplayTemplates, EditorTemplates and Nullable Value\",\n  \"date\": \"2014-06-10\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can define templates in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DisplayTemplates\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"EditorTemplates\"), \". If you define one template for integer your can have an error saying that the model item require a string.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The model item passed into the dictionary is of type 'System.Int32', but this dictionary requires a model item of type 'System.String'\")), mdx(\"p\", null, \"This error occurs if you name the template int.cshtml or integer.cshtml. Even if you have defined the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"@model int\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"@model int?\"), \".\"), mdx(\"p\", null, \"The solution is to name the file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Int32.cshtml\"), \". CLR type name are used and not C# alias.\"), mdx(\"p\", null, \"Another detail important to remember is that if you want to have \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"integer\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nullable integer\"), \" you can only do it withing one template. So, always define the type with its nullable type. For example, the integer should be in the file Int32.cshtml and the template could be something like this (for DisplayTemplate):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @model int? @if (Model.HasValue) { @Html.Raw(Model) } else { @:- } \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Integer DisplayTemplates, EditorTemplates and Nullable Value\",\n  \"date\": \"2014-06-10\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You can define templates in the `}<strong parentName=\"p\">{`DisplayTemplates`}</strong>{` and `}<strong parentName=\"p\">{`EditorTemplates`}</strong>{`. If you define one template for integer your can have an error saying that the model item require a string.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The model item passed into the dictionary is of type 'System.Int32', but this dictionary requires a model item of type 'System.String'`}</p>\n    </blockquote>\n    <p>{`This error occurs if you name the template int.cshtml or integer.cshtml. Even if you have defined the `}<em parentName=\"p\">{`@model int`}</em>{` or `}<em parentName=\"p\">{`@model int?`}</em>{`.`}</p>\n    <p>{`The solution is to name the file `}<strong parentName=\"p\">{`Int32.cshtml`}</strong>{`. CLR type name are used and not C# alias.`}</p>\n    <p>{`Another detail important to remember is that if you want to have `}<strong parentName=\"p\">{`integer`}</strong>{` and `}<strong parentName=\"p\">{`nullable integer`}</strong>{` you can only do it withing one template. So, always define the type with its nullable type. For example, the integer should be in the file Int32.cshtml and the template could be something like this (for DisplayTemplate):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` @model int? @if (Model.HasValue) { @Html.Raw(Model) } else { @:- } \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}