{"expireTime":9007200886478397000,"key":"gatsby-plugin-mdx-entire-payload-89cf0a83e5ef18748a490ab7570ee292--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"JQuery provide good examples concerning adding event to an Html Dom object dynamically. This mean that event if the Dom doesn't exist, when the event is attached, that the event will be hooked when the Html Dom object. The methodology of this thinking has changed since Jquery version 1.3. At first, we had to use the live method.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":331,"offset":331},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":331,"offset":331},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$(\"a.offsite\").live(\"click\", function(){ alert(\"Goodbye!\"); }); // jQuery 1.3+ ","position":{"start":{"line":4,"column":1,"offset":333},"end":{"line":6,"column":5,"offset":431},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the version 1.4.3, we could have used the delegate function. ```typescript\n$(document).delegate(\"a.offsite\", \"click\", function(){ alert(\"Goodbye!\"); }); // jQuery 1.4.3+ ","position":{"start":{"line":9,"column":1,"offset":434},"end":{"line":10,"column":96,"offset":607},"indent":[1]}}],"position":{"start":{"line":9,"column":1,"offset":434},"end":{"line":10,"column":96,"offset":607},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":" But now, to reduce the confusion between all the function to attach event (bind(), live(), delegate()) to Html Dom object, we simply use the ON function. ```typescript\n$(document).on(\"click\", \"a.offsite\", function(){ alert(\"Goodbye!\"); }); // jQuery 1.7+ ","position":{"start":{"line":11,"column":1,"offset":608},"end":{"line":14,"column":5,"offset":874},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, since the .on() function is called from the $(document) this will listen every html that change to hook the function if the selector match.","position":{"start":{"line":17,"column":1,"offset":877},"end":{"line":17,"column":157,"offset":1033},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":877},"end":{"line":17,"column":157,"offset":1033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The syntax of the on function in Jquery is : ```typescript\n.on( events ","position":{"start":{"line":19,"column":1,"offset":1035},"end":{"line":20,"column":13,"offset":1106},"indent":[1]}},{"type":"linkReference","identifier":", data","label":", data","referenceType":"full","children":[{"type":"text","value":", selector","position":{"start":{"line":20,"column":14,"offset":1107},"end":{"line":20,"column":24,"offset":1117},"indent":[]}}],"position":{"start":{"line":20,"column":13,"offset":1106},"end":{"line":20,"column":34,"offset":1127},"indent":[]}},{"type":"text","value":", handler(eventObject) ) or .on( events-map ","position":{"start":{"line":20,"column":34,"offset":1127},"end":{"line":20,"column":78,"offset":1171},"indent":[]}},{"type":"linkReference","identifier":", data","label":", data","referenceType":"full","children":[{"type":"text","value":", selector","position":{"start":{"line":20,"column":79,"offset":1172},"end":{"line":20,"column":89,"offset":1182},"indent":[]}}],"position":{"start":{"line":20,"column":78,"offset":1171},"end":{"line":20,"column":99,"offset":1192},"indent":[]}},{"type":"text","value":" ) ","position":{"start":{"line":20,"column":99,"offset":1192},"end":{"line":20,"column":102,"offset":1195},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1035},"end":{"line":20,"column":102,"offset":1195},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":" This mean that you first select the event you want to add, then the selector in the Jquery syntax and finallywhat you want to hook to.\n\nBut you are not limited to listen every thing on the web page. This is usefull is you load content from Ajax but if you want to add an event only on a specify part of the page you can specify it instead of document and add the event.\n\n```typescript\n$(\"#myTable tr\").on(\"click\", function(event){ alert($(this).text()); }); ","position":{"start":{"line":21,"column":1,"offset":1196},"end":{"line":28,"column":5,"offset":1665},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will add to every line of the myTable the possibility to click. If you want to have new line (Javascript added tr) of this grid to be automatically bound to the click event, you need to change the above code to setup the onclick on the table.","position":{"start":{"line":31,"column":1,"offset":1668},"end":{"line":31,"column":248,"offset":1915},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1668},"end":{"line":31,"column":248,"offset":1915},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$(\"#myTable\").on(\"click\", \"tr\", function(event){ alert($(this).text()); }); ","position":{"start":{"line":33,"column":1,"offset":1917},"end":{"line":35,"column":5,"offset":2012},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":" This way, it bubbles up to the myTable, which is always available and the click will occur.","position":{"start":{"line":36,"column":1,"offset":2013},"end":{"line":36,"column":93,"offset":2105},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2013},"end":{"line":36,"column":93,"offset":2105},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Watch out with attaching from the document. Attaching many delegated event handlers near the top of the document tree can degrade performance rapidly. This is even more true with event like mousemouve that is called a lot of time consequently.","position":{"start":{"line":38,"column":1,"offset":2107},"end":{"line":38,"column":244,"offset":2350},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2107},"end":{"line":38,"column":244,"offset":2350},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JQuery .on() function\",\"date\":\"2012-06-17\",\"categories\":[\"javascript\"]}","position":{"start":{"line":41,"column":1,"offset":2353},"end":{"line":41,"column":110,"offset":2462},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":110,"offset":2462}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JQuery .on() function\",\n  \"date\": \"2012-06-17\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JQuery provide good examples concerning adding event to an Html Dom object dynamically. This mean that event if the Dom doesn't exist, when the event is attached, that the event will be hooked when the Html Dom object. The methodology of this thinking has changed since Jquery version 1.3. At first, we had to use the live method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"a.offsite\\\").live(\\\"click\\\", function(){ alert(\\\"Goodbye!\\\"); }); // jQuery 1.3+ \\n\")), mdx(\"p\", null, \"In the version 1.4.3, we could have used the delegate function. ```typescript\\n$(document).delegate(\\\"a.offsite\\\", \\\"click\\\", function(){ alert(\\\"Goodbye!\\\"); }); // jQuery 1.4.3+ \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" But now, to reduce the confusion between all the function to attach event (bind(), live(), delegate()) to Html Dom object, we simply use the ON function. ```typescript\\n$(document).on(\\\"click\\\", \\\"a.offsite\\\", function(){ alert(\\\"Goodbye!\\\"); }); // jQuery 1.7+ \\n\")), mdx(\"p\", null, \"In this example, since the .on() function is called from the $(document) this will listen every html that change to hook the function if the selector match.\"), mdx(\"p\", null, \"The syntax of the on function in Jquery is : ```typescript\\n.on( events \", \"[, selector][, data]\", \", handler(eventObject) ) or .on( events-map \", \"[, selector][, data]\", \" ) \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" This mean that you first select the event you want to add, then the selector in the Jquery syntax and finallywhat you want to hook to.\\n\\nBut you are not limited to listen every thing on the web page. This is usefull is you load content from Ajax but if you want to add an event only on a specify part of the page you can specify it instead of document and add the event.\\n\\n```typescript\\n$(\\\"#myTable tr\\\").on(\\\"click\\\", function(event){ alert($(this).text()); }); \\n\")), mdx(\"p\", null, \"This will add to every line of the myTable the possibility to click. If you want to have new line (Javascript added tr) of this grid to be automatically bound to the click event, you need to change the above code to setup the onclick on the table.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"#myTable\\\").on(\\\"click\\\", \\\"tr\\\", function(event){ alert($(this).text()); }); \\n\")), mdx(\"p\", null, \" This way, it bubbles up to the myTable, which is always available and the click will occur.\"), mdx(\"p\", null, \"Watch out with attaching from the document. Attaching many delegated event handlers near the top of the document tree can degrade performance rapidly. This is even more true with event like mousemouve that is called a lot of time consequently.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JQuery .on() function\",\n  \"date\": \"2012-06-17\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`JQuery provide good examples concerning adding event to an Html Dom object dynamically. This mean that event if the Dom doesn't exist, when the event is attached, that the event will be hooked when the Html Dom object. The methodology of this thinking has changed since Jquery version 1.3. At first, we had to use the live method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$(\"a.offsite\").live(\"click\", function(){ alert(\"Goodbye!\"); }); // jQuery 1.3+ \n`}</code></pre>\n    <p>{`In the version 1.4.3, we could have used the delegate function. \\`\\`\\`typescript\n$(document).delegate(\"a.offsite\", \"click\", function(){ alert(\"Goodbye!\"); }); // jQuery 1.4.3+ `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` But now, to reduce the confusion between all the function to attach event (bind(), live(), delegate()) to Html Dom object, we simply use the ON function. \\`\\`\\`typescript\n$(document).on(\"click\", \"a.offsite\", function(){ alert(\"Goodbye!\"); }); // jQuery 1.7+ \n`}</code></pre>\n    <p>{`In this example, since the .on() function is called from the $(document) this will listen every html that change to hook the function if the selector match.`}</p>\n    <p>{`The syntax of the on function in Jquery is : \\`\\`\\`typescript\n.on( events `}{`[, selector][, data]`}{`, handler(eventObject) ) or .on( events-map `}{`[, selector][, data]`}{` ) `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` This mean that you first select the event you want to add, then the selector in the Jquery syntax and finallywhat you want to hook to.\n\nBut you are not limited to listen every thing on the web page. This is usefull is you load content from Ajax but if you want to add an event only on a specify part of the page you can specify it instead of document and add the event.\n\n\\`\\`\\`typescript\n$(\"#myTable tr\").on(\"click\", function(event){ alert($(this).text()); }); \n`}</code></pre>\n    <p>{`This will add to every line of the myTable the possibility to click. If you want to have new line (Javascript added tr) of this grid to be automatically bound to the click event, you need to change the above code to setup the onclick on the table.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$(\"#myTable\").on(\"click\", \"tr\", function(event){ alert($(this).text()); }); \n`}</code></pre>\n    <p>{` This way, it bubbles up to the myTable, which is always available and the click will occur.`}</p>\n    <p>{`Watch out with attaching from the document. Attaching many delegated event handlers near the top of the document tree can degrade performance rapidly. This is even more true with event like mousemouve that is called a lot of time consequently.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}