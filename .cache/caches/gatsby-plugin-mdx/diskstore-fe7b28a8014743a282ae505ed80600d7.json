{"expireTime":9007200886478384000,"key":"gatsby-plugin-mdx-entire-payload-c33272712cd41a680c075d7f21efb5da--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Dragging element is possible through different library. One option that has been around for more than 8 years is JQuery UI. It comes with different API : ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":155,"offset":155},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Droppable, Draggable and Sortable","position":{"start":{"line":2,"column":157,"offset":157},"end":{"line":2,"column":190,"offset":190},"indent":[]}}],"position":{"start":{"line":2,"column":155,"offset":155},"end":{"line":2,"column":192,"offset":192},"indent":[]}},{"type":"text","value":" which allow you to click an Html element and move it around with some restriction that you configure. Few months ago, we needed to have dragging capability with out React page. Initially, we though to use Html5 but we the experience was different between browsers in term of dragging experience. There is some nice well build third party library but we also had the constraint of bringing new library in with all the trouble of handling licencing which become fast a nightmare with today's library that have a lot of dependencies. We ended up to use JQuery UI, which the product already have.","position":{"start":{"line":2,"column":192,"offset":192},"end":{"line":2,"column":785,"offset":785},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":785,"offset":785},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The problem with JQuery UI and React is that the modification done by JQuery is done to the Dom element and not the React's component. That means that when an event is raised about something being dragged or dropped, the component doesn't render. The consequence is that if you do something to re-render your component that the change made to the Html Dom by JQuery will be overridden.","position":{"start":{"line":4,"column":1,"offset":787},"end":{"line":4,"column":386,"offset":1172},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":787},"end":{"line":4,"column":386,"offset":1172},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution is that when JQuery UI drop the element at its new position to tell JQuery UI to cancel the move and have the React component to render its elements with with the new position. In practice, the user won't notice because it is very fast.","position":{"start":{"line":6,"column":1,"offset":1174},"end":{"line":6,"column":250,"offset":1423},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1174},"end":{"line":6,"column":250,"offset":1423},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some quick pointers: 1- On the stop of the drag, listen the stop event which take JQueryEventObject and JQueryUI.SortableUIParams as parameter. This can be done when your component is mounted or dynamically when you need after the component is mounted. It's important that the component it's mounted because you need to access the rendered Dom element by refs.","position":{"start":{"line":8,"column":1,"offset":1425},"end":{"line":8,"column":361,"offset":1785},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1425},"end":{"line":8,"column":361,"offset":1785},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"public componentDidMount() { const $element= $(this.refs.dom); const options = { update: (e: JQueryEventObject, ui: JQueryUI.SortableUIParams) => { this.onUpdate(e, ui) }, } as JQueryUI.SortableOptions; $element.sortable(options); } ","position":{"start":{"line":10,"column":1,"offset":1787},"end":{"line":12,"column":5,"offset":2039},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"2- On the onUpdate, cancel the drag. This can be done by getting using the ","position":{"start":{"line":15,"column":1,"offset":2042},"end":{"line":15,"column":76,"offset":2117},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"sortable","position":{"start":{"line":15,"column":78,"offset":2119},"end":{"line":15,"column":86,"offset":2127},"indent":[]}}],"position":{"start":{"line":15,"column":76,"offset":2117},"end":{"line":15,"column":88,"offset":2129},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":15,"column":88,"offset":2129},"end":{"line":15,"column":96,"offset":2137},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":2042},"end":{"line":15,"column":96,"offset":2137},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"private onUpdate(e: JQueryEventObject, ui: JQueryUI.SortableUIParams): void { const $element= $(this.refs.dom); $element.sortable(\"cancel\"); //Step 3 goes here } ","position":{"start":{"line":17,"column":1,"offset":2139},"end":{"line":19,"column":5,"offset":2320},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"3- The last step is to get React render your list again with the new position. This can be done by setting a state, calling a property callback or directly calling the action creator to have this one set the new position in the store to kick a new round of render. At that step, you need to send the all the items or the items that got moved.","position":{"start":{"line":22,"column":1,"offset":2323},"end":{"line":22,"column":343,"offset":2665},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2323},"end":{"line":22,"column":343,"offset":2665},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This solution is not perfect and it would be great to not have to mess with JQuery UI cancel and to invoke a render. However, it's a quick way to use an old library that you may already have in your system with a new technology like React.","position":{"start":{"line":24,"column":1,"offset":2667},"end":{"line":24,"column":240,"offset":2906},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2667},"end":{"line":24,"column":240,"offset":2906},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Drag and drop with React and JQuery\",\"date\":\"2016-12-09\",\"categories\":[\"typescript\"]}","position":{"start":{"line":27,"column":1,"offset":2909},"end":{"line":27,"column":124,"offset":3032},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":27,"column":124,"offset":3032}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Drag and drop with React and JQuery\",\n  \"date\": \"2016-12-09\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Dragging element is possible through different library. One option that has been around for more than 8 years is JQuery UI. It comes with different API : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Droppable, Draggable and Sortable\"), \" which allow you to click an Html element and move it around with some restriction that you configure. Few months ago, we needed to have dragging capability with out React page. Initially, we though to use Html5 but we the experience was different between browsers in term of dragging experience. There is some nice well build third party library but we also had the constraint of bringing new library in with all the trouble of handling licencing which become fast a nightmare with today's library that have a lot of dependencies. We ended up to use JQuery UI, which the product already have.\"), mdx(\"p\", null, \"The problem with JQuery UI and React is that the modification done by JQuery is done to the Dom element and not the React's component. That means that when an event is raised about something being dragged or dropped, the component doesn't render. The consequence is that if you do something to re-render your component that the change made to the Html Dom by JQuery will be overridden.\"), mdx(\"p\", null, \"The solution is that when JQuery UI drop the element at its new position to tell JQuery UI to cancel the move and have the React component to render its elements with with the new position. In practice, the user won't notice because it is very fast.\"), mdx(\"p\", null, \"Some quick pointers: 1- On the stop of the drag, listen the stop event which take JQueryEventObject and JQueryUI.SortableUIParams as parameter. This can be done when your component is mounted or dynamically when you need after the component is mounted. It's important that the component it's mounted because you need to access the rendered Dom element by refs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"public componentDidMount() { const $element= $(this.refs.dom); const options = { update: (e: JQueryEventObject, ui: JQueryUI.SortableUIParams) => { this.onUpdate(e, ui) }, } as JQueryUI.SortableOptions; $element.sortable(options); } \\n\")), mdx(\"p\", null, \"2- On the onUpdate, cancel the drag. This can be done by getting using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sortable\"), \" method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"private onUpdate(e: JQueryEventObject, ui: JQueryUI.SortableUIParams): void { const $element= $(this.refs.dom); $element.sortable(\\\"cancel\\\"); //Step 3 goes here } \\n\")), mdx(\"p\", null, \"3- The last step is to get React render your list again with the new position. This can be done by setting a state, calling a property callback or directly calling the action creator to have this one set the new position in the store to kick a new round of render. At that step, you need to send the all the items or the items that got moved.\"), mdx(\"p\", null, \"This solution is not perfect and it would be great to not have to mess with JQuery UI cancel and to invoke a render. However, it's a quick way to use an old library that you may already have in your system with a new technology like React.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Drag and drop with React and JQuery\",\n  \"date\": \"2016-12-09\",\n  \"categories\": [\"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Dragging element is possible through different library. One option that has been around for more than 8 years is JQuery UI. It comes with different API : `}<strong parentName=\"p\">{`Droppable, Draggable and Sortable`}</strong>{` which allow you to click an Html element and move it around with some restriction that you configure. Few months ago, we needed to have dragging capability with out React page. Initially, we though to use Html5 but we the experience was different between browsers in term of dragging experience. There is some nice well build third party library but we also had the constraint of bringing new library in with all the trouble of handling licencing which become fast a nightmare with today's library that have a lot of dependencies. We ended up to use JQuery UI, which the product already have.`}</p>\n    <p>{`The problem with JQuery UI and React is that the modification done by JQuery is done to the Dom element and not the React's component. That means that when an event is raised about something being dragged or dropped, the component doesn't render. The consequence is that if you do something to re-render your component that the change made to the Html Dom by JQuery will be overridden.`}</p>\n    <p>{`The solution is that when JQuery UI drop the element at its new position to tell JQuery UI to cancel the move and have the React component to render its elements with with the new position. In practice, the user won't notice because it is very fast.`}</p>\n    <p>{`Some quick pointers: 1- On the stop of the drag, listen the stop event which take JQueryEventObject and JQueryUI.SortableUIParams as parameter. This can be done when your component is mounted or dynamically when you need after the component is mounted. It's important that the component it's mounted because you need to access the rendered Dom element by refs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public componentDidMount() { const $element= $(this.refs.dom); const options = { update: (e: JQueryEventObject, ui: JQueryUI.SortableUIParams) => { this.onUpdate(e, ui) }, } as JQueryUI.SortableOptions; $element.sortable(options); } \n`}</code></pre>\n    <p>{`2- On the onUpdate, cancel the drag. This can be done by getting using the `}<strong parentName=\"p\">{`sortable`}</strong>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`private onUpdate(e: JQueryEventObject, ui: JQueryUI.SortableUIParams): void { const $element= $(this.refs.dom); $element.sortable(\"cancel\"); //Step 3 goes here } \n`}</code></pre>\n    <p>{`3- The last step is to get React render your list again with the new position. This can be done by setting a state, calling a property callback or directly calling the action creator to have this one set the new position in the store to kick a new round of render. At that step, you need to send the all the items or the items that got moved.`}</p>\n    <p>{`This solution is not perfect and it would be great to not have to mess with JQuery UI cancel and to invoke a render. However, it's a quick way to use an old library that you may already have in your system with a new technology like React.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}