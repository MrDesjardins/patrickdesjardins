{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-bc9a4bde00fc0c9f61d0bd73110ba68c--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This is pretty simple. In fact, I am writing this because most example show you this :","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":87,"offset":87},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":87,"offset":87},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public object this[int index] { get { return collection[index]; } set { collection[index] = value; } } ","position":{"start":{"line":5,"column":1,"offset":90},"end":{"line":7,"column":4,"offset":208},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In fact, you should return the type of your collection. So, if your object contains a collection of ","position":{"start":{"line":9,"column":1,"offset":210},"end":{"line":9,"column":101,"offset":310},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Person","position":{"start":{"line":9,"column":102,"offset":311},"end":{"line":9,"column":108,"offset":317},"indent":[]}}],"position":{"start":{"line":9,"column":101,"offset":310},"end":{"line":9,"column":109,"offset":318},"indent":[]}},{"type":"text","value":" than you should write :","position":{"start":{"line":9,"column":109,"offset":318},"end":{"line":9,"column":133,"offset":342},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":210},"end":{"line":9,"column":133,"offset":342},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public Person this[int index] { get { return collection[index]; } set { collection[index] = value; } } ","position":{"start":{"line":12,"column":1,"offset":345},"end":{"line":14,"column":4,"offset":463},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This way, the value returned doesn't require to be casted.","position":{"start":{"line":16,"column":1,"offset":465},"end":{"line":16,"column":59,"offset":523},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":465},"end":{"line":16,"column":59,"offset":523},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to overload the square bracket operator in C#?\",\"date\":\"2011-11-03\",\"categories\":[\"c-sharp\"]}","position":{"start":{"line":19,"column":1,"offset":526},"end":{"line":19,"column":136,"offset":661},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":136,"offset":661}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to overload the square bracket operator in C#?\",\n  \"date\": \"2011-11-03\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is pretty simple. In fact, I am writing this because most example show you this :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public object this[int index] { get { return collection[index]; } set { collection[index] = value; } } \\n\")), mdx(\"p\", null, \"In fact, you should return the type of your collection. So, if your object contains a collection of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Person\"), \" than you should write :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public Person this[int index] { get { return collection[index]; } set { collection[index] = value; } } \\n\")), mdx(\"p\", null, \"This way, the value returned doesn't require to be casted.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to overload the square bracket operator in C#?\",\n  \"date\": \"2011-11-03\",\n  \"categories\": [\"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This is pretty simple. In fact, I am writing this because most example show you this :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public object this[int index] { get { return collection[index]; } set { collection[index] = value; } } \n`}</code></pre>\n    <p>{`In fact, you should return the type of your collection. So, if your object contains a collection of `}<em parentName=\"p\">{`Person`}</em>{` than you should write :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public Person this[int index] { get { return collection[index]; } set { collection[index] = value; } } \n`}</code></pre>\n    <p>{`This way, the value returned doesn't require to be casted.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}