{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-d31c869027ca05516cd4f8327aa75d54--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"It's possible to log all SQL Query generated by Linq to Sql with C# code. This can be useful when debugging or to optimize how the Linq is done.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":145,"offset":145},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":145,"offset":145},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" DataClasses1DataContext db = new DataClasses1DataContext(); StringWriter sw = new StringWriter(); db.Log = sw;\n\nthis.gridLinqToSql.DataSource = db.Customers.Where(c => c.CustomerID.StartsWith(\"A\")); this.gridLinqToSql.DataBind(); //Here is when the Linq query will be executed.\n\nsqlLinqToSql.Text = sw.GetStringBuilder().ToString(); ","position":{"start":{"line":5,"column":1,"offset":148},"end":{"line":11,"column":4,"offset":496},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Linq to Sql use a DataContext object that is generated with the .dbml file. For example, in this test project, the .dbml file name is DataClasses1.dbml. From there, this object contain a Log property that takes a TextWriter. The ","position":{"start":{"line":13,"column":1,"offset":498},"end":{"line":13,"column":230,"offset":727},"indent":[]}},{"type":"link","title":"MSDN TextWriter Reference","url":"http://msdn.microsoft.com/en-us/library/system.io.textwriter.aspx","children":[{"type":"text","value":"TextWriter","position":{"start":{"line":13,"column":231,"offset":728},"end":{"line":13,"column":241,"offset":738},"indent":[]}}],"position":{"start":{"line":13,"column":230,"offset":727},"end":{"line":13,"column":337,"offset":834},"indent":[]}},{"type":"text","value":" class come from the System.IO namespace and it's an abstract class. The namespace contain two concrete classes that inherit from this class. The first one is ","position":{"start":{"line":13,"column":337,"offset":834},"end":{"line":13,"column":496,"offset":993},"indent":[]}},{"type":"link","title":"String Writer MSDN Reference","url":"http://msdn.microsoft.com/en-us/library/system.io.stringwriter.aspx","children":[{"type":"text","value":"StringWriter","position":{"start":{"line":13,"column":497,"offset":994},"end":{"line":13,"column":509,"offset":1006},"indent":[]}}],"position":{"start":{"line":13,"column":496,"offset":993},"end":{"line":13,"column":610,"offset":1107},"indent":[]}},{"type":"text","value":" that has been used in the example above. This class has a ","position":{"start":{"line":13,"column":610,"offset":1107},"end":{"line":13,"column":669,"offset":1166},"indent":[]}},{"type":"link","title":"StringBuilder MSDN Reference","url":"http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx","children":[{"type":"text","value":"StringBuilder","position":{"start":{"line":13,"column":670,"offset":1167},"end":{"line":13,"column":683,"offset":1180},"indent":[]}}],"position":{"start":{"line":13,"column":669,"offset":1166},"end":{"line":13,"column":787,"offset":1284},"indent":[]}},{"type":"text","value":" and when using the property GetStringBuilder() of the StringWriter let you get a reference on it. From there, using the ToString() method give a String with all the SQL used to get the information.","position":{"start":{"line":13,"column":787,"offset":1284},"end":{"line":13,"column":985,"offset":1482},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":498},"end":{"line":13,"column":985,"offset":1482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The result will look like this:","position":{"start":{"line":15,"column":1,"offset":1484},"end":{"line":15,"column":32,"offset":1515},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1484},"end":{"line":15,"column":32,"offset":1515},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" SELECT [t0].[CustomerID], [t0].[CompanyName], [t0].[ContactName], [t0].[ContactTitle] FROM [dbo].[Customers] AS [t0] WHERE [t0].[CustomerID] LIKE @p0\n\n-- @p0: Input NVarChar (Size = 4000; Prec = 0; Scale = 0) [A%] -- Context: SqlProvider(Sql2005) Model: AttributedMetaModel Build: 4.0.30319.1 ","position":{"start":{"line":18,"column":1,"offset":1518},"end":{"line":22,"column":4,"offset":1823},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Log return the SQL statement (or many SQL statement if many calls has been done) with a parameter way (@p...). After the SQL Statement, each parameter details are written like the type, and the size of the SQL parameter.","position":{"start":{"line":25,"column":1,"offset":1826},"end":{"line":25,"column":225,"offset":2050},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1826},"end":{"line":25,"column":225,"offset":2050},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To conclude, using the Log property is interesting to get the SQL without using a SQL Profiler. Of course, a good practice would be to not log all the queries in production environment.","position":{"start":{"line":27,"column":1,"offset":2052},"end":{"line":27,"column":186,"offset":2237},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2052},"end":{"line":27,"column":186,"offset":2237},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to log with Linq to Sql?\",\"date\":\"2011-08-27\",\"categories\":[\"linq-to-sql\"]}","position":{"start":{"line":30,"column":1,"offset":2240},"end":{"line":30,"column":118,"offset":2357},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":30,"column":118,"offset":2357}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to log with Linq to Sql?\",\n  \"date\": \"2011-08-27\",\n  \"categories\": [\"linq-to-sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's possible to log all SQL Query generated by Linq to Sql with C# code. This can be useful when debugging or to optimize how the Linq is done.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" DataClasses1DataContext db = new DataClasses1DataContext(); StringWriter sw = new StringWriter(); db.Log = sw;\\n\\nthis.gridLinqToSql.DataSource = db.Customers.Where(c => c.CustomerID.StartsWith(\\\"A\\\")); this.gridLinqToSql.DataBind(); //Here is when the Linq query will be executed.\\n\\nsqlLinqToSql.Text = sw.GetStringBuilder().ToString(); \\n\")), mdx(\"p\", null, \"Linq to Sql use a DataContext object that is generated with the .dbml file. For example, in this test project, the .dbml file name is DataClasses1.dbml. From there, this object contain a Log property that takes a TextWriter. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/system.io.textwriter.aspx\",\n    \"title\": \"MSDN TextWriter Reference\"\n  }, \"TextWriter\"), \" class come from the System.IO namespace and it's an abstract class. The namespace contain two concrete classes that inherit from this class. The first one is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/system.io.stringwriter.aspx\",\n    \"title\": \"String Writer MSDN Reference\"\n  }, \"StringWriter\"), \"\\xA0that has been used in the example above. This class has a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx\",\n    \"title\": \"StringBuilder MSDN Reference\"\n  }, \"StringBuilder\"), \"\\xA0and when using the property GetStringBuilder() of the StringWriter let you get a reference on it. From there, using the ToString() method give a String with all the SQL used to get the information.\"), mdx(\"p\", null, \"The result will look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" SELECT [t0].[CustomerID], [t0].[CompanyName], [t0].[ContactName], [t0].[ContactTitle] FROM [dbo].[Customers] AS [t0] WHERE [t0].[CustomerID] LIKE @p0\\n\\n-- @p0: Input NVarChar (Size = 4000; Prec = 0; Scale = 0) [A%] -- Context: SqlProvider(Sql2005) Model: AttributedMetaModel Build: 4.0.30319.1 \\n\")), mdx(\"p\", null, \"The Log return the SQL statement (or many SQL statement if many calls has been done) with a parameter way (@p...). After the SQL Statement, each parameter details are written like the type, and the size of the SQL parameter.\"), mdx(\"p\", null, \"To conclude, using the Log property is interesting to get the SQL without using a SQL Profiler. Of course, a good practice would be to not log all the queries in production\\xA0environment.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to log with Linq to Sql?\",\n  \"date\": \"2011-08-27\",\n  \"categories\": [\"linq-to-sql\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`It's possible to log all SQL Query generated by Linq to Sql with C# code. This can be useful when debugging or to optimize how the Linq is done.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` DataClasses1DataContext db = new DataClasses1DataContext(); StringWriter sw = new StringWriter(); db.Log = sw;\n\nthis.gridLinqToSql.DataSource = db.Customers.Where(c => c.CustomerID.StartsWith(\"A\")); this.gridLinqToSql.DataBind(); //Here is when the Linq query will be executed.\n\nsqlLinqToSql.Text = sw.GetStringBuilder().ToString(); \n`}</code></pre>\n    <p>{`Linq to Sql use a DataContext object that is generated with the .dbml file. For example, in this test project, the .dbml file name is DataClasses1.dbml. From there, this object contain a Log property that takes a TextWriter. The `}<a parentName=\"p\" {...{\n        \"href\": \"http://msdn.microsoft.com/en-us/library/system.io.textwriter.aspx\",\n        \"title\": \"MSDN TextWriter Reference\"\n      }}>{`TextWriter`}</a>{` class come from the System.IO namespace and it's an abstract class. The namespace contain two concrete classes that inherit from this class. The first one is `}<a parentName=\"p\" {...{\n        \"href\": \"http://msdn.microsoft.com/en-us/library/system.io.stringwriter.aspx\",\n        \"title\": \"String Writer MSDN Reference\"\n      }}>{`StringWriter`}</a>{` that has been used in the example above. This class has a `}<a parentName=\"p\" {...{\n        \"href\": \"http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx\",\n        \"title\": \"StringBuilder MSDN Reference\"\n      }}>{`StringBuilder`}</a>{` and when using the property GetStringBuilder() of the StringWriter let you get a reference on it. From there, using the ToString() method give a String with all the SQL used to get the information.`}</p>\n    <p>{`The result will look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` SELECT [t0].[CustomerID], [t0].[CompanyName], [t0].[ContactName], [t0].[ContactTitle] FROM [dbo].[Customers] AS [t0] WHERE [t0].[CustomerID] LIKE @p0\n\n-- @p0: Input NVarChar (Size = 4000; Prec = 0; Scale = 0) [A%] -- Context: SqlProvider(Sql2005) Model: AttributedMetaModel Build: 4.0.30319.1 \n`}</code></pre>\n    <p>{`The Log return the SQL statement (or many SQL statement if many calls has been done) with a parameter way (@p...). After the SQL Statement, each parameter details are written like the type, and the size of the SQL parameter.`}</p>\n    <p>{`To conclude, using the Log property is interesting to get the SQL without using a SQL Profiler. Of course, a good practice would be to not log all the queries in production environment.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}