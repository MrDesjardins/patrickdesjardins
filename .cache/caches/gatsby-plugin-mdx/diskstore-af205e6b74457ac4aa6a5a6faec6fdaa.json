{"expireTime":9007200886478401000,"key":"gatsby-plugin-mdx-entire-payload-c0a46ab01f2448485fe505ef19ec8740--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Linq to Sql has a caching system that rely on the primary key of each object. Inside the data context, an identity map keep the value of the retrieved data. Every thing is handled by the data context and you have to worry about nothing. Keep in mind that if someone else change the value that the cache won't be refreshed.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":323,"offset":323},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":323,"offset":323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you change the data on your side, the cache won't also be updated. This can be problematic in some situation. If this behavior is not what you want, you can disable the caching feature of Linq to Sql with a property of the data context.","position":{"start":{"line":4,"column":1,"offset":325},"end":{"line":4,"column":240,"offset":564},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":325},"end":{"line":4,"column":240,"offset":564},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" myDataContext.ObjectTrackingEnabled = false; ","position":{"start":{"line":7,"column":1,"offset":567},"end":{"line":9,"column":4,"offset":627},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Or, you can refresh specific object.","position":{"start":{"line":11,"column":1,"offset":629},"end":{"line":11,"column":37,"offset":665},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":629},"end":{"line":11,"column":37,"offset":665},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" myDataContext.Refresh(RefreshMode.OverwriteCurrentValues, myObjectToRefresh); ","position":{"start":{"line":14,"column":1,"offset":668},"end":{"line":16,"column":4,"offset":761},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The reason behind this technical choice is that initially it has been developed for performance on consecutive call of the same object. The goal is not the have a real caching system.","position":{"start":{"line":18,"column":1,"offset":763},"end":{"line":18,"column":184,"offset":946},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":763},"end":{"line":18,"column":184,"offset":946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To conclude, the title mentions Entity Framework and I haven't say anything about it yet. The reason is that Entity Framework react the same way as Linq to Sql for the cache.","position":{"start":{"line":20,"column":1,"offset":948},"end":{"line":20,"column":175,"offset":1122},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":948},"end":{"line":20,"column":175,"offset":1122},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Linq to Sql and Entity Framework cache\",\"date\":\"2011-09-25\",\"categories\":[\"entity-framework\",\"linq-to-sql\"]}","position":{"start":{"line":23,"column":1,"offset":1125},"end":{"line":23,"column":147,"offset":1271},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":147,"offset":1271}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linq to Sql and Entity Framework cache\",\n  \"date\": \"2011-09-25\",\n  \"categories\": [\"entity-framework\", \"linq-to-sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Linq to Sql has a caching system that rely on the primary key of each object. Inside the data context, an identity map keep the value of the retrieved data. Every thing is handled by the data context and you have to worry about nothing. Keep in mind that if someone else change the value that the cache won't be refreshed.\"), mdx(\"p\", null, \"If you change the data on your side, the cache won't also be updated. This can be problematic in some situation. If this behavior is not what you want, you can disable the caching feature of Linq to Sql with a property of the data context.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" myDataContext.ObjectTrackingEnabled = false; \\n\")), mdx(\"p\", null, \"Or, you can refresh specific object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" myDataContext.Refresh(RefreshMode.OverwriteCurrentValues, myObjectToRefresh); \\n\")), mdx(\"p\", null, \"The reason behind this technical choice is that initially it has been developed for performance on consecutive call of the same object. The goal is not the have a real caching system.\"), mdx(\"p\", null, \"To conclude, the title mentions Entity Framework and I haven't say anything about it yet. The reason is that Entity Framework react the same way as Linq to Sql for the cache.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Linq to Sql and Entity Framework cache\",\n  \"date\": \"2011-09-25\",\n  \"categories\": [\"entity-framework\", \"linq-to-sql\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Linq to Sql has a caching system that rely on the primary key of each object. Inside the data context, an identity map keep the value of the retrieved data. Every thing is handled by the data context and you have to worry about nothing. Keep in mind that if someone else change the value that the cache won't be refreshed.`}</p>\n    <p>{`If you change the data on your side, the cache won't also be updated. This can be problematic in some situation. If this behavior is not what you want, you can disable the caching feature of Linq to Sql with a property of the data context.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` myDataContext.ObjectTrackingEnabled = false; \n`}</code></pre>\n    <p>{`Or, you can refresh specific object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` myDataContext.Refresh(RefreshMode.OverwriteCurrentValues, myObjectToRefresh); \n`}</code></pre>\n    <p>{`The reason behind this technical choice is that initially it has been developed for performance on consecutive call of the same object. The goal is not the have a real caching system.`}</p>\n    <p>{`To conclude, the title mentions Entity Framework and I haven't say anything about it yet. The reason is that Entity Framework react the same way as Linq to Sql for the cache.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}