{"expireTime":9007200886478394000,"key":"gatsby-plugin-mdx-entire-payload-a79ddc87b2aa7ed8a37eb604f8c24a9e--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In Asp.Net MVC3 and before, if we wanted to make my default all action of controller to be secured we had to ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":110,"offset":110},"indent":[]}},{"type":"link","title":"Make all actions of controller securized with Authorise filter implicit","url":"./make-all-actions-of-controller-securized-with-authorise-filter-implicit","children":[{"type":"text","value":"create a AllowAnonymous filter","position":{"start":{"line":2,"column":111,"offset":111},"end":{"line":2,"column":141,"offset":141},"indent":[]}}],"position":{"start":{"line":2,"column":110,"offset":110},"end":{"line":2,"column":291,"offset":291},"indent":[]}},{"type":"text","value":" and to add a global filter which was requiring a valid authentification before accessing the action.","position":{"start":{"line":2,"column":291,"offset":291},"end":{"line":2,"column":392,"offset":392},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":392,"offset":392},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With Asp.Net MVC 4, it's built in. You need to go inside the App","position":{"start":{"line":4,"column":1,"offset":394},"end":{"line":4,"column":65,"offset":458},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Start folder which contain the FilterConfig.cs file. Inside the FilterConfig.cs you will found what was inside the Global.Asax.cs : the static method _RegisterGlobalFilters","position":{"start":{"line":4,"column":66,"offset":459},"end":{"line":4,"column":238,"offset":631},"indent":[]}}],"position":{"start":{"line":4,"column":65,"offset":458},"end":{"line":4,"column":239,"offset":632},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":239,"offset":632},"end":{"line":4,"column":240,"offset":633},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":394},"end":{"line":4,"column":240,"offset":633},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You need to add to this method the new folder called \"AuthorizeAttribute\".","position":{"start":{"line":6,"column":1,"offset":635},"end":{"line":6,"column":75,"offset":709},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":635},"end":{"line":6,"column":75,"offset":709},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new AuthorizeAttribute()); } } ","position":{"start":{"line":9,"column":1,"offset":712},"end":{"line":11,"column":4,"offset":914},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By now, all action require a valid authentification. If you want to allow anonymous person to see the action, you need to add the AllowAuthorize attribute to the action. In fact, it's already been setup for the login and register method of the AccountController.cs.","position":{"start":{"line":13,"column":1,"offset":916},"end":{"line":13,"column":266,"offset":1181},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":916},"end":{"line":13,"column":266,"offset":1181},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [AllowAnonymous] public ActionResult Login(string returnUrl) { ViewBag.ReturnUrl = returnUrl; return View(); }\n\n[AllowAnonymous] public ActionResult Register() { return View(); } ","position":{"start":{"line":16,"column":1,"offset":1184},"end":{"line":20,"column":4,"offset":1378},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's it. Pretty simple and more secure!","position":{"start":{"line":22,"column":1,"offset":1380},"end":{"line":22,"column":42,"offset":1421},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1380},"end":{"line":22,"column":42,"offset":1421},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Asp.Net MVC4 AllowAnonymous\",\"date\":\"2012-10-17\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":25,"column":1,"offset":1424},"end":{"line":25,"column":113,"offset":1536},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":25,"column":113,"offset":1536}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Asp.Net MVC4 AllowAnonymous\",\n  \"date\": \"2012-10-17\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In Asp.Net MVC3 and before, if we wanted to make my default all action of controller to be secured we had to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./make-all-actions-of-controller-securized-with-authorise-filter-implicit\",\n    \"title\": \"Make all actions of controller securized with Authorise filter implicit\"\n  }, \"create a AllowAnonymous filter\"), \" and to add a global filter which was requiring a valid authentification before accessing the action.\"), mdx(\"p\", null, \"With Asp.Net MVC 4, it's built in. You need to go inside the App\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Start folder which contain the FilterConfig.cs file. Inside the FilterConfig.cs you will found what was inside the Global.Asax.cs : the static method _RegisterGlobalFilters\"), \".\"), mdx(\"p\", null, \"You need to add to this method the new folder called \\\"AuthorizeAttribute\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new AuthorizeAttribute()); } } \\n\")), mdx(\"p\", null, \"By now, all action require a valid authentification. If you want to allow anonymous person to see the action, you need to add the AllowAuthorize attribute to the action. In fact, it's already been setup for the login and register method of the AccountController.cs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [AllowAnonymous] public ActionResult Login(string returnUrl) { ViewBag.ReturnUrl = returnUrl; return View(); }\\n\\n[AllowAnonymous] public ActionResult Register() { return View(); } \\n\")), mdx(\"p\", null, \"That's it. Pretty simple and more secure!\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Asp.Net MVC4 AllowAnonymous\",\n  \"date\": \"2012-10-17\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In Asp.Net MVC3 and before, if we wanted to make my default all action of controller to be secured we had to `}<a parentName=\"p\" {...{\n        \"href\": \"./make-all-actions-of-controller-securized-with-authorise-filter-implicit\",\n        \"title\": \"Make all actions of controller securized with Authorise filter implicit\"\n      }}>{`create a AllowAnonymous filter`}</a>{` and to add a global filter which was requiring a valid authentification before accessing the action.`}</p>\n    <p>{`With Asp.Net MVC 4, it's built in. You need to go inside the App`}<em parentName=\"p\">{`Start folder which contain the FilterConfig.cs file. Inside the FilterConfig.cs you will found what was inside the Global.Asax.cs : the static method _RegisterGlobalFilters`}</em>{`.`}</p>\n    <p>{`You need to add to this method the new folder called \"AuthorizeAttribute\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new AuthorizeAttribute()); } } \n`}</code></pre>\n    <p>{`By now, all action require a valid authentification. If you want to allow anonymous person to see the action, you need to add the AllowAuthorize attribute to the action. In fact, it's already been setup for the login and register method of the AccountController.cs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [AllowAnonymous] public ActionResult Login(string returnUrl) { ViewBag.ReturnUrl = returnUrl; return View(); }\n\n[AllowAnonymous] public ActionResult Register() { return View(); } \n`}</code></pre>\n    <p>{`That's it. Pretty simple and more secure!`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}