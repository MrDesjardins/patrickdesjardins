{"expireTime":9007200886478384000,"key":"gatsby-plugin-mdx-entire-payload-df774629e99e83b864ca16c684865014--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You are working locally without a SSL certificate and in production with certificate,=. The simplest way to work handle both case is to have a configuration that switch depending of if you are in your production server or in your local dev box. Here is two solutions. The first one is well known on Internet but require to have IIS with the rewrite module. This is not a problem with Azure, and even locally it's not a big problem because it can be downloaded from IIS manager console, under Web Platform. But, you won't need that. The first solution is to change the web.release.config to add the redirection on the deployed files only. This is done like this:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":662,"offset":662},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":662,"offset":662},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" <?xml version=\"1.0\"?> <configuration xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\"> <system.webServer> <rewrite xdt:Transform=\"Insert\"> <rules> <rule name=\"Redirect HTTP to HTTPS\"> <match url=\"(.*)\" /> <conditions> <add input=\"{HTTPS}\" pattern=\"off\" ignoreCase=\"true\" /> </conditions> <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{R:1}\" redirectType=\"Permanent\"/> </rule> </rules> </rewrite> </system.webServer> </configuration>\n\n","position":{"start":{"line":5,"column":1,"offset":665},"end":{"line":9,"column":4,"offset":1129},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second solution is simpler, because it's just a change in code. However, the request needs to go to the Asp.Net pipeline which is more demanding for your webserver. You should have the redirection as soon as you can and doing it at IIS level is the best place. Nevertheless, it's always good to have both solution on hands.","position":{"start":{"line":12,"column":1,"offset":1132},"end":{"line":12,"column":328,"offset":1459},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1132},"end":{"line":12,"column":328,"offset":1459},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In global.asax.cs: ","position":{"start":{"line":14,"column":1,"offset":1461},"end":{"line":14,"column":20,"offset":1480},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1461},"end":{"line":14,"column":20,"offset":1480},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" if (!HttpContext.Current.IsDebuggingEnabled) { filters.Add(new RequireHttpsAttribute()); } ","position":{"start":{"line":15,"column":1,"offset":1481},"end":{"line":17,"column":4,"offset":1587},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to redirect Http to Https only in production\",\"date\":\"2016-08-10\",\"categories\":[\"asp-mvc\",\"asp-net\"],\"tags\":[\"azure\",\"https\",\"ssl\"]}","position":{"start":{"line":20,"column":1,"offset":1590},"end":{"line":20,"column":175,"offset":1764},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":175,"offset":1764}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to redirect Http to Https only in production\",\n  \"date\": \"2016-08-10\",\n  \"categories\": [\"asp-mvc\", \"asp-net\"],\n  \"tags\": [\"azure\", \"https\", \"ssl\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You are working locally without a SSL certificate and in production with certificate,=. The simplest way to work handle both case is to have a configuration that switch depending of if you are in your production server or in your local dev box. Here is two solutions. The first one is well known on Internet but require to have IIS with the rewrite module. This is not a problem with Azure, and even locally it's not a big problem because it can be downloaded from IIS manager console, under Web Platform. But, you won't need that. The first solution is to change the web.release.config to add the redirection on the deployed files only. This is done like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <?xml version=\\\"1.0\\\"?> <configuration xmlns:xdt=\\\"http://schemas.microsoft.com/XML-Document-Transform\\\"> <system.webServer> <rewrite xdt:Transform=\\\"Insert\\\"> <rules> <rule name=\\\"Redirect HTTP to HTTPS\\\"> <match url=\\\"(.*)\\\" /> <conditions> <add input=\\\"{HTTPS}\\\" pattern=\\\"off\\\" ignoreCase=\\\"true\\\" /> </conditions> <action type=\\\"Redirect\\\" url=\\\"https://{HTTP_HOST}/{R:1}\\\" redirectType=\\\"Permanent\\\"/> </rule> </rules> </rewrite> </system.webServer> </configuration>\\n\\n\\n\")), mdx(\"p\", null, \"The second solution is simpler, because it's just a change in code. However, the request needs to go to the Asp.Net pipeline which is more demanding for your webserver. You should have the redirection as soon as you can and doing it at IIS level is the best place. Nevertheless, it's always good to have both solution on hands.\"), mdx(\"p\", null, \"In global.asax.cs: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" if (!HttpContext.Current.IsDebuggingEnabled) { filters.Add(new RequireHttpsAttribute()); } \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to redirect Http to Https only in production\",\n  \"date\": \"2016-08-10\",\n  \"categories\": [\"asp-mvc\", \"asp-net\"],\n  \"tags\": [\"azure\", \"https\", \"ssl\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You are working locally without a SSL certificate and in production with certificate,=. The simplest way to work handle both case is to have a configuration that switch depending of if you are in your production server or in your local dev box. Here is two solutions. The first one is well known on Internet but require to have IIS with the rewrite module. This is not a problem with Azure, and even locally it's not a big problem because it can be downloaded from IIS manager console, under Web Platform. But, you won't need that. The first solution is to change the web.release.config to add the redirection on the deployed files only. This is done like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <?xml version=\"1.0\"?> <configuration xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\"> <system.webServer> <rewrite xdt:Transform=\"Insert\"> <rules> <rule name=\"Redirect HTTP to HTTPS\"> <match url=\"(.*)\" /> <conditions> <add input=\"{HTTPS}\" pattern=\"off\" ignoreCase=\"true\" /> </conditions> <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{R:1}\" redirectType=\"Permanent\"/> </rule> </rules> </rewrite> </system.webServer> </configuration>\n\n\n`}</code></pre>\n    <p>{`The second solution is simpler, because it's just a change in code. However, the request needs to go to the Asp.Net pipeline which is more demanding for your webserver. You should have the redirection as soon as you can and doing it at IIS level is the best place. Nevertheless, it's always good to have both solution on hands.`}</p>\n    <p>{`In global.asax.cs: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` if (!HttpContext.Current.IsDebuggingEnabled) { filters.Add(new RequireHttpsAttribute()); } \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}