{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-afcd662ba562fbaabb3f96cc2a0c37b3--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"First of all, the code in this post is not all of mine. I do not remember the source and if anyone know please let me know I will acknowledge the creator.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":155,"offset":155},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":155,"offset":155},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Entity Framework use the default schema when accessing the database. It uses the \"dbo\" one usually.","position":{"start":{"line":4,"column":1,"offset":157},"end":{"line":4,"column":100,"offset":256},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":157},"end":{"line":4,"column":100,"offset":256},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You may need to use Entity Framework with different schema. This can be done by overriding the creation of the model that is done with the method \"OnModelCreating\". This can be done inside your custom DbObject class.","position":{"start":{"line":6,"column":1,"offset":258},"end":{"line":6,"column":217,"offset":474},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":258},"end":{"line":6,"column":217,"offset":474},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public string DefaultSchema { get; set; } protected override void OnModelCreating(DbModelBuilder modelBuilder) { if (!String.IsNullOrEmpty(DefaultSchema)) { var entityMethod = modelBuilder.GetType().GetMethod(\"Entity\"); foreach (PropertyInfo dbSet in GetType().GetProperties().Where(t =>t.PropertyType.IsGenericType && t.PropertyType.GetGenericTypeDefinition().Equals(typeof (DbSet<>)))) { var entityType = dbSet.PropertyType.GetGenericArguments(); var entityMethodGeneric = entityMethod.MakeGenericMethod(entityType); var entityConfig = entityMethodGeneric.Invoke(modelBuilder, null); var toTableMethod = entityConfig.GetType().GetMethod(\"ToTable\", new[]{typeof (string), typeof (string)}); var tableName = GetTableName(entityType.FirstOrDefault()); toTableMethod.Invoke(entityConfig, new object[]{tableName, DefaultSchema}); }\n\n} base.OnModelCreating(modelBuilder); }\n\nprivate string GetTableName(Type type) { var tableAttribute = type.GetCustomAttributes(false).OfType<System.ComponentModel.DataAnnotations.TableAttribute>().FirstOrDefault(); return tableAttribute == null ? type.Name : tableAttribute.Name; } ","position":{"start":{"line":9,"column":1,"offset":477},"end":{"line":15,"column":4,"offset":1605},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With the code above, you can set the DefaultSchema and the query will be made with the schema desired.","position":{"start":{"line":17,"column":1,"offset":1607},"end":{"line":17,"column":103,"offset":1709},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1607},"end":{"line":17,"column":103,"offset":1709},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the reference of the Schema code : ","position":{"start":{"line":19,"column":1,"offset":1711},"end":{"line":19,"column":44,"offset":1754},"indent":[]}},{"type":"link","title":null,"url":"http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/e276fb02-ef9b-44eb-b481-699c1c25602d/","children":[{"type":"text","value":"http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/e276fb02-ef9b-44eb-b481-699c1c25602d/","position":{"start":{"line":19,"column":44,"offset":1754},"end":{"line":19,"column":159,"offset":1869},"indent":[]}}],"position":{"start":{"line":19,"column":44,"offset":1754},"end":{"line":19,"column":159,"offset":1869},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1711},"end":{"line":19,"column":159,"offset":1869},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework using Poco and custom Sql Database Schema\",\"date\":\"2012-03-16\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":22,"column":1,"offset":1872},"end":{"line":22,"column":153,"offset":2024},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":22,"column":153,"offset":2024}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework using Poco and custom Sql Database Schema\",\n  \"date\": \"2012-03-16\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"First of all, the code in this post is not all of mine. I do not remember the source and if anyone know please let me know I will acknowledge the creator.\"), mdx(\"p\", null, \"Entity Framework use the default schema when accessing the database. It uses the \\\"dbo\\\" one usually.\"), mdx(\"p\", null, \"You may need to use Entity Framework with different schema. This can be done by overriding the creation of the model that is done with the method \\\"OnModelCreating\\\". This can be done inside your custom DbObject class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public string DefaultSchema { get; set; } protected override void OnModelCreating(DbModelBuilder modelBuilder) { if (!String.IsNullOrEmpty(DefaultSchema)) { var entityMethod = modelBuilder.GetType().GetMethod(\\\"Entity\\\"); foreach (PropertyInfo dbSet in GetType().GetProperties().Where(t =>t.PropertyType.IsGenericType && t.PropertyType.GetGenericTypeDefinition().Equals(typeof (DbSet<>)))) { var entityType = dbSet.PropertyType.GetGenericArguments(); var entityMethodGeneric = entityMethod.MakeGenericMethod(entityType); var entityConfig = entityMethodGeneric.Invoke(modelBuilder, null); var toTableMethod = entityConfig.GetType().GetMethod(\\\"ToTable\\\", new[]{typeof (string), typeof (string)}); var tableName = GetTableName(entityType.FirstOrDefault()); toTableMethod.Invoke(entityConfig, new object[]{tableName, DefaultSchema}); }\\n\\n} base.OnModelCreating(modelBuilder); }\\n\\nprivate string GetTableName(Type type) { var tableAttribute = type.GetCustomAttributes(false).OfType<System.ComponentModel.DataAnnotations.TableAttribute>().FirstOrDefault(); return tableAttribute == null ? type.Name : tableAttribute.Name; } \\n\")), mdx(\"p\", null, \"With the code above, you can set the DefaultSchema and the query will be made with the schema desired.\"), mdx(\"p\", null, \"This is the reference of the Schema code : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/e276fb02-ef9b-44eb-b481-699c1c25602d/\"\n  }, \"http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/e276fb02-ef9b-44eb-b481-699c1c25602d/\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework using Poco and custom Sql Database Schema\",\n  \"date\": \"2012-03-16\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`First of all, the code in this post is not all of mine. I do not remember the source and if anyone know please let me know I will acknowledge the creator.`}</p>\n    <p>{`Entity Framework use the default schema when accessing the database. It uses the \"dbo\" one usually.`}</p>\n    <p>{`You may need to use Entity Framework with different schema. This can be done by overriding the creation of the model that is done with the method \"OnModelCreating\". This can be done inside your custom DbObject class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public string DefaultSchema { get; set; } protected override void OnModelCreating(DbModelBuilder modelBuilder) { if (!String.IsNullOrEmpty(DefaultSchema)) { var entityMethod = modelBuilder.GetType().GetMethod(\"Entity\"); foreach (PropertyInfo dbSet in GetType().GetProperties().Where(t =>t.PropertyType.IsGenericType && t.PropertyType.GetGenericTypeDefinition().Equals(typeof (DbSet<>)))) { var entityType = dbSet.PropertyType.GetGenericArguments(); var entityMethodGeneric = entityMethod.MakeGenericMethod(entityType); var entityConfig = entityMethodGeneric.Invoke(modelBuilder, null); var toTableMethod = entityConfig.GetType().GetMethod(\"ToTable\", new[]{typeof (string), typeof (string)}); var tableName = GetTableName(entityType.FirstOrDefault()); toTableMethod.Invoke(entityConfig, new object[]{tableName, DefaultSchema}); }\n\n} base.OnModelCreating(modelBuilder); }\n\nprivate string GetTableName(Type type) { var tableAttribute = type.GetCustomAttributes(false).OfType<System.ComponentModel.DataAnnotations.TableAttribute>().FirstOrDefault(); return tableAttribute == null ? type.Name : tableAttribute.Name; } \n`}</code></pre>\n    <p>{`With the code above, you can set the DefaultSchema and the query will be made with the schema desired.`}</p>\n    <p>{`This is the reference of the Schema code : `}<a parentName=\"p\" {...{\n        \"href\": \"http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/e276fb02-ef9b-44eb-b481-699c1c25602d/\"\n      }}>{`http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/e276fb02-ef9b-44eb-b481-699c1c25602d/`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}