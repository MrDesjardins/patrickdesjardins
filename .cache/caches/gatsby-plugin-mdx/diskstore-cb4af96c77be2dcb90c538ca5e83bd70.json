{"expireTime":9007200886478388000,"key":"gatsby-plugin-mdx-entire-payload-ae6135ea6af7592ea27e3b90787a5cdb--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Some Asp.Net MVC Html Helpers use the possibility to add ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"anonymous object","position":{"start":{"line":2,"column":60,"offset":60},"end":{"line":2,"column":76,"offset":76},"indent":[]}}],"position":{"start":{"line":2,"column":58,"offset":58},"end":{"line":2,"column":78,"offset":78},"indent":[]}},{"type":"text","value":" as parameter to assign key value. It is the case of HtmlAttributes parameter. If you want to create your own Html Helper or simply having the possibility to use anonymous object, you may stumble into the case that you need to ","position":{"start":{"line":2,"column":78,"offset":78},"end":{"line":2,"column":305,"offset":305},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"enumerate keys and values","position":{"start":{"line":2,"column":307,"offset":307},"end":{"line":2,"column":332,"offset":332},"indent":[]}}],"position":{"start":{"line":2,"column":305,"offset":305},"end":{"line":2,"column":334,"offset":334},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":334,"offset":334},"end":{"line":2,"column":335,"offset":335},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":335,"offset":335},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public string Url(string action, string controller, string area = null, object routeValues = null) { //Code here } ","position":{"start":{"line":5,"column":1,"offset":338},"end":{"line":7,"column":4,"offset":468},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above is an example. You may want to have a method that generate an url from some parameters. The last parameter named \"routeValues\" is of type object. This one is created to be used for anonymous object.","position":{"start":{"line":9,"column":1,"offset":470},"end":{"line":9,"column":214,"offset":683},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":470},"end":{"line":9,"column":214,"offset":683},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" Url(\"action\", \"controller\", \"area\", new {Id = \"123\", Name=\"This is my name\"}); ","position":{"start":{"line":12,"column":1,"offset":686},"end":{"line":14,"column":4,"offset":780},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Url method can then loop through all the properties. Something that can help you is to create an anonymous method for object that convert everything into an IDictionary where it will be easy to manipulate keys (property name) and values.","position":{"start":{"line":16,"column":1,"offset":782},"end":{"line":16,"column":242,"offset":1023},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":782},"end":{"line":16,"column":242,"offset":1023},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static class ObjectExtensions { public static IDictionary<string, object> AsDictionary(this object source, BindingFlags bindingAttr = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance) { return source.GetType().GetProperties(bindingAttr).ToDictionary ( propInfo => propInfo.Name, propInfo => propInfo.GetValue(source, null) ); } } \n``` It uses reflection to get all properties and from these properties to get all values.\n\nHere is a unit test for the AsDictionary extension method.\n\n\n```csharp\n [TestClass] public class ObjectExtensionsTest { [TestMethod] public void GivenAnObject_WhenThisOneHasMultipleProperties_ThenDictionary() { // Arrange var objectToConvert = new {Id=\"Test\", Name=\"Test2\"};\n\n// Act var dictionary = objectToConvert.AsDictionary();\n\n// Assert Assert.AreEqual(2,dictionary.Keys.Count); Assert.AreEqual(objectToConvert.Id,dictionary[\"Id\"]); Assert.AreEqual(objectToConvert.Name,dictionary[\"Name\"]); } } ","position":{"start":{"line":19,"column":1,"offset":1026},"end":{"line":32,"column":4,"offset":1994},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Converting anonymous object to Dictionnary<string, string>\",\"date\":\"2014-06-12\",\"categories\":[\"asp-mvc\",\"asp-net\",\"c-sharp\"]}","position":{"start":{"line":35,"column":1,"offset":1997},"end":{"line":35,"column":164,"offset":2160},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":35,"column":164,"offset":2160}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Converting anonymous object to Dictionnary<string, string>\",\n  \"date\": \"2014-06-12\",\n  \"categories\": [\"asp-mvc\", \"asp-net\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Some Asp.Net MVC Html Helpers use the possibility to add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"anonymous object\"), \" as parameter to assign key value. It is the case of HtmlAttributes parameter. If you want to create your own Html Helper or simply having the possibility to use anonymous object, you may stumble into the case that you need to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enumerate keys and values\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public string Url(string action, string controller, string area = null, object routeValues = null) { //Code here } \\n\")), mdx(\"p\", null, \"The code above is an example. You may want to have a method that generate an url from some parameters. The last parameter named \\\"routeValues\\\" is of type object. This one is created to be used for anonymous object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" Url(\\\"action\\\", \\\"controller\\\", \\\"area\\\", new {Id = \\\"123\\\", Name=\\\"This is my name\\\"}); \\n\")), mdx(\"p\", null, \"The Url method can then loop through all the properties. Something that can help you is to create an anonymous method for object that convert everything into an IDictionary where it will be easy to manipulate keys (property name) and values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static class ObjectExtensions { public static IDictionary<string, object> AsDictionary(this object source, BindingFlags bindingAttr = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance) { return source.GetType().GetProperties(bindingAttr).ToDictionary ( propInfo => propInfo.Name, propInfo => propInfo.GetValue(source, null) ); } } \\n``` It uses reflection to get all properties and from these properties to get all values.\\n\\nHere is a unit test for the AsDictionary extension method.\\n\\n\\n```csharp\\n [TestClass] public class ObjectExtensionsTest { [TestMethod] public void GivenAnObject_WhenThisOneHasMultipleProperties_ThenDictionary() { // Arrange var objectToConvert = new {Id=\\\"Test\\\", Name=\\\"Test2\\\"};\\n\\n// Act var dictionary = objectToConvert.AsDictionary();\\n\\n// Assert Assert.AreEqual(2,dictionary.Keys.Count); Assert.AreEqual(objectToConvert.Id,dictionary[\\\"Id\\\"]); Assert.AreEqual(objectToConvert.Name,dictionary[\\\"Name\\\"]); } } \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Converting anonymous object to Dictionnary<string, string>\",\n  \"date\": \"2014-06-12\",\n  \"categories\": [\"asp-mvc\", \"asp-net\", \"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Some Asp.Net MVC Html Helpers use the possibility to add `}<strong parentName=\"p\">{`anonymous object`}</strong>{` as parameter to assign key value. It is the case of HtmlAttributes parameter. If you want to create your own Html Helper or simply having the possibility to use anonymous object, you may stumble into the case that you need to `}<strong parentName=\"p\">{`enumerate keys and values`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public string Url(string action, string controller, string area = null, object routeValues = null) { //Code here } \n`}</code></pre>\n    <p>{`The code above is an example. You may want to have a method that generate an url from some parameters. The last parameter named \"routeValues\" is of type object. This one is created to be used for anonymous object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` Url(\"action\", \"controller\", \"area\", new {Id = \"123\", Name=\"This is my name\"}); \n`}</code></pre>\n    <p>{`The Url method can then loop through all the properties. Something that can help you is to create an anonymous method for object that convert everything into an IDictionary where it will be easy to manipulate keys (property name) and values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static class ObjectExtensions { public static IDictionary<string, object> AsDictionary(this object source, BindingFlags bindingAttr = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance) { return source.GetType().GetProperties(bindingAttr).ToDictionary ( propInfo => propInfo.Name, propInfo => propInfo.GetValue(source, null) ); } } \n\\`\\`\\` It uses reflection to get all properties and from these properties to get all values.\n\nHere is a unit test for the AsDictionary extension method.\n\n\n\\`\\`\\`csharp\n [TestClass] public class ObjectExtensionsTest { [TestMethod] public void GivenAnObject_WhenThisOneHasMultipleProperties_ThenDictionary() { // Arrange var objectToConvert = new {Id=\"Test\", Name=\"Test2\"};\n\n// Act var dictionary = objectToConvert.AsDictionary();\n\n// Assert Assert.AreEqual(2,dictionary.Keys.Count); Assert.AreEqual(objectToConvert.Id,dictionary[\"Id\"]); Assert.AreEqual(objectToConvert.Name,dictionary[\"Name\"]); } } \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}