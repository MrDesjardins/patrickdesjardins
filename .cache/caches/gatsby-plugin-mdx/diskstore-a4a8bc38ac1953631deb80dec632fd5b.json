{"expireTime":9007200886478377000,"key":"gatsby-plugin-mdx-entire-payload-a00e824b802fe223e976356f6f4b09dc--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"A small entry about Docker. I am using Docker mostly in development to have one Docker per web application I am running. It gives me the advantage to have different instances of Apache running that are isolated. A few time ago, I wanted to perform an HTTP request from inside the Docker container back to my development machine -- I could not. I was hitting 503.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":363,"offset":363},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":363,"offset":363},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Docker's localhost is not my machine localhost. After some research, I found that using the DNS ","position":{"start":{"line":4,"column":1,"offset":365},"end":{"line":4,"column":97,"offset":461},"indent":[]}},{"type":"inlineCode","value":"docker.for.mac.host.internal","position":{"start":{"line":4,"column":97,"offset":461},"end":{"line":4,"column":127,"offset":491},"indent":[]}},{"type":"text","value":" was the way to access my developer machine. It works for a MacOs.","position":{"start":{"line":4,"column":127,"offset":491},"end":{"line":4,"column":193,"offset":557},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":365},"end":{"line":4,"column":193,"offset":557},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Accessing your local machine from a Docker container\",\"date\":\"2019-03-22\",\"categories\":[\"docker\"]}","position":{"start":{"line":7,"column":1,"offset":560},"end":{"line":7,"column":137,"offset":696},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":137,"offset":696}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accessing your local machine from a Docker container\",\n  \"date\": \"2019-03-22\",\n  \"categories\": [\"docker\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A small entry about Docker. I am using Docker mostly in development to have one Docker per web application I am running. It gives me the advantage to have different instances of Apache running that are isolated. A few time ago, I wanted to perform an HTTP request from inside the Docker container back to my development machine -- I could not. I was hitting 503.\"), mdx(\"p\", null, \"Docker's localhost is not my machine localhost. After some research, I found that using the DNS \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker.for.mac.host.internal\"), \" was the way to access my developer machine. It works for a MacOs.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Accessing your local machine from a Docker container\",\n  \"date\": \"2019-03-22\",\n  \"categories\": [\"docker\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`A small entry about Docker. I am using Docker mostly in development to have one Docker per web application I am running. It gives me the advantage to have different instances of Apache running that are isolated. A few time ago, I wanted to perform an HTTP request from inside the Docker container back to my development machine -- I could not. I was hitting 503.`}</p>\n    <p>{`Docker's localhost is not my machine localhost. After some research, I found that using the DNS `}<inlineCode parentName=\"p\">{`docker.for.mac.host.internal`}</inlineCode>{` was the way to access my developer machine. It works for a MacOs.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}