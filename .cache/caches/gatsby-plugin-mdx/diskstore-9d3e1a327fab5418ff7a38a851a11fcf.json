{"expireTime":9007200886478386000,"key":"gatsby-plugin-mdx-entire-payload-19b34403239add5643f8b15045fb4a6a--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Either you are working with a field that require a fast access or if the field is used as reference in some case, you will need to create an Index. Unfortunately, Entity Framework does not offer a quick way to do it. To tell Entity Framework to generate the Sql Index on the column, you must use a ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":299,"offset":299},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Column Annotation","position":{"start":{"line":2,"column":301,"offset":301},"end":{"line":2,"column":318,"offset":318},"indent":[]}}],"position":{"start":{"line":2,"column":299,"offset":299},"end":{"line":2,"column":320,"offset":320},"indent":[]}},{"type":"text","value":". Entity Framework column annotation has an already created class named IndexAnnotation that can be added to your column.","position":{"start":{"line":2,"column":320,"offset":320},"end":{"line":2,"column":441,"offset":441},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":441,"offset":441},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" this.Property(d => d.Date) .HasColumnAnnotation(\"Index\" , new IndexAnnotation( new IndexAttribute(\"IX_Date\") {IsUnique = true} ) ); \n``` The code above set for a _Date_ column an **index**. It creates a IndexAnnotation which create a unique index attribute.\n\nThis result into an Index inside the migration class with a unique property set to true. \n```csharp\n CreateTable( \"YourEntityName\", c => new { Id = c.Int(nullable: false, identity: true), Date = c.DateTime(nullable: false), }) .PrimaryKey(t => t.Id) .Index(t => t.Date, unique: true); ","position":{"start":{"line":5,"column":1,"offset":444},"end":{"line":12,"column":4,"offset":1003},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Create an Index for you Entity Framework Index\",\"date\":\"2015-03-27\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":15,"column":1,"offset":1006},"end":{"line":15,"column":141,"offset":1146},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":141,"offset":1146}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create an Index for you Entity Framework Index\",\n  \"date\": \"2015-03-27\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Either you are working with a field that require a fast access or if the field is used as reference in some case, you will need to create an Index. Unfortunately, Entity Framework does not offer a quick way to do it. To tell Entity Framework to generate the Sql Index on the column, you must use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Column Annotation\"), \". Entity Framework column annotation has an already created class named IndexAnnotation that can be added to your column.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" this.Property(d => d.Date) .HasColumnAnnotation(\\\"Index\\\" , new IndexAnnotation( new IndexAttribute(\\\"IX_Date\\\") {IsUnique = true} ) ); \\n``` The code above set for a _Date_ column an **index**. It creates a IndexAnnotation which create a unique index attribute.\\n\\nThis result into an Index inside the migration class with a unique property set to true. \\n```csharp\\n CreateTable( \\\"YourEntityName\\\", c => new { Id = c.Int(nullable: false, identity: true), Date = c.DateTime(nullable: false), }) .PrimaryKey(t => t.Id) .Index(t => t.Date, unique: true); \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Create an Index for you Entity Framework Index\",\n  \"date\": \"2015-03-27\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Either you are working with a field that require a fast access or if the field is used as reference in some case, you will need to create an Index. Unfortunately, Entity Framework does not offer a quick way to do it. To tell Entity Framework to generate the Sql Index on the column, you must use a `}<strong parentName=\"p\">{`Column Annotation`}</strong>{`. Entity Framework column annotation has an already created class named IndexAnnotation that can be added to your column.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` this.Property(d => d.Date) .HasColumnAnnotation(\"Index\" , new IndexAnnotation( new IndexAttribute(\"IX_Date\") {IsUnique = true} ) ); \n\\`\\`\\` The code above set for a _Date_ column an **index**. It creates a IndexAnnotation which create a unique index attribute.\n\nThis result into an Index inside the migration class with a unique property set to true. \n\\`\\`\\`csharp\n CreateTable( \"YourEntityName\", c => new { Id = c.Int(nullable: false, identity: true), Date = c.DateTime(nullable: false), }) .PrimaryKey(t => t.Id) .Index(t => t.Date, unique: true); \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}