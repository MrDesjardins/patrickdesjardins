{"expireTime":9007200886478390000,"key":"gatsby-plugin-mdx-entire-payload-8f2381bf7635870a177c83099e5c7a90--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Truncated","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":12,"offset":12},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":14,"offset":14},"indent":[]}},{"type":"text","value":" a table as the advantage to remove every data without logging or locking every rows. This is a huge advantage over the ","position":{"start":{"line":2,"column":14,"offset":14},"end":{"line":2,"column":134,"offset":134},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Delete","position":{"start":{"line":2,"column":136,"offset":136},"end":{"line":2,"column":142,"offset":142},"indent":[]}}],"position":{"start":{"line":2,"column":134,"offset":134},"end":{"line":2,"column":144,"offset":144},"indent":[]}},{"type":"text","value":" statement. This mean that truncated table cannot be restored, neither you can have a where clause into the SQL statement. Truncate also has the ability to reset the seed to its initial value. ","position":{"start":{"line":2,"column":144,"offset":144},"end":{"line":2,"column":337,"offset":337},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"On delete","position":{"start":{"line":2,"column":339,"offset":339},"end":{"line":2,"column":348,"offset":348},"indent":[]}}],"position":{"start":{"line":2,"column":337,"offset":337},"end":{"line":2,"column":350,"offset":350},"indent":[]}},{"type":"text","value":" triggers are also not fired and all foreign keys constraint must be removed or disabled.","position":{"start":{"line":2,"column":350,"offset":350},"end":{"line":2,"column":439,"offset":439},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":439,"offset":439},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of removing all constraints, it is possible to tell SQL Server to not check foreign key.","position":{"start":{"line":4,"column":1,"offset":441},"end":{"line":4,"column":97,"offset":537},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":441},"end":{"line":4,"column":97,"offset":537},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" SET FOREIGN_KEY_CHECKS = 0; TRUNCATE TABLE [Schema].[Table]; SET FOREIGN_KEY_CHECKS = 1; ","position":{"start":{"line":7,"column":1,"offset":540},"end":{"line":9,"column":4,"offset":641},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will result to remove data of the table in the fastest way possible. If you want to have more details you can check that article that I previously wrote about ","position":{"start":{"line":12,"column":1,"offset":644},"end":{"line":12,"column":165,"offset":808},"indent":[]}},{"type":"link","title":"The difference between SQL Delete statement and SQL Truncate statement","url":"./the-difference-between-sql-delete-statement-and-sql-truncate-statement","children":[{"type":"text","value":"Truncate vs Delete","position":{"start":{"line":12,"column":166,"offset":809},"end":{"line":12,"column":184,"offset":827},"indent":[]}}],"position":{"start":{"line":12,"column":165,"offset":808},"end":{"line":12,"column":332,"offset":975},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":12,"column":332,"offset":975},"end":{"line":12,"column":333,"offset":976},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":644},"end":{"line":12,"column":333,"offset":976},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Truncate a table without removing all constraints\",\"date\":\"2014-05-01\",\"categories\":[\"sql\"]}","position":{"start":{"line":15,"column":1,"offset":979},"end":{"line":15,"column":131,"offset":1109},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":131,"offset":1109}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Truncate a table without removing all constraints\",\n  \"date\": \"2014-05-01\",\n  \"categories\": [\"sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Truncated\"), \" a table as the advantage to remove every data without logging or locking every rows. This is a huge advantage over the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Delete\"), \" statement. This mean that truncated table cannot be restored, neither you can have a where clause into the SQL statement. Truncate also has the ability to reset the seed to its initial value. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"On delete\"), \" triggers are also not fired and all foreign keys constraint must be removed or disabled.\"), mdx(\"p\", null, \"Instead of removing all constraints, it is possible to tell SQL Server to not check foreign key.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" SET FOREIGN_KEY_CHECKS = 0; TRUNCATE TABLE [Schema].[Table]; SET FOREIGN_KEY_CHECKS = 1; \\n\")), mdx(\"p\", null, \"This will result to remove data of the table in the fastest way possible. If you want to have more details you can check that article that I previously wrote about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./the-difference-between-sql-delete-statement-and-sql-truncate-statement\",\n    \"title\": \"The difference between SQL Delete statement and SQL Truncate statement\"\n  }, \"Truncate vs Delete\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Truncate a table without removing all constraints\",\n  \"date\": \"2014-05-01\",\n  \"categories\": [\"sql\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><strong parentName=\"p\">{`Truncated`}</strong>{` a table as the advantage to remove every data without logging or locking every rows. This is a huge advantage over the `}<strong parentName=\"p\">{`Delete`}</strong>{` statement. This mean that truncated table cannot be restored, neither you can have a where clause into the SQL statement. Truncate also has the ability to reset the seed to its initial value. `}<strong parentName=\"p\">{`On delete`}</strong>{` triggers are also not fired and all foreign keys constraint must be removed or disabled.`}</p>\n    <p>{`Instead of removing all constraints, it is possible to tell SQL Server to not check foreign key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` SET FOREIGN_KEY_CHECKS = 0; TRUNCATE TABLE [Schema].[Table]; SET FOREIGN_KEY_CHECKS = 1; \n`}</code></pre>\n    <p>{`This will result to remove data of the table in the fastest way possible. If you want to have more details you can check that article that I previously wrote about `}<a parentName=\"p\" {...{\n        \"href\": \"./the-difference-between-sql-delete-statement-and-sql-truncate-statement\",\n        \"title\": \"The difference between SQL Delete statement and SQL Truncate statement\"\n      }}>{`Truncate vs Delete`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}