{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-f22b3b623ead1aed81cc53fddd6c631d--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Before going any further, this is supposed by Chrome 56+ and not many browser yet. The actual Chrome stable version is 56, hence it should be used with a good fallback.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":169,"offset":169},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":169,"offset":169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sticky position is a new CSS position that allow to have a sticky element that is not sticky all the time. This is different from fixed which place an HTML element in a place and never move. With position to sticky, you define a threshold where the element will change from relative to \"fixed\".","position":{"start":{"line":4,"column":1,"offset":171},"end":{"line":4,"column":295,"offset":465},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":171},"end":{"line":4,"column":295,"offset":465},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To illustrate, image a list that has a lot of element and once in a while you have title that you want to stick for the section. When scrolling, you want the title to unstick when you reach a new section. Every active section should have its own title fixed at the top. This can be achieved by JavaScript or now with Sticky. Here is a simple example of CSS that is applied to a class name \"list-header\" which should be used in each of section's title.","position":{"start":{"line":6,"column":1,"offset":467},"end":{"line":6,"column":452,"offset":918},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":467},"end":{"line":6,"column":452,"offset":918},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":" .list-header { position: sticky; top: 5px; } ","position":{"start":{"line":9,"column":1,"offset":921},"end":{"line":11,"column":4,"offset":978},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Every time the user scroll down, if the title reach the top by 5px (so not already touching the top but almost) the sticky get away until a new title reach the top. Normally, you want a very small number because otherwise, it will start getting sticky too early. In the example above, you would see a 5px game between the top of the title and the top of the container. A top of 1 or -1 would make more sense because the title would be almost flush to the top of the container.","position":{"start":{"line":14,"column":1,"offset":981},"end":{"line":14,"column":477,"offset":1457},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":981},"end":{"line":14,"column":477,"offset":1457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can see an example (inspired by Mozilla's documentation) here : ","position":{"start":{"line":16,"column":1,"offset":1459},"end":{"line":16,"column":69,"offset":1527},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/mrdesjardins/pen/RpwLMy","children":[{"type":"text","value":"https://codepen.io/mrdesjardins/pen/RpwLMy","position":{"start":{"line":16,"column":70,"offset":1528},"end":{"line":16,"column":112,"offset":1570},"indent":[]}}],"position":{"start":{"line":16,"column":69,"offset":1527},"end":{"line":16,"column":157,"offset":1615},"indent":[]}},{"type":"text","value":" which will produce this output:","position":{"start":{"line":16,"column":157,"offset":1615},"end":{"line":16,"column":189,"offset":1647},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1459},"end":{"line":16,"column":189,"offset":1647},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"images/CssPositionSticky.gif","alt":null,"position":{"start":{"line":18,"column":1,"offset":1649},"end":{"line":18,"column":34,"offset":1682},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1649},"end":{"line":18,"column":34,"offset":1682},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"CSS Sticky Position\",\"date\":\"2017-03-29\",\"categories\":[\"css\"]}","position":{"start":{"line":21,"column":1,"offset":1685},"end":{"line":21,"column":101,"offset":1785},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":101,"offset":1785}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CSS Sticky Position\",\n  \"date\": \"2017-03-29\",\n  \"categories\": [\"css\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Before going any further, this is supposed by Chrome 56+ and not many browser yet. The actual Chrome stable version is 56, hence it should be used with a good fallback.\"), mdx(\"p\", null, \"Sticky position is a new CSS position that allow to have a sticky element that is not sticky all the time. This is different from fixed which place an HTML element in a place and never move. With position to sticky, you define a threshold where the element will change from relative to \\\"fixed\\\".\"), mdx(\"p\", null, \"To illustrate, image a list that has a lot of element and once in a while you have title that you want to stick for the section. When scrolling, you want the title to unstick when you reach a new section. Every active section should have its own title fixed at the top. This can be achieved by JavaScript or now with Sticky. Here is a simple example of CSS that is applied to a class name \\\"list-header\\\" which should be used in each of section's title.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \" .list-header { position: sticky; top: 5px; } \\n\")), mdx(\"p\", null, \"Every time the user scroll down, if the title reach the top by 5px (so not already touching the top but almost) the sticky get away until a new title reach the top. Normally, you want a very small number because otherwise, it will start getting sticky too early. In the example above, you would see a 5px game between the top of the title and the top of the container. A top of 1 or -1 would make more sense because the title would be almost flush to the top of the container.\"), mdx(\"p\", null, \"You can see an example (inspired by Mozilla's documentation) here : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codepen.io/mrdesjardins/pen/RpwLMy\"\n  }, \"https://codepen.io/mrdesjardins/pen/RpwLMy\"), \" which will produce this output:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"images/CssPositionSticky.gif\",\n    \"alt\": null\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"CSS Sticky Position\",\n  \"date\": \"2017-03-29\",\n  \"categories\": [\"css\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Before going any further, this is supposed by Chrome 56+ and not many browser yet. The actual Chrome stable version is 56, hence it should be used with a good fallback.`}</p>\n    <p>{`Sticky position is a new CSS position that allow to have a sticky element that is not sticky all the time. This is different from fixed which place an HTML element in a place and never move. With position to sticky, you define a threshold where the element will change from relative to \"fixed\".`}</p>\n    <p>{`To illustrate, image a list that has a lot of element and once in a while you have title that you want to stick for the section. When scrolling, you want the title to unstick when you reach a new section. Every active section should have its own title fixed at the top. This can be achieved by JavaScript or now with Sticky. Here is a simple example of CSS that is applied to a class name \"list-header\" which should be used in each of section's title.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{` .list-header { position: sticky; top: 5px; } \n`}</code></pre>\n    <p>{`Every time the user scroll down, if the title reach the top by 5px (so not already touching the top but almost) the sticky get away until a new title reach the top. Normally, you want a very small number because otherwise, it will start getting sticky too early. In the example above, you would see a 5px game between the top of the title and the top of the container. A top of 1 or -1 would make more sense because the title would be almost flush to the top of the container.`}</p>\n    <p>{`You can see an example (inspired by Mozilla's documentation) here : `}<a parentName=\"p\" {...{\n        \"href\": \"https://codepen.io/mrdesjardins/pen/RpwLMy\"\n      }}>{`https://codepen.io/mrdesjardins/pen/RpwLMy`}</a>{` which will produce this output:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"images/CssPositionSticky.gif\",\n        \"alt\": null\n      }}></img></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}