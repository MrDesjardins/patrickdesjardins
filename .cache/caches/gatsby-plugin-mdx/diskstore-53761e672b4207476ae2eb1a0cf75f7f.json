{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-696d3ab9354f7a9872b9310d7bf6a5df--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"JavaScript has three methods that are useful to assign on what ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":64,"offset":64},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":2,"column":64,"offset":64},"end":{"line":2,"column":70,"offset":70},"indent":[]}},{"type":"text","value":" refer to. These three methods are Bind, Apply and Call.","position":{"start":{"line":2,"column":70,"offset":70},"end":{"line":2,"column":126,"offset":126},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":126,"offset":126},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Bind are from the prototype of Function. It takes as first parameter the reference to ","position":{"start":{"line":4,"column":1,"offset":128},"end":{"line":4,"column":87,"offset":214},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":4,"column":87,"offset":214},"end":{"line":4,"column":93,"offset":220},"indent":[]}},{"type":"text","value":", and all the subsequent parameters to be the argument to the function. The Bind method return a copy of the function with this one having the ","position":{"start":{"line":4,"column":93,"offset":220},"end":{"line":4,"column":236,"offset":363},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":4,"column":236,"offset":363},"end":{"line":4,"column":242,"offset":369},"indent":[]}},{"type":"text","value":" to the one desired.","position":{"start":{"line":4,"column":242,"offset":369},"end":{"line":4,"column":262,"offset":389},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":128},"end":{"line":4,"column":262,"offset":389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Call is similar, but instead of returning a copy with the provided reference to ","position":{"start":{"line":6,"column":1,"offset":391},"end":{"line":6,"column":81,"offset":471},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":6,"column":81,"offset":471},"end":{"line":6,"column":87,"offset":477},"indent":[]}},{"type":"text","value":", it provides the ","position":{"start":{"line":6,"column":87,"offset":477},"end":{"line":6,"column":105,"offset":495},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":6,"column":105,"offset":495},"end":{"line":6,"column":111,"offset":501},"indent":[]}},{"type":"text","value":" reference and invoke the method.","position":{"start":{"line":6,"column":111,"offset":501},"end":{"line":6,"column":144,"offset":534},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":391},"end":{"line":6,"column":144,"offset":534},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Apply is like call but the second parameter is an array instead of being a signature with undermined amount of parameter.","position":{"start":{"line":8,"column":1,"offset":536},"end":{"line":8,"column":122,"offset":657},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":536},"end":{"line":8,"column":122,"offset":657},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example to distinct the difference:","position":{"start":{"line":10,"column":1,"offset":659},"end":{"line":10,"column":47,"offset":705},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":659},"end":{"line":10,"column":47,"offset":705},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"f1.call(myThisRef, param1, param2, param3);\n// or\nf1.apply(myThisRef, [param1, param2, param3]);","position":{"start":{"line":12,"column":1,"offset":707},"end":{"line":16,"column":4,"offset":821},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"How can this be useful? This can be useful to change the context of a piece of code to access different member without assigning the values. For example, in the following code we have the same function and by calling apply or bind we can assign ","position":{"start":{"line":18,"column":1,"offset":823},"end":{"line":18,"column":246,"offset":1068},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":18,"column":246,"offset":1068},"end":{"line":18,"column":252,"offset":1074},"indent":[]}},{"type":"text","value":" to a complete new object that has what is using by ","position":{"start":{"line":18,"column":252,"offset":1074},"end":{"line":18,"column":304,"offset":1126},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":18,"column":304,"offset":1126},"end":{"line":18,"column":310,"offset":1132},"indent":[]}},{"type":"text","value":", in that case the_name.","position":{"start":{"line":18,"column":310,"offset":1132},"end":{"line":18,"column":334,"offset":1156},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":823},"end":{"line":18,"column":334,"offset":1156},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var hero = {\n  _name: \"John Doe\",\n  getName: function () {\n    return this._name;\n  },\n};\n\nconsole.log(hero.getName()); // John Do\n// --- var\nhero2 = { _name: \"Patrick\" };\nvar getNameMethod = hero.getName;\n\nconsole.log(getNameMethod.apply(hero2)); // Patrick\nconsole.log(getNameMethod.bind(hero2)()); // Patrick","position":{"start":{"line":20,"column":1,"offset":1158},"end":{"line":35,"column":4,"offset":1487},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This example illustrates that apply can be called to have momentary a call with a reference to the hero2 instead of the original hero. On the next line, the bind method is called and executed by using the parentheses right away. Normally, we would store the return value of the bind method to get an object that can get subsequent calls with the hero2 ","position":{"start":{"line":37,"column":1,"offset":1489},"end":{"line":37,"column":353,"offset":1841},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":37,"column":353,"offset":1841},"end":{"line":37,"column":359,"offset":1847},"indent":[]}},{"type":"text","value":" reference.","position":{"start":{"line":37,"column":359,"offset":1847},"end":{"line":37,"column":370,"offset":1858},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1489},"end":{"line":37,"column":370,"offset":1858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When to use of of the other? apply and call should be used when it's only for one invocation. Bind should be used to store the new variable with that will have a ","position":{"start":{"line":39,"column":1,"offset":1860},"end":{"line":39,"column":163,"offset":2022},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":39,"column":163,"offset":2022},"end":{"line":39,"column":169,"offset":2028},"indent":[]}},{"type":"text","value":" with the provided reference to ","position":{"start":{"line":39,"column":169,"offset":2028},"end":{"line":39,"column":201,"offset":2060},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":39,"column":201,"offset":2060},"end":{"line":39,"column":207,"offset":2066},"indent":[]}},{"type":"text","value":" when created with bind.","position":{"start":{"line":39,"column":207,"offset":2066},"end":{"line":39,"column":231,"offset":2090},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1860},"end":{"line":39,"column":231,"offset":2090},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Bind and Apply/Call Method\",\"date\":\"2017-05-29\",\"categories\":[\"javascript\"]}","position":{"start":{"line":42,"column":1,"offset":2093},"end":{"line":42,"column":126,"offset":2218},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":42,"column":126,"offset":2218}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Bind and Apply/Call Method\",\n  \"date\": \"2017-05-29\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JavaScript has three methods that are useful to assign on what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" refer to. These three methods are Bind, Apply and Call.\"), mdx(\"p\", null, \"Bind are from the prototype of Function. It takes as first parameter the reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", and all the subsequent parameters to be the argument to the function. The Bind method return a copy of the function with this one having the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" to the one desired.\"), mdx(\"p\", null, \"Call is similar, but instead of returning a copy with the provided reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", it provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" reference and invoke the method.\"), mdx(\"p\", null, \"Apply is like call but the second parameter is an array instead of being a signature with undermined amount of parameter.\"), mdx(\"p\", null, \"Here is an example to distinct the difference:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"f1.call(myThisRef, param1, param2, param3);\\n// or\\nf1.apply(myThisRef, [param1, param2, param3]);\\n\")), mdx(\"p\", null, \"How can this be useful? This can be useful to change the context of a piece of code to access different member without assigning the values. For example, in the following code we have the same function and by calling apply or bind we can assign \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" to a complete new object that has what is using by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", in that case the_name.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var hero = {\\n  _name: \\\"John Doe\\\",\\n  getName: function () {\\n    return this._name;\\n  },\\n};\\n\\nconsole.log(hero.getName()); // John Do\\n// --- var\\nhero2 = { _name: \\\"Patrick\\\" };\\nvar getNameMethod = hero.getName;\\n\\nconsole.log(getNameMethod.apply(hero2)); // Patrick\\nconsole.log(getNameMethod.bind(hero2)()); // Patrick\\n\")), mdx(\"p\", null, \"This example illustrates that apply can be called to have momentary a call with a reference to the hero2 instead of the original hero. On the next line, the bind method is called and executed by using the parentheses right away. Normally, we would store the return value of the bind method to get an object that can get subsequent calls with the hero2 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" reference.\"), mdx(\"p\", null, \"When to use of of the other? apply and call should be used when it's only for one invocation. Bind should be used to store the new variable with that will have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" with the provided reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" when created with bind.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Bind and Apply/Call Method\",\n  \"date\": \"2017-05-29\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`JavaScript has three methods that are useful to assign on what `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` refer to. These three methods are Bind, Apply and Call.`}</p>\n    <p>{`Bind are from the prototype of Function. It takes as first parameter the reference to `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, and all the subsequent parameters to be the argument to the function. The Bind method return a copy of the function with this one having the `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` to the one desired.`}</p>\n    <p>{`Call is similar, but instead of returning a copy with the provided reference to `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, it provides the `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` reference and invoke the method.`}</p>\n    <p>{`Apply is like call but the second parameter is an array instead of being a signature with undermined amount of parameter.`}</p>\n    <p>{`Here is an example to distinct the difference:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`f1.call(myThisRef, param1, param2, param3);\n// or\nf1.apply(myThisRef, [param1, param2, param3]);\n`}</code></pre>\n    <p>{`How can this be useful? This can be useful to change the context of a piece of code to access different member without assigning the values. For example, in the following code we have the same function and by calling apply or bind we can assign `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` to a complete new object that has what is using by `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, in that case the_name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var hero = {\n  _name: \"John Doe\",\n  getName: function () {\n    return this._name;\n  },\n};\n\nconsole.log(hero.getName()); // John Do\n// --- var\nhero2 = { _name: \"Patrick\" };\nvar getNameMethod = hero.getName;\n\nconsole.log(getNameMethod.apply(hero2)); // Patrick\nconsole.log(getNameMethod.bind(hero2)()); // Patrick\n`}</code></pre>\n    <p>{`This example illustrates that apply can be called to have momentary a call with a reference to the hero2 instead of the original hero. On the next line, the bind method is called and executed by using the parentheses right away. Normally, we would store the return value of the bind method to get an object that can get subsequent calls with the hero2 `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` reference.`}</p>\n    <p>{`When to use of of the other? apply and call should be used when it's only for one invocation. Bind should be used to store the new variable with that will have a `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` with the provided reference to `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` when created with bind.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}