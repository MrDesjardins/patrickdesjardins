{"expireTime":9007200886478389000,"key":"gatsby-plugin-mdx-entire-payload-acfd04258a39bb6cf221af372b2c10a3--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When you are using Entity Framework, you must have a class that inherit ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":73,"offset":73},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbContext","position":{"start":{"line":2,"column":75,"offset":75},"end":{"line":2,"column":84,"offset":84},"indent":[]}}],"position":{"start":{"line":2,"column":73,"offset":73},"end":{"line":2,"column":86,"offset":86},"indent":[]}},{"type":"text","value":" class at some point. Multiple options is offer to you to register to Entity Framework (EF) definition of your entities.","position":{"start":{"line":2,"column":86,"offset":86},"end":{"line":2,"column":206,"offset":206},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":206,"offset":206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The one we see in tutorial is based on the overridden method ","position":{"start":{"line":4,"column":1,"offset":208},"end":{"line":4,"column":62,"offset":269},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OnModelCreation","position":{"start":{"line":4,"column":64,"offset":271},"end":{"line":4,"column":79,"offset":286},"indent":[]}}],"position":{"start":{"line":4,"column":62,"offset":269},"end":{"line":4,"column":81,"offset":288},"indent":[]}},{"type":"text","value":" that has a single parameter of type ","position":{"start":{"line":4,"column":81,"offset":288},"end":{"line":4,"column":118,"offset":325},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbModelBuilder","position":{"start":{"line":4,"column":120,"offset":327},"end":{"line":4,"column":134,"offset":341},"indent":[]}}],"position":{"start":{"line":4,"column":118,"offset":325},"end":{"line":4,"column":136,"offset":343},"indent":[]}},{"type":"text","value":". This is the entry point for all way to proceed with registration. Nevertheless, in tutorial the configuration is done directly in the method. The following code shows how it is usually done. For the purpose of being short, only a single primary key is defined for a single entity. The fact is that method can become very big.","position":{"start":{"line":4,"column":136,"offset":343},"end":{"line":4,"column":463,"offset":670},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":208},"end":{"line":4,"column":463,"offset":670},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity<YourEntity>().HasKey(d => d.Id); base.OnModelCreating(modelBuilder); } } ","position":{"start":{"line":6,"column":1,"offset":672},"end":{"line":8,"column":4,"offset":889},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is why, the best practice is to have a single class for every entity configuration. This is done by inheriting every classes by ","position":{"start":{"line":10,"column":1,"offset":891},"end":{"line":10,"column":134,"offset":1024},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"EntityTypeConfiguration","position":{"start":{"line":10,"column":136,"offset":1026},"end":{"line":10,"column":159,"offset":1049},"indent":[]}}],"position":{"start":{"line":10,"column":134,"offset":1024},"end":{"line":10,"column":161,"offset":1051},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":161,"offset":1051},"end":{"line":10,"column":162,"offset":1052},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":891},"end":{"line":10,"column":162,"offset":1052},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public class YourEntityConfiguration : EntityTypeConfiguration<YourEntity> { public YourEntityConfiguration() { this.HasKey(d => d.Id); } } ","position":{"start":{"line":12,"column":1,"offset":1054},"end":{"line":14,"column":5,"offset":1209},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Once you have your classes defined, the OnModelCreating can register them.","position":{"start":{"line":16,"column":1,"offset":1211},"end":{"line":16,"column":75,"offset":1285},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1211},"end":{"line":16,"column":75,"offset":1285},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configurations.Add(new YourEntityConfiguration()); base.OnModelCreating(modelBuilder); } } ","position":{"start":{"line":18,"column":1,"offset":1287},"end":{"line":20,"column":4,"offset":1515},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The problem is that you have to remember to register the entity and also that this method can become very huge on big project. Concerning the possibility to forget to register, Entity Framework (EF) will raise an exception saying that it does not know the entity type. It is not a big deal and the message is quite easy to understand. However, having to add this line of code become something to do in a big list of things to do. To keep it simpler, Entity Framework team thought that we could simply specify which assembly every configuration are and to look up for every classes that inherit the ","position":{"start":{"line":22,"column":1,"offset":1517},"end":{"line":22,"column":599,"offset":2115},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"EntityTypeConfiguration","position":{"start":{"line":22,"column":601,"offset":2117},"end":{"line":22,"column":624,"offset":2140},"indent":[]}}],"position":{"start":{"line":22,"column":599,"offset":2115},"end":{"line":22,"column":626,"offset":2142},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":22,"column":626,"offset":2142},"end":{"line":22,"column":627,"offset":2143},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1517},"end":{"line":22,"column":627,"offset":2143},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configurations.AddFromAssembly(Assembly.GetAssembly(GetType())); //Current Assembly base.OnModelCreating(modelBuilder); } } ","position":{"start":{"line":25,"column":1,"offset":2146},"end":{"line":27,"column":4,"offset":2408},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above example shows that configurations are added from an assembly. It takes a single parameter that is the assembly to look up. If you want the current assembly, use Assembly.GetAssembly(GetType()).","position":{"start":{"line":29,"column":1,"offset":2410},"end":{"line":29,"column":204,"offset":2613},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2410},"end":{"line":29,"column":204,"offset":2613},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to register Model Builder without having to manually add them one by one\",\"date\":\"2014-01-31\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":32,"column":1,"offset":2616},"end":{"line":32,"column":171,"offset":2786},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":32,"column":171,"offset":2786}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to register Model Builder without having to manually add them one by one\",\n  \"date\": \"2014-01-31\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you are using Entity Framework, you must have a class that inherit \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbContext\"), \" class at some point. Multiple options is offer to you to register to Entity Framework (EF) definition of your entities.\"), mdx(\"p\", null, \"The one we see in tutorial is based on the overridden method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OnModelCreation\"), \" that has a single parameter of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbModelBuilder\"), \". This is the entry point for all way to proceed with registration. Nevertheless, in tutorial the configuration is done directly in the method. The following code shows how it is usually done. For the purpose of being short, only a single primary key is defined for a single entity. The fact is that method can become very big.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity<YourEntity>().HasKey(d => d.Id); base.OnModelCreating(modelBuilder); } } \\n\")), mdx(\"p\", null, \"This is why, the best practice is to have a single class for every entity configuration. This is done by inheriting every classes by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"EntityTypeConfiguration\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class YourEntityConfiguration : EntityTypeConfiguration<YourEntity> { public YourEntityConfiguration() { this.HasKey(d => d.Id); } } \\n\")), mdx(\"p\", null, \"Once you have your classes defined, the OnModelCreating can register them.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configurations.Add(new YourEntityConfiguration()); base.OnModelCreating(modelBuilder); } } \\n\")), mdx(\"p\", null, \"The problem is that you have to remember to register the entity and also that this method can become very huge on big project. Concerning the possibility to forget to register, Entity Framework (EF) will raise an exception saying that it does not know the entity type. It is not a big deal and the message is quite easy to understand. However, having to add this line of code become something to do in a big list of things to do. To keep it simpler, Entity Framework team thought that we could simply specify which assembly every configuration are and to look up for every classes that inherit the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"EntityTypeConfiguration\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configurations.AddFromAssembly(Assembly.GetAssembly(GetType())); //Current Assembly base.OnModelCreating(modelBuilder); } } \\n\")), mdx(\"p\", null, \"The above example shows that configurations are added from an assembly. It takes a single parameter that is the assembly to look up. If you want the current assembly, use Assembly.GetAssembly(GetType()).\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to register Model Builder without having to manually add them one by one\",\n  \"date\": \"2014-01-31\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When you are using Entity Framework, you must have a class that inherit `}<strong parentName=\"p\">{`DbContext`}</strong>{` class at some point. Multiple options is offer to you to register to Entity Framework (EF) definition of your entities.`}</p>\n    <p>{`The one we see in tutorial is based on the overridden method `}<strong parentName=\"p\">{`OnModelCreation`}</strong>{` that has a single parameter of type `}<strong parentName=\"p\">{`DbModelBuilder`}</strong>{`. This is the entry point for all way to proceed with registration. Nevertheless, in tutorial the configuration is done directly in the method. The following code shows how it is usually done. For the purpose of being short, only a single primary key is defined for a single entity. The fact is that method can become very big.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity<YourEntity>().HasKey(d => d.Id); base.OnModelCreating(modelBuilder); } } \n`}</code></pre>\n    <p>{`This is why, the best practice is to have a single class for every entity configuration. This is done by inheriting every classes by `}<strong parentName=\"p\">{`EntityTypeConfiguration`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public class YourEntityConfiguration : EntityTypeConfiguration<YourEntity> { public YourEntityConfiguration() { this.HasKey(d => d.Id); } } \n`}</code></pre>\n    <p>{`Once you have your classes defined, the OnModelCreating can register them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configurations.Add(new YourEntityConfiguration()); base.OnModelCreating(modelBuilder); } } \n`}</code></pre>\n    <p>{`The problem is that you have to remember to register the entity and also that this method can become very huge on big project. Concerning the possibility to forget to register, Entity Framework (EF) will raise an exception saying that it does not know the entity type. It is not a big deal and the message is quite easy to understand. However, having to add this line of code become something to do in a big list of things to do. To keep it simpler, Entity Framework team thought that we could simply specify which assembly every configuration are and to look up for every classes that inherit the `}<strong parentName=\"p\">{`EntityTypeConfiguration`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class MyDbContext : DbContext { protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configurations.AddFromAssembly(Assembly.GetAssembly(GetType())); //Current Assembly base.OnModelCreating(modelBuilder); } } \n`}</code></pre>\n    <p>{`The above example shows that configurations are added from an assembly. It takes a single parameter that is the assembly to look up. If you want the current assembly, use Assembly.GetAssembly(GetType()).`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}