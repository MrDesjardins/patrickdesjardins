{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-a2d27f4987e6b7421cd9d7d453e5e685--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you have simple class, even if this one contain underlying classes, Asp.Net MVC takes care of creating all html input for you and takes care to rebound everything into objects once the form is submitted back. However, if you have a custom control (called template in Asp.Net MVC) which let you add sub objects with multiple properties to your main object, you will have to handle it manually.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":396,"offset":396},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":396,"offset":396},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, in this type of scenario, you should use ","position":{"start":{"line":4,"column":1,"offset":398},"end":{"line":4,"column":56,"offset":453},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"UIHint","position":{"start":{"line":4,"column":58,"offset":455},"end":{"line":4,"column":64,"offset":461},"indent":[]}}],"position":{"start":{"line":4,"column":56,"offset":453},"end":{"line":4,"column":66,"offset":463},"indent":[]}},{"type":"text","value":" or Html Helper to generate the control itself.","position":{"start":{"line":4,"column":66,"offset":463},"end":{"line":4,"column":113,"offset":510},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":398},"end":{"line":4,"column":113,"offset":510},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class MyObject { public int MyObjectId{get;set;} [UIHint(\"MyTemplate\")] public MyInnerObject ParticipationsRepartitionActif { get; set; } }\n\npublic class MyInnerObject { public int Uid{get;set;} public MyItems Items{get;set;} }\n\npublic class MyItems { public int Id{get;set;} public DateTime Date1{get;set;} public DateTime Date2{get;set;} public string Comment{get;set;} } ","position":{"start":{"line":7,"column":1,"offset":513},"end":{"line":13,"column":4,"offset":909},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":15,"column":1,"offset":911},"end":{"line":15,"column":5,"offset":915},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"UIHint","position":{"start":{"line":15,"column":7,"offset":917},"end":{"line":15,"column":13,"offset":923},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":915},"end":{"line":15,"column":15,"offset":925},"indent":[]}},{"type":"text","value":" will generate the correct html output for the user. Let say that this UIHint lets you select two dates and a comment. When you click a button, a row is added to a grid which let the user enter dates and a comment. The problem is how to send back these 3 information to the server in a way that the user could enter several lines in the same time.","position":{"start":{"line":15,"column":15,"offset":925},"end":{"line":15,"column":362,"offset":1272},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":911},"end":{"line":15,"column":362,"offset":1272},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution is to send back a collection of property in a format that Asp.Net MVC will be able to map back to your model class.","position":{"start":{"line":17,"column":1,"offset":1274},"end":{"line":17,"column":129,"offset":1402},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1274},"end":{"line":17,"column":129,"offset":1402},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing to do is to create an hidden field to your template with the name of the property that your model has (or view model in the case you are binding a view model to the view). This will bound the property to your template with an hidden field. This hidden field will be the transportation channel to send a collection of information that your grid contains.","position":{"start":{"line":19,"column":1,"offset":1404},"end":{"line":19,"column":370,"offset":1773},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1404},"end":{"line":19,"column":370,"offset":1773},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second thing is to populate this hidden field. You will need to set in your save button a Javascript that will loop through all lines and transform all html inputs into a serialized Json object.","position":{"start":{"line":21,"column":1,"offset":1775},"end":{"line":21,"column":199,"offset":1973},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1775},"end":{"line":21,"column":199,"offset":1973},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" $(document).on('click', '#mySaveButton', function (e) { //1) Transform here all grid lines into the hidden field //2) Be sure you do not prevent default action or return false because we want to server to post normally. }); ","position":{"start":{"line":24,"column":1,"offset":1976},"end":{"line":26,"column":4,"offset":2215},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This Json object will be in a string format where we will insert it into the hidden field. Once saved, the hidden field is sent has other normal html field and Asp.Net MVC will deserialize it correctly. ","position":{"start":{"line":28,"column":1,"offset":2217},"end":{"line":28,"column":204,"offset":2420},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2217},"end":{"line":28,"column":204,"offset":2420},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" function SetHiddenField() { var obj = {}; obj.Items = []; $('myControlThatHasAListOfItems').each(function () { var myObjectToSerialize = {}; myObjectToSerialize.ID = $(this)...; myObjectToSerialize.Date1 = $(this)...; myObjectToSerialize.Date2 = $(this)...; myObjectToSerialize.Comment = $(this)...; obj.Items.push(myObjectToSerialize); }); $('#MyHiddenField').val(JSON.stringify(obj)); } \n``` Of course, do not create a Javascript function hard coded like this one. You should create it in a way where you could have multiple of this custom template control in the same page without conflicting or having to edit this code in the future. In this example, the hidden field should be called \"Items\" and will be bound with the hidden field. Asp.Net MVC will deserialize the Json when it will be ready to bound Items. Since all properties' name match the binding is done by magic. From here, you can use on your controller the model and save everything.\n\n## Complex binding\n\nIn the case the object contains a type that Asp.Net MVC cannot handle for deserializing, you will have to create a model binder. This is done by creating in the **Global.Asax.cs** an entry for a model binding: \n```csharp\n ModelBinders.Binders.Add(typeof(YourComplexClass<bool>), new YourComplexClassModelBinder()); \n``` And the binder. The following code have to be modified to fulfill your need.\n\n\n```csharp\n public class YourComplexClassModelBinder:IModelBinder { public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext) { var valueResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName); var modelState = new ModelState { Value = valueResult };\n\nYourComplexClass<bool> actualValue = null; if (!string.IsNullOrWhiteSpace(valueResult.AttemptedValue)) { var settings = new JsonSerializerSettings(); settings.Converters.Add(new JSonComplexConverterForYourComplexClass()); try { actualValue = JsonConvert.DeserializeObject<YourComplexClass<bool>>(valueResult.AttemptedValue, settings); } catch (FormatException e) { modelState.Errors.Add(e); } } bindingContext.ModelState.Add(bindingContext.ModelName, modelState); return actualValue; }\n\npublic class JSonComplexConverterForYourComplexClass : JsonConverter { public override bool CanConvert(Type objectType) { return (objectType == typeof(I_XYZ<bool>)); }\n\npublic override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) { return serializer.Deserialize<XYZ>(reader); }\n\npublic override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) { throw new NotImplementedException(); } } } ","position":{"start":{"line":29,"column":1,"offset":2421},"end":{"line":51,"column":4,"offset":5072},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is often the case of Interface that need to be deserialized into a concrete class. In the above example, I_XYZ was the interface but when it's the time to deserialize, Asp.Net MVC doesn't know to which type to deserialize. This is why, we provide a model binder for the class that contains the property that has I_XYZ interface and provide to Json.Net library how to read the Json for deserialization.","position":{"start":{"line":53,"column":1,"offset":5074},"end":{"line":53,"column":407,"offset":5480},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":5074},"end":{"line":53,"column":407,"offset":5480},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Binding complex user template values to your Model with Asp.Net MVC\",\"date\":\"2013-03-26\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":56,"column":1,"offset":5483},"end":{"line":56,"column":153,"offset":5635},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":56,"column":153,"offset":5635}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Binding complex user template values to your Model with Asp.Net MVC\",\n  \"date\": \"2013-03-26\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have simple class, even if this one contain underlying classes, Asp.Net MVC takes care of creating all html input for you and takes care to rebound everything into objects once the form is submitted back. However, if you have a custom control (called template in Asp.Net MVC) which let you add sub objects with multiple properties to your main object, you will have to handle it manually.\"), mdx(\"p\", null, \"First of all, in this type of scenario, you should use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UIHint\"), \" or Html Helper to generate the control itself.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class MyObject { public int MyObjectId{get;set;} [UIHint(\\\"MyTemplate\\\")] public MyInnerObject ParticipationsRepartitionActif { get; set; } }\\n\\npublic class MyInnerObject { public int Uid{get;set;} public MyItems Items{get;set;} }\\n\\npublic class MyItems { public int Id{get;set;} public DateTime Date1{get;set;} public DateTime Date2{get;set;} public string Comment{get;set;} } \\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UIHint\"), \" will generate the correct html output for the user. Let say that this UIHint lets you select two dates and a comment. When you click a button, a row is added to a grid which let the user enter dates and a comment. The problem is how to send back these 3 information to the server in a way that the user could enter several lines in the same time.\"), mdx(\"p\", null, \"The solution is to send back a collection of property in a format that Asp.Net MVC will be able to map back to your model class.\"), mdx(\"p\", null, \"The first thing to do is to create an hidden field to your template with the name of the property that your model has (or view model in the case you are binding a view model to the view). This will bound the property to your template with an hidden field. This hidden field will be the transportation channel to send a collection of information that your grid contains.\"), mdx(\"p\", null, \"The second thing is to populate this hidden field. You will need to set in your save button a Javascript that will loop through all lines and transform all html inputs into a serialized Json object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" $(document).on('click', '#mySaveButton', function (e) { //1) Transform here all grid lines into the hidden field //2) Be sure you do not prevent default action or return false because we want to server to post normally. }); \\n\")), mdx(\"p\", null, \"This Json object will be in a string format where we will insert it into the hidden field. Once saved, the hidden field is sent has other normal html field and Asp.Net MVC will deserialize it correctly. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" function SetHiddenField() { var obj = {}; obj.Items = []; $('myControlThatHasAListOfItems').each(function () { var myObjectToSerialize = {}; myObjectToSerialize.ID = $(this)...; myObjectToSerialize.Date1 = $(this)...; myObjectToSerialize.Date2 = $(this)...; myObjectToSerialize.Comment = $(this)...; obj.Items.push(myObjectToSerialize); }); $('#MyHiddenField').val(JSON.stringify(obj)); } \\n``` Of course, do not create a Javascript function hard coded like this one. You should create it in a way where you could have multiple of this custom template control in the same page without conflicting or having to edit this code in the future. In this example, the hidden field should be called \\\"Items\\\" and will be bound with the hidden field. Asp.Net MVC will deserialize the Json when it will be ready to bound Items. Since all properties' name match the binding is done by magic. From here, you can use on your controller the model and save everything.\\n\\n## Complex binding\\n\\nIn the case the object contains a type that Asp.Net MVC cannot handle for deserializing, you will have to create a model binder. This is done by creating in the **Global.Asax.cs** an entry for a model binding: \\n```csharp\\n ModelBinders.Binders.Add(typeof(YourComplexClass<bool>), new YourComplexClassModelBinder()); \\n``` And the binder. The following code have to be modified to fulfill your need.\\n\\n\\n```csharp\\n public class YourComplexClassModelBinder:IModelBinder { public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext) { var valueResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName); var modelState = new ModelState { Value = valueResult };\\n\\nYourComplexClass<bool> actualValue = null; if (!string.IsNullOrWhiteSpace(valueResult.AttemptedValue)) { var settings = new JsonSerializerSettings(); settings.Converters.Add(new JSonComplexConverterForYourComplexClass()); try { actualValue = JsonConvert.DeserializeObject<YourComplexClass<bool>>(valueResult.AttemptedValue, settings); } catch (FormatException e) { modelState.Errors.Add(e); } } bindingContext.ModelState.Add(bindingContext.ModelName, modelState); return actualValue; }\\n\\npublic class JSonComplexConverterForYourComplexClass : JsonConverter { public override bool CanConvert(Type objectType) { return (objectType == typeof(I_XYZ<bool>)); }\\n\\npublic override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) { return serializer.Deserialize<XYZ>(reader); }\\n\\npublic override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) { throw new NotImplementedException(); } } } \\n\")), mdx(\"p\", null, \"This is often the case of Interface that need to be deserialized into a concrete class. In the above example, I_XYZ was the interface but when it's the time to deserialize, Asp.Net MVC doesn't know to which type to deserialize. This is why, we provide a model binder for the class that contains the property that has I_XYZ interface and provide to Json.Net library how to read the Json for deserialization.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Binding complex user template values to your Model with Asp.Net MVC\",\n  \"date\": \"2013-03-26\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you have simple class, even if this one contain underlying classes, Asp.Net MVC takes care of creating all html input for you and takes care to rebound everything into objects once the form is submitted back. However, if you have a custom control (called template in Asp.Net MVC) which let you add sub objects with multiple properties to your main object, you will have to handle it manually.`}</p>\n    <p>{`First of all, in this type of scenario, you should use `}<strong parentName=\"p\">{`UIHint`}</strong>{` or Html Helper to generate the control itself.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class MyObject { public int MyObjectId{get;set;} [UIHint(\"MyTemplate\")] public MyInnerObject ParticipationsRepartitionActif { get; set; } }\n\npublic class MyInnerObject { public int Uid{get;set;} public MyItems Items{get;set;} }\n\npublic class MyItems { public int Id{get;set;} public DateTime Date1{get;set;} public DateTime Date2{get;set;} public string Comment{get;set;} } \n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`UIHint`}</strong>{` will generate the correct html output for the user. Let say that this UIHint lets you select two dates and a comment. When you click a button, a row is added to a grid which let the user enter dates and a comment. The problem is how to send back these 3 information to the server in a way that the user could enter several lines in the same time.`}</p>\n    <p>{`The solution is to send back a collection of property in a format that Asp.Net MVC will be able to map back to your model class.`}</p>\n    <p>{`The first thing to do is to create an hidden field to your template with the name of the property that your model has (or view model in the case you are binding a view model to the view). This will bound the property to your template with an hidden field. This hidden field will be the transportation channel to send a collection of information that your grid contains.`}</p>\n    <p>{`The second thing is to populate this hidden field. You will need to set in your save button a Javascript that will loop through all lines and transform all html inputs into a serialized Json object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` $(document).on('click', '#mySaveButton', function (e) { //1) Transform here all grid lines into the hidden field //2) Be sure you do not prevent default action or return false because we want to server to post normally. }); \n`}</code></pre>\n    <p>{`This Json object will be in a string format where we will insert it into the hidden field. Once saved, the hidden field is sent has other normal html field and Asp.Net MVC will deserialize it correctly. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` function SetHiddenField() { var obj = {}; obj.Items = []; $('myControlThatHasAListOfItems').each(function () { var myObjectToSerialize = {}; myObjectToSerialize.ID = $(this)...; myObjectToSerialize.Date1 = $(this)...; myObjectToSerialize.Date2 = $(this)...; myObjectToSerialize.Comment = $(this)...; obj.Items.push(myObjectToSerialize); }); $('#MyHiddenField').val(JSON.stringify(obj)); } \n\\`\\`\\` Of course, do not create a Javascript function hard coded like this one. You should create it in a way where you could have multiple of this custom template control in the same page without conflicting or having to edit this code in the future. In this example, the hidden field should be called \"Items\" and will be bound with the hidden field. Asp.Net MVC will deserialize the Json when it will be ready to bound Items. Since all properties' name match the binding is done by magic. From here, you can use on your controller the model and save everything.\n\n## Complex binding\n\nIn the case the object contains a type that Asp.Net MVC cannot handle for deserializing, you will have to create a model binder. This is done by creating in the **Global.Asax.cs** an entry for a model binding: \n\\`\\`\\`csharp\n ModelBinders.Binders.Add(typeof(YourComplexClass<bool>), new YourComplexClassModelBinder()); \n\\`\\`\\` And the binder. The following code have to be modified to fulfill your need.\n\n\n\\`\\`\\`csharp\n public class YourComplexClassModelBinder:IModelBinder { public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext) { var valueResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName); var modelState = new ModelState { Value = valueResult };\n\nYourComplexClass<bool> actualValue = null; if (!string.IsNullOrWhiteSpace(valueResult.AttemptedValue)) { var settings = new JsonSerializerSettings(); settings.Converters.Add(new JSonComplexConverterForYourComplexClass()); try { actualValue = JsonConvert.DeserializeObject<YourComplexClass<bool>>(valueResult.AttemptedValue, settings); } catch (FormatException e) { modelState.Errors.Add(e); } } bindingContext.ModelState.Add(bindingContext.ModelName, modelState); return actualValue; }\n\npublic class JSonComplexConverterForYourComplexClass : JsonConverter { public override bool CanConvert(Type objectType) { return (objectType == typeof(I_XYZ<bool>)); }\n\npublic override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) { return serializer.Deserialize<XYZ>(reader); }\n\npublic override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) { throw new NotImplementedException(); } } } \n`}</code></pre>\n    <p>{`This is often the case of Interface that need to be deserialized into a concrete class. In the above example, I_XYZ was the interface but when it's the time to deserialize, Asp.Net MVC doesn't know to which type to deserialize. This is why, we provide a model binder for the class that contains the property that has I_XYZ interface and provide to Json.Net library how to read the Json for deserialization.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}