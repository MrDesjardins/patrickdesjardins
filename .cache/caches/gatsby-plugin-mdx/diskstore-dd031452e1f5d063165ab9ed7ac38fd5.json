{"expireTime":9007200886478389000,"key":"gatsby-plugin-mdx-entire-payload-1946bc2e29223c1e2af230ea97aadc32--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you create a Html Helper with Asp.Net MVC that take a generic type, you may stumble into a problem when using it. An error concerning compilation of the page when executing raise with a yellow screen of death.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":213,"offset":213},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":213,"offset":213},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"An exception of type 'System.Web.HttpCompileException' occurred in System.Web.dll but was not handled in user code Compiler Error Message: CS1502: The best overloaded method match for 'System.Web.WebPages.WebPageExecutingBase.Write(System.Web.WebPages.HelperResult)' has some invalid arguments","position":{"start":{"line":4,"column":3,"offset":217},"end":{"line":4,"column":296,"offset":510},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":217},"end":{"line":4,"column":296,"offset":510},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":215},"end":{"line":4,"column":296,"offset":510},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This code is the result of simply calling this line:","position":{"start":{"line":6,"column":1,"offset":512},"end":{"line":6,"column":53,"offset":564},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":512},"end":{"line":6,"column":53,"offset":564},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" @Html.Test<ContestListItemViewModel>() //Does not work ","position":{"start":{"line":9,"column":1,"offset":567},"end":{"line":11,"column":4,"offset":637},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Html Helper is very simple.","position":{"start":{"line":13,"column":1,"offset":639},"end":{"line":13,"column":32,"offset":670},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":639},"end":{"line":13,"column":32,"offset":670},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static MvcHtmlString Test<TEntityType>(this HtmlHelper htmlHelper) { return new MvcHtmlString(\"<p>Test</P>\"); } ","position":{"start":{"line":16,"column":1,"offset":673},"end":{"line":18,"column":4,"offset":807},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To make it works, you have to have it inside a Razor statement like this: ","position":{"start":{"line":20,"column":1,"offset":809},"end":{"line":20,"column":75,"offset":883},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":809},"end":{"line":20,"column":75,"offset":883},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" @{ var x = Html.Test<ContestListItemViewModel>(); @Html.Raw(x); } ","position":{"start":{"line":21,"column":1,"offset":884},"end":{"line":23,"column":4,"offset":965},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The problem is it is not very clean. However, it is possible to fix this with a single line statement if you wrap the Html Helper within parentheses.","position":{"start":{"line":25,"column":1,"offset":967},"end":{"line":25,"column":150,"offset":1116},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":967},"end":{"line":25,"column":150,"offset":1116},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" @(Html.Test<ContestListItemViewModel>()) ","position":{"start":{"line":28,"column":1,"offset":1119},"end":{"line":30,"column":4,"offset":1175},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"How come? Well, Razor become confused if it has to render the result with Html or with C# variable because of the ContestListItemViewModel that is interpreted as Html. Adding parentheses help Razor to generate the Html output and remove the confusion, which remove the error.","position":{"start":{"line":32,"column":1,"offset":1177},"end":{"line":32,"column":276,"offset":1452},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1177},"end":{"line":32,"column":276,"offset":1452},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to make a Asp.Net MVC HtmlHelper that use generic work with Razor\",\"date\":\"2014-04-17\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":35,"column":1,"offset":1455},"end":{"line":35,"column":155,"offset":1609},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":35,"column":155,"offset":1609}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to make a Asp.Net MVC HtmlHelper that use generic work with Razor\",\n  \"date\": \"2014-04-17\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you create a Html Helper with Asp.Net MVC that take a generic type, you may stumble into a problem when using it. An error concerning compilation of the page when executing raise with a yellow screen of death.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An exception of type 'System.Web.HttpCompileException' occurred in System.Web.dll but was not handled in user code Compiler Error Message: CS1502: The best overloaded method match for 'System.Web.WebPages.WebPageExecutingBase.Write(System.Web.WebPages.HelperResult)' has some invalid arguments\")), mdx(\"p\", null, \"This code is the result of simply calling this line:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @Html.Test<ContestListItemViewModel>() //Does not work \\n\")), mdx(\"p\", null, \"The Html Helper is very simple.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static MvcHtmlString Test<TEntityType>(this HtmlHelper htmlHelper) { return new MvcHtmlString(\\\"<p>Test</P>\\\"); } \\n\")), mdx(\"p\", null, \"To make it works, you have to have it inside a Razor statement like this: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @{ var x = Html.Test<ContestListItemViewModel>(); @Html.Raw(x); } \\n\")), mdx(\"p\", null, \"The problem is it is not very clean. However, it is possible to fix this with a single line statement if you wrap the Html Helper within parentheses.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @(Html.Test<ContestListItemViewModel>()) \\n\")), mdx(\"p\", null, \"How come? Well, Razor become confused if it has to render the result with Html or with C# variable because of the ContestListItemViewModel that is interpreted as Html. Adding parentheses help Razor to generate the Html output and remove the confusion, which remove the error.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to make a Asp.Net MVC HtmlHelper that use generic work with Razor\",\n  \"date\": \"2014-04-17\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you create a Html Helper with Asp.Net MVC that take a generic type, you may stumble into a problem when using it. An error concerning compilation of the page when executing raise with a yellow screen of death.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An exception of type 'System.Web.HttpCompileException' occurred in System.Web.dll but was not handled in user code Compiler Error Message: CS1502: The best overloaded method match for 'System.Web.WebPages.WebPageExecutingBase.Write(System.Web.WebPages.HelperResult)' has some invalid arguments`}</p>\n    </blockquote>\n    <p>{`This code is the result of simply calling this line:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` @Html.Test<ContestListItemViewModel>() //Does not work \n`}</code></pre>\n    <p>{`The Html Helper is very simple.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static MvcHtmlString Test<TEntityType>(this HtmlHelper htmlHelper) { return new MvcHtmlString(\"<p>Test</P>\"); } \n`}</code></pre>\n    <p>{`To make it works, you have to have it inside a Razor statement like this: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` @{ var x = Html.Test<ContestListItemViewModel>(); @Html.Raw(x); } \n`}</code></pre>\n    <p>{`The problem is it is not very clean. However, it is possible to fix this with a single line statement if you wrap the Html Helper within parentheses.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` @(Html.Test<ContestListItemViewModel>()) \n`}</code></pre>\n    <p>{`How come? Well, Razor become confused if it has to render the result with Html or with C# variable because of the ContestListItemViewModel that is interpreted as Html. Adding parentheses help Razor to generate the Html output and remove the confusion, which remove the error.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}