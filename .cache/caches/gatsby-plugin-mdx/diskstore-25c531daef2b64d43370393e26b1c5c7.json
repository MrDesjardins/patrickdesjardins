{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-0bf586ae17cb399b0f2ac3f9529a1c7f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to map one of your complex object to a primitive you cannot use the ForMember method of Automapper to do it. Instead, you have to use the ConvertUsing.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":164,"offset":164},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":164,"offset":164},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a case of ComplexType which reprensent a boolean value. ","position":{"start":{"line":4,"column":1,"offset":166},"end":{"line":4,"column":65,"offset":230},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":166},"end":{"line":4,"column":65,"offset":230},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" Mapper .CreateMap<ComplexType, bool>() .ConvertUsing(f=>f.ID);\n\nMapper .CreateMap<bool, ComplexType>() .ConvertUsing(f => new ComplexType(f)); ","position":{"start":{"line":5,"column":1,"offset":231},"end":{"line":9,"column":4,"offset":389},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is usefull if you have view models that represent primitive data and you want them to be represented into a view model object.","position":{"start":{"line":11,"column":1,"offset":391},"end":{"line":11,"column":132,"offset":522},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":391},"end":{"line":11,"column":132,"offset":522},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to create a mapping to a primitive type with AutoMapper.\",\"date\":\"2012-11-30\",\"categories\":[\"automapper\",\"c-sharp\"]}","position":{"start":{"line":14,"column":1,"offset":525},"end":{"line":14,"column":159,"offset":683},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":159,"offset":683}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create a mapping to a primitive type with AutoMapper.\",\n  \"date\": \"2012-11-30\",\n  \"categories\": [\"automapper\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you want to map one of your complex object to a primitive you cannot use the ForMember method of Automapper to do it. Instead, you have to use the ConvertUsing.\"), mdx(\"p\", null, \"Here is a case of ComplexType which reprensent a boolean value. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" Mapper .CreateMap<ComplexType, bool>() .ConvertUsing(f=>f.ID);\\n\\nMapper .CreateMap<bool, ComplexType>() .ConvertUsing(f => new ComplexType(f)); \\n\")), mdx(\"p\", null, \"This is usefull if you have view models that represent primitive data and you want them to be represented into a view model object.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to create a mapping to a primitive type with AutoMapper.\",\n  \"date\": \"2012-11-30\",\n  \"categories\": [\"automapper\", \"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you want to map one of your complex object to a primitive you cannot use the ForMember method of Automapper to do it. Instead, you have to use the ConvertUsing.`}</p>\n    <p>{`Here is a case of ComplexType which reprensent a boolean value. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` Mapper .CreateMap<ComplexType, bool>() .ConvertUsing(f=>f.ID);\n\nMapper .CreateMap<bool, ComplexType>() .ConvertUsing(f => new ComplexType(f)); \n`}</code></pre>\n    <p>{`This is usefull if you have view models that represent primitive data and you want them to be represented into a view model object.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}