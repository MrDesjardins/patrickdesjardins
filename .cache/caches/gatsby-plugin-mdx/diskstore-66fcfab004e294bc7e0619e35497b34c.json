{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-588977da3212c92ae5d4762922f64b97--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You may run into the case of where the Linq to Entity query is long and complex.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":81,"offset":81},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":81,"offset":81},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are using a layer of abstraction to access your database (DAL \"Data Access Layer) that return IQueryable you may be surprise that you can divide your query into multiple IQueryable and to merge all Linq to Entity back into a single IQueryable.","position":{"start":{"line":4,"column":1,"offset":83},"end":{"line":4,"column":251,"offset":333},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":83},"end":{"line":4,"column":251,"offset":333},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to create your method into your DAL. ","position":{"start":{"line":6,"column":1,"offset":335},"end":{"line":6,"column":56,"offset":390},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":335},"end":{"line":6,"column":56,"offset":390},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public IQueryable<MyModel> GetMyModel() { //Linq to Entity is returned here } ","position":{"start":{"line":7,"column":1,"offset":391},"end":{"line":9,"column":4,"offset":484},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second step is to create query in logical group. Let say you desire to have all objects of your MyModel that is over 100$ and another condition is that you want also all those over 20$ if they have a discount.","position":{"start":{"line":11,"column":1,"offset":486},"end":{"line":11,"column":214,"offset":699},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":486},"end":{"line":11,"column":214,"offset":699},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can do it with a single Linq to Entity, but in some situation (more complex than the one exposed here) you may found easier to cut the problem in sub query.","position":{"start":{"line":13,"column":1,"offset":701},"end":{"line":13,"column":161,"offset":861},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":701},"end":{"line":13,"column":161,"offset":861},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be done by using multiple IQueryable.","position":{"start":{"line":15,"column":1,"offset":863},"end":{"line":15,"column":47,"offset":909},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":863},"end":{"line":15,"column":47,"offset":909},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public IQueryable<MyModel> GetMyModel() { var query1 = //Linq to Entity with condition for > 100$ var query2 = //Linq to Entity with condition for > 20$ && Discount > 0$ //return query1 + query 2 } ","position":{"start":{"line":18,"column":1,"offset":912},"end":{"line":20,"column":4,"offset":1125},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The last step is to merge query 1 and query 2. You can do it in two differents way with Linq. The first one is to use the Union keyword and the second is with Concat.","position":{"start":{"line":22,"column":1,"offset":1127},"end":{"line":22,"column":167,"offset":1293},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1127},"end":{"line":22,"column":167,"offset":1293},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The difference between the two is that union will merge only when not already present when concat will merge everything. Here is a small snippet of code that illustrate this theory.","position":{"start":{"line":24,"column":1,"offset":1295},"end":{"line":24,"column":182,"offset":1476},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1295},"end":{"line":24,"column":182,"offset":1476},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var set1 = new int[] { 1, 2, 3 }; var set2 = new int[] { 3, 4, 5 };\n\nvar result= set1.AsQueryable().Concat(set2.AsQueryable()); // count == 6 var result2 = set1.AsQueryable().Union(set2.AsQueryable()); // count == 5 ","position":{"start":{"line":27,"column":1,"offset":1479},"end":{"line":31,"column":4,"offset":1710},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our example could look with union like this: ","position":{"start":{"line":33,"column":1,"offset":1712},"end":{"line":33,"column":46,"offset":1757},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1712},"end":{"line":33,"column":46,"offset":1757},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public IQueryable<MyModel> GetMyModel() { var query1 = //Linq to Entity with condition for > 100$ var query2 = //Linq to Entity with condition for > 20$ && Discount > 0$ return query1.union(query2); //Both condition } ","position":{"start":{"line":34,"column":1,"offset":1758},"end":{"line":36,"column":4,"offset":1991},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Since we are using IQueryable, none of the query are executed until their execution. That mean that that Sql Server will receive a single query (with multiple sub query).","position":{"start":{"line":38,"column":1,"offset":1993},"end":{"line":38,"column":171,"offset":2163},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1993},"end":{"line":38,"column":171,"offset":2163},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to simplify comprehension of a complex Entity Framework Query\",\"date\":\"2012-07-17\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":41,"column":1,"offset":2166},"end":{"line":41,"column":160,"offset":2325},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":160,"offset":2325}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to simplify comprehension of a complex Entity Framework Query\",\n  \"date\": \"2012-07-17\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You may run into the case of where the Linq to Entity query is long and complex.\"), mdx(\"p\", null, \"If you are using a layer of abstraction to access your database (DAL \\\"Data Access Layer) that return IQueryable you may be surprise that you can divide your query into multiple IQueryable and to merge all Linq to Entity back into a single IQueryable.\"), mdx(\"p\", null, \"The first step is to create your method into your DAL. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public IQueryable<MyModel> GetMyModel() { //Linq to Entity is returned here } \\n\")), mdx(\"p\", null, \"The second step is to create query in logical group. Let say you desire to have all objects of your MyModel that is over 100$ and another condition is that you want also all those over 20$ if they have a discount.\"), mdx(\"p\", null, \"You can do it with a single Linq to Entity, but in some situation (more complex than the one exposed here) you may found easier to cut the problem in sub query.\"), mdx(\"p\", null, \"This can be done by using multiple IQueryable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public IQueryable<MyModel> GetMyModel() { var query1 = //Linq to Entity with condition for > 100$ var query2 = //Linq to Entity with condition for > 20$ && Discount > 0$ //return query1 + query 2 } \\n\")), mdx(\"p\", null, \"The last step is to merge query 1 and query 2. You can do it in two differents way with Linq. The first one is to use the Union keyword and the second is with Concat.\"), mdx(\"p\", null, \"The difference between the two is that union will merge only when not already present when concat will merge everything. Here is a small snippet of code that illustrate this theory.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var set1 = new int[] { 1, 2, 3 }; var set2 = new int[] { 3, 4, 5 };\\n\\nvar result= set1.AsQueryable().Concat(set2.AsQueryable()); // count == 6 var result2 = set1.AsQueryable().Union(set2.AsQueryable()); // count == 5 \\n\")), mdx(\"p\", null, \"Our example could look with union like this: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public IQueryable<MyModel> GetMyModel() { var query1 = //Linq to Entity with condition for > 100$ var query2 = //Linq to Entity with condition for > 20$ && Discount > 0$ return query1.union(query2); //Both condition } \\n\")), mdx(\"p\", null, \"Since we are using IQueryable, none of the query are executed until their execution. That mean that that Sql Server will receive a single query (with multiple sub query).\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to simplify comprehension of a complex Entity Framework Query\",\n  \"date\": \"2012-07-17\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You may run into the case of where the Linq to Entity query is long and complex.`}</p>\n    <p>{`If you are using a layer of abstraction to access your database (DAL \"Data Access Layer) that return IQueryable you may be surprise that you can divide your query into multiple IQueryable and to merge all Linq to Entity back into a single IQueryable.`}</p>\n    <p>{`The first step is to create your method into your DAL. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public IQueryable<MyModel> GetMyModel() { //Linq to Entity is returned here } \n`}</code></pre>\n    <p>{`The second step is to create query in logical group. Let say you desire to have all objects of your MyModel that is over 100$ and another condition is that you want also all those over 20$ if they have a discount.`}</p>\n    <p>{`You can do it with a single Linq to Entity, but in some situation (more complex than the one exposed here) you may found easier to cut the problem in sub query.`}</p>\n    <p>{`This can be done by using multiple IQueryable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public IQueryable<MyModel> GetMyModel() { var query1 = //Linq to Entity with condition for > 100$ var query2 = //Linq to Entity with condition for > 20$ && Discount > 0$ //return query1 + query 2 } \n`}</code></pre>\n    <p>{`The last step is to merge query 1 and query 2. You can do it in two differents way with Linq. The first one is to use the Union keyword and the second is with Concat.`}</p>\n    <p>{`The difference between the two is that union will merge only when not already present when concat will merge everything. Here is a small snippet of code that illustrate this theory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var set1 = new int[] { 1, 2, 3 }; var set2 = new int[] { 3, 4, 5 };\n\nvar result= set1.AsQueryable().Concat(set2.AsQueryable()); // count == 6 var result2 = set1.AsQueryable().Union(set2.AsQueryable()); // count == 5 \n`}</code></pre>\n    <p>{`Our example could look with union like this: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public IQueryable<MyModel> GetMyModel() { var query1 = //Linq to Entity with condition for > 100$ var query2 = //Linq to Entity with condition for > 20$ && Discount > 0$ return query1.union(query2); //Both condition } \n`}</code></pre>\n    <p>{`Since we are using IQueryable, none of the query are executed until their execution. That mean that that Sql Server will receive a single query (with multiple sub query).`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}