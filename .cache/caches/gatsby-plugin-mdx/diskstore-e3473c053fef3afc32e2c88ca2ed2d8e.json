{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-071fe43f486358f574ea8c2636a17d2a--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Tim Barcz, Matt Hawley, Stephen Walther and Scott Guthrie (VP at Microsoft and lead for many project like Entity Framework, Asp.Net, etc) have already discussed about this problematic and created the PRG pattern to solve this problem. In fact, to solve this problem you should not handle manually the ModelState but simply use Import and Export attribute like the following example.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":383,"offset":383},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":383,"offset":383},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [AcceptVerbs(HttpVerbs.Get), ImportModelStateFromTempData] public ActionResult MyAction(ModelObject myObject) { return View(); }\n\n[AcceptVerbs(HttpVerbs.Post), ExportModelStateToTempData] public ActionResult MyActionSubmit(ModelObject myObject) { return View(); } ","position":{"start":{"line":5,"column":1,"offset":386},"end":{"line":9,"column":4,"offset":665},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These attributes are not from the .Net framework and you need to have them inside your project by creating them. Once it's done once, it's done for the life time of your project.","position":{"start":{"line":11,"column":1,"offset":667},"end":{"line":11,"column":179,"offset":845},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":667},"end":{"line":11,"column":179,"offset":845},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, you need to create the attributes. To do, you need to create a class that inherit the class ","position":{"start":{"line":13,"column":1,"offset":847},"end":{"line":13,"column":100,"offset":946},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ActionFilterAttribute","position":{"start":{"line":13,"column":102,"offset":948},"end":{"line":13,"column":123,"offset":969},"indent":[]}}],"position":{"start":{"line":13,"column":100,"offset":946},"end":{"line":13,"column":125,"offset":971},"indent":[]}},{"type":"text","value":". Since we are using 2 attributes that share the same information, we will create 3 classes. The first one will contain the sharing key for the session and the two others will be for the Import and Export.","position":{"start":{"line":13,"column":125,"offset":971},"end":{"line":13,"column":330,"offset":1176},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":847},"end":{"line":13,"column":330,"offset":1176},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public abstract class ModelStateTempDataTransfer : ActionFilterAttribute { protected static readonly string Key = typeof(ModelStateTempDataTransfer).FullName; } ","position":{"start":{"line":16,"column":1,"offset":1179},"end":{"line":18,"column":4,"offset":1355},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, the class to export. Here you can add more custom code for your project. This version will all the ModelState only if this one contain errors.","position":{"start":{"line":20,"column":1,"offset":1357},"end":{"line":20,"column":149,"offset":1505},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1357},"end":{"line":20,"column":149,"offset":1505},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class ExportModelStateToTempData : ModelStateTempDataTransfer { public override void OnActionExecuted(ActionExecutedContext filterContext) { //Only export when ModelState is not valid if (!filterContext.Controller.ViewData.ModelState.IsValid) { //Export if we are redirecting if ((filterContext.Result is RedirectResult) || (filterContext.Result is RedirectToRouteResult)) { filterContext.Controller.TempData[Key] = filterContext.Controller.ViewData.ModelState; } }\n\nbase.OnActionExecuted(filterContext); } } ","position":{"start":{"line":23,"column":1,"offset":1508},"end":{"line":27,"column":4,"offset":2039},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The last class will import the ModelState. In fact, it will merge the new one with the old one in the session.","position":{"start":{"line":29,"column":1,"offset":2041},"end":{"line":29,"column":111,"offset":2151},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2041},"end":{"line":29,"column":111,"offset":2151},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class ImportModelStateFromTempData : ModelStateTempDataTransfer { public override void OnActionExecuted(ActionExecutedContext filterContext) { ModelStateDictionary modelState = filterContext.Controller.TempData[Key] as ModelStateDictionary;\n\nif (modelState != null) { //Only Import if we are viewing if (filterContext.Result is ViewResult) { filterContext.Controller.ViewData.ModelState.Merge(modelState); } else { //Otherwise remove it. filterContext.Controller.TempData.Remove(Key); } }\n\nbase.OnActionExecuted(filterContext); } } ","position":{"start":{"line":32,"column":1,"offset":2154},"end":{"line":38,"column":4,"offset":2708},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, we do not use the session directly but we store everything into the TempData which use the session but handle the life cycle for us. This mean that it won't stay for 20 minutes (default value of a session life time). It will stay until the next post back and be there if the request is redirected.","position":{"start":{"line":40,"column":1,"offset":2710},"end":{"line":40,"column":314,"offset":3023},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2710},"end":{"line":40,"column":314,"offset":3023},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can see it in the MVC open source project called ","position":{"start":{"line":42,"column":1,"offset":3025},"end":{"line":42,"column":54,"offset":3078},"indent":[]}},{"type":"link","title":null,"url":"http://mvccontrib.codeplex.com/","children":[{"type":"text","value":"MVCContrib","position":{"start":{"line":42,"column":55,"offset":3079},"end":{"line":42,"column":65,"offset":3089},"indent":[]}}],"position":{"start":{"line":42,"column":54,"offset":3078},"end":{"line":42,"column":99,"offset":3123},"indent":[]}},{"type":"text","value":" (slightly modified version of this one). You can also find the source of the code in this blog post at this ","position":{"start":{"line":42,"column":99,"offset":3123},"end":{"line":42,"column":208,"offset":3232},"indent":[]}},{"type":"link","title":null,"url":"http://weblogs.asp.net/rashid/archive/2009/04/01/asp-net-mvc-best-practices-part-1.aspx#prg","children":[{"type":"text","value":"website","position":{"start":{"line":42,"column":209,"offset":3233},"end":{"line":42,"column":216,"offset":3240},"indent":[]}}],"position":{"start":{"line":42,"column":208,"offset":3232},"end":{"line":42,"column":310,"offset":3334},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":42,"column":310,"offset":3334},"end":{"line":42,"column":311,"offset":3335},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":3025},"end":{"line":42,"column":311,"offset":3335},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to save the ModelState into session following the good practice\",\"date\":\"2012-04-21\",\"categories\":[\"asp-mvc\",\"c-sharp\"]}","position":{"start":{"line":45,"column":1,"offset":3338},"end":{"line":45,"column":163,"offset":3500},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":45,"column":163,"offset":3500}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to save the ModelState into session following the good practice\",\n  \"date\": \"2012-04-21\",\n  \"categories\": [\"asp-mvc\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Tim Barcz, Matt Hawley, Stephen Walther and Scott Guthrie (VP at Microsoft and lead for many project like Entity Framework, Asp.Net, etc) have already discussed about this problematic and created the PRG pattern to solve this problem. In fact, to solve this problem you should not handle manually the ModelState but simply use Import and Export attribute like the following example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [AcceptVerbs(HttpVerbs.Get), ImportModelStateFromTempData] public ActionResult MyAction(ModelObject myObject) { return View(); }\\n\\n[AcceptVerbs(HttpVerbs.Post), ExportModelStateToTempData] public ActionResult MyActionSubmit(ModelObject myObject) { return View(); } \\n\")), mdx(\"p\", null, \"These attributes are not from the .Net framework and you need to have them inside your project by creating them. Once it's done once, it's done for the life time of your project.\"), mdx(\"p\", null, \"First, you need to create the attributes. To do, you need to create a class that inherit the class \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ActionFilterAttribute\"), \". Since we are using 2 attributes that share the same information, we will create 3 classes. The first one will contain the sharing key for the session and the two others will be for the Import and Export.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public abstract class ModelStateTempDataTransfer : ActionFilterAttribute { protected static readonly string Key = typeof(ModelStateTempDataTransfer).FullName; } \\n\")), mdx(\"p\", null, \"Then, the class to export. Here you can add more custom code for your project. This version will all the ModelState only if this one contain errors.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ExportModelStateToTempData : ModelStateTempDataTransfer { public override void OnActionExecuted(ActionExecutedContext filterContext) { //Only export when ModelState is not valid if (!filterContext.Controller.ViewData.ModelState.IsValid) { //Export if we are redirecting if ((filterContext.Result is RedirectResult) || (filterContext.Result is RedirectToRouteResult)) { filterContext.Controller.TempData[Key] = filterContext.Controller.ViewData.ModelState; } }\\n\\nbase.OnActionExecuted(filterContext); } } \\n\")), mdx(\"p\", null, \"The last class will import the ModelState. In fact, it will merge the new one with the old one in the session.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ImportModelStateFromTempData : ModelStateTempDataTransfer { public override void OnActionExecuted(ActionExecutedContext filterContext) { ModelStateDictionary modelState = filterContext.Controller.TempData[Key] as ModelStateDictionary;\\n\\nif (modelState != null) { //Only Import if we are viewing if (filterContext.Result is ViewResult) { filterContext.Controller.ViewData.ModelState.Merge(modelState); } else { //Otherwise remove it. filterContext.Controller.TempData.Remove(Key); } }\\n\\nbase.OnActionExecuted(filterContext); } } \\n\")), mdx(\"p\", null, \"As you can see, we do not use the session directly but we store everything into the TempData which use the session but handle the life cycle for us. This mean that it won't stay for 20 minutes (default value of a session life time). It will stay until the next post back and be there if the request is redirected.\"), mdx(\"p\", null, \"You can see it in the MVC open source project called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://mvccontrib.codeplex.com/\"\n  }, \"MVCContrib\"), \" (slightly modified version of this one). You can also find the source of the code in this blog post at this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://weblogs.asp.net/rashid/archive/2009/04/01/asp-net-mvc-best-practices-part-1.aspx#prg\"\n  }, \"website\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to save the ModelState into session following the good practice\",\n  \"date\": \"2012-04-21\",\n  \"categories\": [\"asp-mvc\", \"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Tim Barcz, Matt Hawley, Stephen Walther and Scott Guthrie (VP at Microsoft and lead for many project like Entity Framework, Asp.Net, etc) have already discussed about this problematic and created the PRG pattern to solve this problem. In fact, to solve this problem you should not handle manually the ModelState but simply use Import and Export attribute like the following example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [AcceptVerbs(HttpVerbs.Get), ImportModelStateFromTempData] public ActionResult MyAction(ModelObject myObject) { return View(); }\n\n[AcceptVerbs(HttpVerbs.Post), ExportModelStateToTempData] public ActionResult MyActionSubmit(ModelObject myObject) { return View(); } \n`}</code></pre>\n    <p>{`These attributes are not from the .Net framework and you need to have them inside your project by creating them. Once it's done once, it's done for the life time of your project.`}</p>\n    <p>{`First, you need to create the attributes. To do, you need to create a class that inherit the class `}<strong parentName=\"p\">{`ActionFilterAttribute`}</strong>{`. Since we are using 2 attributes that share the same information, we will create 3 classes. The first one will contain the sharing key for the session and the two others will be for the Import and Export.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public abstract class ModelStateTempDataTransfer : ActionFilterAttribute { protected static readonly string Key = typeof(ModelStateTempDataTransfer).FullName; } \n`}</code></pre>\n    <p>{`Then, the class to export. Here you can add more custom code for your project. This version will all the ModelState only if this one contain errors.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class ExportModelStateToTempData : ModelStateTempDataTransfer { public override void OnActionExecuted(ActionExecutedContext filterContext) { //Only export when ModelState is not valid if (!filterContext.Controller.ViewData.ModelState.IsValid) { //Export if we are redirecting if ((filterContext.Result is RedirectResult) || (filterContext.Result is RedirectToRouteResult)) { filterContext.Controller.TempData[Key] = filterContext.Controller.ViewData.ModelState; } }\n\nbase.OnActionExecuted(filterContext); } } \n`}</code></pre>\n    <p>{`The last class will import the ModelState. In fact, it will merge the new one with the old one in the session.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class ImportModelStateFromTempData : ModelStateTempDataTransfer { public override void OnActionExecuted(ActionExecutedContext filterContext) { ModelStateDictionary modelState = filterContext.Controller.TempData[Key] as ModelStateDictionary;\n\nif (modelState != null) { //Only Import if we are viewing if (filterContext.Result is ViewResult) { filterContext.Controller.ViewData.ModelState.Merge(modelState); } else { //Otherwise remove it. filterContext.Controller.TempData.Remove(Key); } }\n\nbase.OnActionExecuted(filterContext); } } \n`}</code></pre>\n    <p>{`As you can see, we do not use the session directly but we store everything into the TempData which use the session but handle the life cycle for us. This mean that it won't stay for 20 minutes (default value of a session life time). It will stay until the next post back and be there if the request is redirected.`}</p>\n    <p>{`You can see it in the MVC open source project called `}<a parentName=\"p\" {...{\n        \"href\": \"http://mvccontrib.codeplex.com/\"\n      }}>{`MVCContrib`}</a>{` (slightly modified version of this one). You can also find the source of the code in this blog post at this `}<a parentName=\"p\" {...{\n        \"href\": \"http://weblogs.asp.net/rashid/archive/2009/04/01/asp-net-mvc-best-practices-part-1.aspx#prg\"\n      }}>{`website`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}