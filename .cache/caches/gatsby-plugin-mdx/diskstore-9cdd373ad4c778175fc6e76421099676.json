{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-83b2b592d8d022c0168bfb5f2b6bce6f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"MongoDb is an interesting choice of permanent persistence when using NodeJs since it stores document which is ideal of JSON document to get stored.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":148,"offset":148},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":148,"offset":148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can download a free version directly on MongoD : ","position":{"start":{"line":4,"column":1,"offset":150},"end":{"line":4,"column":54,"offset":203},"indent":[]}},{"type":"link","title":null,"url":"https://www.mongodb.com/download-center#community","children":[{"type":"text","value":"https://www.mongodb.com/download-center#community","position":{"start":{"line":4,"column":55,"offset":204},"end":{"line":4,"column":104,"offset":253},"indent":[]}}],"position":{"start":{"line":4,"column":54,"offset":203},"end":{"line":4,"column":156,"offset":305},"indent":[]}},{"type":"text","value":" Once it's downloaded, it's best to be sure that the system environment variable is set to have an entry in the path to point to the bin folder of the installation path of MongoDb.","position":{"start":{"line":4,"column":156,"offset":305},"end":{"line":4,"column":336,"offset":485},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":150},"end":{"line":4,"column":336,"offset":485},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before working out MongoDb with NodeJs, I recommend to download RoboMongo for free: ","position":{"start":{"line":6,"column":1,"offset":487},"end":{"line":6,"column":85,"offset":571},"indent":[]}},{"type":"link","title":null,"url":"https://robomongo.org/download","children":[{"type":"text","value":"https://robomongo.org/download","position":{"start":{"line":6,"column":86,"offset":572},"end":{"line":6,"column":116,"offset":602},"indent":[]}}],"position":{"start":{"line":6,"column":85,"offset":571},"end":{"line":6,"column":149,"offset":635},"indent":[]}},{"type":"text","value":". This tool allows to query MongoDb and explore the data. Before using RoboMongo or to use the MongoDb library, we need to run the MongoDb server. To do so, go in the development folder you are working and execute the ","position":{"start":{"line":6,"column":149,"offset":635},"end":{"line":6,"column":367,"offset":853},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"mongod","position":{"start":{"line":6,"column":369,"offset":855},"end":{"line":6,"column":375,"offset":861},"indent":[]}}],"position":{"start":{"line":6,"column":367,"offset":853},"end":{"line":6,"column":377,"offset":863},"indent":[]}},{"type":"text","value":" command with the dbpath. For example, the following command will store the MongoDb in the \"data\" folder in the development folder.","position":{"start":{"line":6,"column":377,"offset":863},"end":{"line":6,"column":508,"offset":994},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":487},"end":{"line":6,"column":508,"offset":994},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" mongod --dbpath=.\\\\data","position":{"start":{"line":8,"column":1,"offset":996},"end":{"line":10,"column":4,"offset":1028},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Inside your NodeJs project, you needs sto have the mongodb library. If you are using TypeScript, you can get the type definition too.","position":{"start":{"line":12,"column":1,"offset":1030},"end":{"line":12,"column":134,"offset":1163},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1030},"end":{"line":12,"column":134,"offset":1163},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"npm install mongodb --save npm install @types/mongodb --save-dev","position":{"start":{"line":14,"column":1,"offset":1165},"end":{"line":16,"column":4,"offset":1247},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At this point, you can start using the library to access the information. First step, connecting to the server. Second step, connecting to the collection. The first step is the same as any other database, the second one is just that every documents are stored into a collection. Think about it as a table.","position":{"start":{"line":18,"column":1,"offset":1249},"end":{"line":18,"column":306,"offset":1554},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1249},"end":{"line":18,"column":306,"offset":1554},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From here, we need to import some classes.","position":{"start":{"line":20,"column":1,"offset":1556},"end":{"line":20,"column":43,"offset":1598},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1556},"end":{"line":20,"column":43,"offset":1598},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { MongoClient, MongoError, Db, InsertOneWriteOpResult } from \"mongodb\";","position":{"start":{"line":22,"column":1,"offset":1600},"end":{"line":24,"column":4,"offset":1696},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"MongoClient is the main class to connect to Mongo. MongoError is the class that wrap the error which we will use to get information about the connection's error. Db is the class that hold information about MongoDb once connected. We need it to properly close the connection, but also to select the collection in which we want to invoke the action (find, insert, delete). The InsertOneWriteOpResult is the result on an insert.","position":{"start":{"line":26,"column":1,"offset":1698},"end":{"line":26,"column":426,"offset":2123},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1698},"end":{"line":26,"column":426,"offset":2123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the connection code:","position":{"start":{"line":28,"column":1,"offset":2125},"end":{"line":28,"column":29,"offset":2153},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2125},"end":{"line":28,"column":29,"offset":2153},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"MongoClient.connect(url, (errMongo: MongoError, db: Db) => {\n  if (errMongo) {\n    console.log(errMongo);\n  } else {\n    console.log(\"Connected successfully to server\");\n  }\n});","position":{"start":{"line":30,"column":1,"offset":2155},"end":{"line":38,"column":4,"offset":2350},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To insert something in you need to get the collection name and use the insert method. Something I haven't yet figure out perfectly is how to handle Date from a .json file. In my case, I was opening file (.json) and inserting them into MongoDb. The Json parse method was returning the date as string, hence I needed to assign the value back with an instance of date","position":{"start":{"line":40,"column":1,"offset":2352},"end":{"line":40,"column":365,"offset":2716},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2352},"end":{"line":40,"column":365,"offset":2716},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// To have a real date format in MongoDb\nobjToInsert.fullDate = new Date(objToInsert.fullDate);\n\n// Access the collection we want to insert\nconst collection = db.collection(\"documents\"); // \"documents\" can be anything you want your collection to be named\n\n// Insert with a callback that has an error or the result data\ncollection.insert(\n  objToInsert,\n  (err: MongoError, result: InsertOneWriteOpResult) => {}\n);","position":{"start":{"line":42,"column":1,"offset":2718},"end":{"line":54,"column":4,"offset":3149},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above will add a new entry and alter the object to add an \"","position":{"start":{"line":56,"column":1,"offset":3151},"end":{"line":56,"column":69,"offset":3219},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":56,"column":69,"offset":3219},"end":{"line":56,"column":71,"offset":3221},"indent":[]}},{"type":"text","value":"id\" with a GUID for the object. This way, every entry has a unique identifier automatically.","position":{"start":{"line":56,"column":71,"offset":3221},"end":{"line":56,"column":163,"offset":3313},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3151},"end":{"line":56,"column":163,"offset":3313},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"NodeJs and MongoDb on Windows : Connecting and Inserting\",\"date\":\"2017-08-07\",\"categories\":[\"mongodb\",\"nodejs-web\"]}","position":{"start":{"line":59,"column":1,"offset":3316},"end":{"line":59,"column":155,"offset":3470},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":155,"offset":3470}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NodeJs and MongoDb on Windows : Connecting and Inserting\",\n  \"date\": \"2017-08-07\",\n  \"categories\": [\"mongodb\", \"nodejs-web\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"MongoDb is an interesting choice of permanent persistence when using NodeJs since it stores document which is ideal of JSON document to get stored.\"), mdx(\"p\", null, \"You can download a free version directly on MongoD : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mongodb.com/download-center#community\"\n  }, \"https://www.mongodb.com/download-center#community\"), \" Once it's downloaded, it's best to be sure that the system environment variable is set to have an entry in the path to point to the bin folder of the installation path of MongoDb.\"), mdx(\"p\", null, \"Before working out MongoDb with NodeJs, I recommend to download RoboMongo for free: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://robomongo.org/download\"\n  }, \"https://robomongo.org/download\"), \". This tool allows to query MongoDb and explore the data. Before using RoboMongo or to use the MongoDb library, we need to run the MongoDb server. To do so, go in the development folder you are working and execute the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mongod\"), \" command with the dbpath. For example, the following command will store the MongoDb in the \\\"data\\\" folder in the development folder.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" mongod --dbpath=.\\\\\\\\data\\n\")), mdx(\"p\", null, \"Inside your NodeJs project, you needs sto have the mongodb library. If you are using TypeScript, you can get the type definition too.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"npm install mongodb --save npm install @types/mongodb --save-dev\\n\")), mdx(\"p\", null, \"At this point, you can start using the library to access the information. First step, connecting to the server. Second step, connecting to the collection. The first step is the same as any other database, the second one is just that every documents are stored into a collection. Think about it as a table.\"), mdx(\"p\", null, \"From here, we need to import some classes.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { MongoClient, MongoError, Db, InsertOneWriteOpResult } from \\\"mongodb\\\";\\n\")), mdx(\"p\", null, \"MongoClient is the main class to connect to Mongo. MongoError is the class that wrap the error which we will use to get information about the connection's error. Db is the class that hold information about MongoDb once connected. We need it to properly close the connection, but also to select the collection in which we want to invoke the action (find, insert, delete). The InsertOneWriteOpResult is the result on an insert.\"), mdx(\"p\", null, \"Here is the connection code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"MongoClient.connect(url, (errMongo: MongoError, db: Db) => {\\n  if (errMongo) {\\n    console.log(errMongo);\\n  } else {\\n    console.log(\\\"Connected successfully to server\\\");\\n  }\\n});\\n\")), mdx(\"p\", null, \"To insert something in you need to get the collection name and use the insert method. Something I haven't yet figure out perfectly is how to handle Date from a .json file. In my case, I was opening file (.json) and inserting them into MongoDb. The Json parse method was returning the date as string, hence I needed to assign the value back with an instance of date\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"// To have a real date format in MongoDb\\nobjToInsert.fullDate = new Date(objToInsert.fullDate);\\n\\n// Access the collection we want to insert\\nconst collection = db.collection(\\\"documents\\\"); // \\\"documents\\\" can be anything you want your collection to be named\\n\\n// Insert with a callback that has an error or the result data\\ncollection.insert(\\n  objToInsert,\\n  (err: MongoError, result: InsertOneWriteOpResult) => {}\\n);\\n\")), mdx(\"p\", null, \"The code above will add a new entry and alter the object to add an \\\"\", \"_\", \"id\\\" with a GUID for the object. This way, every entry has a unique identifier automatically.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"NodeJs and MongoDb on Windows : Connecting and Inserting\",\n  \"date\": \"2017-08-07\",\n  \"categories\": [\"mongodb\", \"nodejs-web\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`MongoDb is an interesting choice of permanent persistence when using NodeJs since it stores document which is ideal of JSON document to get stored.`}</p>\n    <p>{`You can download a free version directly on MongoD : `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.mongodb.com/download-center#community\"\n      }}>{`https://www.mongodb.com/download-center#community`}</a>{` Once it's downloaded, it's best to be sure that the system environment variable is set to have an entry in the path to point to the bin folder of the installation path of MongoDb.`}</p>\n    <p>{`Before working out MongoDb with NodeJs, I recommend to download RoboMongo for free: `}<a parentName=\"p\" {...{\n        \"href\": \"https://robomongo.org/download\"\n      }}>{`https://robomongo.org/download`}</a>{`. This tool allows to query MongoDb and explore the data. Before using RoboMongo or to use the MongoDb library, we need to run the MongoDb server. To do so, go in the development folder you are working and execute the `}<strong parentName=\"p\">{`mongod`}</strong>{` command with the dbpath. For example, the following command will store the MongoDb in the \"data\" folder in the development folder.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` mongod --dbpath=.\\\\\\\\data\n`}</code></pre>\n    <p>{`Inside your NodeJs project, you needs sto have the mongodb library. If you are using TypeScript, you can get the type definition too.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`npm install mongodb --save npm install @types/mongodb --save-dev\n`}</code></pre>\n    <p>{`At this point, you can start using the library to access the information. First step, connecting to the server. Second step, connecting to the collection. The first step is the same as any other database, the second one is just that every documents are stored into a collection. Think about it as a table.`}</p>\n    <p>{`From here, we need to import some classes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { MongoClient, MongoError, Db, InsertOneWriteOpResult } from \"mongodb\";\n`}</code></pre>\n    <p>{`MongoClient is the main class to connect to Mongo. MongoError is the class that wrap the error which we will use to get information about the connection's error. Db is the class that hold information about MongoDb once connected. We need it to properly close the connection, but also to select the collection in which we want to invoke the action (find, insert, delete). The InsertOneWriteOpResult is the result on an insert.`}</p>\n    <p>{`Here is the connection code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`MongoClient.connect(url, (errMongo: MongoError, db: Db) => {\n  if (errMongo) {\n    console.log(errMongo);\n  } else {\n    console.log(\"Connected successfully to server\");\n  }\n});\n`}</code></pre>\n    <p>{`To insert something in you need to get the collection name and use the insert method. Something I haven't yet figure out perfectly is how to handle Date from a .json file. In my case, I was opening file (.json) and inserting them into MongoDb. The Json parse method was returning the date as string, hence I needed to assign the value back with an instance of date`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// To have a real date format in MongoDb\nobjToInsert.fullDate = new Date(objToInsert.fullDate);\n\n// Access the collection we want to insert\nconst collection = db.collection(\"documents\"); // \"documents\" can be anything you want your collection to be named\n\n// Insert with a callback that has an error or the result data\ncollection.insert(\n  objToInsert,\n  (err: MongoError, result: InsertOneWriteOpResult) => {}\n);\n`}</code></pre>\n    <p>{`The code above will add a new entry and alter the object to add an \"`}{`_`}{`id\" with a GUID for the object. This way, every entry has a unique identifier automatically.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}