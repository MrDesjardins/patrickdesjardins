{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-8c54c5416d3b235589ecb322b365958d--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Previously, few months ago, it was possible to access the ObjectStateManager and to use the method GetObjectStateEntry with the object desired to get the state.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":161,"offset":161},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":161,"offset":161},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" Customer customer = //... ObjectStateEntry ose = context.ObjectStateManager.GetObjectStateEntry(customer); Console.WriteLine(\"Customer object state: {0}\", ose.State); customer.Country = \"USA\"; Console.WriteLine(\"Customer object state: {0}\", ose.State); ","position":{"start":{"line":5,"column":1,"offset":164},"end":{"line":7,"column":4,"offset":432},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The version of EF4.3 doesn't have the ObjectStateManager available. It's possible to get the state but with the property ChangeTracker.","position":{"start":{"line":9,"column":1,"offset":434},"end":{"line":9,"column":136,"offset":569},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":434},"end":{"line":9,"column":136,"offset":569},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To see a specific object state you will need this property, the ChangeTracker, with a Linq query.","position":{"start":{"line":11,"column":1,"offset":571},"end":{"line":11,"column":98,"offset":668},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":571},"end":{"line":11,"column":98,"offset":668},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var e = dbContext.ChangeTracker.Entries<Customer>().Single(p=>p.Entity == myCustomer); Console.WriteLine(\"Customer state: \" + e.State); ","position":{"start":{"line":14,"column":1,"offset":671},"end":{"line":16,"column":4,"offset":822},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"ChangeTracker.Entries can be generic has the example above or not. In both case, it returns a lit of objects that is listened by the tracker. It doesn't mean that all objects inside the tracker has changed. The Linq query, with the Single() method, will search to get a Single correspondence to your object by comparing the Entity inside the Entry list to the customer that is wanted to get the state.","position":{"start":{"line":18,"column":1,"offset":824},"end":{"line":18,"column":402,"offset":1225},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":824},"end":{"line":18,"column":402,"offset":1225},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework 4.3 without ObjectStateManager, how to verify if an object changed?\",\"date\":\"2012-03-19\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":21,"column":1,"offset":1228},"end":{"line":21,"column":179,"offset":1406},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":179,"offset":1406}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework 4.3 without ObjectStateManager, how to verify if an object changed?\",\n  \"date\": \"2012-03-19\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Previously, few months ago, it was possible to access the ObjectStateManager and to use the method GetObjectStateEntry with the object desired to get the state.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" Customer customer = //... ObjectStateEntry ose = context.ObjectStateManager.GetObjectStateEntry(customer); Console.WriteLine(\\\"Customer object state: {0}\\\", ose.State); customer.Country = \\\"USA\\\"; Console.WriteLine(\\\"Customer object state: {0}\\\", ose.State); \\n\")), mdx(\"p\", null, \"The version of EF4.3 doesn't have the ObjectStateManager available. It's possible to get the state but with the property ChangeTracker.\"), mdx(\"p\", null, \"To see a specific object state you will need this property, the ChangeTracker, with a Linq query.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var e = dbContext.ChangeTracker.Entries<Customer>().Single(p=>p.Entity == myCustomer); Console.WriteLine(\\\"Customer state: \\\" + e.State); \\n\")), mdx(\"p\", null, \"ChangeTracker.Entries can be generic has the example above or not. In both case, it returns a lit of objects that is listened by the tracker. It doesn't mean that all objects inside the tracker has changed. The Linq query, with the Single() method, will search to get a Single correspondence to your object by comparing the Entity inside the Entry list to the customer that is wanted to get the state.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework 4.3 without ObjectStateManager, how to verify if an object changed?\",\n  \"date\": \"2012-03-19\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Previously, few months ago, it was possible to access the ObjectStateManager and to use the method GetObjectStateEntry with the object desired to get the state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` Customer customer = //... ObjectStateEntry ose = context.ObjectStateManager.GetObjectStateEntry(customer); Console.WriteLine(\"Customer object state: {0}\", ose.State); customer.Country = \"USA\"; Console.WriteLine(\"Customer object state: {0}\", ose.State); \n`}</code></pre>\n    <p>{`The version of EF4.3 doesn't have the ObjectStateManager available. It's possible to get the state but with the property ChangeTracker.`}</p>\n    <p>{`To see a specific object state you will need this property, the ChangeTracker, with a Linq query.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var e = dbContext.ChangeTracker.Entries<Customer>().Single(p=>p.Entity == myCustomer); Console.WriteLine(\"Customer state: \" + e.State); \n`}</code></pre>\n    <p>{`ChangeTracker.Entries can be generic has the example above or not. In both case, it returns a lit of objects that is listened by the tracker. It doesn't mean that all objects inside the tracker has changed. The Linq query, with the Single() method, will search to get a Single correspondence to your object by comparing the Entity inside the Entry list to the customer that is wanted to get the state.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}