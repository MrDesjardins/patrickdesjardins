{"expireTime":9007200886478385000,"key":"gatsby-plugin-mdx-entire-payload-4eda583acc10459e242b49625a0108f0--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you have a website and also some WebJobs you may want have both of them use the same library for your telemetry. Once idea is to create a shared project that both project refers. This shared project can have a class that abstract your abstraction. The real implementation can use Microsoft Azure Application Insights to send telemetries to Azure. As you may have read in the official documentation is that your website needs to have the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":441,"offset":441},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Microsoft.ApplicationInsights.Web","position":{"start":{"line":2,"column":443,"offset":443},"end":{"line":2,"column":476,"offset":476},"indent":[]}}],"position":{"start":{"line":2,"column":441,"offset":441},"end":{"line":2,"column":478,"offset":478},"indent":[]}},{"type":"text","value":" package, and ","position":{"start":{"line":2,"column":478,"offset":478},"end":{"line":2,"column":492,"offset":492},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Microsoft.ApplicationInsights.WindowsServer","position":{"start":{"line":2,"column":494,"offset":494},"end":{"line":2,"column":537,"offset":537},"indent":[]}}],"position":{"start":{"line":2,"column":492,"offset":492},"end":{"line":2,"column":539,"offset":539},"indent":[]}},{"type":"text","value":". What you need to know is that the shared project also need to have the ","position":{"start":{"line":2,"column":539,"offset":539},"end":{"line":2,"column":612,"offset":612},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Web","position":{"start":{"line":2,"column":614,"offset":614},"end":{"line":2,"column":617,"offset":617},"indent":[]}}],"position":{"start":{"line":2,"column":612,"offset":612},"end":{"line":2,"column":619,"offset":619},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":2,"column":619,"offset":619},"end":{"line":2,"column":624,"offset":624},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"WindowsServer","position":{"start":{"line":2,"column":626,"offset":626},"end":{"line":2,"column":639,"offset":639},"indent":[]}}],"position":{"start":{"line":2,"column":624,"offset":624},"end":{"line":2,"column":641,"offset":641},"indent":[]}},{"type":"text","value":" package but the WebJobs also need to have the WindowsServer package. If you don't, your will get some exception on ","position":{"start":{"line":2,"column":641,"offset":641},"end":{"line":2,"column":757,"offset":757},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Telemetry.Active...","position":{"start":{"line":2,"column":759,"offset":759},"end":{"line":2,"column":778,"offset":778},"indent":[]}}],"position":{"start":{"line":2,"column":757,"offset":757},"end":{"line":2,"column":780,"offset":780},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":780,"offset":780},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, you should always give some time for the telemetry to be sent after it is flushed. Here is a snippet of the method that send the constructed telemetry from my Telemetry class in the shared project. ","position":{"start":{"line":4,"column":1,"offset":782},"end":{"line":4,"column":208,"offset":989},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":782},"end":{"line":4,"column":208,"offset":989},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private void Send(string eventName, Dictionary<string, string> properties, Dictionary<string, double> metrics) { this.telemetry.TrackEvent(eventName , properties , metrics ); this.telemetry.Flush(); System.Threading.Thread.Sleep(5000); } \n``` The 5 seconds sleep is more than enough. You can have less. The important is just giving enough time to the telemetry to be sent to Azure.\n\n\nexport const _frontmatter = {\"title\":\"Telemetry with Application Insights for Website and Webjobs\",\"date\":\"2016-02-23\",\"categories\":[\"asp-net\",\"azure\"]}","position":{"start":{"line":5,"column":1,"offset":990},"end":{"line":10,"column":153,"offset":1537},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":10,"column":153,"offset":1537}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have a website and also some WebJobs you may want have both of them use the same library for your telemetry. Once idea is to create a shared project that both project refers. This shared project can have a class that abstract your abstraction. The real implementation can use Microsoft Azure Application Insights to send telemetries to Azure. As you may have read in the official documentation is that your website needs to have the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Microsoft.ApplicationInsights.Web\"), \" package, and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Microsoft.ApplicationInsights.WindowsServer\"), \". What you need to know is that the shared project also need to have the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WindowsServer\"), \" package but the WebJobs also need to have the WindowsServer package. If you don't, your will get some exception on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Telemetry.Active...\")), mdx(\"p\", null, \"Finally, you should always give some time for the telemetry to be sent after it is flushed. Here is a snippet of the method that send the constructed telemetry from my Telemetry class in the shared project. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private void Send(string eventName, Dictionary<string, string> properties, Dictionary<string, double> metrics) { this.telemetry.TrackEvent(eventName , properties , metrics ); this.telemetry.Flush(); System.Threading.Thread.Sleep(5000); } \\n``` The 5 seconds sleep is more than enough. You can have less. The important is just giving enough time to the telemetry to be sent to Azure.\\n\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"Telemetry with Application Insights for Website and Webjobs\\\",\\\"date\\\":\\\"2016-02-23\\\",\\\"categories\\\":[\\\"asp-net\\\",\\\"azure\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you have a website and also some WebJobs you may want have both of them use the same library for your telemetry. Once idea is to create a shared project that both project refers. This shared project can have a class that abstract your abstraction. The real implementation can use Microsoft Azure Application Insights to send telemetries to Azure. As you may have read in the official documentation is that your website needs to have the `}<strong parentName=\"p\">{`Microsoft.ApplicationInsights.Web`}</strong>{` package, and `}<strong parentName=\"p\">{`Microsoft.ApplicationInsights.WindowsServer`}</strong>{`. What you need to know is that the shared project also need to have the `}<strong parentName=\"p\">{`Web`}</strong>{` and `}<strong parentName=\"p\">{`WindowsServer`}</strong>{` package but the WebJobs also need to have the WindowsServer package. If you don't, your will get some exception on `}<strong parentName=\"p\">{`Telemetry.Active...`}</strong></p>\n    <p>{`Finally, you should always give some time for the telemetry to be sent after it is flushed. Here is a snippet of the method that send the constructed telemetry from my Telemetry class in the shared project. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private void Send(string eventName, Dictionary<string, string> properties, Dictionary<string, double> metrics) { this.telemetry.TrackEvent(eventName , properties , metrics ); this.telemetry.Flush(); System.Threading.Thread.Sleep(5000); } \n\\`\\`\\` The 5 seconds sleep is more than enough. You can have less. The important is just giving enough time to the telemetry to be sent to Azure.\n\n\nexport const _frontmatter = {\"title\":\"Telemetry with Application Insights for Website and Webjobs\",\"date\":\"2016-02-23\",\"categories\":[\"asp-net\",\"azure\"]}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}