{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-a33632290ace085408c78c417ec4df01--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You can specify Entity Framework to get everything back from the database instead of using what has been already loaded from the database.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":139,"offset":139},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":139,"offset":139},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A use case would be that you attach an entity from the web form and you save everything. You may return the view from the entity loaded but this one won't get the full object if it has been attached previously.","position":{"start":{"line":4,"column":1,"offset":141},"end":{"line":4,"column":211,"offset":351},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":141},"end":{"line":4,"column":211,"offset":351},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public Workout Get(int id) { return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\"Sessions.WorkoutSessionExercises\") .Include(\"Sessions.WorkoutSessionExercises.Exercise\") .AsNoTracking() .Single(c => c.Id == id); } ","position":{"start":{"line":6,"column":1,"offset":353},"end":{"line":8,"column":4,"offset":611},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With the addition of ","position":{"start":{"line":10,"column":1,"offset":613},"end":{"line":10,"column":22,"offset":634},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"AsNoTracking","position":{"start":{"line":10,"column":24,"offset":636},"end":{"line":10,"column":36,"offset":648},"indent":[]}}],"position":{"start":{"line":10,"column":22,"offset":634},"end":{"line":10,"column":38,"offset":650},"indent":[]}},{"type":"text","value":", the information won't be get from the local storage of the database context but from the database.","position":{"start":{"line":10,"column":38,"offset":650},"end":{"line":10,"column":138,"offset":750},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":613},"end":{"line":10,"column":138,"offset":750},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"AsNoTracking() to force your data context to get everything from the database\",\"date\":\"2013-03-28\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":13,"column":1,"offset":753},"end":{"line":13,"column":172,"offset":924},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":13,"column":172,"offset":924}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"AsNoTracking() to force your data context to get everything from the database\",\n  \"date\": \"2013-03-28\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can specify Entity Framework to get everything back from the database instead of using what has been already loaded from the database.\"), mdx(\"p\", null, \"A use case would be that you attach an entity from the web form and you save everything. You may return the view from the entity loaded but this one won't get the full object if it has been attached previously.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public Workout Get(int id) { return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\\\"Sessions.WorkoutSessionExercises\\\") .Include(\\\"Sessions.WorkoutSessionExercises.Exercise\\\") .AsNoTracking() .Single(c => c.Id == id); } \\n\")), mdx(\"p\", null, \"With the addition of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AsNoTracking\"), \", the information won't be get from the local storage of the database context but from the database.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"AsNoTracking() to force your data context to get everything from the database\",\n  \"date\": \"2013-03-28\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You can specify Entity Framework to get everything back from the database instead of using what has been already loaded from the database.`}</p>\n    <p>{`A use case would be that you attach an entity from the web form and you save everything. You may return the view from the entity loaded but this one won't get the full object if it has been attached previously.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public Workout Get(int id) { return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\"Sessions.WorkoutSessionExercises\") .Include(\"Sessions.WorkoutSessionExercises.Exercise\") .AsNoTracking() .Single(c => c.Id == id); } \n`}</code></pre>\n    <p>{`With the addition of `}<strong parentName=\"p\">{`AsNoTracking`}</strong>{`, the information won't be get from the local storage of the database context but from the database.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}