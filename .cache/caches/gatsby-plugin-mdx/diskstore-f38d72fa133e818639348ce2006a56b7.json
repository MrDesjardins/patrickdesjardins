{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-3e138842679a197976c8bafb6f30312e--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are using Html Helper to generate your form you may end up with label with the property name into it. You may also have error message with the property name. The problem is if your object contain English term, you would prefer not to show them in English if you write something in French.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":296,"offset":296},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":296,"offset":296},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Person { public string Name { get; set; } } ","position":{"start":{"line":5,"column":1,"offset":299},"end":{"line":7,"column":4,"offset":371},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example above could display the word \"Name\" in a localized string, which is not what we want. But, if we use the ","position":{"start":{"line":9,"column":1,"offset":373},"end":{"line":9,"column":118,"offset":490},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Display","position":{"start":{"line":9,"column":120,"offset":492},"end":{"line":9,"column":127,"offset":499},"indent":[]}}],"position":{"start":{"line":9,"column":118,"offset":490},"end":{"line":9,"column":129,"offset":501},"indent":[]}},{"type":"text","value":" data annotation attribute, it's possible to localize the property Name.","position":{"start":{"line":9,"column":129,"offset":501},"end":{"line":9,"column":201,"offset":573},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":373},"end":{"line":9,"column":201,"offset":573},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Person { [Display(ResourceType = typeof(ResourceFileTypeHere), Name=\"NamePropertyKey\")] public string Name { get; set; } } ","position":{"start":{"line":12,"column":1,"offset":576},"end":{"line":14,"column":4,"offset":727},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will search inside the resource specified the key inside the Name attribute. That's it, you have your property localized.","position":{"start":{"line":16,"column":1,"offset":729},"end":{"line":16,"column":127,"offset":855},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":729},"end":{"line":16,"column":127,"offset":855},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to localize property name?\",\"date\":\"2012-04-30\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":19,"column":1,"offset":858},"end":{"line":19,"column":116,"offset":973},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":116,"offset":973}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to localize property name?\",\n  \"date\": \"2012-04-30\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using Html Helper to generate your form you may end up with label with the property name into it. You may also have error message with the property name. The problem is if your object contain English term, you would prefer not to show them in English if you write something in French.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Person { public string Name { get; set; } } \\n\")), mdx(\"p\", null, \"The example above could display the word \\\"Name\\\" in a localized string, which is not what we want. But, if we use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Display\"), \" data annotation attribute, it's possible to localize the property Name.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Person { [Display(ResourceType = typeof(ResourceFileTypeHere), Name=\\\"NamePropertyKey\\\")] public string Name { get; set; } } \\n\")), mdx(\"p\", null, \"This will search inside the resource specified the key inside the Name attribute. That's it, you have your property localized.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to localize property name?\",\n  \"date\": \"2012-04-30\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are using Html Helper to generate your form you may end up with label with the property name into it. You may also have error message with the property name. The problem is if your object contain English term, you would prefer not to show them in English if you write something in French.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Person { public string Name { get; set; } } \n`}</code></pre>\n    <p>{`The example above could display the word \"Name\" in a localized string, which is not what we want. But, if we use the `}<strong parentName=\"p\">{`Display`}</strong>{` data annotation attribute, it's possible to localize the property Name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Person { [Display(ResourceType = typeof(ResourceFileTypeHere), Name=\"NamePropertyKey\")] public string Name { get; set; } } \n`}</code></pre>\n    <p>{`This will search inside the resource specified the key inside the Name attribute. That's it, you have your property localized.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}