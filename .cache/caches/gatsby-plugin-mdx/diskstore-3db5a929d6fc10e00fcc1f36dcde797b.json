{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-bc8c40c0036bcc57c59e65c855e89d37--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"hasOwnProperty is a function from Object's prototype, hence every thing in JavaScript has access to it. It allows to know if a member is directly having the member specified by string.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":185,"offset":185},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":185,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's take this simple example where a property \"m1\" is defined 4 times at each level (child, child prototype, base and base prototype).","position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":4,"column":137,"offset":323},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":4,"column":137,"offset":323},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var BaseClass1 = function () {\n  this.m1 = \"m1 base\";\n};\nBaseClass1.prototype.m1 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m1 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nconsole.log(instance1.hasOwnProperty(\"m1\"));","position":{"start":{"line":6,"column":1,"offset":325},"end":{"line":21,"column":4,"offset":803},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The output is \"true\". This is because the instance1 has a property \"m1\". If we remove \"m1\" from the child class, the value will be \"true\". The question is, is it true because of the child prototype or the base class? The answer is the base class. Prototype definition wouldn't be counted has own property. So, the following code return false:","position":{"start":{"line":23,"column":1,"offset":805},"end":{"line":23,"column":343,"offset":1147},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":805},"end":{"line":23,"column":343,"offset":1147},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var BaseClass1 = function () {\n  //this.m1 = \"m1 base\";\n};\nBaseClass1.prototype.m1 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this);\n  // Call the constructor of the base class\n  //this.m1 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\nconsole.log(\"Result \" + instance1.hasOwnProperty(\"m1\"));","position":{"start":{"line":25,"column":1,"offset":1149},"end":{"line":40,"column":4,"offset":1644},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we want to use hasOwnProperty on the prototype we will see that it returns false. However, it's possible to use the method \"call\" to execute from the base object into an instance, like the following:","position":{"start":{"line":42,"column":1,"offset":1646},"end":{"line":42,"column":203,"offset":1848},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1646},"end":{"line":42,"column":203,"offset":1848},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var BaseClass1 = function () {\n  this.m1 = \"m1 base\";\n};\nBaseClass1.prototype.m1 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m1 = \"m1 child\";\n};\n\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nconsole.log(\"Result 1\" + BaseClass1.hasOwnProperty(\"m1\"));\nconsole.log(\"Result 2\" + Object.prototype.hasOwnProperty.call(instance1, \"m1\"));","position":{"start":{"line":44,"column":1,"offset":1850},"end":{"line":61,"column":4,"offset":2424},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will return false for the first result, and true for the result #2. The first one is false because it's not using the instance, but the prototype. The second is true because it uses the object and use call which pass the \"this\" context to be the instance1 which is having m1 (in the child and base).","position":{"start":{"line":63,"column":1,"offset":2426},"end":{"line":63,"column":305,"offset":2730},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2426},"end":{"line":63,"column":305,"offset":2730},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How can this be useful? Well, it can be useful to determine which member is from the object and which is part of the prototype hierarchy. In the following example, you will see that we will loop through the instance and get members from the child, child prototype, base, base prototype as well as a constructor.","position":{"start":{"line":65,"column":1,"offset":2732},"end":{"line":65,"column":312,"offset":3043},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2732},"end":{"line":65,"column":312,"offset":3043},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var BaseClass1 = function () {\n  this.m2 = \"m1 base\";\n};\nBaseClass1.prototype.m3 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m4 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nfor (name in instance1) {\n  console.log(name + \": \" + instance1[name]);\n}","position":{"start":{"line":67,"column":1,"offset":3045},"end":{"line":84,"column":4,"offset":3552},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The result is:","position":{"start":{"line":86,"column":1,"offset":3554},"end":{"line":86,"column":15,"offset":3568},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3554},"end":{"line":86,"column":15,"offset":3568},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"\"m2: m1 base\"\n\"m4: m1 child\"\n\"m1: m1 child proto\"\n\"constructor: function () { this.m2 = 'm1 base'; }\"\n\"m3: m1 proto base\"\n","position":{"start":{"line":88,"column":1,"offset":3570},"end":{"line":95,"column":4,"offset":3700},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By introducing a condition that use hasOwnProperty we can be sure to just get m2 and m4 (child and base) without prototype.","position":{"start":{"line":97,"column":1,"offset":3702},"end":{"line":97,"column":124,"offset":3825},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3702},"end":{"line":97,"column":124,"offset":3825},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var BaseClass1 = function () {\n  this.m2 = \"m1 base\";\n};\nBaseClass1.prototype.m3 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m4 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nfor (name in instance1) {\n  if (instance1.hasOwnProperty(name)) {\n    console.log(name + \": \" + instance1[name]);\n  }\n}","position":{"start":{"line":99,"column":1,"offset":3827},"end":{"line":118,"column":4,"offset":4380},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Which returns: ","position":{"start":{"line":120,"column":1,"offset":4382},"end":{"line":120,"column":16,"offset":4397},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":4382},"end":{"line":120,"column":16,"offset":4397},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"\"m2: m1 base\" \"m4: m1 child\"","position":{"start":{"line":121,"column":1,"offset":4398},"end":{"line":123,"column":4,"offset":4434},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this article we saw the power of hasOwnProperty that can help to distinct which members of an object is from the object and inheritance against which members if from the prototype chain.","position":{"start":{"line":125,"column":1,"offset":4436},"end":{"line":125,"column":190,"offset":4625},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":4436},"end":{"line":125,"column":190,"offset":4625},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Prototype Part 4 : hasOwnProperty\",\"date\":\"2017-05-23\",\"categories\":[\"javascript\"]}","position":{"start":{"line":127,"column":1,"offset":4627},"end":{"line":127,"column":133,"offset":4759},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":127,"column":133,"offset":4759}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Prototype Part 4 : hasOwnProperty\",\n  \"date\": \"2017-05-23\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"hasOwnProperty is a function from Object's prototype, hence every thing in JavaScript has access to it. It allows to know if a member is directly having the member specified by string.\"), mdx(\"p\", null, \"Let's take this simple example where a property \\\"m1\\\" is defined 4 times at each level (child, child prototype, base and base prototype).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var BaseClass1 = function () {\\n  this.m1 = \\\"m1 base\\\";\\n};\\nBaseClass1.prototype.m1 = \\\"m1 proto base\\\";\\nvar ChildClass1 = function () {\\n  BaseClass1.call(this); // Call the constructor of the base class\\n  this.m1 = \\\"m1 child\\\";\\n};\\nChildClass1.prototype = Object.create(BaseClass1.prototype);\\nChildClass1.prototype.m1 = \\\"m1 child proto\\\";\\nChildClass1.prototype.constructor = BaseClass1;\\nvar instance1 = new ChildClass1();\\n\\nconsole.log(instance1.hasOwnProperty(\\\"m1\\\"));\\n\")), mdx(\"p\", null, \"The output is \\\"true\\\". This is because the instance1 has a property \\\"m1\\\". If we remove \\\"m1\\\" from the child class, the value will be \\\"true\\\". The question is, is it true because of the child prototype or the base class? The answer is the base class. Prototype definition wouldn't be counted has own property. So, the following code return false:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var BaseClass1 = function () {\\n  //this.m1 = \\\"m1 base\\\";\\n};\\nBaseClass1.prototype.m1 = \\\"m1 proto base\\\";\\nvar ChildClass1 = function () {\\n  BaseClass1.call(this);\\n  // Call the constructor of the base class\\n  //this.m1 = \\\"m1 child\\\";\\n};\\nChildClass1.prototype = Object.create(BaseClass1.prototype);\\nChildClass1.prototype.m1 = \\\"m1 child proto\\\";\\nChildClass1.prototype.constructor = BaseClass1;\\nvar instance1 = new ChildClass1();\\nconsole.log(\\\"Result \\\" + instance1.hasOwnProperty(\\\"m1\\\"));\\n\")), mdx(\"p\", null, \"If we want to use hasOwnProperty on the prototype we will see that it returns false. However, it's possible to use the method \\\"call\\\" to execute from the base object into an instance, like the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var BaseClass1 = function () {\\n  this.m1 = \\\"m1 base\\\";\\n};\\nBaseClass1.prototype.m1 = \\\"m1 proto base\\\";\\nvar ChildClass1 = function () {\\n  BaseClass1.call(this); // Call the constructor of the base class\\n  this.m1 = \\\"m1 child\\\";\\n};\\n\\nChildClass1.prototype = Object.create(BaseClass1.prototype);\\nChildClass1.prototype.m1 = \\\"m1 child proto\\\";\\nChildClass1.prototype.constructor = BaseClass1;\\nvar instance1 = new ChildClass1();\\n\\nconsole.log(\\\"Result 1\\\" + BaseClass1.hasOwnProperty(\\\"m1\\\"));\\nconsole.log(\\\"Result 2\\\" + Object.prototype.hasOwnProperty.call(instance1, \\\"m1\\\"));\\n\")), mdx(\"p\", null, \"This will return false for the first result, and true for the result #2. The first one is false because it's not using the instance, but the prototype. The second is true because it uses the object and use call which pass the \\\"this\\\" context to be the instance1 which is having m1 (in the child and base).\"), mdx(\"p\", null, \"How can this be useful? Well, it can be useful to determine which member is from the object and which is part of the prototype hierarchy. In the following example, you will see that we will loop through the instance and get members from the child, child prototype, base, base prototype as well as a constructor.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var BaseClass1 = function () {\\n  this.m2 = \\\"m1 base\\\";\\n};\\nBaseClass1.prototype.m3 = \\\"m1 proto base\\\";\\nvar ChildClass1 = function () {\\n  BaseClass1.call(this); // Call the constructor of the base class\\n  this.m4 = \\\"m1 child\\\";\\n};\\nChildClass1.prototype = Object.create(BaseClass1.prototype);\\nChildClass1.prototype.m1 = \\\"m1 child proto\\\";\\nChildClass1.prototype.constructor = BaseClass1;\\nvar instance1 = new ChildClass1();\\n\\nfor (name in instance1) {\\n  console.log(name + \\\": \\\" + instance1[name]);\\n}\\n\")), mdx(\"p\", null, \"The result is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"m2: m1 base\\\"\\n\\\"m4: m1 child\\\"\\n\\\"m1: m1 child proto\\\"\\n\\\"constructor: function () { this.m2 = 'm1 base'; }\\\"\\n\\\"m3: m1 proto base\\\"\\n\\n\")), mdx(\"p\", null, \"By introducing a condition that use hasOwnProperty we can be sure to just get m2 and m4 (child and base) without prototype.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var BaseClass1 = function () {\\n  this.m2 = \\\"m1 base\\\";\\n};\\nBaseClass1.prototype.m3 = \\\"m1 proto base\\\";\\nvar ChildClass1 = function () {\\n  BaseClass1.call(this); // Call the constructor of the base class\\n  this.m4 = \\\"m1 child\\\";\\n};\\nChildClass1.prototype = Object.create(BaseClass1.prototype);\\nChildClass1.prototype.m1 = \\\"m1 child proto\\\";\\nChildClass1.prototype.constructor = BaseClass1;\\nvar instance1 = new ChildClass1();\\n\\nfor (name in instance1) {\\n  if (instance1.hasOwnProperty(name)) {\\n    console.log(name + \\\": \\\" + instance1[name]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Which returns: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"m2: m1 base\\\" \\\"m4: m1 child\\\"\\n\")), mdx(\"p\", null, \"In this article we saw the power of hasOwnProperty that can help to distinct which members of an object is from the object and inheritance against which members if from the prototype chain.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Prototype Part 4 : hasOwnProperty\",\n  \"date\": \"2017-05-23\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`hasOwnProperty is a function from Object's prototype, hence every thing in JavaScript has access to it. It allows to know if a member is directly having the member specified by string.`}</p>\n    <p>{`Let's take this simple example where a property \"m1\" is defined 4 times at each level (child, child prototype, base and base prototype).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var BaseClass1 = function () {\n  this.m1 = \"m1 base\";\n};\nBaseClass1.prototype.m1 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m1 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nconsole.log(instance1.hasOwnProperty(\"m1\"));\n`}</code></pre>\n    <p>{`The output is \"true\". This is because the instance1 has a property \"m1\". If we remove \"m1\" from the child class, the value will be \"true\". The question is, is it true because of the child prototype or the base class? The answer is the base class. Prototype definition wouldn't be counted has own property. So, the following code return false:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var BaseClass1 = function () {\n  //this.m1 = \"m1 base\";\n};\nBaseClass1.prototype.m1 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this);\n  // Call the constructor of the base class\n  //this.m1 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\nconsole.log(\"Result \" + instance1.hasOwnProperty(\"m1\"));\n`}</code></pre>\n    <p>{`If we want to use hasOwnProperty on the prototype we will see that it returns false. However, it's possible to use the method \"call\" to execute from the base object into an instance, like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var BaseClass1 = function () {\n  this.m1 = \"m1 base\";\n};\nBaseClass1.prototype.m1 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m1 = \"m1 child\";\n};\n\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nconsole.log(\"Result 1\" + BaseClass1.hasOwnProperty(\"m1\"));\nconsole.log(\"Result 2\" + Object.prototype.hasOwnProperty.call(instance1, \"m1\"));\n`}</code></pre>\n    <p>{`This will return false for the first result, and true for the result #2. The first one is false because it's not using the instance, but the prototype. The second is true because it uses the object and use call which pass the \"this\" context to be the instance1 which is having m1 (in the child and base).`}</p>\n    <p>{`How can this be useful? Well, it can be useful to determine which member is from the object and which is part of the prototype hierarchy. In the following example, you will see that we will loop through the instance and get members from the child, child prototype, base, base prototype as well as a constructor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var BaseClass1 = function () {\n  this.m2 = \"m1 base\";\n};\nBaseClass1.prototype.m3 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m4 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nfor (name in instance1) {\n  console.log(name + \": \" + instance1[name]);\n}\n`}</code></pre>\n    <p>{`The result is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"m2: m1 base\"\n\"m4: m1 child\"\n\"m1: m1 child proto\"\n\"constructor: function () { this.m2 = 'm1 base'; }\"\n\"m3: m1 proto base\"\n\n`}</code></pre>\n    <p>{`By introducing a condition that use hasOwnProperty we can be sure to just get m2 and m4 (child and base) without prototype.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var BaseClass1 = function () {\n  this.m2 = \"m1 base\";\n};\nBaseClass1.prototype.m3 = \"m1 proto base\";\nvar ChildClass1 = function () {\n  BaseClass1.call(this); // Call the constructor of the base class\n  this.m4 = \"m1 child\";\n};\nChildClass1.prototype = Object.create(BaseClass1.prototype);\nChildClass1.prototype.m1 = \"m1 child proto\";\nChildClass1.prototype.constructor = BaseClass1;\nvar instance1 = new ChildClass1();\n\nfor (name in instance1) {\n  if (instance1.hasOwnProperty(name)) {\n    console.log(name + \": \" + instance1[name]);\n  }\n}\n`}</code></pre>\n    <p>{`Which returns: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"m2: m1 base\" \"m4: m1 child\"\n`}</code></pre>\n    <p>{`In this article we saw the power of hasOwnProperty that can help to distinct which members of an object is from the object and inheritance against which members if from the prototype chain.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}