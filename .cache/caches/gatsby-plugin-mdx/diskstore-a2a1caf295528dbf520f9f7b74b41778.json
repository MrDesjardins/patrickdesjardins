{"expireTime":9007200886478393000,"key":"gatsby-plugin-mdx-entire-payload-99a272720a93001011f93f68dbe2708f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you have an array that you want to flatten into a string with a comma between each entry, you could use Linq with a one liner delegate to reach this goal.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":158,"offset":158},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":158,"offset":158},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string flatten = inputs.Aggregate((current, next) => string.Format(\"{0}, {1}\", current, next)) ","position":{"start":{"line":5,"column":1,"offset":161},"end":{"line":7,"column":4,"offset":271},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is quite powerful as you can see, you do not have to do validation to know if you have reach the last entry to not add a trailing comma. Without Linq and the aggregate function, you would have to loop and to verify this condition.","position":{"start":{"line":9,"column":1,"offset":273},"end":{"line":9,"column":236,"offset":508},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":273},"end":{"line":9,"column":236,"offset":508},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string flatten = string.Empty; for(int i = 0 ; i < inputs.Length ; i++) { if(i!=(i.Length-1)) { flatten += str + \", \"; } else { flatten += str; } } ","position":{"start":{"line":12,"column":1,"offset":511},"end":{"line":14,"column":4,"offset":674},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I don't know for you, but I found more easy to read the ","position":{"start":{"line":16,"column":1,"offset":676},"end":{"line":16,"column":57,"offset":732},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Aggregate","position":{"start":{"line":16,"column":59,"offset":734},"end":{"line":16,"column":68,"offset":743},"indent":[]}}],"position":{"start":{"line":16,"column":57,"offset":732},"end":{"line":16,"column":70,"offset":745},"indent":[]}},{"type":"text","value":" method than the second snippet of code.","position":{"start":{"line":16,"column":70,"offset":745},"end":{"line":16,"column":110,"offset":785},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":676},"end":{"line":16,"column":110,"offset":785},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Linq Aggregate to concatenate string with a comma\",\"date\":\"2013-04-01\",\"categories\":[\"c-sharp\",\"linq\"]}","position":{"start":{"line":19,"column":1,"offset":788},"end":{"line":19,"column":142,"offset":929},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":142,"offset":929}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linq Aggregate to concatenate string with a comma\",\n  \"date\": \"2013-04-01\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have an array that you want to flatten into a string with a comma between each entry, you could use Linq with a one liner delegate to reach this goal.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string flatten = inputs.Aggregate((current, next) => string.Format(\\\"{0}, {1}\\\", current, next)) \\n\")), mdx(\"p\", null, \"This is quite powerful as you can see, you do not have to do validation to know if you have reach the last entry to not add a trailing comma. Without Linq and the aggregate function, you would have to loop and to verify this condition.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string flatten = string.Empty; for(int i = 0 ; i < inputs.Length ; i++) { if(i!=(i.Length-1)) { flatten += str + \\\", \\\"; } else { flatten += str; } } \\n\")), mdx(\"p\", null, \"I don't know for you, but I found more easy to read the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Aggregate\"), \" method than the second snippet of code.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Linq Aggregate to concatenate string with a comma\",\n  \"date\": \"2013-04-01\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you have an array that you want to flatten into a string with a comma between each entry, you could use Linq with a one liner delegate to reach this goal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string flatten = inputs.Aggregate((current, next) => string.Format(\"{0}, {1}\", current, next)) \n`}</code></pre>\n    <p>{`This is quite powerful as you can see, you do not have to do validation to know if you have reach the last entry to not add a trailing comma. Without Linq and the aggregate function, you would have to loop and to verify this condition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string flatten = string.Empty; for(int i = 0 ; i < inputs.Length ; i++) { if(i!=(i.Length-1)) { flatten += str + \", \"; } else { flatten += str; } } \n`}</code></pre>\n    <p>{`I don't know for you, but I found more easy to read the `}<strong parentName=\"p\">{`Aggregate`}</strong>{` method than the second snippet of code.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}