{"expireTime":9007200886478393000,"key":"gatsby-plugin-mdx-entire-payload-18aefb92856a421310ae82ce7f2aa82f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"It means that the entity is not attached to the database context (DbContext). You need to attach first the entity to the IDbSet of the DbContext. From here, you can remove the entity.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":184,"offset":184},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":184,"offset":184},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" if (!_set.Local.Contains(entity)) {_set.Attach(entity); }_set.Remove(entity); ","position":{"start":{"line":5,"column":1,"offset":187},"end":{"line":7,"column":4,"offset":280},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's it! We check if the entity is already attached. If it is, then we do not need to do anything. Otherwise, we attach. Attaching will take the primary key of the entity and delete this one even if it's not fully loaded. The code above could be in a ","position":{"start":{"line":9,"column":1,"offset":282},"end":{"line":9,"column":254,"offset":535},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Remove","position":{"start":{"line":9,"column":255,"offset":536},"end":{"line":9,"column":261,"offset":542},"indent":[]}}],"position":{"start":{"line":9,"column":254,"offset":535},"end":{"line":9,"column":262,"offset":543},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":9,"column":262,"offset":543},"end":{"line":9,"column":270,"offset":551},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":282},"end":{"line":9,"column":270,"offset":551},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"The object cannot be deleted because it was not found in the ObjectStateManager\",\"date\":\"2013-02-15\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":12,"column":1,"offset":554},"end":{"line":12,"column":174,"offset":727},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":12,"column":174,"offset":727}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The object cannot be deleted because it was not found in the ObjectStateManager\",\n  \"date\": \"2013-02-15\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It means that the entity is not attached to the database context (DbContext). You need to attach first the entity to the IDbSet of the DbContext. From here, you can remove the entity.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" if (!_set.Local.Contains(entity)) {_set.Attach(entity); }_set.Remove(entity); \\n\")), mdx(\"p\", null, \"That's it! We check if the entity is already attached. If it is, then we do not need to do anything. Otherwise, we attach. Attaching will take the primary key of the entity and delete this one even if it's not fully loaded. The code above could be in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Remove\"), \" method.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"The object cannot be deleted because it was not found in the ObjectStateManager\",\n  \"date\": \"2013-02-15\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`It means that the entity is not attached to the database context (DbContext). You need to attach first the entity to the IDbSet of the DbContext. From here, you can remove the entity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` if (!_set.Local.Contains(entity)) {_set.Attach(entity); }_set.Remove(entity); \n`}</code></pre>\n    <p>{`That's it! We check if the entity is already attached. If it is, then we do not need to do anything. Otherwise, we attach. Attaching will take the primary key of the entity and delete this one even if it's not fully loaded. The code above could be in a `}<em parentName=\"p\">{`Remove`}</em>{` method.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}