{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-2b6065972c7d05c8c4d9274ae9f02d83--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you have a parent->child relationship between two of your classes and you delete the parent, you may want to delete all children. To do, you need to have a \"DELETE CASCADE\" statement on your foreign key. Here is a simple example:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":233,"offset":233},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":233,"offset":233},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" CREATE TABLE [Parent]( [ID] [int] IDENTITY(1,1) NOT NULL, [Description] [nvarchar](100) NULL, CONSTRAINT [PK_Parent] PRIMARY KEY CLUSTERED GO\n\nCREATE TABLE [ParentDetail]( [ID] [int] IDENTITY(1,1) NOT NULL, [Parent_ID] [int] NOT NULL, CONSTRAINT [PK_ParentDetail] PRIMARY KEY CLUSTERED GO\n\nALTER TABLE [ParentDetail] WITH CHECK ADD CONSTRAINT [FK_ParentDetail_Parent] FOREIGN KEY([Parent_ID]) REFERENCES [Parent] ([ID]) ON DELETE CASCADE GO ","position":{"start":{"line":5,"column":1,"offset":236},"end":{"line":11,"column":4,"offset":689},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The problem is that if you are using Entity Framework 4.3 and try to delete a Parent entity, you will end having this error :","position":{"start":{"line":14,"column":1,"offset":692},"end":{"line":14,"column":126,"offset":817},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":692},"end":{"line":14,"column":126,"offset":817},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details.","position":{"start":{"line":16,"column":3,"offset":821},"end":{"line":16,"column":378,"offset":1196},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":821},"end":{"line":16,"column":378,"offset":1196},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":819},"end":{"line":16,"column":378,"offset":1196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The inner exception message will contain something similar to this:","position":{"start":{"line":18,"column":1,"offset":1198},"end":{"line":18,"column":68,"offset":1265},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1198},"end":{"line":18,"column":68,"offset":1265},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Cannot insert the value NULL into column 'Parent_ID', table 'ParentDetail'; column does not allow nulls. UPDATE fails. The statement has been terminated.","position":{"start":{"line":20,"column":3,"offset":1269},"end":{"line":20,"column":156,"offset":1422},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1269},"end":{"line":20,"column":156,"offset":1422},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1267},"end":{"line":20,"column":156,"offset":1422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, what does it means? It tries to delete the Parent and to set into each ParentDetail the ID NULL because it's been erased. This is not what we want. In fact, we would like to have all ParentDetail to me removed as well. This is a little bit the reason why we have specify on the SQL to have a cascade.","position":{"start":{"line":22,"column":1,"offset":1424},"end":{"line":22,"column":305,"offset":1728},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1424},"end":{"line":22,"column":305,"offset":1728},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can do it manually in your project:","position":{"start":{"line":24,"column":1,"offset":1730},"end":{"line":24,"column":40,"offset":1769},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1730},"end":{"line":24,"column":40,"offset":1769},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var listDetail = parent.ParentDetails.ToList(); foreach (var ParentDetail in listDetail){ Database.ParentDetails.Remove(ParentDetail); }\n\nDatabase.Parents.Remove(Parent); Database.SaveChanges(); ","position":{"start":{"line":27,"column":1,"offset":1772},"end":{"line":31,"column":4,"offset":1982},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will produce multiple amount of SQL statement on the SQL Server. One for each details and 1 for the Parent itself.","position":{"start":{"line":33,"column":1,"offset":1984},"end":{"line":33,"column":120,"offset":2103},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1984},"end":{"line":33,"column":120,"offset":2103},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But, if you go to your database context and you specify in the ","position":{"start":{"line":35,"column":1,"offset":2105},"end":{"line":35,"column":64,"offset":2168},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OnModelCreating","position":{"start":{"line":35,"column":66,"offset":2170},"end":{"line":35,"column":81,"offset":2185},"indent":[]}}],"position":{"start":{"line":35,"column":64,"offset":2168},"end":{"line":35,"column":83,"offset":2187},"indent":[]}},{"type":"text","value":" a rule about the cascade it will work as it's suppose to do.","position":{"start":{"line":35,"column":83,"offset":2187},"end":{"line":35,"column":144,"offset":2248},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":2105},"end":{"line":35,"column":144,"offset":2248},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" protected override void OnModelCreating(DbModelBuilder modelBuilder) { //... modelBuilder.Entity<Parent>().HasMany(e => e.ParentDetails).WithOptional(s => s.Parent).WillCascadeOnDelete(true); //... ","position":{"start":{"line":38,"column":1,"offset":2251},"end":{"line":40,"column":4,"offset":2464},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's it! Now you can simply delete the Parent without having to delete manually every children.","position":{"start":{"line":42,"column":1,"offset":2466},"end":{"line":42,"column":98,"offset":2563},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2466},"end":{"line":42,"column":98,"offset":2563},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" Database.Parents.Remove(Parent); Database.SaveChanges(); ","position":{"start":{"line":45,"column":1,"offset":2566},"end":{"line":47,"column":4,"offset":2638},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"On the SQL server side, you can see the database to have the same amount of delete statement executed. So, you do not save on the amount of query but save on the amount of logic to handle on the C# side because you do not have to care to delete every details.","position":{"start":{"line":49,"column":1,"offset":2640},"end":{"line":49,"column":260,"offset":2899},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2640},"end":{"line":49,"column":260,"offset":2899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On a special note, you do not need to have the table having a reference with the On Delete Cascade. You can handle the cascade only on the Entity DbContext with OnModelCreating. If you specify it on the Sql Server Database side, this only will enforce the integrity on the database side but won't be automatically applied on the delete with EF.","position":{"start":{"line":51,"column":1,"offset":2901},"end":{"line":51,"column":345,"offset":3245},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2901},"end":{"line":51,"column":345,"offset":3245},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework 4.3 delete cascade with code first (Poco)\",\"date\":\"2012-04-19\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":54,"column":1,"offset":3248},"end":{"line":54,"column":153,"offset":3400},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":54,"column":153,"offset":3400}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework 4.3 delete cascade with code first (Poco)\",\n  \"date\": \"2012-04-19\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have a parent->child relationship between two of your classes and you delete the parent, you may want to delete all children. To do, you need to have a \\\"DELETE CASCADE\\\" statement on your foreign key. Here is a simple example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" CREATE TABLE [Parent]( [ID] [int] IDENTITY(1,1) NOT NULL, [Description] [nvarchar](100) NULL, CONSTRAINT [PK_Parent] PRIMARY KEY CLUSTERED GO\\n\\nCREATE TABLE [ParentDetail]( [ID] [int] IDENTITY(1,1) NOT NULL, [Parent_ID] [int] NOT NULL, CONSTRAINT [PK_ParentDetail] PRIMARY KEY CLUSTERED GO\\n\\nALTER TABLE [ParentDetail] WITH CHECK ADD CONSTRAINT [FK_ParentDetail_Parent] FOREIGN KEY([Parent_ID]) REFERENCES [Parent] ([ID]) ON DELETE CASCADE GO \\n\")), mdx(\"p\", null, \"The problem is that if you are using Entity Framework 4.3 and try to delete a Parent entity, you will end having this error :\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details.\")), mdx(\"p\", null, \"The inner exception message will contain something similar to this:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Cannot insert the value NULL into column 'Parent_ID', table 'ParentDetail'; column does not allow nulls. UPDATE fails. The statement has been terminated.\")), mdx(\"p\", null, \"So, what does it means? It tries to delete the Parent and to set into each ParentDetail the ID NULL because it's been erased. This is not what we want. In fact, we would like to have all ParentDetail to me removed as well. This is a little bit the reason why we have specify on the SQL to have a cascade.\"), mdx(\"p\", null, \"You can do it manually in your project:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var listDetail = parent.ParentDetails.ToList(); foreach (var ParentDetail in listDetail){ Database.ParentDetails.Remove(ParentDetail); }\\n\\nDatabase.Parents.Remove(Parent); Database.SaveChanges(); \\n\")), mdx(\"p\", null, \"This will produce multiple amount of SQL statement on the SQL Server. One for each details and 1 for the Parent itself.\"), mdx(\"p\", null, \"But, if you go to your database context and you specify in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OnModelCreating\"), \" a rule about the cascade it will work as it's suppose to do.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" protected override void OnModelCreating(DbModelBuilder modelBuilder) { //... modelBuilder.Entity<Parent>().HasMany(e => e.ParentDetails).WithOptional(s => s.Parent).WillCascadeOnDelete(true); //... \\n\")), mdx(\"p\", null, \"That's it! Now you can simply delete the Parent without having to delete manually every children.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" Database.Parents.Remove(Parent); Database.SaveChanges(); \\n\")), mdx(\"p\", null, \"On the SQL server side, you can see the database to have the same amount of delete statement executed. So, you do not save on the amount of query but save on the amount of logic to handle on the C# side because you do not have to care to delete every details.\"), mdx(\"p\", null, \"On a special note, you do not need to have the table having a reference with the On Delete Cascade. You can handle the cascade only on the Entity DbContext with OnModelCreating. If you specify it on the Sql Server Database side, this only will enforce the integrity on the database side but won't be automatically applied on the delete with EF.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework 4.3 delete cascade with code first (Poco)\",\n  \"date\": \"2012-04-19\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you have a parent->child relationship between two of your classes and you delete the parent, you may want to delete all children. To do, you need to have a \"DELETE CASCADE\" statement on your foreign key. Here is a simple example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` CREATE TABLE [Parent]( [ID] [int] IDENTITY(1,1) NOT NULL, [Description] [nvarchar](100) NULL, CONSTRAINT [PK_Parent] PRIMARY KEY CLUSTERED GO\n\nCREATE TABLE [ParentDetail]( [ID] [int] IDENTITY(1,1) NOT NULL, [Parent_ID] [int] NOT NULL, CONSTRAINT [PK_ParentDetail] PRIMARY KEY CLUSTERED GO\n\nALTER TABLE [ParentDetail] WITH CHECK ADD CONSTRAINT [FK_ParentDetail_Parent] FOREIGN KEY([Parent_ID]) REFERENCES [Parent] ([ID]) ON DELETE CASCADE GO \n`}</code></pre>\n    <p>{`The problem is that if you are using Entity Framework 4.3 and try to delete a Parent entity, you will end having this error :`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details.`}</p>\n    </blockquote>\n    <p>{`The inner exception message will contain something similar to this:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Cannot insert the value NULL into column 'Parent_ID', table 'ParentDetail'; column does not allow nulls. UPDATE fails. The statement has been terminated.`}</p>\n    </blockquote>\n    <p>{`So, what does it means? It tries to delete the Parent and to set into each ParentDetail the ID NULL because it's been erased. This is not what we want. In fact, we would like to have all ParentDetail to me removed as well. This is a little bit the reason why we have specify on the SQL to have a cascade.`}</p>\n    <p>{`You can do it manually in your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var listDetail = parent.ParentDetails.ToList(); foreach (var ParentDetail in listDetail){ Database.ParentDetails.Remove(ParentDetail); }\n\nDatabase.Parents.Remove(Parent); Database.SaveChanges(); \n`}</code></pre>\n    <p>{`This will produce multiple amount of SQL statement on the SQL Server. One for each details and 1 for the Parent itself.`}</p>\n    <p>{`But, if you go to your database context and you specify in the `}<strong parentName=\"p\">{`OnModelCreating`}</strong>{` a rule about the cascade it will work as it's suppose to do.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` protected override void OnModelCreating(DbModelBuilder modelBuilder) { //... modelBuilder.Entity<Parent>().HasMany(e => e.ParentDetails).WithOptional(s => s.Parent).WillCascadeOnDelete(true); //... \n`}</code></pre>\n    <p>{`That's it! Now you can simply delete the Parent without having to delete manually every children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` Database.Parents.Remove(Parent); Database.SaveChanges(); \n`}</code></pre>\n    <p>{`On the SQL server side, you can see the database to have the same amount of delete statement executed. So, you do not save on the amount of query but save on the amount of logic to handle on the C# side because you do not have to care to delete every details.`}</p>\n    <p>{`On a special note, you do not need to have the table having a reference with the On Delete Cascade. You can handle the cascade only on the Entity DbContext with OnModelCreating. If you specify it on the Sql Server Database side, this only will enforce the integrity on the database side but won't be automatically applied on the delete with EF.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}