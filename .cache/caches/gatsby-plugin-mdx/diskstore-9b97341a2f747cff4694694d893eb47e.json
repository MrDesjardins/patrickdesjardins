{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-17f85a8425ffe8b06a2889568f163746--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Performance when building TypeScript can be crutial if you are working on a big projects. If you are using watcher to compile when any TypeScript file change and use Gulp Watch to compile every TypeScript file, then you will have a huge performance hit. It means that if you change 1 file that you may have to build thousand of them. The following code is the lazy approach that build every TypeScript file if one changed:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":423,"offset":423},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":423,"offset":423},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"gulp.watch(paths.typescript_in + \"**/*.ts\", [\"build\", \"tsreload\"]);","position":{"start":{"line":4,"column":1,"offset":425},"end":{"line":6,"column":4,"offset":510},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This script watch for TypeScript files to be changed, if it does, run the build task and reload the browser. The problem is that the build task build all TypeScript. To remedy that situation, we want TypeScript to only build the changed file. For that, you will need a new Gulp package called \"gulp-cached\" that you install as a dev dependency.","position":{"start":{"line":8,"column":1,"offset":512},"end":{"line":8,"column":345,"offset":856},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":512},"end":{"line":8,"column":345,"offset":856},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" npm install gulp-cached --save-dev","position":{"start":{"line":10,"column":1,"offset":858},"end":{"line":12,"column":4,"offset":901},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Inside your gulpfile.js, you need to access the module: ","position":{"start":{"line":14,"column":1,"offset":903},"end":{"line":14,"column":57,"offset":959},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":903},"end":{"line":14,"column":57,"offset":959},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const changed = require('gulp-cached');","position":{"start":{"line":16,"column":1,"offset":961},"end":{"line":18,"column":5,"offset":1009},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And finally, you need to use the \"on change\" event after the watch, and remove the tasks's dependencies. ","position":{"start":{"line":20,"column":1,"offset":1011},"end":{"line":20,"column":106,"offset":1116},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1011},"end":{"line":20,"column":106,"offset":1116},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"gulp.watch(\"app/scripts/**/*.ts\").on(\"change\", function() { \n  var compilationResults = gulp.src(\"app/scripts/**/*.ts\") .pipe(changed(\"./deploy/output\")) \n    .pipe(sourcemaps.init()) \n    .pipe(tsProject());\n    compilationResults.dts\n      .pipe(gulp.dest(\"./deploy/output\")); \n    compilationResults.js \n      .pipe(sourcemaps.write('.')) \n      .pipe(gulp.dest(\"./deploy/output\")) \n      .pipe(connect.reload()); });","position":{"start":{"line":21,"column":1,"offset":1117},"end":{"line":32,"column":5,"offset":1556},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The main change is that we pipe through the changed call the destination. This pipe, once ran once, will keep data about if the file change. If this one change, it will go down the pipeline. Otherwise, it will be filtered out. It means that the first time a TypeScript file change, the watch will build everything. After, it will only filter all the source down the changed file. The reload is by calling directly connect.reload() at the end. This is a huge performance boost for your as a developer because you will be able, what ever the size of the project you are working on, to build under 1 sec every change you do. Having a rapid window between you save your file and the time you can see your change in your browser is critical to ship fast code. With this library that act a cache, you can benefit of filtering out the noise that doesn't change and concentrate your computer to build only what is required.","position":{"start":{"line":34,"column":1,"offset":1558},"end":{"line":34,"column":916,"offset":2473},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1558},"end":{"line":34,"column":916,"offset":2473},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Gulp Watch to build only changed TypeScript\",\"date\":\"2017-04-20\",\"categories\":[\"gulp\",\"typescript\"]}","position":{"start":{"line":37,"column":1,"offset":2476},"end":{"line":37,"column":139,"offset":2614},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":37,"column":139,"offset":2614}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gulp Watch to build only changed TypeScript\",\n  \"date\": \"2017-04-20\",\n  \"categories\": [\"gulp\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Performance when building TypeScript can be crutial if you are working on a big projects. If you are using watcher to compile when any TypeScript file change and use Gulp Watch to compile every TypeScript file, then you will have a huge performance hit. It means that if you change 1 file that you may have to build thousand of them. The following code is the lazy approach that build every TypeScript file if one changed:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"gulp.watch(paths.typescript_in + \\\"**/*.ts\\\", [\\\"build\\\", \\\"tsreload\\\"]);\\n\")), mdx(\"p\", null, \"This script watch for TypeScript files to be changed, if it does, run the build task and reload the browser. The problem is that the build task build all TypeScript. To remedy that situation, we want TypeScript to only build the changed file. For that, you will need a new Gulp package called \\\"gulp-cached\\\" that you install as a dev dependency.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" npm install gulp-cached --save-dev\\n\")), mdx(\"p\", null, \"Inside your gulpfile.js, you need to access the module: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const changed = require('gulp-cached');\\n\")), mdx(\"p\", null, \"And finally, you need to use the \\\"on change\\\" event after the watch, and remove the tasks's dependencies. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"gulp.watch(\\\"app/scripts/**/*.ts\\\").on(\\\"change\\\", function() { \\n  var compilationResults = gulp.src(\\\"app/scripts/**/*.ts\\\") .pipe(changed(\\\"./deploy/output\\\")) \\n    .pipe(sourcemaps.init()) \\n    .pipe(tsProject());\\n    compilationResults.dts\\n      .pipe(gulp.dest(\\\"./deploy/output\\\")); \\n    compilationResults.js \\n      .pipe(sourcemaps.write('.')) \\n      .pipe(gulp.dest(\\\"./deploy/output\\\")) \\n      .pipe(connect.reload()); });\\n\")), mdx(\"p\", null, \"The main change is that we pipe through the changed call the destination. This pipe, once ran once, will keep data about if the file change. If this one change, it will go down the pipeline. Otherwise, it will be filtered out. It means that the first time a TypeScript file change, the watch will build everything. After, it will only filter all the source down the changed file. The reload is by calling directly connect.reload() at the end. This is a huge performance boost for your as a developer because you will be able, what ever the size of the project you are working on, to build under 1 sec every change you do. Having a rapid window between you save your file and the time you can see your change in your browser is critical to ship fast code. With this library that act a cache, you can benefit of filtering out the noise that doesn't change and concentrate your computer to build only what is required.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Gulp Watch to build only changed TypeScript\",\n  \"date\": \"2017-04-20\",\n  \"categories\": [\"gulp\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Performance when building TypeScript can be crutial if you are working on a big projects. If you are using watcher to compile when any TypeScript file change and use Gulp Watch to compile every TypeScript file, then you will have a huge performance hit. It means that if you change 1 file that you may have to build thousand of them. The following code is the lazy approach that build every TypeScript file if one changed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`gulp.watch(paths.typescript_in + \"**/*.ts\", [\"build\", \"tsreload\"]);\n`}</code></pre>\n    <p>{`This script watch for TypeScript files to be changed, if it does, run the build task and reload the browser. The problem is that the build task build all TypeScript. To remedy that situation, we want TypeScript to only build the changed file. For that, you will need a new Gulp package called \"gulp-cached\" that you install as a dev dependency.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` npm install gulp-cached --save-dev\n`}</code></pre>\n    <p>{`Inside your gulpfile.js, you need to access the module: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const changed = require('gulp-cached');\n`}</code></pre>\n    <p>{`And finally, you need to use the \"on change\" event after the watch, and remove the tasks's dependencies. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`gulp.watch(\"app/scripts/**/*.ts\").on(\"change\", function() { \n  var compilationResults = gulp.src(\"app/scripts/**/*.ts\") .pipe(changed(\"./deploy/output\")) \n    .pipe(sourcemaps.init()) \n    .pipe(tsProject());\n    compilationResults.dts\n      .pipe(gulp.dest(\"./deploy/output\")); \n    compilationResults.js \n      .pipe(sourcemaps.write('.')) \n      .pipe(gulp.dest(\"./deploy/output\")) \n      .pipe(connect.reload()); });\n`}</code></pre>\n    <p>{`The main change is that we pipe through the changed call the destination. This pipe, once ran once, will keep data about if the file change. If this one change, it will go down the pipeline. Otherwise, it will be filtered out. It means that the first time a TypeScript file change, the watch will build everything. After, it will only filter all the source down the changed file. The reload is by calling directly connect.reload() at the end. This is a huge performance boost for your as a developer because you will be able, what ever the size of the project you are working on, to build under 1 sec every change you do. Having a rapid window between you save your file and the time you can see your change in your browser is critical to ship fast code. With this library that act a cache, you can benefit of filtering out the noise that doesn't change and concentrate your computer to build only what is required.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}