{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-d1896705cff838a892a5e143e70fdd4c--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"It can happen that we do not have the control of the source code of a user control and we still want to add an object into it. This scenario happened to me recently when I had to add a collection of object and know when they are changed.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":238,"offset":238},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":238,"offset":238},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is where ","position":{"start":{"line":4,"column":1,"offset":240},"end":{"line":4,"column":15,"offset":254},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dependency property","position":{"start":{"line":4,"column":17,"offset":256},"end":{"line":4,"column":36,"offset":275},"indent":[]}}],"position":{"start":{"line":4,"column":15,"offset":254},"end":{"line":4,"column":38,"offset":277},"indent":[]}},{"type":"text","value":" come at the rescue. I won't explain in this post how dependency property works but show you how to use it with a collection and an event that will be trigged if this collection change.","position":{"start":{"line":4,"column":38,"offset":277},"end":{"line":4,"column":223,"offset":462},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":240},"end":{"line":4,"column":223,"offset":462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, you may wonder why having this collection of object in the user control is wanted. You are right that this collection should be in the view model of the application, and it is. In fact, this property will be binded to the view model and every time an object is added or removed from the collection in the view model, this one will notify with the binding the depencendy property that will raise our event to redraw the user control.","position":{"start":{"line":6,"column":1,"offset":464},"end":{"line":6,"column":440,"offset":903},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":464},"end":{"line":6,"column":440,"offset":903},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, this require that you create a new user control that will contain the user control that does not have the property desired.","position":{"start":{"line":8,"column":1,"offset":905},"end":{"line":8,"column":131,"offset":1035},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":905},"end":{"line":8,"column":131,"offset":1035},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" <UserControl x:Class=\"MyNameSpace.MyUserControl\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:ThirdPartyNamespace=\"clr-namespace:ThirdPartyNamespace;assembly=ThirdPartyUserControlHere\" d:DesignHeight=\"300\" d:DesignWidth=\"400\">\n\n<ThirdPartyNamespace:ThirdPartyUserControlHere /> </UserControl> ","position":{"start":{"line":11,"column":1,"offset":1038},"end":{"line":15,"column":4,"offset":1557},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the code behind of the created user control, we need to add the dependency property.","position":{"start":{"line":18,"column":1,"offset":1560},"end":{"line":18,"column":88,"offset":1647},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1560},"end":{"line":18,"column":88,"offset":1647},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static readonly DependencyProperty MyCustomProperty = DependencyProperty.Register( \"MyCustomProperty\" , typeof (ObservableCollection<MyObject>) ,typeof (MyUserControl) ,new PropertyMetadata(null,OnMyObjectCollectionPropertyChanged) ); \n``` The line 3 contains the first parameters that is the property name you want to access from your control. This property will be bound to the third party user control. The line 4 if the type of the property added. In our example, it's a collection of MyObject. The line 5 is the type of the user control we add this property. This should be the name of the new user control you just added. The line 6 is the callback when this property change.\n\nThe next step is to add the collection of MyObject and the callback. \n```csharp\n public ObservableCollection<MyObject > MyObjects { get { return (ObservableCollection<MyObject>) GetValue(MyCustomProperty); } set { SetValue(MyCustomProperty, value); } }\n\nprivate static void OnMyObjectCollectionPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e) { ((MyUserControl) o).OnMyObjectCollectionPropertyChanged(e); }\n\nprivate void OnMyObjectCollectionPropertyChanged(DependencyPropertyChangedEventArgs e) { //Redraw code here! } ","position":{"start":{"line":21,"column":1,"offset":1650},"end":{"line":32,"column":4,"offset":2899},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Xaml of the custom user control that envelop the third party user control can now be bound to the view model.","position":{"start":{"line":34,"column":1,"offset":2901},"end":{"line":34,"column":114,"offset":3014},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2901},"end":{"line":34,"column":114,"offset":3014},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" <x:MyCustomUserControl DataContext=\"{Binding Path=MyObjectViewModel, Mode=TwoWay}\" Shapes=\"{Binding Path=MyRealObjectsCollection, Mode=TwoWay}\" /> ","position":{"start":{"line":37,"column":1,"offset":3017},"end":{"line":39,"column":4,"offset":3176},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to add model object to a third party Silverlight user control?\",\"date\":\"2011-09-02\",\"categories\":[\"silverlight\"]}","position":{"start":{"line":43,"column":1,"offset":3180},"end":{"line":43,"column":156,"offset":3335},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":43,"column":156,"offset":3335}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to add model object to a third party Silverlight user control?\",\n  \"date\": \"2011-09-02\",\n  \"categories\": [\"silverlight\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It can happen that we do not have the control of the source code of a user control and we still want to add an object into it. This scenario happened to me recently when I had to add a collection of object and know when they are changed.\"), mdx(\"p\", null, \"This is where \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dependency property\"), \" come at the rescue. I won't explain in this post how dependency property works but show you how to use it with a collection and an event that will be trigged if this collection change.\"), mdx(\"p\", null, \"First, you may wonder why having this collection of object in the user control is wanted. You are right that this collection should be in the view model of the application, and it is. In fact, this property will be binded to the view model and every time an object is added or removed from the collection in the view model, this one will notify with the binding the depencendy property that will raise our event to redraw the user control.\"), mdx(\"p\", null, \"First, this require that you create a new user control that will contain the user control that does not have the property desired.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <UserControl x:Class=\\\"MyNameSpace.MyUserControl\\\" xmlns=\\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\\" xmlns:x=\\\"http://schemas.microsoft.com/winfx/2006/xaml\\\" xmlns:d=\\\"http://schemas.microsoft.com/expression/blend/2008\\\" xmlns:mc=\\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\\" xmlns:ThirdPartyNamespace=\\\"clr-namespace:ThirdPartyNamespace;assembly=ThirdPartyUserControlHere\\\" d:DesignHeight=\\\"300\\\" d:DesignWidth=\\\"400\\\">\\n\\n<ThirdPartyNamespace:ThirdPartyUserControlHere /> </UserControl> \\n\")), mdx(\"p\", null, \"In the code behind of the created user control, we need to add the dependency property.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static readonly DependencyProperty MyCustomProperty = DependencyProperty.Register( \\\"MyCustomProperty\\\" , typeof (ObservableCollection<MyObject>) ,typeof (MyUserControl) ,new PropertyMetadata(null,OnMyObjectCollectionPropertyChanged) ); \\n``` The line 3 contains the first parameters that is the property name you want to access from your control. This property will be bound to the third party user control. The line 4 if the type of the property added. In our example, it's a collection of MyObject. The line 5 is the type of the user control we add this property. This should be the name of the new user control you just added. The line 6 is the callback when this property change.\\n\\nThe next step is to add the collection of MyObject and the callback. \\n```csharp\\n public ObservableCollection<MyObject > MyObjects { get { return (ObservableCollection<MyObject>) GetValue(MyCustomProperty); } set { SetValue(MyCustomProperty, value); } }\\n\\nprivate static void OnMyObjectCollectionPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e) { ((MyUserControl) o).OnMyObjectCollectionPropertyChanged(e); }\\n\\nprivate void OnMyObjectCollectionPropertyChanged(DependencyPropertyChangedEventArgs e) { //Redraw code here! } \\n\")), mdx(\"p\", null, \"The Xaml of the custom user control that envelop the third party user control can now be bound to the view model.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <x:MyCustomUserControl DataContext=\\\"{Binding Path=MyObjectViewModel, Mode=TwoWay}\\\" Shapes=\\\"{Binding Path=MyRealObjectsCollection, Mode=TwoWay}\\\" /> \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to add model object to a third party Silverlight user control?\",\n  \"date\": \"2011-09-02\",\n  \"categories\": [\"silverlight\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`It can happen that we do not have the control of the source code of a user control and we still want to add an object into it. This scenario happened to me recently when I had to add a collection of object and know when they are changed.`}</p>\n    <p>{`This is where `}<strong parentName=\"p\">{`dependency property`}</strong>{` come at the rescue. I won't explain in this post how dependency property works but show you how to use it with a collection and an event that will be trigged if this collection change.`}</p>\n    <p>{`First, you may wonder why having this collection of object in the user control is wanted. You are right that this collection should be in the view model of the application, and it is. In fact, this property will be binded to the view model and every time an object is added or removed from the collection in the view model, this one will notify with the binding the depencendy property that will raise our event to redraw the user control.`}</p>\n    <p>{`First, this require that you create a new user control that will contain the user control that does not have the property desired.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <UserControl x:Class=\"MyNameSpace.MyUserControl\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:ThirdPartyNamespace=\"clr-namespace:ThirdPartyNamespace;assembly=ThirdPartyUserControlHere\" d:DesignHeight=\"300\" d:DesignWidth=\"400\">\n\n<ThirdPartyNamespace:ThirdPartyUserControlHere /> </UserControl> \n`}</code></pre>\n    <p>{`In the code behind of the created user control, we need to add the dependency property.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static readonly DependencyProperty MyCustomProperty = DependencyProperty.Register( \"MyCustomProperty\" , typeof (ObservableCollection<MyObject>) ,typeof (MyUserControl) ,new PropertyMetadata(null,OnMyObjectCollectionPropertyChanged) ); \n\\`\\`\\` The line 3 contains the first parameters that is the property name you want to access from your control. This property will be bound to the third party user control. The line 4 if the type of the property added. In our example, it's a collection of MyObject. The line 5 is the type of the user control we add this property. This should be the name of the new user control you just added. The line 6 is the callback when this property change.\n\nThe next step is to add the collection of MyObject and the callback. \n\\`\\`\\`csharp\n public ObservableCollection<MyObject > MyObjects { get { return (ObservableCollection<MyObject>) GetValue(MyCustomProperty); } set { SetValue(MyCustomProperty, value); } }\n\nprivate static void OnMyObjectCollectionPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e) { ((MyUserControl) o).OnMyObjectCollectionPropertyChanged(e); }\n\nprivate void OnMyObjectCollectionPropertyChanged(DependencyPropertyChangedEventArgs e) { //Redraw code here! } \n`}</code></pre>\n    <p>{`The Xaml of the custom user control that envelop the third party user control can now be bound to the view model.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <x:MyCustomUserControl DataContext=\"{Binding Path=MyObjectViewModel, Mode=TwoWay}\" Shapes=\"{Binding Path=MyRealObjectsCollection, Mode=TwoWay}\" /> \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}