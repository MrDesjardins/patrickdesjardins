{"expireTime":9007200886478383000,"key":"gatsby-plugin-mdx-entire-payload-24e0069238775cacd048a3dccb9dbf4b--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Imagine the scenario where you have an interface with many members. Each of them is a boolean and your React component allows you to toggle with a checkbox the value of them. You have a single method that will dispatch the action to your Redux/Flux cycle. How can you make your code strong enough and still be flexible to not having 1 function per member?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":356,"offset":356},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":356,"offset":356},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The solution resides that we do not one to allow every string but just a finite set of string which is the members' name of a specific interface.","position":{"start":{"line":4,"column":1,"offset":358},"end":{"line":4,"column":146,"offset":503},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":358},"end":{"line":4,"column":146,"offset":503},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"public render(): JSX.Element { // ... <input type=\"checkbox\" checked={this.props.myModel.member1} onClick={(e) => { this.onToggle(\"member1\"); }} /> // ... } ","position":{"start":{"line":6,"column":1,"offset":505},"end":{"line":8,"column":5,"offset":681},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The click method won't ask for a string, but for a key of the model.","position":{"start":{"line":11,"column":1,"offset":684},"end":{"line":11,"column":69,"offset":752},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":684},"end":{"line":11,"column":69,"offset":752},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"private onToggle(filterName: keyof MyModel) { this.props.onToggle(filterName); } ","position":{"start":{"line":13,"column":1,"offset":754},"end":{"line":15,"column":5,"offset":854},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This little difference makes the whole system being flexible since it allows to type string, but strict in a way that we have a defined set of potential value. The set is also dynamic. If you rename a member, add or remove a member from the interface, TypeScript will come in play and warn if something is invalid.","position":{"start":{"line":18,"column":1,"offset":857},"end":{"line":18,"column":315,"offset":1171},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":857},"end":{"line":18,"column":315,"offset":1171},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this article, we saw a way to use string to indicate which value to change. Since interfaces are stripped out at transpilation time, there is some case like the one presented that providing a string is the only solution. TypeScript allows the use of ","position":{"start":{"line":20,"column":1,"offset":1173},"end":{"line":20,"column":254,"offset":1426},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"keyof","position":{"start":{"line":20,"column":256,"offset":1428},"end":{"line":20,"column":261,"offset":1433},"indent":[]}}],"position":{"start":{"line":20,"column":254,"offset":1426},"end":{"line":20,"column":263,"offset":1435},"indent":[]}},{"type":"text","value":" to extract a set of string from an interface which allows having a finite set of accepted results and hence reinforce your code by eliminate wrong inputs.","position":{"start":{"line":20,"column":263,"offset":1435},"end":{"line":20,"column":418,"offset":1590},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1173},"end":{"line":20,"column":418,"offset":1590},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"TypeScript and Restricting String to Interface Members\",\"date\":\"2017-10-17\",\"categories\":[\"typescript\"]}","position":{"start":{"line":23,"column":1,"offset":1593},"end":{"line":23,"column":143,"offset":1735},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":143,"offset":1735}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript and Restricting String to Interface Members\",\n  \"date\": \"2017-10-17\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Imagine the scenario where you have an interface with many members. Each of them is a boolean and your React component allows you to toggle with a checkbox the value of them. You have a single method that will dispatch the action to your Redux/Flux cycle. How can you make your code strong enough and still be flexible to not having 1 function per member?\"), mdx(\"p\", null, \"The solution resides that we do not one to allow every string but just a finite set of string which is the members' name of a specific interface.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"public render(): JSX.Element { // ... <input type=\\\"checkbox\\\" checked={this.props.myModel.member1} onClick={(e) => { this.onToggle(\\\"member1\\\"); }} /> // ... } \\n\")), mdx(\"p\", null, \"The click method won't ask for a string, but for a key of the model.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"private onToggle(filterName: keyof MyModel) { this.props.onToggle(filterName); } \\n\")), mdx(\"p\", null, \"This little difference makes the whole system being flexible since it allows to type string, but strict in a way that we have a defined set of potential value. The set is also dynamic. If you rename a member, add or remove a member from the interface, TypeScript will come in play and warn if something is invalid.\"), mdx(\"p\", null, \"In this article, we saw a way to use string to indicate which value to change. Since interfaces are stripped out at transpilation time, there is some case like the one presented that providing a string is the only solution. TypeScript allows the use of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"keyof\"), \" to extract a set of string from an interface which allows having a finite set of accepted results and hence reinforce your code by eliminate wrong inputs.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"TypeScript and Restricting String to Interface Members\",\n  \"date\": \"2017-10-17\",\n  \"categories\": [\"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Imagine the scenario where you have an interface with many members. Each of them is a boolean and your React component allows you to toggle with a checkbox the value of them. You have a single method that will dispatch the action to your Redux/Flux cycle. How can you make your code strong enough and still be flexible to not having 1 function per member?`}</p>\n    <p>{`The solution resides that we do not one to allow every string but just a finite set of string which is the members' name of a specific interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public render(): JSX.Element { // ... <input type=\"checkbox\" checked={this.props.myModel.member1} onClick={(e) => { this.onToggle(\"member1\"); }} /> // ... } \n`}</code></pre>\n    <p>{`The click method won't ask for a string, but for a key of the model.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`private onToggle(filterName: keyof MyModel) { this.props.onToggle(filterName); } \n`}</code></pre>\n    <p>{`This little difference makes the whole system being flexible since it allows to type string, but strict in a way that we have a defined set of potential value. The set is also dynamic. If you rename a member, add or remove a member from the interface, TypeScript will come in play and warn if something is invalid.`}</p>\n    <p>{`In this article, we saw a way to use string to indicate which value to change. Since interfaces are stripped out at transpilation time, there is some case like the one presented that providing a string is the only solution. TypeScript allows the use of `}<strong parentName=\"p\">{`keyof`}</strong>{` to extract a set of string from an interface which allows having a finite set of accepted results and hence reinforce your code by eliminate wrong inputs.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}