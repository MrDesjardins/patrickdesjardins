{"expireTime":9007200886478379000,"key":"gatsby-plugin-mdx-entire-payload-fb92cad1e61bdf85f18427f0b8d13038--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In previous articles, we dissected the compose function of Redux and the createStore function. The createStore uses the compose function to have many store enhancer. In this article, we will see an example of a store enhancer by dissecting one of the most used store enhancer: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":278,"offset":278},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"applyMiddleware","position":{"start":{"line":2,"column":279,"offset":279},"end":{"line":2,"column":294,"offset":294},"indent":[]}}],"position":{"start":{"line":2,"column":278,"offset":278},"end":{"line":2,"column":295,"offset":295},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":295,"offset":295},"end":{"line":2,"column":296,"offset":296},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":296,"offset":296},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It might be a surprise to some that Redux doesn't have baken in Redux the notion of middleware. While it is part of the package, it uses the core notion of store enhancer to bring the middleware concept in life. To have middlewares being executed between a dispatch call on the store and reducers to alter the store's state, an alteration of how dispatch work must be done. As we learned, store enhancer allows to modify the store object that contains the dispatch and this is what applyMiddleware does.","position":{"start":{"line":4,"column":1,"offset":298},"end":{"line":4,"column":504,"offset":801},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":298},"end":{"line":4,"column":504,"offset":801},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before discussing more, let's see the Redux ","position":{"start":{"line":6,"column":1,"offset":803},"end":{"line":6,"column":45,"offset":847},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"applyMiddleware","position":{"start":{"line":6,"column":46,"offset":848},"end":{"line":6,"column":61,"offset":863},"indent":[]}}],"position":{"start":{"line":6,"column":45,"offset":847},"end":{"line":6,"column":62,"offset":864},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":6,"column":62,"offset":864},"end":{"line":6,"column":72,"offset":874},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":803},"end":{"line":6,"column":72,"offset":874},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"export default function applyMiddleware(...middlewares) { \n  return (createStore) => (...args) => { \n    const store = createStore(...args); \n    let dispatch = store.dispatch; \n    let chain = [];\n\n    const middlewareAPI = { \n      getState: store.getState, dispatch: (...args) => dispatch(...args) \n    };\n    chain = middlewares.map(middleware => middleware(middlewareAPI));\n    dispatch = compose(...chain)(store.dispatch);\n\n  return { ...store, dispatch } \n  } \n} ","position":{"start":{"line":8,"column":1,"offset":876},"end":{"line":24,"column":5,"offset":1365},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The function takes a list of middlewares. This is custom to ","position":{"start":{"line":26,"column":1,"offset":1367},"end":{"line":26,"column":61,"offset":1427},"indent":[]}},{"type":"inlineCode","value":"applyMiddleware","position":{"start":{"line":26,"column":61,"offset":1427},"end":{"line":26,"column":78,"offset":1444},"indent":[]}},{"type":"text","value":" which let have a list of composed function that will be called. If you are building your own store enhancer, you will need to pass whatever you anticipate being needed to modify the store behavior. What is important is the second line which returns a function that has the createStore function that returns a function with many arguments which return the store. In that case, the last return of the function returns a copy of the store (spread operator) with the dispatch function redefined.","position":{"start":{"line":26,"column":78,"offset":1444},"end":{"line":26,"column":570,"offset":1936},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1367},"end":{"line":26,"column":570,"offset":1936},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's rewind a little bit. The return function that returns a function is actually calling createStore with the args list of argument. At that point, the function could return the result and nothing would be changed. Obviously, something will be done. First, the method takes a reference to the actual dispatch function. Then, it creates an object that will be passed down to all middleware. This object has the actual store's state and a dispatch function that call the original dispatch function. The whole middleware logic is the next line which will invoke all the middleware passed by parameter one at a time. The middleware passed by parameter are functions are well, which take the \"middlewareAPI\" object. At that point, we only have middleware function that is having access to the getState and dispatch functions. The next line will chain them by passing the store.dispatch function. Every middleware has access to the next one by calling \"next\". Often you will see that people invoke \"next\" with a new action. When doing so, they call the next middleware with a new action which is totally valid but won't go through the whole chain, just forward. The store.dispatch passed is there to trigger at the end of the chain the reducer.","position":{"start":{"line":28,"column":1,"offset":1938},"end":{"line":28,"column":1241,"offset":3178},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1938},"end":{"line":28,"column":1241,"offset":3178},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The return of each middleware is the result of the previous middleware. The return will be used by the following middleware a way to traverse the chain of middleware by calling next on the action.","position":{"start":{"line":30,"column":1,"offset":3180},"end":{"line":30,"column":197,"offset":3376},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":3180},"end":{"line":30,"column":197,"offset":3376},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a middleware example that console.log before and after a dispatch is invoked. The format is disquieting at first with the equal sign followed by the three arrow functions. You do not have to use this sugar syntax, but it reduces quite a lot and you will often see this written format. What it does is to store the middleware in the \"logger\" variable. The variable is a function that has for parameter the store. The store contains the \"middlewareAPI\", hence ","position":{"start":{"line":32,"column":1,"offset":3378},"end":{"line":32,"column":467,"offset":3844},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"getState","position":{"start":{"line":32,"column":468,"offset":3845},"end":{"line":32,"column":476,"offset":3853},"indent":[]}}],"position":{"start":{"line":32,"column":467,"offset":3844},"end":{"line":32,"column":477,"offset":3854},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":32,"column":477,"offset":3854},"end":{"line":32,"column":482,"offset":3859},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"dispatch","position":{"start":{"line":32,"column":483,"offset":3860},"end":{"line":32,"column":491,"offset":3868},"indent":[]}}],"position":{"start":{"line":32,"column":482,"offset":3859},"end":{"line":32,"column":492,"offset":3869},"indent":[]}},{"type":"text","value":". As we saw, the composition calls the chain of middleware with \"store.dispatch\" and return the next middleware which is referred by the named \"next\". Finally, the action being dispatched is available.","position":{"start":{"line":32,"column":492,"offset":3869},"end":{"line":32,"column":693,"offset":4070},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3378},"end":{"line":32,"column":693,"offset":4070},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"const logger = store => next => action => { \n  console.log(\"Before\", action);\n  const result = next(action);\n  console.log(\"After\", store.getState());\n  return result \n} ","position":{"start":{"line":34,"column":1,"offset":4072},"end":{"line":41,"column":5,"offset":4261},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For completion, let's analyze a very popular middleware called ","position":{"start":{"line":43,"column":1,"offset":4263},"end":{"line":43,"column":64,"offset":4326},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Thunk","position":{"start":{"line":43,"column":66,"offset":4328},"end":{"line":43,"column":71,"offset":4333},"indent":[]}}],"position":{"start":{"line":43,"column":64,"offset":4326},"end":{"line":43,"column":73,"offset":4335},"indent":[]}},{"type":"text","value":" which brings the possibility to have several dispatches. Because, so far, every middleware receives a getState and dispatch from \"middlewareApi\" and return the next action has an object which doesn't give the time to perform any asynchronous logic. The reason is that the function ","position":{"start":{"line":43,"column":73,"offset":4335},"end":{"line":43,"column":355,"offset":4617},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"applyMiddleware","position":{"start":{"line":43,"column":356,"offset":4618},"end":{"line":43,"column":371,"offset":4633},"indent":[]}}],"position":{"start":{"line":43,"column":355,"offset":4617},"end":{"line":43,"column":372,"offset":4634},"indent":[]}},{"type":"text","value":" is composing all middleware, hence you have a function with \"next\" that lets you chain them. Finally, the function with the parameter \"action\" which is the what is being dispatched.","position":{"start":{"line":43,"column":372,"offset":4634},"end":{"line":43,"column":554,"offset":4816},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":4263},"end":{"line":43,"column":554,"offset":4816},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Thunk middleware looks up to see if the action dispatched is a function or an object. Normally, it would be an object with the required \"type\" member defined (see the createStore that throw an exception otherwise). The Thunk middleware invokes the action by passing the \"dispatch\", \"getState\" and \"extraArgument\" and it returns the result of the action. The \"dispatch\" function passed down lets you invoke several time actions if needed while the getState function lets you peek at the current state to perform some business logic in your middleware. For example, you could see if some data is missing in the store to invoke some APIs.","position":{"start":{"line":45,"column":1,"offset":4818},"end":{"line":45,"column":640,"offset":5457},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":4818},"end":{"line":45,"column":640,"offset":5457},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"function createThunkMiddleware(extraArgument) { \n  return ({ dispatch, getState }) => next => action => { \n      if (typeof action === 'function') { \n        return action(dispatch, getState, extraArgument); \n      }\n    return next(action); \n  }; \n} ","position":{"start":{"line":47,"column":1,"offset":5459},"end":{"line":56,"column":5,"offset":5729},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With Thunk in the middleware composition and dispatching a function, what happens is that other middleware will ignore the function and the thunk will catch that it's an action and then invoke the action.","position":{"start":{"line":58,"column":1,"offset":5731},"end":{"line":58,"column":205,"offset":5935},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":5731},"end":{"line":58,"column":205,"offset":5935},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"export function asyncMethodThatFetchData(inputData) { \n  return function (dispatch, getState) { \n    dispatch(actionLoadingData());\n    return fetch(`https://www.api.com/${inputData.id}`) .then(json => dispatch(actionDataLoaded(inputData, json)); ) \n  } \n} \nstore.dispatch(asyncMethodThatFetchData(\"123\")); ","position":{"start":{"line":60,"column":1,"offset":5937},"end":{"line":68,"column":5,"offset":6263},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This simple function is dispatched by the store with the argument \"123\". It will be intercepted by the Thunk which will execute the return of the function which is the function that takes the dispatch and getState argument. Within the function, there is a first dispatch that is called which could be used to start a loading animation and a second one once the data has been fetched.","position":{"start":{"line":70,"column":1,"offset":6265},"end":{"line":70,"column":384,"offset":6648},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":6265},"end":{"line":70,"column":384,"offset":6648},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Dissecting the store enhancer of Redux\",\"date\":\"2018-02-06\",\"categories\":[\"redux\"]}","position":{"start":{"line":73,"column":1,"offset":6651},"end":{"line":73,"column":122,"offset":6772},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":73,"column":122,"offset":6772}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dissecting the store enhancer of Redux\",\n  \"date\": \"2018-02-06\",\n  \"categories\": [\"redux\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In previous articles, we dissected the compose function of Redux and the createStore function. The createStore uses the compose function to have many store enhancer. In this article, we will see an example of a store enhancer by dissecting one of the most used store enhancer: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"applyMiddleware\"), \".\"), mdx(\"p\", null, \"It might be a surprise to some that Redux doesn't have baken in Redux the notion of middleware. While it is part of the package, it uses the core notion of store enhancer to bring the middleware concept in life. To have middlewares being executed between a dispatch call on the store and reducers to alter the store's state, an alteration of how dispatch work must be done. As we learned, store enhancer allows to modify the store object that contains the dispatch and this is what applyMiddleware does.\"), mdx(\"p\", null, \"Before discussing more, let's see the Redux \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"applyMiddleware\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export default function applyMiddleware(...middlewares) { \\n  return (createStore) => (...args) => { \\n    const store = createStore(...args); \\n    let dispatch = store.dispatch; \\n    let chain = [];\\n\\n    const middlewareAPI = { \\n      getState: store.getState, dispatch: (...args) => dispatch(...args) \\n    };\\n    chain = middlewares.map(middleware => middleware(middlewareAPI));\\n    dispatch = compose(...chain)(store.dispatch);\\n\\n  return { ...store, dispatch } \\n  } \\n} \\n\")), mdx(\"p\", null, \"The function takes a list of middlewares. This is custom to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"applyMiddleware\"), \" which let have a list of composed function that will be called. If you are building your own store enhancer, you will need to pass whatever you anticipate being needed to modify the store behavior. What is important is the second line which returns a function that has the createStore function that returns a function with many arguments which return the store. In that case, the last return of the function returns a copy of the store (spread operator) with the dispatch function redefined.\"), mdx(\"p\", null, \"Let's rewind a little bit. The return function that returns a function is actually calling createStore with the args list of argument. At that point, the function could return the result and nothing would be changed. Obviously, something will be done. First, the method takes a reference to the actual dispatch function. Then, it creates an object that will be passed down to all middleware. This object has the actual store's state and a dispatch function that call the original dispatch function. The whole middleware logic is the next line which will invoke all the middleware passed by parameter one at a time. The middleware passed by parameter are functions are well, which take the \\\"middlewareAPI\\\" object. At that point, we only have middleware function that is having access to the getState and dispatch functions. The next line will chain them by passing the store.dispatch function. Every middleware has access to the next one by calling \\\"next\\\". Often you will see that people invoke \\\"next\\\" with a new action. When doing so, they call the next middleware with a new action which is totally valid but won't go through the whole chain, just forward. The store.dispatch passed is there to trigger at the end of the chain the reducer.\"), mdx(\"p\", null, \"The return of each middleware is the result of the previous middleware. The return will be used by the following middleware a way to traverse the chain of middleware by calling next on the action.\"), mdx(\"p\", null, \"Here is a middleware example that console.log before and after a dispatch is invoked. The format is disquieting at first with the equal sign followed by the three arrow functions. You do not have to use this sugar syntax, but it reduces quite a lot and you will often see this written format. What it does is to store the middleware in the \\\"logger\\\" variable. The variable is a function that has for parameter the store. The store contains the \\\"middlewareAPI\\\", hence \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"getState\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dispatch\"), \". As we saw, the composition calls the chain of middleware with \\\"store.dispatch\\\" and return the next middleware which is referred by the named \\\"next\\\". Finally, the action being dispatched is available.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const logger = store => next => action => { \\n  console.log(\\\"Before\\\", action);\\n  const result = next(action);\\n  console.log(\\\"After\\\", store.getState());\\n  return result \\n} \\n\")), mdx(\"p\", null, \"For completion, let's analyze a very popular middleware called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Thunk\"), \" which brings the possibility to have several dispatches. Because, so far, every middleware receives a getState and dispatch from \\\"middlewareApi\\\" and return the next action has an object which doesn't give the time to perform any asynchronous logic. The reason is that the function \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"applyMiddleware\"), \" is composing all middleware, hence you have a function with \\\"next\\\" that lets you chain them. Finally, the function with the parameter \\\"action\\\" which is the what is being dispatched.\"), mdx(\"p\", null, \"The Thunk middleware looks up to see if the action dispatched is a function or an object. Normally, it would be an object with the required \\\"type\\\" member defined (see the createStore that throw an exception otherwise). The Thunk middleware invokes the action by passing the \\\"dispatch\\\", \\\"getState\\\" and \\\"extraArgument\\\" and it returns the result of the action. The \\\"dispatch\\\" function passed down lets you invoke several time actions if needed while the getState function lets you peek at the current state to perform some business logic in your middleware. For example, you could see if some data is missing in the store to invoke some APIs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function createThunkMiddleware(extraArgument) { \\n  return ({ dispatch, getState }) => next => action => { \\n      if (typeof action === 'function') { \\n        return action(dispatch, getState, extraArgument); \\n      }\\n    return next(action); \\n  }; \\n} \\n\")), mdx(\"p\", null, \"With Thunk in the middleware composition and dispatching a function, what happens is that other middleware will ignore the function and the thunk will catch that it's an action and then invoke the action.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export function asyncMethodThatFetchData(inputData) { \\n  return function (dispatch, getState) { \\n    dispatch(actionLoadingData());\\n    return fetch(`https://www.api.com/${inputData.id}`) .then(json => dispatch(actionDataLoaded(inputData, json)); ) \\n  } \\n} \\nstore.dispatch(asyncMethodThatFetchData(\\\"123\\\")); \\n\")), mdx(\"p\", null, \"This simple function is dispatched by the store with the argument \\\"123\\\". It will be intercepted by the Thunk which will execute the return of the function which is the function that takes the dispatch and getState argument. Within the function, there is a first dispatch that is called which could be used to start a loading animation and a second one once the data has been fetched.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Dissecting the store enhancer of Redux\",\n  \"date\": \"2018-02-06\",\n  \"categories\": [\"redux\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In previous articles, we dissected the compose function of Redux and the createStore function. The createStore uses the compose function to have many store enhancer. In this article, we will see an example of a store enhancer by dissecting one of the most used store enhancer: `}<em parentName=\"p\">{`applyMiddleware`}</em>{`.`}</p>\n    <p>{`It might be a surprise to some that Redux doesn't have baken in Redux the notion of middleware. While it is part of the package, it uses the core notion of store enhancer to bring the middleware concept in life. To have middlewares being executed between a dispatch call on the store and reducers to alter the store's state, an alteration of how dispatch work must be done. As we learned, store enhancer allows to modify the store object that contains the dispatch and this is what applyMiddleware does.`}</p>\n    <p>{`Before discussing more, let's see the Redux `}<em parentName=\"p\">{`applyMiddleware`}</em>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export default function applyMiddleware(...middlewares) { \n  return (createStore) => (...args) => { \n    const store = createStore(...args); \n    let dispatch = store.dispatch; \n    let chain = [];\n\n    const middlewareAPI = { \n      getState: store.getState, dispatch: (...args) => dispatch(...args) \n    };\n    chain = middlewares.map(middleware => middleware(middlewareAPI));\n    dispatch = compose(...chain)(store.dispatch);\n\n  return { ...store, dispatch } \n  } \n} \n`}</code></pre>\n    <p>{`The function takes a list of middlewares. This is custom to `}<inlineCode parentName=\"p\">{`applyMiddleware`}</inlineCode>{` which let have a list of composed function that will be called. If you are building your own store enhancer, you will need to pass whatever you anticipate being needed to modify the store behavior. What is important is the second line which returns a function that has the createStore function that returns a function with many arguments which return the store. In that case, the last return of the function returns a copy of the store (spread operator) with the dispatch function redefined.`}</p>\n    <p>{`Let's rewind a little bit. The return function that returns a function is actually calling createStore with the args list of argument. At that point, the function could return the result and nothing would be changed. Obviously, something will be done. First, the method takes a reference to the actual dispatch function. Then, it creates an object that will be passed down to all middleware. This object has the actual store's state and a dispatch function that call the original dispatch function. The whole middleware logic is the next line which will invoke all the middleware passed by parameter one at a time. The middleware passed by parameter are functions are well, which take the \"middlewareAPI\" object. At that point, we only have middleware function that is having access to the getState and dispatch functions. The next line will chain them by passing the store.dispatch function. Every middleware has access to the next one by calling \"next\". Often you will see that people invoke \"next\" with a new action. When doing so, they call the next middleware with a new action which is totally valid but won't go through the whole chain, just forward. The store.dispatch passed is there to trigger at the end of the chain the reducer.`}</p>\n    <p>{`The return of each middleware is the result of the previous middleware. The return will be used by the following middleware a way to traverse the chain of middleware by calling next on the action.`}</p>\n    <p>{`Here is a middleware example that console.log before and after a dispatch is invoked. The format is disquieting at first with the equal sign followed by the three arrow functions. You do not have to use this sugar syntax, but it reduces quite a lot and you will often see this written format. What it does is to store the middleware in the \"logger\" variable. The variable is a function that has for parameter the store. The store contains the \"middlewareAPI\", hence `}<em parentName=\"p\">{`getState`}</em>{` and `}<em parentName=\"p\">{`dispatch`}</em>{`. As we saw, the composition calls the chain of middleware with \"store.dispatch\" and return the next middleware which is referred by the named \"next\". Finally, the action being dispatched is available.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const logger = store => next => action => { \n  console.log(\"Before\", action);\n  const result = next(action);\n  console.log(\"After\", store.getState());\n  return result \n} \n`}</code></pre>\n    <p>{`For completion, let's analyze a very popular middleware called `}<strong parentName=\"p\">{`Thunk`}</strong>{` which brings the possibility to have several dispatches. Because, so far, every middleware receives a getState and dispatch from \"middlewareApi\" and return the next action has an object which doesn't give the time to perform any asynchronous logic. The reason is that the function `}<em parentName=\"p\">{`applyMiddleware`}</em>{` is composing all middleware, hence you have a function with \"next\" that lets you chain them. Finally, the function with the parameter \"action\" which is the what is being dispatched.`}</p>\n    <p>{`The Thunk middleware looks up to see if the action dispatched is a function or an object. Normally, it would be an object with the required \"type\" member defined (see the createStore that throw an exception otherwise). The Thunk middleware invokes the action by passing the \"dispatch\", \"getState\" and \"extraArgument\" and it returns the result of the action. The \"dispatch\" function passed down lets you invoke several time actions if needed while the getState function lets you peek at the current state to perform some business logic in your middleware. For example, you could see if some data is missing in the store to invoke some APIs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function createThunkMiddleware(extraArgument) { \n  return ({ dispatch, getState }) => next => action => { \n      if (typeof action === 'function') { \n        return action(dispatch, getState, extraArgument); \n      }\n    return next(action); \n  }; \n} \n`}</code></pre>\n    <p>{`With Thunk in the middleware composition and dispatching a function, what happens is that other middleware will ignore the function and the thunk will catch that it's an action and then invoke the action.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export function asyncMethodThatFetchData(inputData) { \n  return function (dispatch, getState) { \n    dispatch(actionLoadingData());\n    return fetch(\\`https://www.api.com/\\${inputData.id}\\`) .then(json => dispatch(actionDataLoaded(inputData, json)); ) \n  } \n} \nstore.dispatch(asyncMethodThatFetchData(\"123\")); \n`}</code></pre>\n    <p>{`This simple function is dispatched by the store with the argument \"123\". It will be intercepted by the Thunk which will execute the return of the function which is the function that takes the dispatch and getState argument. Within the function, there is a first dispatch that is called which could be used to start a loading animation and a second one once the data has been fetched.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}