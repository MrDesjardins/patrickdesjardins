{"expireTime":9007200886478388000,"key":"gatsby-plugin-mdx-entire-payload-d877ed958bda78938261f315d0acc6c1--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Asp.Net MVC allows you to catch Http Request by overriding the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":64,"offset":64},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OnActionExecuting","position":{"start":{"line":2,"column":66,"offset":66},"end":{"line":2,"column":83,"offset":83},"indent":[]}}],"position":{"start":{"line":2,"column":64,"offset":64},"end":{"line":2,"column":85,"offset":85},"indent":[]}},{"type":"text","value":" and takes a decision before executing the desired Controller-Action method. This can be interesting in the case you want to verify something and if this validation is wrong to redirect the user.","position":{"start":{"line":2,"column":85,"offset":85},"end":{"line":2,"column":280,"offset":280},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":280,"offset":280},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A small use case could be that your user that have to be part of a team/contest/group and if this one is not, than we redirect to a message. Instead of having in all your action the validation to see if the user belong to the group, it is simpler and less repetitive to have in your controller the OnActionExecuting overrided.","position":{"start":{"line":4,"column":1,"offset":282},"end":{"line":4,"column":327,"offset":608},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":282},"end":{"line":4,"column":327,"offset":608},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example in .Net.","position":{"start":{"line":6,"column":1,"offset":610},"end":{"line":6,"column":28,"offset":637},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":610},"end":{"line":6,"column":28,"offset":637},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" protected override void OnActionExecuting(ActionExecutingContext filterContext) { base.OnActionExecuting(filterContext); if (this.RouteData != null && this.RouteData.Values.ContainsKey(Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID)) { var success = SetCurrentActivePortefolioByContestId(Convert.ToInt32(this.RouteData.Values[Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID])); if (!success)//This is the case when the user does not belong to the contest but try to do an action on the contest filterContext.Result = new RedirectToRouteResult( new RouteValueDictionary { { Constants.AREA, Constants.Areas.ERRORS }, { Constants.CONTROLLER, \"UserError\" }, { Constants.ACTION, \"InvalidContest\" } }); } } else { this.CurrentActivePortefolio = null; } } ","position":{"start":{"line":9,"column":1,"offset":640},"end":{"line":11,"column":4,"offset":1415},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"First, we call the base class to continue to normal behavior of the execution but after we do the logic. The first condition statement verify that in the URL we have the Contest ID defined. If yes, than we are trying to execute an action on the Contest (which is a group or a team or anything you want). If it is set, we need to verify if the user belong to this group. This is done by calling the method ","position":{"start":{"line":13,"column":1,"offset":1417},"end":{"line":13,"column":406,"offset":1822},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"SetCurrentActivePortefolioByContestId","position":{"start":{"line":13,"column":408,"offset":1824},"end":{"line":13,"column":445,"offset":1861},"indent":[]}}],"position":{"start":{"line":13,"column":406,"offset":1822},"end":{"line":13,"column":447,"offset":1863},"indent":[]}},{"type":"text","value":". This method call the database with the Id of the Contest and the Id of the User. If the database return an entry from the database this mean that you have a match and we do not redirect. Otherwise, we redirect. This is where something must be done more than just calling ","position":{"start":{"line":13,"column":447,"offset":1863},"end":{"line":13,"column":720,"offset":2136},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"RedirectToAction","position":{"start":{"line":13,"column":722,"offset":2138},"end":{"line":13,"column":738,"offset":2154},"indent":[]}}],"position":{"start":{"line":13,"column":720,"offset":2136},"end":{"line":13,"column":740,"offset":2156},"indent":[]}},{"type":"text","value":". In fact, we have to change the current execution context values. As you may have seen, the ","position":{"start":{"line":13,"column":740,"offset":2156},"end":{"line":13,"column":833,"offset":2249},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OnActionExecution","position":{"start":{"line":13,"column":835,"offset":2251},"end":{"line":13,"column":852,"offset":2268},"indent":[]}}],"position":{"start":{"line":13,"column":833,"offset":2249},"end":{"line":13,"column":854,"offset":2270},"indent":[]}},{"type":"text","value":" has a single parameter. This parameter has a Result property that can be defined with the Area, Controller and Action you desired. In the example, this is where we redirect the user into the Errors area.","position":{"start":{"line":13,"column":854,"offset":2270},"end":{"line":13,"column":1058,"offset":2474},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1417},"end":{"line":13,"column":1058,"offset":2474},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Asp.Net MVC OnActionExecuting To Redirect Action\",\"date\":\"2014-08-21\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":16,"column":1,"offset":2477},"end":{"line":16,"column":134,"offset":2610},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":134,"offset":2610}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Asp.Net MVC OnActionExecuting To Redirect Action\",\n  \"date\": \"2014-08-21\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Asp.Net MVC allows you to catch Http Request by overriding the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OnActionExecuting\"), \" and takes a decision before executing the desired Controller-Action method. This can be interesting in the case you want to verify something and if this validation is wrong to redirect the user.\"), mdx(\"p\", null, \"A small use case could be that your user that have to be part of a team/contest/group and if this one is not, than we redirect to a message. Instead of having in all your action the validation to see if the user belong to the group, it is simpler and less repetitive to have in your controller the OnActionExecuting overrided.\"), mdx(\"p\", null, \"Here is an example in .Net.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" protected override void OnActionExecuting(ActionExecutingContext filterContext) { base.OnActionExecuting(filterContext); if (this.RouteData != null && this.RouteData.Values.ContainsKey(Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID)) { var success = SetCurrentActivePortefolioByContestId(Convert.ToInt32(this.RouteData.Values[Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID])); if (!success)//This is the case when the user does not belong to the contest but try to do an action on the contest filterContext.Result = new RedirectToRouteResult( new RouteValueDictionary { { Constants.AREA, Constants.Areas.ERRORS }, { Constants.CONTROLLER, \\\"UserError\\\" }, { Constants.ACTION, \\\"InvalidContest\\\" } }); } } else { this.CurrentActivePortefolio = null; } } \\n\")), mdx(\"p\", null, \"First, we call the base class to continue to normal behavior of the execution but after we do the logic. The first condition statement verify that in the URL we have the Contest ID defined. If yes, than we are trying to execute an action on the Contest (which is a group or a team or anything you want). If it is set, we need to verify if the user belong to this group. This is done by calling the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SetCurrentActivePortefolioByContestId\"), \". This method call the database with the Id of the Contest and the Id of the User. If the database return an entry from the database this mean that you have a match and we do not redirect. Otherwise, we redirect. This is where something must be done more than just calling \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RedirectToAction\"), \". In fact, we have to change the current execution context values. As you may have seen, the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OnActionExecution\"), \" has a single parameter. This parameter has a Result property that can be defined with the Area, Controller and Action you desired. In the example, this is where we redirect the user into the Errors area.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Asp.Net MVC OnActionExecuting To Redirect Action\",\n  \"date\": \"2014-08-21\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Asp.Net MVC allows you to catch Http Request by overriding the `}<strong parentName=\"p\">{`OnActionExecuting`}</strong>{` and takes a decision before executing the desired Controller-Action method. This can be interesting in the case you want to verify something and if this validation is wrong to redirect the user.`}</p>\n    <p>{`A small use case could be that your user that have to be part of a team/contest/group and if this one is not, than we redirect to a message. Instead of having in all your action the validation to see if the user belong to the group, it is simpler and less repetitive to have in your controller the OnActionExecuting overrided.`}</p>\n    <p>{`Here is an example in .Net.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` protected override void OnActionExecuting(ActionExecutingContext filterContext) { base.OnActionExecuting(filterContext); if (this.RouteData != null && this.RouteData.Values.ContainsKey(Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID)) { var success = SetCurrentActivePortefolioByContestId(Convert.ToInt32(this.RouteData.Values[Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID])); if (!success)//This is the case when the user does not belong to the contest but try to do an action on the contest filterContext.Result = new RedirectToRouteResult( new RouteValueDictionary { { Constants.AREA, Constants.Areas.ERRORS }, { Constants.CONTROLLER, \"UserError\" }, { Constants.ACTION, \"InvalidContest\" } }); } } else { this.CurrentActivePortefolio = null; } } \n`}</code></pre>\n    <p>{`First, we call the base class to continue to normal behavior of the execution but after we do the logic. The first condition statement verify that in the URL we have the Contest ID defined. If yes, than we are trying to execute an action on the Contest (which is a group or a team or anything you want). If it is set, we need to verify if the user belong to this group. This is done by calling the method `}<strong parentName=\"p\">{`SetCurrentActivePortefolioByContestId`}</strong>{`. This method call the database with the Id of the Contest and the Id of the User. If the database return an entry from the database this mean that you have a match and we do not redirect. Otherwise, we redirect. This is where something must be done more than just calling `}<strong parentName=\"p\">{`RedirectToAction`}</strong>{`. In fact, we have to change the current execution context values. As you may have seen, the `}<strong parentName=\"p\">{`OnActionExecution`}</strong>{` has a single parameter. This parameter has a Result property that can be defined with the Area, Controller and Action you desired. In the example, this is where we redirect the user into the Errors area.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}