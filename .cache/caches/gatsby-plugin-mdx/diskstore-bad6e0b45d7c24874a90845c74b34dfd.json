{"expireTime":9007200886478387000,"key":"gatsby-plugin-mdx-entire-payload-c9c11f0bdfd7ea27b55ce5abf6be3d89--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Debugging Entity Framework’s Migration Seeding can be confusing because you cannot just set a breakpoint and execute the Migration command to update your database. You must use a second Visual Studio to debug the first one. The easiest way is to use the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":255,"offset":255},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"System.Diagnostics.Debugger.Launch","position":{"start":{"line":2,"column":257,"offset":257},"end":{"line":2,"column":291,"offset":291},"indent":[]}}],"position":{"start":{"line":2,"column":255,"offset":255},"end":{"line":2,"column":293,"offset":293},"indent":[]}},{"type":"text","value":" method. By calling that method, inside your code, a second Visual Studio will open and debug the first one that is executing the migration command. The second Visual Studio will be in debug mode. The trick is to keep this one attached to the first one until you are completely done. That mean that you can debug the first one with break point, stop it if you have error, edit the code, run the migration command again, etc. All that without stopping the second Visual Studio. If you stop the second Visual Studio that is attached to the first one, you will have to reattach which can take several times. However, by keeping the second Visual Studio always attached on the first one, you do not have any waiting time.","position":{"start":{"line":2,"column":293,"offset":293},"end":{"line":2,"column":1010,"offset":1010},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":1010,"offset":1010},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" if (System.Diagnostics.Debugger.IsAttached == false) System.Diagnostics.Debugger.Launch(); ","position":{"start":{"line":5,"column":1,"offset":1013},"end":{"line":7,"column":4,"offset":1119},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code shows what you should copy paste, right before where you expect the problem.","position":{"start":{"line":9,"column":1,"offset":1121},"end":{"line":9,"column":86,"offset":1206},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":1121},"end":{"line":9,"column":86,"offset":1206},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to Debug Entity Framework Migration Seeding\",\"date\":\"2015-03-04\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":12,"column":1,"offset":1209},"end":{"line":12,"column":142,"offset":1350},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":12,"column":142,"offset":1350}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Debug Entity Framework Migration Seeding\",\n  \"date\": \"2015-03-04\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Debugging Entity Framework\\u2019s Migration Seeding can be confusing because you cannot just set a breakpoint and execute the Migration command to update your database. You must use a second Visual Studio to debug the first one. The easiest way is to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Diagnostics.Debugger.Launch\"), \" method. By calling that method, inside your code, a second Visual Studio will open and debug the first one that is executing the migration command. The second Visual Studio will be in debug mode. The trick is to keep this one attached to the first one until you are completely done. That mean that you can debug the first one with break point, stop it if you have error, edit the code, run the migration command again, etc. All that without stopping the second Visual Studio. If you stop the second Visual Studio that is attached to the first one, you will have to reattach which can take several times. However, by keeping the second Visual Studio always attached on the first one, you do not have any waiting time.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" if (System.Diagnostics.Debugger.IsAttached == false) System.Diagnostics.Debugger.Launch(); \\n\")), mdx(\"p\", null, \"The code shows what you should copy paste, right before where you expect the problem.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to Debug Entity Framework Migration Seeding\",\n  \"date\": \"2015-03-04\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Debugging Entity Framework’s Migration Seeding can be confusing because you cannot just set a breakpoint and execute the Migration command to update your database. You must use a second Visual Studio to debug the first one. The easiest way is to use the `}<strong parentName=\"p\">{`System.Diagnostics.Debugger.Launch`}</strong>{` method. By calling that method, inside your code, a second Visual Studio will open and debug the first one that is executing the migration command. The second Visual Studio will be in debug mode. The trick is to keep this one attached to the first one until you are completely done. That mean that you can debug the first one with break point, stop it if you have error, edit the code, run the migration command again, etc. All that without stopping the second Visual Studio. If you stop the second Visual Studio that is attached to the first one, you will have to reattach which can take several times. However, by keeping the second Visual Studio always attached on the first one, you do not have any waiting time.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` if (System.Diagnostics.Debugger.IsAttached == false) System.Diagnostics.Debugger.Launch(); \n`}</code></pre>\n    <p>{`The code shows what you should copy paste, right before where you expect the problem.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}