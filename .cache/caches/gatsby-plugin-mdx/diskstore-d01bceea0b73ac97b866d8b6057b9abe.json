{"expireTime":9007200886478401000,"key":"gatsby-plugin-mdx-entire-payload-c5a121f2a3f7bffdf76222d7a5539331--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When unit testing you can get this kind of error if you try to use a class that use different thread of the main one.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":118,"offset":118},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":118,"offset":118},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At first, I haven't realized that I were using another thread because I was testing my Shape class. After some minutes, I realized that I were using the System.Windows.Shape and not mine... once the reference set correctly I were able to remove this error and have my test working.","position":{"start":{"line":4,"column":1,"offset":120},"end":{"line":4,"column":282,"offset":401},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":120},"end":{"line":4,"column":282,"offset":401},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Test method UT.ShapeTest.CreateNewShape threw exception: System.UnauthorizedAccessException: ","position":{"start":{"line":6,"column":3,"offset":405},"end":{"line":6,"column":96,"offset":498},"indent":[]}},{"type":"linkReference","identifier":"invalidcrossthreadaccess","label":"InvalidCrossThreadAccess","referenceType":"shortcut","children":[{"type":"text","value":"InvalidCrossThreadAccess","position":{"start":{"line":6,"column":97,"offset":499},"end":{"line":6,"column":121,"offset":523},"indent":[]}}],"position":{"start":{"line":6,"column":96,"offset":498},"end":{"line":6,"column":122,"offset":524},"indent":[]}},{"type":"text","value":" Arguments: ...","position":{"start":{"line":6,"column":122,"offset":524},"end":{"line":6,"column":137,"offset":539},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":405},"end":{"line":6,"column":137,"offset":539},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":403},"end":{"line":6,"column":137,"offset":539},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Unit testing  System.UnauthorizedAccessException: [InvalidCrossThreadAccess]\",\"date\":\"2011-12-22\",\"categories\":[\"c-sharp\"]}","position":{"start":{"line":9,"column":1,"offset":542},"end":{"line":9,"column":162,"offset":703},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":9,"column":162,"offset":703}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unit testing  System.UnauthorizedAccessException: [InvalidCrossThreadAccess]\",\n  \"date\": \"2011-12-22\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When unit testing you can get this kind of error if you try to use a class that use different thread of the main one.\"), mdx(\"p\", null, \"At first, I haven't realized that I were using another thread because I was testing my Shape class. After some minutes, I realized that I were using the System.Windows.Shape and not mine... once the reference set correctly I were able to remove this error and have my test working.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Test method UT.ShapeTest.CreateNewShape threw exception: System.UnauthorizedAccessException: \", \"[InvalidCrossThreadAccess]\", \" Arguments: ...\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Unit testing  System.UnauthorizedAccessException: [InvalidCrossThreadAccess]\",\n  \"date\": \"2011-12-22\",\n  \"categories\": [\"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When unit testing you can get this kind of error if you try to use a class that use different thread of the main one.`}</p>\n    <p>{`At first, I haven't realized that I were using another thread because I was testing my Shape class. After some minutes, I realized that I were using the System.Windows.Shape and not mine... once the reference set correctly I were able to remove this error and have my test working.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Test method UT.ShapeTest.CreateNewShape threw exception: System.UnauthorizedAccessException: `}{`[InvalidCrossThreadAccess]`}{` Arguments: ...`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}