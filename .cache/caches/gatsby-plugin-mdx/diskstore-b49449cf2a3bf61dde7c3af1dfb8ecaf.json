{"expireTime":9007200886478388000,"key":"gatsby-plugin-mdx-entire-payload-b59c62bd96e77304f17be0675de71d42--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are developing an application that require to have money, they are big change that this money must be in a currency. So, every time you have to select a money, you have to select the currency too. A design pattern is to have a class that represent the money instead of using a decimal directly.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":302,"offset":302},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":302,"offset":302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example.","position":{"start":{"line":4,"column":1,"offset":304},"end":{"line":4,"column":13,"offset":316},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":304},"end":{"line":4,"column":13,"offset":316},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Contest { public Money InitialCapital { get; set; } }\n\npublic class Money { public Money() { Currency = CurrencyType.Canada; }\n\npublic decimal Value { get; set; } public int CurrencyTypeId { get { return this.Currency.Id; } set { this.Currency = CurrencyType.GetFromId(value); } } /// <summary> /// This is ignored by EntityFramework /// </summary> public CurrencyType Currency { get; set; } } ","position":{"start":{"line":7,"column":1,"offset":319},"end":{"line":13,"column":4,"offset":741},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This code use the pattern ","position":{"start":{"line":15,"column":1,"offset":743},"end":{"line":15,"column":27,"offset":769},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Value Object","position":{"start":{"line":15,"column":29,"offset":771},"end":{"line":15,"column":41,"offset":783},"indent":[]}}],"position":{"start":{"line":15,"column":27,"offset":769},"end":{"line":15,"column":43,"offset":785},"indent":[]}},{"type":"text","value":" for all currencies. This is why it has additional code that you may not need. In fact, what is important is the the Money class has the money itself inside the Value property and then the currency inside CurrencyType property.","position":{"start":{"line":15,"column":43,"offset":785},"end":{"line":15,"column":270,"offset":1012},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":743},"end":{"line":15,"column":270,"offset":1012},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From there, you have the ","position":{"start":{"line":17,"column":1,"offset":1014},"end":{"line":17,"column":26,"offset":1039},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"View Model","position":{"start":{"line":17,"column":28,"offset":1041},"end":{"line":17,"column":38,"offset":1051},"indent":[]}}],"position":{"start":{"line":17,"column":26,"offset":1039},"end":{"line":17,"column":40,"offset":1053},"indent":[]}},{"type":"text","value":" that is different. This is a good example of why having a view model is important. The view model will have the whole list of existing and possible currency that the user can choose from. This is not the type of information that you should have in your model since the model should represent the reality. The view model should look this way:","position":{"start":{"line":17,"column":40,"offset":1053},"end":{"line":17,"column":382,"offset":1395},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1014},"end":{"line":17,"column":382,"offset":1395},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class ContestViewModel { [UIHint(\"SelectorForMoneyViewModel\")] public SelectorForMoneyViewModel InitialCapital { get; set; } } ","position":{"start":{"line":20,"column":1,"offset":1398},"end":{"line":22,"column":4,"offset":1547},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The SelectorForMoneyViewModel is a simple class that has the Money and the list of available currencies.","position":{"start":{"line":24,"column":1,"offset":1549},"end":{"line":24,"column":105,"offset":1653},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1549},"end":{"line":24,"column":105,"offset":1653},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class SelectorForMoneyViewModel { public MoneyViewModel Current { get; set; }\n\npublic List<SelectorItem> AvailableCurrencies { get; set; }\n\npublic SelectorForMoneyViewModel() { this.Current = new MoneyViewModel(); this.AvailableCurrencies = new List<SelectorItem>(); } } \n``` From there, the **Editor Template** can use this list and put the whole list into the currency drop down. The result should look like the following picture. The first image is the control when not open and the second picture when the user click the currency field.\n\n![](images/BootStrapperCurrency1-400x59.png)\n\n![](images/BootStrapperCurrency2Open-400x103.png)\n\nThis is possible with the use of **BootStrap** but can be reproduced without it. I am using BootStrap because because it is available by default with Asp.Net MVC since version 5.\n\n\n```csharp\n @model ViewModel.Selectors.Implementations.Money.SelectorForMoneyViewModel\n\n<div class=\"input-group\"> @Html.EditorFor(viewModel => viewModel.Current.Value) @Html.HiddenFor(viewModel => viewModel.Current.Currency.Id) <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">@Model.Current.Currency.DisplayText<span class=\"caret\"></span></button> <ul class=\"dropdown-menu pull-right\"> @foreach (var currency in Model.AvailableCurrencies) { <li><a href=\"#\" data-id=\"@currency.Id\">@currency.DisplayText</a></li> } </ul> </div><!-- /btn-group --> </div><!-- /input-group --> \n``` First of all, we need to setup an hidden field to set the value of the selected currency. This would require some JavaScript to set from the the dropdown value into the hidden field that will be sent to the server. The first EditorFirst is important because it shows the value. The rest of the code is the drop down that is set at the right of the textbox of the decimal value.\n\nHere is the Javascript that must be used for every pages that has the component.\n\n\n```javascript\n\n\n//For each link that is inside a FORM when used as DropDown-Menu Item we want to be able //to click an element and set this one as the visual one. We also set the value of the selected //item into the hidden field of the selected dropdown to have this value pushed to the server. $('form').on('click', '.dropdown-menu>li>a', function () { return dropdownMenuLinkAction($(this)); } );\n\n//@description: Dropdown menu for a choice //@param link: a link that must be under the dropdown-menu function dropdownMenuLinkAction(link) { //Current link information var htmlLink = $(link); var clickedId = htmlLink.attr('data-id'); var clickedDisplayName = htmlLink.html(); var controlContainer = htmlLink.closest('.input-group'); //Change the hidden field (should only have one) controlContainer.find(':hidden').each( function () { $(this).val(clickedId); } ); //Change the visual of the dropdown (should only have one) controlContainer.find('.dropdown-toggle').each( function () { var htmlDropDown = $(this); var currentFullHtml = htmlDropDown.html(); var toRemove = htmlDropDown.text(); var toWriteBack = currentFullHtml.replace(toRemove, \"\"); htmlDropDown.html(clickedDisplayName + \" \" + toWriteBack); } ); $(this).dropdown(\"toggle\"); //Close the menu once clicked return false; } ","position":{"start":{"line":27,"column":1,"offset":1656},"end":{"line":57,"column":5,"offset":4894},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":" It attaches to every form that has a dropdown an action that is linked into each link of the drop down. This action takes the information set into the html attribute data-id to be able to move it into the html hidden field. The second part is to update the dropdown label to display the selected currency to the control when this one is closed.","position":{"start":{"line":58,"column":1,"offset":4895},"end":{"line":58,"column":346,"offset":5240},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":4895},"end":{"line":58,"column":346,"offset":5240},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Asp.Net Editor Template with BootStrap for Currency Field\",\"date\":\"2014-04-10\",\"categories\":[\"asp-mvc\",\"bootstrap\",\"css\"]}","position":{"start":{"line":61,"column":1,"offset":5243},"end":{"line":61,"column":161,"offset":5403},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":61,"column":161,"offset":5403}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Asp.Net Editor Template with BootStrap for Currency Field\",\n  \"date\": \"2014-04-10\",\n  \"categories\": [\"asp-mvc\", \"bootstrap\", \"css\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are developing an application that require to have money, they are big change that this money must be in a currency. So, every time you have to select a money, you have to select the currency too. A design pattern is to have a class that represent the money instead of using a decimal directly.\"), mdx(\"p\", null, \"For example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Contest { public Money InitialCapital { get; set; } }\\n\\npublic class Money { public Money() { Currency = CurrencyType.Canada; }\\n\\npublic decimal Value { get; set; } public int CurrencyTypeId { get { return this.Currency.Id; } set { this.Currency = CurrencyType.GetFromId(value); } } /// <summary> /// This is ignored by EntityFramework /// </summary> public CurrencyType Currency { get; set; } } \\n\")), mdx(\"p\", null, \"This code use the pattern \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Value Object\"), \" for all currencies. This is why it has additional code that you may not need. In fact, what is important is the the Money class has the money itself inside the Value property and then the currency inside CurrencyType property.\"), mdx(\"p\", null, \"From there, you have the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"View Model\"), \" that is different. This is a good example of why having a view model is important. The view model will have the whole list of existing and possible currency that the user can choose from. This is not the type of information that you should have in your model since the model should represent the reality. The view model should look this way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ContestViewModel { [UIHint(\\\"SelectorForMoneyViewModel\\\")] public SelectorForMoneyViewModel InitialCapital { get; set; } } \\n\")), mdx(\"p\", null, \"The SelectorForMoneyViewModel is a simple class that has the Money and the list of available currencies.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class SelectorForMoneyViewModel { public MoneyViewModel Current { get; set; }\\n\\npublic List<SelectorItem> AvailableCurrencies { get; set; }\\n\\npublic SelectorForMoneyViewModel() { this.Current = new MoneyViewModel(); this.AvailableCurrencies = new List<SelectorItem>(); } } \\n``` From there, the **Editor Template** can use this list and put the whole list into the currency drop down. The result should look like the following picture. The first image is the control when not open and the second picture when the user click the currency field.\\n\\n![](images/BootStrapperCurrency1-400x59.png)\\n\\n![](images/BootStrapperCurrency2Open-400x103.png)\\n\\nThis is possible with the use of **BootStrap** but can be reproduced without it. I am using BootStrap because because it is available by default with Asp.Net MVC since version 5.\\n\\n\\n```csharp\\n @model ViewModel.Selectors.Implementations.Money.SelectorForMoneyViewModel\\n\\n<div class=\\\"input-group\\\"> @Html.EditorFor(viewModel => viewModel.Current.Value) @Html.HiddenFor(viewModel => viewModel.Current.Currency.Id) <div class=\\\"input-group-btn\\\"> <button type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">@Model.Current.Currency.DisplayText<span class=\\\"caret\\\"></span></button> <ul class=\\\"dropdown-menu pull-right\\\"> @foreach (var currency in Model.AvailableCurrencies) { <li><a href=\\\"#\\\" data-id=\\\"@currency.Id\\\">@currency.DisplayText</a></li> } </ul> </div><!-- /btn-group --> </div><!-- /input-group --> \\n``` First of all, we need to setup an hidden field to set the value of the selected currency. This would require some JavaScript to set from the the dropdown value into the hidden field that will be sent to the server. The first EditorFirst is important because it shows the value. The rest of the code is the drop down that is set at the right of the textbox of the decimal value.\\n\\nHere is the Javascript that must be used for every pages that has the component.\\n\\n\\n```javascript\\n\\n\\n//For each link that is inside a FORM when used as DropDown-Menu Item we want to be able //to click an element and set this one as the visual one. We also set the value of the selected //item into the hidden field of the selected dropdown to have this value pushed to the server. $('form').on('click', '.dropdown-menu>li>a', function () { return dropdownMenuLinkAction($(this)); } );\\n\\n//@description: Dropdown menu for a choice //@param link: a link that must be under the dropdown-menu function dropdownMenuLinkAction(link) { //Current link information var htmlLink = $(link); var clickedId = htmlLink.attr('data-id'); var clickedDisplayName = htmlLink.html(); var controlContainer = htmlLink.closest('.input-group'); //Change the hidden field (should only have one) controlContainer.find(':hidden').each( function () { $(this).val(clickedId); } ); //Change the visual of the dropdown (should only have one) controlContainer.find('.dropdown-toggle').each( function () { var htmlDropDown = $(this); var currentFullHtml = htmlDropDown.html(); var toRemove = htmlDropDown.text(); var toWriteBack = currentFullHtml.replace(toRemove, \\\"\\\"); htmlDropDown.html(clickedDisplayName + \\\" \\\" + toWriteBack); } ); $(this).dropdown(\\\"toggle\\\"); //Close the menu once clicked return false; } \\n\")), mdx(\"p\", null, \" It attaches to every form that has a dropdown an action that is linked into each link of the drop down. This action takes the information set into the html attribute data-id to be able to move it into the html hidden field. The second part is to update the dropdown label to display the selected currency to the control when this one is closed.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Asp.Net Editor Template with BootStrap for Currency Field\",\n  \"date\": \"2014-04-10\",\n  \"categories\": [\"asp-mvc\", \"bootstrap\", \"css\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are developing an application that require to have money, they are big change that this money must be in a currency. So, every time you have to select a money, you have to select the currency too. A design pattern is to have a class that represent the money instead of using a decimal directly.`}</p>\n    <p>{`For example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Contest { public Money InitialCapital { get; set; } }\n\npublic class Money { public Money() { Currency = CurrencyType.Canada; }\n\npublic decimal Value { get; set; } public int CurrencyTypeId { get { return this.Currency.Id; } set { this.Currency = CurrencyType.GetFromId(value); } } /// <summary> /// This is ignored by EntityFramework /// </summary> public CurrencyType Currency { get; set; } } \n`}</code></pre>\n    <p>{`This code use the pattern `}<strong parentName=\"p\">{`Value Object`}</strong>{` for all currencies. This is why it has additional code that you may not need. In fact, what is important is the the Money class has the money itself inside the Value property and then the currency inside CurrencyType property.`}</p>\n    <p>{`From there, you have the `}<strong parentName=\"p\">{`View Model`}</strong>{` that is different. This is a good example of why having a view model is important. The view model will have the whole list of existing and possible currency that the user can choose from. This is not the type of information that you should have in your model since the model should represent the reality. The view model should look this way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class ContestViewModel { [UIHint(\"SelectorForMoneyViewModel\")] public SelectorForMoneyViewModel InitialCapital { get; set; } } \n`}</code></pre>\n    <p>{`The SelectorForMoneyViewModel is a simple class that has the Money and the list of available currencies.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class SelectorForMoneyViewModel { public MoneyViewModel Current { get; set; }\n\npublic List<SelectorItem> AvailableCurrencies { get; set; }\n\npublic SelectorForMoneyViewModel() { this.Current = new MoneyViewModel(); this.AvailableCurrencies = new List<SelectorItem>(); } } \n\\`\\`\\` From there, the **Editor Template** can use this list and put the whole list into the currency drop down. The result should look like the following picture. The first image is the control when not open and the second picture when the user click the currency field.\n\n![](images/BootStrapperCurrency1-400x59.png)\n\n![](images/BootStrapperCurrency2Open-400x103.png)\n\nThis is possible with the use of **BootStrap** but can be reproduced without it. I am using BootStrap because because it is available by default with Asp.Net MVC since version 5.\n\n\n\\`\\`\\`csharp\n @model ViewModel.Selectors.Implementations.Money.SelectorForMoneyViewModel\n\n<div class=\"input-group\"> @Html.EditorFor(viewModel => viewModel.Current.Value) @Html.HiddenFor(viewModel => viewModel.Current.Currency.Id) <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">@Model.Current.Currency.DisplayText<span class=\"caret\"></span></button> <ul class=\"dropdown-menu pull-right\"> @foreach (var currency in Model.AvailableCurrencies) { <li><a href=\"#\" data-id=\"@currency.Id\">@currency.DisplayText</a></li> } </ul> </div><!-- /btn-group --> </div><!-- /input-group --> \n\\`\\`\\` First of all, we need to setup an hidden field to set the value of the selected currency. This would require some JavaScript to set from the the dropdown value into the hidden field that will be sent to the server. The first EditorFirst is important because it shows the value. The rest of the code is the drop down that is set at the right of the textbox of the decimal value.\n\nHere is the Javascript that must be used for every pages that has the component.\n\n\n\\`\\`\\`javascript\n\n\n//For each link that is inside a FORM when used as DropDown-Menu Item we want to be able //to click an element and set this one as the visual one. We also set the value of the selected //item into the hidden field of the selected dropdown to have this value pushed to the server. $('form').on('click', '.dropdown-menu>li>a', function () { return dropdownMenuLinkAction($(this)); } );\n\n//@description: Dropdown menu for a choice //@param link: a link that must be under the dropdown-menu function dropdownMenuLinkAction(link) { //Current link information var htmlLink = $(link); var clickedId = htmlLink.attr('data-id'); var clickedDisplayName = htmlLink.html(); var controlContainer = htmlLink.closest('.input-group'); //Change the hidden field (should only have one) controlContainer.find(':hidden').each( function () { $(this).val(clickedId); } ); //Change the visual of the dropdown (should only have one) controlContainer.find('.dropdown-toggle').each( function () { var htmlDropDown = $(this); var currentFullHtml = htmlDropDown.html(); var toRemove = htmlDropDown.text(); var toWriteBack = currentFullHtml.replace(toRemove, \"\"); htmlDropDown.html(clickedDisplayName + \" \" + toWriteBack); } ); $(this).dropdown(\"toggle\"); //Close the menu once clicked return false; } \n`}</code></pre>\n    <p>{` It attaches to every form that has a dropdown an action that is linked into each link of the drop down. This action takes the information set into the html attribute data-id to be able to move it into the html hidden field. The second part is to update the dropdown label to display the selected currency to the control when this one is closed.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}