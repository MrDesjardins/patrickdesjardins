{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-5005ef36b9749859c125ac42c91e7037--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The bubble sort is a O(n^2) without optimization and in the worse scenario. It's a simple algorithm that traverse the array once completely and every subsequent pass traverse the array less and less.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":200,"offset":200},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":200,"offset":200},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On the first pass, it compares every element to bubble to the last position of the array the biggest number. On the second pass, it compares to bubble up the second biggest element to the before last position and so on. The bubble sort rely on swapping values.","position":{"start":{"line":4,"column":1,"offset":202},"end":{"line":4,"column":261,"offset":462},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":202},"end":{"line":4,"column":261,"offset":462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The idea is : find the biggest one, put it at the end.","position":{"start":{"line":6,"column":1,"offset":464},"end":{"line":6,"column":55,"offset":518},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":464},"end":{"line":6,"column":55,"offset":518},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function swap(array, left, right) {\n  var temp = array[left];\n  array[left] = array[right];\n  array[right] = temp;\n}\nfunction bubbleSort(arrayToSort) {\n  var length = arrayToSort.length;\n  for (var i = 0; i < length - 1; i++) {\n    for (var j = 0; j < length - i - 1; j++) {\n      if (arrayToSort[j] > arrayToSort[j + 1]) {\n        swap(arrayToSort, j, j + 1);\n      }\n    }\n  }\n}","position":{"start":{"line":8,"column":1,"offset":520},"end":{"line":24,"column":4,"offset":918},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A potential optimization would be that if no swap is done in the inner loop that we completely stop both loop. This can happen if the array is getting sorted before needing to more all elements. For example, imagine an array all sorted expect the first element which. The first loop needs to be executed once to bubble that value at its place, on the second loop, every value will in their right position, hence no swap. It means that we do not need to loop anymore. Here is the optimization.","position":{"start":{"line":26,"column":1,"offset":920},"end":{"line":26,"column":493,"offset":1412},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":920},"end":{"line":26,"column":493,"offset":1412},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function bubbleSort(arrayToSort) {\n  var length = arrayToSort.length;\n  for (var i = 0; i < length - 1; i++) {\n    var swapped = false;\n    for (var j = 0; j < length - i - 1; j++) {\n      if (arrayToSort[j] > arrayToSort[j + 1]) {\n        swap(arrayToSort, j, j + 1);\n        swapped = true;\n      }\n    }\n    if (swapped === false) {\n      i = length;\n    }\n  }\n}","position":{"start":{"line":28,"column":1,"offset":1414},"end":{"line":44,"column":4,"offset":1797},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Bubble Sort\",\"date\":\"2017-07-04\",\"categories\":[\"javascript\"]}","position":{"start":{"line":47,"column":1,"offset":1800},"end":{"line":47,"column":111,"offset":1910},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":111,"offset":1910}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Bubble Sort\",\n  \"date\": \"2017-07-04\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The bubble sort is a O(n^2) without optimization and in the worse scenario. It's a simple algorithm that traverse the array once completely and every subsequent pass traverse the array less and less.\"), mdx(\"p\", null, \"On the first pass, it compares every element to bubble to the last position of the array the biggest number. On the second pass, it compares to bubble up the second biggest element to the before last position and so on. The bubble sort rely on swapping values.\"), mdx(\"p\", null, \"The idea is : find the biggest one, put it at the end.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function swap(array, left, right) {\\n  var temp = array[left];\\n  array[left] = array[right];\\n  array[right] = temp;\\n}\\nfunction bubbleSort(arrayToSort) {\\n  var length = arrayToSort.length;\\n  for (var i = 0; i < length - 1; i++) {\\n    for (var j = 0; j < length - i - 1; j++) {\\n      if (arrayToSort[j] > arrayToSort[j + 1]) {\\n        swap(arrayToSort, j, j + 1);\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"A potential optimization would be that if no swap is done in the inner loop that we completely stop both loop. This can happen if the array is getting sorted before needing to more all elements. For example, imagine an array all sorted expect the first element which. The first loop needs to be executed once to bubble that value at its place, on the second loop, every value will in their right position, hence no swap. It means that we do not need to loop anymore. Here is the optimization.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function bubbleSort(arrayToSort) {\\n  var length = arrayToSort.length;\\n  for (var i = 0; i < length - 1; i++) {\\n    var swapped = false;\\n    for (var j = 0; j < length - i - 1; j++) {\\n      if (arrayToSort[j] > arrayToSort[j + 1]) {\\n        swap(arrayToSort, j, j + 1);\\n        swapped = true;\\n      }\\n    }\\n    if (swapped === false) {\\n      i = length;\\n    }\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Bubble Sort\",\n  \"date\": \"2017-07-04\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`The bubble sort is a O(n^2) without optimization and in the worse scenario. It's a simple algorithm that traverse the array once completely and every subsequent pass traverse the array less and less.`}</p>\n    <p>{`On the first pass, it compares every element to bubble to the last position of the array the biggest number. On the second pass, it compares to bubble up the second biggest element to the before last position and so on. The bubble sort rely on swapping values.`}</p>\n    <p>{`The idea is : find the biggest one, put it at the end.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function swap(array, left, right) {\n  var temp = array[left];\n  array[left] = array[right];\n  array[right] = temp;\n}\nfunction bubbleSort(arrayToSort) {\n  var length = arrayToSort.length;\n  for (var i = 0; i < length - 1; i++) {\n    for (var j = 0; j < length - i - 1; j++) {\n      if (arrayToSort[j] > arrayToSort[j + 1]) {\n        swap(arrayToSort, j, j + 1);\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`A potential optimization would be that if no swap is done in the inner loop that we completely stop both loop. This can happen if the array is getting sorted before needing to more all elements. For example, imagine an array all sorted expect the first element which. The first loop needs to be executed once to bubble that value at its place, on the second loop, every value will in their right position, hence no swap. It means that we do not need to loop anymore. Here is the optimization.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function bubbleSort(arrayToSort) {\n  var length = arrayToSort.length;\n  for (var i = 0; i < length - 1; i++) {\n    var swapped = false;\n    for (var j = 0; j < length - i - 1; j++) {\n      if (arrayToSort[j] > arrayToSort[j + 1]) {\n        swap(arrayToSort, j, j + 1);\n        swapped = true;\n      }\n    }\n    if (swapped === false) {\n      i = length;\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}