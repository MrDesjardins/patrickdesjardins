{"expireTime":9007200886478387000,"key":"gatsby-plugin-mdx-entire-payload-32219610d34a33ed55aeb715c37613f4--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Nancy module constructor is by default without parameters. However, soon you will need to have your route match to some of your logic which should be under some business logic classes. In fact, the next step after routing should be to call your controllers or or service layer classes. To be able to inject your service layer class, you need to inject this class. Nancy ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":371,"offset":371},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Bootstrap","position":{"start":{"line":2,"column":373,"offset":373},"end":{"line":2,"column":382,"offset":382},"indent":[]}}],"position":{"start":{"line":2,"column":371,"offset":371},"end":{"line":2,"column":384,"offset":384},"indent":[]}},{"type":"text","value":" class come to the rescue. You only need to override a single method to be in business. Nancy comes with a default small IoC. The method to override is named ","position":{"start":{"line":2,"column":384,"offset":384},"end":{"line":2,"column":542,"offset":542},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ConfigureRequestContainer","position":{"start":{"line":2,"column":544,"offset":544},"end":{"line":2,"column":569,"offset":569},"indent":[]}}],"position":{"start":{"line":2,"column":542,"offset":542},"end":{"line":2,"column":571,"offset":571},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":571,"offset":571},"end":{"line":2,"column":572,"offset":572},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":572,"offset":572},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class YouBootstrapper : DefaultNancyBootstrapper { protected override void ConfigureRequestContainer(TinyIoCContainer container, NancyContext context) { base.ConfigureRequestContainer(container, context); container.Register<IServiceLayer, YourServiceLayer>(); } } ","position":{"start":{"line":5,"column":1,"offset":575},"end":{"line":7,"column":4,"offset":861},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After this modification, you only need to remove the parameterless constructor and have the one with the interface defined in the request container of the BootStrap class.","position":{"start":{"line":9,"column":1,"offset":863},"end":{"line":9,"column":172,"offset":1034},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":863},"end":{"line":9,"column":172,"offset":1034},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class IndexModule : NancyModule { public IndexModule(IServiceLayer serviceLayer, } ","position":{"start":{"line":12,"column":1,"offset":1037},"end":{"line":14,"column":4,"offset":1142},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Concerning the boot strap class, Nancy will load automatically your class by scanning the assembly where you startup class reside.","position":{"start":{"line":16,"column":1,"offset":1144},"end":{"line":16,"column":131,"offset":1274},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1144},"end":{"line":16,"column":131,"offset":1274},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Nancy Configuration of IoC for Module\",\"date\":\"2015-01-05\",\"categories\":[\"owin\"]}","position":{"start":{"line":19,"column":1,"offset":1277},"end":{"line":19,"column":120,"offset":1396},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":120,"offset":1396}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Nancy Configuration of IoC for Module\",\n  \"date\": \"2015-01-05\",\n  \"categories\": [\"owin\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Nancy module constructor is by default without parameters. However, soon you will need to have your route match to some of your logic which should be under some business logic classes. In fact, the next step after routing should be to call your controllers or or service layer classes. To be able to inject your service layer class, you need to inject this class. Nancy \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bootstrap\"), \" class come to the rescue. You only need to override a single method to be in business. Nancy comes with a default small IoC. The method to override is named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ConfigureRequestContainer\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class YouBootstrapper : DefaultNancyBootstrapper { protected override void ConfigureRequestContainer(TinyIoCContainer container, NancyContext context) { base.ConfigureRequestContainer(container, context); container.Register<IServiceLayer, YourServiceLayer>(); } } \\n\")), mdx(\"p\", null, \"After this modification, you only need to remove the parameterless constructor and have the one with the interface defined in the request container of the BootStrap class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class IndexModule : NancyModule { public IndexModule(IServiceLayer serviceLayer, } \\n\")), mdx(\"p\", null, \"Concerning the boot strap class, Nancy will load automatically your class by scanning the assembly where you startup class reside.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Nancy Configuration of IoC for Module\",\n  \"date\": \"2015-01-05\",\n  \"categories\": [\"owin\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Nancy module constructor is by default without parameters. However, soon you will need to have your route match to some of your logic which should be under some business logic classes. In fact, the next step after routing should be to call your controllers or or service layer classes. To be able to inject your service layer class, you need to inject this class. Nancy `}<strong parentName=\"p\">{`Bootstrap`}</strong>{` class come to the rescue. You only need to override a single method to be in business. Nancy comes with a default small IoC. The method to override is named `}<strong parentName=\"p\">{`ConfigureRequestContainer`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class YouBootstrapper : DefaultNancyBootstrapper { protected override void ConfigureRequestContainer(TinyIoCContainer container, NancyContext context) { base.ConfigureRequestContainer(container, context); container.Register<IServiceLayer, YourServiceLayer>(); } } \n`}</code></pre>\n    <p>{`After this modification, you only need to remove the parameterless constructor and have the one with the interface defined in the request container of the BootStrap class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class IndexModule : NancyModule { public IndexModule(IServiceLayer serviceLayer, } \n`}</code></pre>\n    <p>{`Concerning the boot strap class, Nancy will load automatically your class by scanning the assembly where you startup class reside.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}