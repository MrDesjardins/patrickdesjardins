{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-ea33fac01f37a91a90d5e8743201e66f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The best way to have something organized and having constants in a single place is to have a class that will have inner class. This way, you can organize by theme your constants.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":179,"offset":179},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":179,"offset":179},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static class GlobalConstants { public static class Division1 { public const string Const1 = \"123\"; public const string Const2 = \"qwe\"; public const string Const3 = \"asdfgh\"; }\n\npublic static class Division2 { public const string Const1 = \"123\"; } } ","position":{"start":{"line":5,"column":1,"offset":182},"end":{"line":9,"column":4,"offset":453},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Of course, it's always better to have your constant in the class that they are more related. For example, the default value for a specific property of a class should be directly inside this class. But, for global constants that are used across the application, than having a global constants class can do the job.","position":{"start":{"line":11,"column":1,"offset":455},"end":{"line":11,"column":314,"offset":768},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":455},"end":{"line":11,"column":314,"offset":768},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to handle multiple global constants in an application\",\"date\":\"2012-10-22\",\"categories\":[\"asp\",\"c-sharp\",\"silverlight\"]}","position":{"start":{"line":14,"column":1,"offset":771},"end":{"line":14,"column":163,"offset":933},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":163,"offset":933}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to handle multiple global constants in an application\",\n  \"date\": \"2012-10-22\",\n  \"categories\": [\"asp\", \"c-sharp\", \"silverlight\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The best way to have something organized and having constants in a single place is to have a class that will have inner class. This way, you can organize by theme your constants.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static class GlobalConstants { public static class Division1 { public const string Const1 = \\\"123\\\"; public const string Const2 = \\\"qwe\\\"; public const string Const3 = \\\"asdfgh\\\"; }\\n\\npublic static class Division2 { public const string Const1 = \\\"123\\\"; } } \\n\")), mdx(\"p\", null, \"Of course, it's always better to have your constant in the class that they are more related. For example, the default value for a specific property of a class should be directly inside this class. But, for global constants that are used across the application, than having a global constants class can do the job.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to handle multiple global constants in an application\",\n  \"date\": \"2012-10-22\",\n  \"categories\": [\"asp\", \"c-sharp\", \"silverlight\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`The best way to have something organized and having constants in a single place is to have a class that will have inner class. This way, you can organize by theme your constants.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static class GlobalConstants { public static class Division1 { public const string Const1 = \"123\"; public const string Const2 = \"qwe\"; public const string Const3 = \"asdfgh\"; }\n\npublic static class Division2 { public const string Const1 = \"123\"; } } \n`}</code></pre>\n    <p>{`Of course, it's always better to have your constant in the class that they are more related. For example, the default value for a specific property of a class should be directly inside this class. But, for global constants that are used across the application, than having a global constants class can do the job.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}