{"expireTime":9007200886478394000,"key":"gatsby-plugin-mdx-entire-payload-e23e535032026d6f253d67a18ae699e6--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"These three mechanisms transport information from one page to the other. ViewData and View bag can be threat in the same group because they are both the same thing. The ViewBag is an object that use ViewData. The main difference is that it's possible to access the values from dynamic properties instead of accessing from an array with a string key.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":350,"offset":350},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":350,"offset":350},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" ViewData[\"Name\"] = \"Patrick\"; //Or ViewBag.Name = \"Patrick\"; ","position":{"start":{"line":5,"column":1,"offset":353},"end":{"line":7,"column":4,"offset":429},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, in fact, we are storing an object value into a dictionary which is defined to have Object type value and string key.","position":{"start":{"line":9,"column":1,"offset":431},"end":{"line":9,"column":121,"offset":551},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":431},"end":{"line":9,"column":121,"offset":551},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TempData is also a dictionary of string key and object value. The difference is that the life cycle of the object. TempData keep the information for the time of an HTTP Request. This mean only from one page to another. This also work with a 302/303 redirection because it's in the same HTTP Request.","position":{"start":{"line":11,"column":1,"offset":553},"end":{"line":11,"column":300,"offset":852},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":553},"end":{"line":11,"column":300,"offset":852},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" TempData[\"Name\"] = \"Patrick\"; ","position":{"start":{"line":14,"column":1,"offset":855},"end":{"line":16,"column":4,"offset":900},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ViewData and ViewBag won't have any value after a redirection. This is because their goal is to provide a way to communicate between controllers and views. It's a communication mechanism within the server call. The life cycle of the ViewData and ViewBag is shorter than TempData.","position":{"start":{"line":18,"column":1,"offset":902},"end":{"line":18,"column":284,"offset":1185},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":902},"end":{"line":18,"column":284,"offset":1185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The last mechanism is the Session which work like the ViewData, like a Dictionary that take a string for key and object for value. This one is stored into the client Cookie and can be used for a much more long time. It also need more verification to never have any confidential information.","position":{"start":{"line":20,"column":1,"offset":1187},"end":{"line":20,"column":291,"offset":1477},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1187},"end":{"line":20,"column":291,"offset":1477},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Differences between ViewData, ViewBag, Session and TempData\",\"date\":\"2012-02-17\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":23,"column":1,"offset":1480},"end":{"line":23,"column":145,"offset":1624},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":145,"offset":1624}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Differences between ViewData, ViewBag, Session and TempData\",\n  \"date\": \"2012-02-17\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These three mechanisms transport information from one page to the other. ViewData and View bag can be threat in the same group because they are both the same thing. The ViewBag is an object that use ViewData. The main difference is that it's possible to access the values from dynamic properties instead of accessing from an array with a string key.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" ViewData[\\\"Name\\\"] = \\\"Patrick\\\"; //Or ViewBag.Name = \\\"Patrick\\\"; \\n\")), mdx(\"p\", null, \"So, in fact, we are storing an object value into a dictionary which is defined to have Object type value and string key.\"), mdx(\"p\", null, \"TempData is also a dictionary of string key and object value. The difference is that the life cycle of the object. TempData keep the information for the time of an HTTP Request. This mean only from one page to another. This also work with a 302/303 redirection because it's in the same HTTP Request.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" TempData[\\\"Name\\\"] = \\\"Patrick\\\"; \\n\")), mdx(\"p\", null, \"The ViewData and ViewBag won't have any value after a redirection. This is because their goal is to provide a way to communicate between controllers and views. It's a communication mechanism within the server call. The life cycle of the ViewData and ViewBag is shorter than TempData.\"), mdx(\"p\", null, \"The last mechanism is the Session which work like the ViewData, like a Dictionary that take a string for key and object for value. This one is stored into the client Cookie and can be used for a much more long time. It also need more verification to never have any confidential information.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Differences between ViewData, ViewBag, Session and TempData\",\n  \"date\": \"2012-02-17\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`These three mechanisms transport information from one page to the other. ViewData and View bag can be threat in the same group because they are both the same thing. The ViewBag is an object that use ViewData. The main difference is that it's possible to access the values from dynamic properties instead of accessing from an array with a string key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` ViewData[\"Name\"] = \"Patrick\"; //Or ViewBag.Name = \"Patrick\"; \n`}</code></pre>\n    <p>{`So, in fact, we are storing an object value into a dictionary which is defined to have Object type value and string key.`}</p>\n    <p>{`TempData is also a dictionary of string key and object value. The difference is that the life cycle of the object. TempData keep the information for the time of an HTTP Request. This mean only from one page to another. This also work with a 302/303 redirection because it's in the same HTTP Request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` TempData[\"Name\"] = \"Patrick\"; \n`}</code></pre>\n    <p>{`The ViewData and ViewBag won't have any value after a redirection. This is because their goal is to provide a way to communicate between controllers and views. It's a communication mechanism within the server call. The life cycle of the ViewData and ViewBag is shorter than TempData.`}</p>\n    <p>{`The last mechanism is the Session which work like the ViewData, like a Dictionary that take a string for key and object for value. This one is stored into the client Cookie and can be used for a much more long time. It also need more verification to never have any confidential information.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}