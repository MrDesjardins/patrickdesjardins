{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-9f0ebb05d981630d3f28f7e14e962f26--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In previous article of the enterprise asp.net mvc series we have choose to allow anonymous not by default and to secure to logged used most of the actions possible. This is great but not enough if we want to have some action available only for specific role. In this article, I'll show you how to authorize specific role to be mapped to action and to keep the security for anonymous. Also, we will see how to have custom error page for unauthorized action instead of the login screen that Asp.Net MVC redirect when the authorization is unsuccessful.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":550,"offset":550},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":550,"offset":550},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, we will need to create a new Authorize attribute. This is not because Asp.Net MVC 4 doesn't provide the attribute but because Asp.Net MVC 4 act the same way for ","position":{"start":{"line":4,"column":1,"offset":552},"end":{"line":4,"column":176,"offset":727},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"authorized access (401)","position":{"start":{"line":4,"column":178,"offset":729},"end":{"line":4,"column":201,"offset":752},"indent":[]}}],"position":{"start":{"line":4,"column":176,"offset":727},"end":{"line":4,"column":203,"offset":754},"indent":[]}},{"type":"text","value":" and a ","position":{"start":{"line":4,"column":203,"offset":754},"end":{"line":4,"column":210,"offset":761},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"forbidden access (403)","position":{"start":{"line":4,"column":212,"offset":763},"end":{"line":4,"column":234,"offset":785},"indent":[]}}],"position":{"start":{"line":4,"column":210,"offset":761},"end":{"line":4,"column":236,"offset":787},"indent":[]}},{"type":"text","value":". We want when it's an authorized access (not logged) to redirect to the login screen and when it's the forbidden access (not being in the role) to be redirected to a view saying something and not the login form.","position":{"start":{"line":4,"column":236,"offset":787},"end":{"line":4,"column":448,"offset":999},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":552},"end":{"line":4,"column":448,"offset":999},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = true)] public sealed class AuthorizeAttribute : System.Web.Mvc.AuthorizeAttribute { public AuthorizeAttribute() { ErrorArea = string.Empty; ErrorController = \"Error\"; ErrorAction = \"Index\"; }\n\npublic string ErrorArea { get; set; } public string ErrorController { get; set; } public string ErrorAction { get; set; }\n\npublic override void OnAuthorization(AuthorizationContext filterContext) { base.OnAuthorization(filterContext); if (AuthorizeCore(filterContext.HttpContext)) return; if (filterContext.HttpContext.Request.IsAuthenticated) { if (ErrorController != null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { action =ErrorAction, controller =ErrorController, area = ErrorArea })); } else { filterContext.Result = new HttpStatusCodeResult((int)HttpStatusCode.Forbidden); } } else { filterContext.Result = null; } } } \n``` This is the attribute class. This class check if the user is authenticated, if not, will redirect to the normal process and return a 401 http status with the login form. If the user is authenticated, the status code is changed to 403 if no controller is specified, otherwise, will redirect to a specific controller/action. By default, I have set a controller and action, this way, it's more user friendly to have a real page inside the page layout than the default 403 IIS page. Of course, it's up to you to choose what you prefer. However, I believe that not only it's more user friendly but this way give you the possibility to log forbidden access and to have custom message.\n\nTo use this new **AuthorizeAttribute**, we need to change the default filter set to every action. In Asp.Net MVC 4, you need to search for FilterConfig.cs\n\n```csharp\npublic class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new Views.AuthorizeAttribute()); } } ","position":{"start":{"line":7,"column":1,"offset":1002},"end":{"line":19,"column":4,"offset":3018},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The line 6 has been replaced by or AuthorizeAttribute. This won't do such a big change since the access by default isn't set. But, when an action shall be protected by a specific role, this is where the custom authorize class shine.","position":{"start":{"line":21,"column":1,"offset":3020},"end":{"line":21,"column":233,"offset":3252},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":3020},"end":{"line":21,"column":233,"offset":3252},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"[HttpGet] [Views.Authorize(Roles = Models.Roles.ADMINISTRATOR)] public ActionResult Create() { var x = ServiceFactory.Exercise.New(Model); return View(\"Create\",x); } \n``` As you can see in the code above, if the use is not an administrator than this one will be redirected to the default error page.\n\nAt anytime, you also can specify a specific controller and action if for a special case you need to do something else for a forbidden access. \n```csharp\n [Views.Authorize(Roles = Models.Roles.ADMINISTRATOR, ErrorController = \"CustomerController\", ErrorAction = \"LogAndRedirect\")] public ActionResult Create() { var x = ServiceFactory.Exercise.New(Model); return View(\"Create\",x); } ","position":{"start":{"line":23,"column":1,"offset":3254},"end":{"line":30,"column":4,"offset":3951},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To conclude, it's possible to have distinct page for authorized access and forbidden access. I strongly believe it's important to do something different since it's counter intuitive to display to login form when someone is already logged without the right role. It's fundamental that the user know what's going on and this is why a redirection to a custom error's controller seem the natural solution to this problem.","position":{"start":{"line":32,"column":1,"offset":3953},"end":{"line":32,"column":418,"offset":4370},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3953},"end":{"line":32,"column":418,"offset":4370},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Series Articles","position":{"start":{"line":34,"column":5,"offset":4376},"end":{"line":34,"column":20,"offset":4391},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":4372},"end":{"line":34,"column":20,"offset":4391},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"./enterprise-asp-net-part-1-mvc-the-planification","children":[{"type":"text","value":"Article #1: Asp.Net MVC Enterprise Quality Web Application","position":{"start":{"line":36,"column":2,"offset":4394},"end":{"line":36,"column":60,"offset":4452},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4393},"end":{"line":36,"column":112,"offset":4504},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":112,"offset":4504},"end":{"line":36,"column":113,"offset":4505},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-2-building-the-model","children":[{"type":"text","value":"Article #2: Asp.Net MVC Enterprise Quality Web Application Model","position":{"start":{"line":36,"column":114,"offset":4506},"end":{"line":36,"column":178,"offset":4570},"indent":[]}}],"position":{"start":{"line":36,"column":113,"offset":4505},"end":{"line":36,"column":231,"offset":4623},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":231,"offset":4623},"end":{"line":36,"column":232,"offset":4624},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-3-controller","children":[{"type":"text","value":"Article #3: Asp.Net MVC Enterprise Quality Web Application Controller","position":{"start":{"line":36,"column":233,"offset":4625},"end":{"line":36,"column":302,"offset":4694},"indent":[]}}],"position":{"start":{"line":36,"column":232,"offset":4624},"end":{"line":36,"column":347,"offset":4739},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":347,"offset":4739},"end":{"line":36,"column":348,"offset":4740},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-4-repository","children":[{"type":"text","value":"Article #4: Asp.Net MVC Enterprise Quality Web Repository Layer","position":{"start":{"line":36,"column":349,"offset":4741},"end":{"line":36,"column":412,"offset":4804},"indent":[]}}],"position":{"start":{"line":36,"column":348,"offset":4740},"end":{"line":36,"column":457,"offset":4849},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":457,"offset":4849},"end":{"line":36,"column":458,"offset":4850},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-5-database-context-and-impersonate-data","children":[{"type":"text","value":"Article #5: Asp.Net MVC Enterprise Quality Web with Entity Framework","position":{"start":{"line":36,"column":459,"offset":4851},"end":{"line":36,"column":527,"offset":4919},"indent":[]}}],"position":{"start":{"line":36,"column":458,"offset":4850},"end":{"line":36,"column":599,"offset":4991},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":599,"offset":4991},"end":{"line":36,"column":600,"offset":4992},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-6-the-three-layers-of-validation","children":[{"type":"text","value":"Article #6: Asp.Net MVC Enterprise Quality Layers","position":{"start":{"line":36,"column":601,"offset":4993},"end":{"line":36,"column":650,"offset":5042},"indent":[]}}],"position":{"start":{"line":36,"column":600,"offset":4992},"end":{"line":36,"column":715,"offset":5107},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":715,"offset":5107},"end":{"line":36,"column":716,"offset":5108},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-7-securing-action-with-role-authorization","children":[{"type":"text","value":"Article #7: Asp.Net MVC Enterprise Quality Web Security","position":{"start":{"line":36,"column":717,"offset":5109},"end":{"line":36,"column":772,"offset":5164},"indent":[]}}],"position":{"start":{"line":36,"column":716,"offset":5108},"end":{"line":36,"column":846,"offset":5238},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4393},"end":{"line":36,"column":846,"offset":5238},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/MrDesjardins/GymWorkout","children":[{"type":"text","value":"Source code on GitHub","position":{"start":{"line":38,"column":2,"offset":5241},"end":{"line":38,"column":23,"offset":5262},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":5240},"end":{"line":38,"column":68,"offset":5307},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":5240},"end":{"line":38,"column":68,"offset":5307},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Enterprise Asp.Net MVC Part 7: Securing action with role authorization\",\"date\":\"2012-12-10\",\"categories\":[\"asp\",\"asp-mvc\",\"enterprise\"]}","position":{"start":{"line":41,"column":1,"offset":5310},"end":{"line":41,"column":175,"offset":5484},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":175,"offset":5484}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Enterprise Asp.Net MVC Part 7: Securing action with role authorization\",\n  \"date\": \"2012-12-10\",\n  \"categories\": [\"asp\", \"asp-mvc\", \"enterprise\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In previous article of the enterprise asp.net mvc series we have choose to allow anonymous not by default and to secure to logged used most of the actions possible. This is great but not enough if we want to have some action available only for specific role. In this article, I'll show you how to authorize specific role to be mapped to action and to keep the security for anonymous. Also, we will see how to have custom error page for unauthorized action instead of the login screen that Asp.Net MVC redirect when the authorization is unsuccessful.\"), mdx(\"p\", null, \"First of all, we will need to create a new Authorize attribute. This is not because Asp.Net MVC 4 doesn't provide the attribute but because Asp.Net MVC 4 act the same way for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"authorized access (401)\"), \" and a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"forbidden access (403)\"), \". We want when it's an authorized access (not logged) to redirect to the login screen and when it's the forbidden access (not being in the role) to be redirected to a view saying something and not the login form.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = true)] public sealed class AuthorizeAttribute : System.Web.Mvc.AuthorizeAttribute { public AuthorizeAttribute() { ErrorArea = string.Empty; ErrorController = \\\"Error\\\"; ErrorAction = \\\"Index\\\"; }\\n\\npublic string ErrorArea { get; set; } public string ErrorController { get; set; } public string ErrorAction { get; set; }\\n\\npublic override void OnAuthorization(AuthorizationContext filterContext) { base.OnAuthorization(filterContext); if (AuthorizeCore(filterContext.HttpContext)) return; if (filterContext.HttpContext.Request.IsAuthenticated) { if (ErrorController != null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { action =ErrorAction, controller =ErrorController, area = ErrorArea })); } else { filterContext.Result = new HttpStatusCodeResult((int)HttpStatusCode.Forbidden); } } else { filterContext.Result = null; } } } \\n``` This is the attribute class. This class check if the user is authenticated, if not, will redirect to the normal process and return a 401 http status with the login form. If the user is authenticated, the status code is changed to 403 if no controller is specified, otherwise, will redirect to a specific controller/action. By default, I have set a controller and action, this way, it's more user friendly to have a real page inside the page layout than the default 403 IIS page. Of course, it's up to you to choose what you prefer. However, I believe that not only it's more user friendly but this way give you the possibility to log forbidden access and to have custom message.\\n\\nTo use this new **AuthorizeAttribute**, we need to change the default filter set to every action. In Asp.Net MVC 4, you need to search for FilterConfig.cs\\n\\n```csharp\\npublic class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new Views.AuthorizeAttribute()); } } \\n\")), mdx(\"p\", null, \"The line 6 has been replaced by or AuthorizeAttribute. This won't do such a big change since the access by default isn't set. But, when an action shall be protected by a specific role, this is where the custom authorize class shine.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[HttpGet] [Views.Authorize(Roles = Models.Roles.ADMINISTRATOR)] public ActionResult Create() { var x = ServiceFactory.Exercise.New(Model); return View(\\\"Create\\\",x); } \\n``` As you can see in the code above, if the use is not an administrator than this one will be redirected to the default error page.\\n\\nAt anytime, you also can specify a specific controller and action if for a special case you need to do something else for a forbidden access. \\n```csharp\\n [Views.Authorize(Roles = Models.Roles.ADMINISTRATOR, ErrorController = \\\"CustomerController\\\", ErrorAction = \\\"LogAndRedirect\\\")] public ActionResult Create() { var x = ServiceFactory.Exercise.New(Model); return View(\\\"Create\\\",x); } \\n\")), mdx(\"p\", null, \"To conclude, it's possible to have distinct page for authorized access and forbidden access. I strongly believe it's important to do something different since it's counter intuitive to display to login form when someone is already logged without the right role. It's fundamental that the user know what's going on and this is why a redirection to a custom error's controller seem the natural solution to this problem.\"), mdx(\"h3\", null, \"Series Articles\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-part-1-mvc-the-planification\"\n  }, \"Article #1: Asp.Net MVC Enterprise Quality Web Application\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-2-building-the-model\"\n  }, \"Article #2: Asp.Net MVC Enterprise Quality Web Application Model\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-3-controller\"\n  }, \"Article #3: Asp.Net MVC Enterprise Quality Web Application Controller\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-4-repository\"\n  }, \"Article #4: Asp.Net MVC Enterprise Quality Web Repository Layer\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-5-database-context-and-impersonate-data\"\n  }, \"Article #5: Asp.Net MVC Enterprise Quality Web with Entity Framework\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-6-the-three-layers-of-validation\"\n  }, \"Article #6: Asp.Net MVC Enterprise Quality Layers\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-7-securing-action-with-role-authorization\"\n  }, \"Article #7: Asp.Net MVC Enterprise Quality Web Security\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/MrDesjardins/GymWorkout\"\n  }, \"Source code on GitHub\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Enterprise Asp.Net MVC Part 7: Securing action with role authorization\",\n  \"date\": \"2012-12-10\",\n  \"categories\": [\"asp\", \"asp-mvc\", \"enterprise\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In previous article of the enterprise asp.net mvc series we have choose to allow anonymous not by default and to secure to logged used most of the actions possible. This is great but not enough if we want to have some action available only for specific role. In this article, I'll show you how to authorize specific role to be mapped to action and to keep the security for anonymous. Also, we will see how to have custom error page for unauthorized action instead of the login screen that Asp.Net MVC redirect when the authorization is unsuccessful.`}</p>\n    <p>{`First of all, we will need to create a new Authorize attribute. This is not because Asp.Net MVC 4 doesn't provide the attribute but because Asp.Net MVC 4 act the same way for `}<strong parentName=\"p\">{`authorized access (401)`}</strong>{` and a `}<strong parentName=\"p\">{`forbidden access (403)`}</strong>{`. We want when it's an authorized access (not logged) to redirect to the login screen and when it's the forbidden access (not being in the role) to be redirected to a view saying something and not the login form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = true)] public sealed class AuthorizeAttribute : System.Web.Mvc.AuthorizeAttribute { public AuthorizeAttribute() { ErrorArea = string.Empty; ErrorController = \"Error\"; ErrorAction = \"Index\"; }\n\npublic string ErrorArea { get; set; } public string ErrorController { get; set; } public string ErrorAction { get; set; }\n\npublic override void OnAuthorization(AuthorizationContext filterContext) { base.OnAuthorization(filterContext); if (AuthorizeCore(filterContext.HttpContext)) return; if (filterContext.HttpContext.Request.IsAuthenticated) { if (ErrorController != null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { action =ErrorAction, controller =ErrorController, area = ErrorArea })); } else { filterContext.Result = new HttpStatusCodeResult((int)HttpStatusCode.Forbidden); } } else { filterContext.Result = null; } } } \n\\`\\`\\` This is the attribute class. This class check if the user is authenticated, if not, will redirect to the normal process and return a 401 http status with the login form. If the user is authenticated, the status code is changed to 403 if no controller is specified, otherwise, will redirect to a specific controller/action. By default, I have set a controller and action, this way, it's more user friendly to have a real page inside the page layout than the default 403 IIS page. Of course, it's up to you to choose what you prefer. However, I believe that not only it's more user friendly but this way give you the possibility to log forbidden access and to have custom message.\n\nTo use this new **AuthorizeAttribute**, we need to change the default filter set to every action. In Asp.Net MVC 4, you need to search for FilterConfig.cs\n\n\\`\\`\\`csharp\npublic class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new Views.AuthorizeAttribute()); } } \n`}</code></pre>\n    <p>{`The line 6 has been replaced by or AuthorizeAttribute. This won't do such a big change since the access by default isn't set. But, when an action shall be protected by a specific role, this is where the custom authorize class shine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`[HttpGet] [Views.Authorize(Roles = Models.Roles.ADMINISTRATOR)] public ActionResult Create() { var x = ServiceFactory.Exercise.New(Model); return View(\"Create\",x); } \n\\`\\`\\` As you can see in the code above, if the use is not an administrator than this one will be redirected to the default error page.\n\nAt anytime, you also can specify a specific controller and action if for a special case you need to do something else for a forbidden access. \n\\`\\`\\`csharp\n [Views.Authorize(Roles = Models.Roles.ADMINISTRATOR, ErrorController = \"CustomerController\", ErrorAction = \"LogAndRedirect\")] public ActionResult Create() { var x = ServiceFactory.Exercise.New(Model); return View(\"Create\",x); } \n`}</code></pre>\n    <p>{`To conclude, it's possible to have distinct page for authorized access and forbidden access. I strongly believe it's important to do something different since it's counter intuitive to display to login form when someone is already logged without the right role. It's fundamental that the user know what's going on and this is why a redirection to a custom error's controller seem the natural solution to this problem.`}</p>\n    <h3>{`Series Articles`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-part-1-mvc-the-planification\"\n      }}>{`Article #1: Asp.Net MVC Enterprise Quality Web Application`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-2-building-the-model\"\n      }}>{`Article #2: Asp.Net MVC Enterprise Quality Web Application Model`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-3-controller\"\n      }}>{`Article #3: Asp.Net MVC Enterprise Quality Web Application Controller`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-4-repository\"\n      }}>{`Article #4: Asp.Net MVC Enterprise Quality Web Repository Layer`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-5-database-context-and-impersonate-data\"\n      }}>{`Article #5: Asp.Net MVC Enterprise Quality Web with Entity Framework`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-6-the-three-layers-of-validation\"\n      }}>{`Article #6: Asp.Net MVC Enterprise Quality Layers`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-7-securing-action-with-role-authorization\"\n      }}>{`Article #7: Asp.Net MVC Enterprise Quality Web Security`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/MrDesjardins/GymWorkout\"\n      }}>{`Source code on GitHub`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}