{"expireTime":9007200886478385000,"key":"gatsby-plugin-mdx-entire-payload-7dfb9bcf1f72c98c6696e74c390b3086--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When you are using straight ADO.Net with SQL you may come when using an operation that produce an overflow. This is often hard to debug if you are inside an update statement which update several fields. You may think than using ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":229,"offset":229},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"cast","position":{"start":{"line":2,"column":231,"offset":231},"end":{"line":2,"column":235,"offset":235},"indent":[]}}],"position":{"start":{"line":2,"column":229,"offset":229},"end":{"line":2,"column":237,"offset":237},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":2,"column":237,"offset":237},"end":{"line":2,"column":241,"offset":241},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"convert","position":{"start":{"line":2,"column":243,"offset":243},"end":{"line":2,"column":250,"offset":250},"indent":[]}}],"position":{"start":{"line":2,"column":241,"offset":241},"end":{"line":2,"column":252,"offset":252},"indent":[]}},{"type":"text","value":" to the type of the destination field solve the problem, but it is not actually valid.","position":{"start":{"line":2,"column":252,"offset":252},"end":{"line":2,"column":338,"offset":338},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":338,"offset":338},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is two examples that show that even if you ","position":{"start":{"line":4,"column":1,"offset":340},"end":{"line":4,"column":49,"offset":388},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"convert","position":{"start":{"line":4,"column":51,"offset":390},"end":{"line":4,"column":58,"offset":397},"indent":[]}}],"position":{"start":{"line":4,"column":49,"offset":388},"end":{"line":4,"column":60,"offset":399},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":4,"column":60,"offset":399},"end":{"line":4,"column":64,"offset":403},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"cast","position":{"start":{"line":4,"column":66,"offset":405},"end":{"line":4,"column":70,"offset":409},"indent":[]}}],"position":{"start":{"line":4,"column":64,"offset":403},"end":{"line":4,"column":72,"offset":411},"indent":[]}},{"type":"text","value":" it won't be enough.","position":{"start":{"line":4,"column":72,"offset":411},"end":{"line":4,"column":92,"offset":431},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":340},"end":{"line":4,"column":92,"offset":431},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" declare @dob1 as decimal(16,4) set @dob1 = cast(554656545465486786844864613 as decimal(16,4)) select @dob1\n\ndeclare @dob2 as decimal(16,4) set @dob2 = CONVERT(decimal(16,4),5455531234268.68423224224244864613 ) select @dob2 ","position":{"start":{"line":7,"column":1,"offset":434},"end":{"line":11,"column":4,"offset":669},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In my case, the problem was that I was performing an update in a field by executing a multiplication. field = field * 1/2. The problem was that field was already, in some case, at 0 and sometime above the maximum which is 12 (16-4) digits. Even if the following code work fine.","position":{"start":{"line":14,"column":1,"offset":672},"end":{"line":14,"column":278,"offset":949},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":672},"end":{"line":14,"column":278,"offset":949},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" declare @dob3 as int set @dob3 = cast(0*1/2 as int) select @dob3 ","position":{"start":{"line":17,"column":1,"offset":952},"end":{"line":19,"column":4,"offset":1029},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This one was not:","position":{"start":{"line":22,"column":1,"offset":1032},"end":{"line":22,"column":18,"offset":1049},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1032},"end":{"line":22,"column":18,"offset":1049},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" declare @fromValue as int declare @toValue as int\n\nset @fromValue = 1 set @toValue = 2\n\nSELECT cast(Quantity * @fromValue/@toValue as int) as newQuantity FROM [Trading].[Stock] ","position":{"start":{"line":25,"column":1,"offset":1052},"end":{"line":31,"column":4,"offset":1241},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, adding a ","position":{"start":{"line":34,"column":1,"offset":1244},"end":{"line":34,"column":19,"offset":1262},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"where","position":{"start":{"line":34,"column":21,"offset":1264},"end":{"line":34,"column":26,"offset":1269},"indent":[]}}],"position":{"start":{"line":34,"column":19,"offset":1262},"end":{"line":34,"column":28,"offset":1271},"indent":[]}},{"type":"text","value":" clause eliminates edge cases to be proceeded. The trick is to handle result of 0 and result above the limit.","position":{"start":{"line":34,"column":28,"offset":1271},"end":{"line":34,"column":137,"offset":1380},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1244},"end":{"line":34,"column":137,"offset":1380},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" declare @fromValue as int declare @toValue as int\n\nset @fromValue = 1 set @toValue = 2\n\nSELECT cast(Quantity * @fromValue/@toValue as int) as newQuantity FROM [Trading].[Stock] WHERE Quantity > 0 AND Quantity < 999999999999 ","position":{"start":{"line":37,"column":1,"offset":1383},"end":{"line":43,"column":4,"offset":1619},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"SQL Arithmetic overflow error converting numeric to data type numeric\",\"date\":\"2016-03-18\",\"categories\":[\"sql\"]}","position":{"start":{"line":47,"column":1,"offset":1623},"end":{"line":47,"column":151,"offset":1773},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":151,"offset":1773}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SQL Arithmetic overflow error converting numeric to data type numeric\",\n  \"date\": \"2016-03-18\",\n  \"categories\": [\"sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you are using straight ADO.Net with SQL you may come when using an operation that produce an overflow. This is often hard to debug if you are inside an update statement which update several fields. You may think than using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"cast\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"convert\"), \" to the type of the destination field solve the problem, but it is not actually valid.\"), mdx(\"p\", null, \"Here is two examples that show that even if you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"convert\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"cast\"), \" it won't be enough.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" declare @dob1 as decimal(16,4) set @dob1 = cast(554656545465486786844864613 as decimal(16,4)) select @dob1\\n\\ndeclare @dob2 as decimal(16,4) set @dob2 = CONVERT(decimal(16,4),5455531234268.68423224224244864613 ) select @dob2 \\n\")), mdx(\"p\", null, \"In my case, the problem was that I was performing an update in a field by executing a multiplication. field = field * 1/2. The problem was that field was already, in some case, at 0 and sometime above the maximum which is 12 (16-4) digits. Even if the following code work fine.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" declare @dob3 as int set @dob3 = cast(0*1/2 as int) select @dob3 \\n\")), mdx(\"p\", null, \"This one was not:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" declare @fromValue as int declare @toValue as int\\n\\nset @fromValue = 1 set @toValue = 2\\n\\nSELECT cast(Quantity * @fromValue/@toValue as int) as newQuantity FROM [Trading].[Stock] \\n\")), mdx(\"p\", null, \"However, adding a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"where\"), \" clause eliminates edge cases to be proceeded. The trick is to handle result of 0 and result above the limit.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" declare @fromValue as int declare @toValue as int\\n\\nset @fromValue = 1 set @toValue = 2\\n\\nSELECT cast(Quantity * @fromValue/@toValue as int) as newQuantity FROM [Trading].[Stock] WHERE Quantity > 0 AND Quantity < 999999999999 \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"SQL Arithmetic overflow error converting numeric to data type numeric\",\n  \"date\": \"2016-03-18\",\n  \"categories\": [\"sql\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When you are using straight ADO.Net with SQL you may come when using an operation that produce an overflow. This is often hard to debug if you are inside an update statement which update several fields. You may think than using `}<strong parentName=\"p\">{`cast`}</strong>{` or `}<strong parentName=\"p\">{`convert`}</strong>{` to the type of the destination field solve the problem, but it is not actually valid.`}</p>\n    <p>{`Here is two examples that show that even if you `}<strong parentName=\"p\">{`convert`}</strong>{` or `}<strong parentName=\"p\">{`cast`}</strong>{` it won't be enough.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` declare @dob1 as decimal(16,4) set @dob1 = cast(554656545465486786844864613 as decimal(16,4)) select @dob1\n\ndeclare @dob2 as decimal(16,4) set @dob2 = CONVERT(decimal(16,4),5455531234268.68423224224244864613 ) select @dob2 \n`}</code></pre>\n    <p>{`In my case, the problem was that I was performing an update in a field by executing a multiplication. field = field * 1/2. The problem was that field was already, in some case, at 0 and sometime above the maximum which is 12 (16-4) digits. Even if the following code work fine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` declare @dob3 as int set @dob3 = cast(0*1/2 as int) select @dob3 \n`}</code></pre>\n    <p>{`This one was not:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` declare @fromValue as int declare @toValue as int\n\nset @fromValue = 1 set @toValue = 2\n\nSELECT cast(Quantity * @fromValue/@toValue as int) as newQuantity FROM [Trading].[Stock] \n`}</code></pre>\n    <p>{`However, adding a `}<strong parentName=\"p\">{`where`}</strong>{` clause eliminates edge cases to be proceeded. The trick is to handle result of 0 and result above the limit.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` declare @fromValue as int declare @toValue as int\n\nset @fromValue = 1 set @toValue = 2\n\nSELECT cast(Quantity * @fromValue/@toValue as int) as newQuantity FROM [Trading].[Stock] WHERE Quantity > 0 AND Quantity < 999999999999 \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}