{"expireTime":9007200886478380000,"key":"gatsby-plugin-mdx-entire-payload-4b5351195a8d598292ca208e12ece421--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"There is a time where you have a range of value and a function that must act when all entries of the data. In TypeScript, an enum or a union of value can define the set. The problem is that these sets can change in time. The ideal treatment is having TypeScript to notice the developer that a value is missing. The removal of a choice is handled by default since the value doesn't exist, hence TypeScript won't compile. An exhaustive check needs to be placed to manage any new value.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":484,"offset":484},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":484,"offset":484},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Exhaustive check leverage the ","position":{"start":{"line":4,"column":1,"offset":486},"end":{"line":4,"column":31,"offset":516},"indent":[]}},{"type":"inlineCode","value":"never","position":{"start":{"line":4,"column":31,"offset":516},"end":{"line":4,"column":38,"offset":523},"indent":[]}},{"type":"text","value":" type. In TypeScript, we can create a default choice that calls a method that takes for parameter a ","position":{"start":{"line":4,"column":38,"offset":523},"end":{"line":4,"column":138,"offset":623},"indent":[]}},{"type":"inlineCode","value":"never","position":{"start":{"line":4,"column":138,"offset":623},"end":{"line":4,"column":145,"offset":630},"indent":[]}},{"type":"text","value":" type. Since ","position":{"start":{"line":4,"column":145,"offset":630},"end":{"line":4,"column":158,"offset":643},"indent":[]}},{"type":"inlineCode","value":"never","position":{"start":{"line":4,"column":158,"offset":643},"end":{"line":4,"column":165,"offset":650},"indent":[]}},{"type":"text","value":" primitive is a subtype of all type, you cannot pass the parameter of your function. TypeScript won't compile if a potential path, a missing value, slips into the function. However, it compiles in the case that all values of the set are present.","position":{"start":{"line":4,"column":165,"offset":650},"end":{"line":4,"column":410,"offset":895},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":486},"end":{"line":4,"column":410,"offset":895},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"public convertToHighChartType(type: MetricsChartType): string { \n  switch (type) { \n    case \"Line\": \n      return \"line\"; \n    case \"AreaDiff\": \n      return \"area\"; \n    default: \n      return exhaustiveCheck(type); \n    } \n}\n\nexport function exhaustiveCheck(type: never): never { \n  throw new Error(\"Missing type\"); \n} ","position":{"start":{"line":6,"column":1,"offset":897},"end":{"line":21,"column":5,"offset":1238},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example takes a union type in a parameter that the system uses but must map it to another string before being used elsewhere. Adding a new value in the union type will fall into the default and hence cause TypeScript to go into the default case which calls a function that doesn't take the type passed -- it won't compile.","position":{"start":{"line":23,"column":1,"offset":1240},"end":{"line":23,"column":327,"offset":1566},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1240},"end":{"line":23,"column":327,"offset":1566},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is important for any enum or union that is threated. The exhaustive check function can be written once and reused across your application. It's short to write and will help you not to have a runtime mismatch between during mapping of values.","position":{"start":{"line":25,"column":1,"offset":1568},"end":{"line":25,"column":247,"offset":1814},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1568},"end":{"line":25,"column":247,"offset":1814},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"TypeScript Exhaustive Check\",\"date\":\"2018-05-08\",\"categories\":[\"typescript\"]}","position":{"start":{"line":28,"column":1,"offset":1817},"end":{"line":28,"column":116,"offset":1932},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":116,"offset":1932}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript Exhaustive Check\",\n  \"date\": \"2018-05-08\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There is a time where you have a range of value and a function that must act when all entries of the data. In TypeScript, an enum or a union of value can define the set. The problem is that these sets can change in time. The ideal treatment is having TypeScript to notice the developer that a value is missing. The removal of a choice is handled by default since the value doesn't exist, hence TypeScript won't compile. An exhaustive check needs to be placed to manage any new value.\"), mdx(\"p\", null, \"Exhaustive check leverage the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"never\"), \" type. In TypeScript, we can create a default choice that calls a method that takes for parameter a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"never\"), \" type. Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"never\"), \" primitive is a subtype of all type, you cannot pass the parameter of your function. TypeScript won't compile if a potential path, a missing value, slips into the function. However, it compiles in the case that all values of the set are present.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"public convertToHighChartType(type: MetricsChartType): string { \\n  switch (type) { \\n    case \\\"Line\\\": \\n      return \\\"line\\\"; \\n    case \\\"AreaDiff\\\": \\n      return \\\"area\\\"; \\n    default: \\n      return exhaustiveCheck(type); \\n    } \\n}\\n\\nexport function exhaustiveCheck(type: never): never { \\n  throw new Error(\\\"Missing type\\\"); \\n} \\n\")), mdx(\"p\", null, \"The example takes a union type in a parameter that the system uses but must map it to another string before being used elsewhere. Adding a new value in the union type will fall into the default and hence cause TypeScript to go into the default case which calls a function that doesn't take the type passed -- it won't compile.\"), mdx(\"p\", null, \"This is important for any enum or union that is threated. The exhaustive check function can be written once and reused across your application. It's short to write and will help you not to have a runtime mismatch between during mapping of values.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"TypeScript Exhaustive Check\",\n  \"date\": \"2018-05-08\",\n  \"categories\": [\"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`There is a time where you have a range of value and a function that must act when all entries of the data. In TypeScript, an enum or a union of value can define the set. The problem is that these sets can change in time. The ideal treatment is having TypeScript to notice the developer that a value is missing. The removal of a choice is handled by default since the value doesn't exist, hence TypeScript won't compile. An exhaustive check needs to be placed to manage any new value.`}</p>\n    <p>{`Exhaustive check leverage the `}<inlineCode parentName=\"p\">{`never`}</inlineCode>{` type. In TypeScript, we can create a default choice that calls a method that takes for parameter a `}<inlineCode parentName=\"p\">{`never`}</inlineCode>{` type. Since `}<inlineCode parentName=\"p\">{`never`}</inlineCode>{` primitive is a subtype of all type, you cannot pass the parameter of your function. TypeScript won't compile if a potential path, a missing value, slips into the function. However, it compiles in the case that all values of the set are present.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public convertToHighChartType(type: MetricsChartType): string { \n  switch (type) { \n    case \"Line\": \n      return \"line\"; \n    case \"AreaDiff\": \n      return \"area\"; \n    default: \n      return exhaustiveCheck(type); \n    } \n}\n\nexport function exhaustiveCheck(type: never): never { \n  throw new Error(\"Missing type\"); \n} \n`}</code></pre>\n    <p>{`The example takes a union type in a parameter that the system uses but must map it to another string before being used elsewhere. Adding a new value in the union type will fall into the default and hence cause TypeScript to go into the default case which calls a function that doesn't take the type passed -- it won't compile.`}</p>\n    <p>{`This is important for any enum or union that is threated. The exhaustive check function can be written once and reused across your application. It's short to write and will help you not to have a runtime mismatch between during mapping of values.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}