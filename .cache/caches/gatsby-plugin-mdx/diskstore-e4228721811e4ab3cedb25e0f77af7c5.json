{"expireTime":9007200886478398000,"key":"gatsby-plugin-mdx-entire-payload-a62138dfe4dcd8e0a49191d3ff16d56e--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You may pass manually the information but would it be easier if the http handler could read the session information?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":117,"offset":117},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":117,"offset":117},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be done with .Net Framework easily. In theory, this should not be a problem because the handler is in the server. It only needs to provide the session of the current user. To do, you need to use special interface that will allow you to reach this information.","position":{"start":{"line":4,"column":1,"offset":119},"end":{"line":4,"column":269,"offset":387},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":119},"end":{"line":4,"column":269,"offset":387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This interface is called ","position":{"start":{"line":6,"column":1,"offset":389},"end":{"line":6,"column":26,"offset":414},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"IReadOnlySessionState","position":{"start":{"line":6,"column":27,"offset":415},"end":{"line":6,"column":48,"offset":436},"indent":[]}}],"position":{"start":{"line":6,"column":26,"offset":414},"end":{"line":6,"column":49,"offset":437},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":6,"column":49,"offset":437},"end":{"line":6,"column":53,"offset":441},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"IRequiresSessionState","position":{"start":{"line":6,"column":54,"offset":442},"end":{"line":6,"column":75,"offset":463},"indent":[]}}],"position":{"start":{"line":6,"column":53,"offset":441},"end":{"line":6,"column":76,"offset":464},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":76,"offset":464},"end":{"line":6,"column":77,"offset":465},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":389},"end":{"line":6,"column":77,"offset":465},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example:","position":{"start":{"line":8,"column":1,"offset":467},"end":{"line":8,"column":20,"offset":486},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":467},"end":{"line":8,"column":20,"offset":486},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"\n\n<% @ webhandler language=\"C#\" class=\"MyClass\" %>\n\nusing System; using System.Web; using System.Web.SessionState;\n\npublic class MyClass: IHttpHandler, IReadOnlySessionState { public bool IsReusable { get { return true; } }\n\npublic void ProcessRequest(HttpContext ctx) { ctx.Response.Write(ctx.Session[\"ID\"]); } }\n\n","position":{"start":{"line":11,"column":1,"offset":489},"end":{"line":23,"column":4,"offset":818},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This example show you how to get the ID session's variable from the HttpHandler.","position":{"start":{"line":25,"column":1,"offset":820},"end":{"line":25,"column":81,"offset":900},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":820},"end":{"line":25,"column":81,"offset":900},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second interface ","position":{"start":{"line":27,"column":1,"offset":902},"end":{"line":27,"column":22,"offset":923},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"IRequiresSessionState","position":{"start":{"line":27,"column":23,"offset":924},"end":{"line":27,"column":44,"offset":945},"indent":[]}}],"position":{"start":{"line":27,"column":22,"offset":923},"end":{"line":27,"column":45,"offset":946},"indent":[]}},{"type":"text","value":" is the same but will let you write also in the session.","position":{"start":{"line":27,"column":45,"offset":946},"end":{"line":27,"column":101,"offset":1002},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":902},"end":{"line":27,"column":101,"offset":1002},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to access Session information from HttpHandler (Ashx file)\",\"date\":\"2011-10-18\",\"categories\":[\"asp-net\",\"c-sharp\"]}","position":{"start":{"line":30,"column":1,"offset":1005},"end":{"line":30,"column":158,"offset":1162},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":30,"column":158,"offset":1162}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to access Session information from HttpHandler (Ashx file)\",\n  \"date\": \"2011-10-18\",\n  \"categories\": [\"asp-net\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You may pass manually the information but would it be easier if the http handler could read the session information?\"), mdx(\"p\", null, \"This can be done with .Net Framework easily. In theory, this should not be a problem because the handler is in the server. It only needs to provide the session of the current user. To do, you need to use special interface that will allow you to reach this information.\"), mdx(\"p\", null, \"This interface is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IReadOnlySessionState\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IRequiresSessionState\"), \".\"), mdx(\"p\", null, \"Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"\\n\\n<% @ webhandler language=\\\"C#\\\" class=\\\"MyClass\\\" %>\\n\\nusing System; using System.Web; using System.Web.SessionState;\\n\\npublic class MyClass: IHttpHandler, IReadOnlySessionState { public bool IsReusable { get { return true; } }\\n\\npublic void ProcessRequest(HttpContext ctx) { ctx.Response.Write(ctx.Session[\\\"ID\\\"]); } }\\n\\n\\n\")), mdx(\"p\", null, \"This example show you how to get the ID session's variable from the HttpHandler.\"), mdx(\"p\", null, \"The second interface \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IRequiresSessionState\"), \" is the same but will let you write also in the session.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to access Session information from HttpHandler (Ashx file)\",\n  \"date\": \"2011-10-18\",\n  \"categories\": [\"asp-net\", \"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You may pass manually the information but would it be easier if the http handler could read the session information?`}</p>\n    <p>{`This can be done with .Net Framework easily. In theory, this should not be a problem because the handler is in the server. It only needs to provide the session of the current user. To do, you need to use special interface that will allow you to reach this information.`}</p>\n    <p>{`This interface is called `}<em parentName=\"p\">{`IReadOnlySessionState`}</em>{` or `}<em parentName=\"p\">{`IRequiresSessionState`}</em>{`.`}</p>\n    <p>{`Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`\n\n<% @ webhandler language=\"C#\" class=\"MyClass\" %>\n\nusing System; using System.Web; using System.Web.SessionState;\n\npublic class MyClass: IHttpHandler, IReadOnlySessionState { public bool IsReusable { get { return true; } }\n\npublic void ProcessRequest(HttpContext ctx) { ctx.Response.Write(ctx.Session[\"ID\"]); } }\n\n\n`}</code></pre>\n    <p>{`This example show you how to get the ID session's variable from the HttpHandler.`}</p>\n    <p>{`The second interface `}<em parentName=\"p\">{`IRequiresSessionState`}</em>{` is the same but will let you write also in the session.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}