{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-9c64b546203fc548e215bd1a49034190--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In some scenario, your database table may look different from your classes. You could have a class that contain an object which is a subdivision of some data with high cohesive representation and in the same time you may not want to divide this information in a 1-1 table. This is often the case if you cannot refactor an existing database or the case where information belong in a single table but since the data is conceptually better to be together in a second object that you need to be different from your database. In that case, Entity Framework call this scenario ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":572,"offset":572},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"\"Complex Type\"","position":{"start":{"line":2,"column":574,"offset":574},"end":{"line":2,"column":588,"offset":588},"indent":[]}}],"position":{"start":{"line":2,"column":572,"offset":572},"end":{"line":2,"column":590,"offset":590},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":590,"offset":590},"end":{"line":2,"column":591,"offset":591},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":591,"offset":591},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let say that you have a table with these fields:","position":{"start":{"line":4,"column":1,"offset":593},"end":{"line":4,"column":49,"offset":641},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":593},"end":{"line":4,"column":49,"offset":641},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"[Table] -Field1 -Field2 -Field3 -Field4","position":{"start":{"line":6,"column":1,"offset":643},"end":{"line":6,"column":42,"offset":684},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":643},"end":{"line":6,"column":42,"offset":684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"And let say that you end up having classes like this:","position":{"start":{"line":8,"column":1,"offset":686},"end":{"line":8,"column":54,"offset":739},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":686},"end":{"line":8,"column":54,"offset":739},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"[Class1] -Field1 -Field2 -Class2 object here  [Class2] -Field3 -Field4","position":{"start":{"line":10,"column":1,"offset":741},"end":{"line":10,"column":73,"offset":813},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":741},"end":{"line":10,"column":73,"offset":813},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In fact, as you can see, the Class1 can access Class2 data with the property Class2. For example : myClass1.Class2.Field3.","position":{"start":{"line":12,"column":1,"offset":815},"end":{"line":12,"column":123,"offset":937},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":815},"end":{"line":12,"column":123,"offset":937},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To be able to map automatically data with Entity Framework, you need to setup a complex type.","position":{"start":{"line":14,"column":1,"offset":939},"end":{"line":14,"column":94,"offset":1032},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":939},"end":{"line":14,"column":94,"offset":1032},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, you need to ensure that the property doesn't have a null value. This mean that you have to initialize this property. The best way is to initialize the inner object (Class2) in the constructor of the main class (Class1).","position":{"start":{"line":16,"column":1,"offset":1034},"end":{"line":16,"column":234,"offset":1267},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1034},"end":{"line":16,"column":234,"offset":1267},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Second, Entity Framework will do his mapping of the property inside the inner object with the property name of this one. That mean that Entity Framework will think that the table look like this:","position":{"start":{"line":18,"column":1,"offset":1269},"end":{"line":18,"column":195,"offset":1463},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1269},"end":{"line":18,"column":195,"offset":1463},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"[Table] -Field1 -Field2 -Class2_Field3 -Class2_Field4","position":{"start":{"line":20,"column":1,"offset":1465},"end":{"line":20,"column":56,"offset":1520},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1465},"end":{"line":20,"column":56,"offset":1520},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you do not want to alter your table, you will need to configure the Database Context.","position":{"start":{"line":22,"column":1,"offset":1522},"end":{"line":22,"column":89,"offset":1610},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1522},"end":{"line":22,"column":89,"offset":1610},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configuration.Add(new MyTable2Configuration()); //Add subsequent configuration... }\n\npublic class MyTable2Configuration: ComplexTypeConfiguration<Class2> { public MyTable2Configuration() { Property(o => o.Field3).HasColumnName(\"Field3\"); Property(o => o.Field4).HasColumnName(\"Field4\"); } } ","position":{"start":{"line":25,"column":1,"offset":1613},"end":{"line":29,"column":4,"offset":2003},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You do not have to configure the Table1 class, only the complex type. If you need more information about Complex Type, you can always check this ","position":{"start":{"line":31,"column":1,"offset":2005},"end":{"line":31,"column":146,"offset":2150},"indent":[]}},{"type":"link","title":null,"url":"http://weblogs.asp.net/manavi/archive/2011/03/28/associations-in-ef-4-1-code-first-part-2-complex-types.aspx","children":[{"type":"text","value":"blog","position":{"start":{"line":31,"column":147,"offset":2151},"end":{"line":31,"column":151,"offset":2155},"indent":[]}}],"position":{"start":{"line":31,"column":146,"offset":2150},"end":{"line":31,"column":262,"offset":2266},"indent":[]}},{"type":"text","value":" which give additional information.","position":{"start":{"line":31,"column":262,"offset":2266},"end":{"line":31,"column":297,"offset":2301},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2005},"end":{"line":31,"column":297,"offset":2301},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to map 1 table to 2 objects with Entity Framework 4.3 Code-First (POCO)?\",\"date\":\"2012-06-20\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":34,"column":1,"offset":2304},"end":{"line":34,"column":171,"offset":2474},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":34,"column":171,"offset":2474}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to map 1 table to 2 objects with Entity Framework 4.3 Code-First (POCO)?\",\n  \"date\": \"2012-06-20\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some scenario, your database table may look different from your classes. You could have a class that contain an object which is a subdivision of some data with high cohesive representation and in the same time you may not want to divide this information in a 1-1 table. This is often the case if you cannot refactor an existing database or the case where information belong in a single table but since the data is conceptually better to be together in a second object that you need to be different from your database. In that case, Entity Framework call this scenario \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"Complex Type\\\"\"), \".\"), mdx(\"p\", null, \"Let say that you have a table with these fields:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Table] -Field1 -Field2 -Field3 -Field4\")), mdx(\"p\", null, \"And let say that you end up having classes like this:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Class1] -Field1 -Field2 -Class2 object here  [Class2] -Field3 -Field4\")), mdx(\"p\", null, \"In fact, as you can see, the Class1 can access Class2 data with the property Class2. For example : myClass1.Class2.Field3.\"), mdx(\"p\", null, \"To be able to map automatically data with Entity Framework, you need to setup a complex type.\"), mdx(\"p\", null, \"First of all, you need to ensure that the property doesn't have a null value. This mean that you have to initialize this property. The best way is to initialize the inner object (Class2) in the constructor of the main class (Class1).\"), mdx(\"p\", null, \"Second, Entity Framework will do his mapping of the property inside the inner object with the property name of this one. That mean that Entity Framework will think that the table look like this:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Table] -Field1 -Field2 -Class2_Field3 -Class2_Field4\")), mdx(\"p\", null, \"If you do not want to alter your table, you will need to configure the Database Context.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configuration.Add(new MyTable2Configuration()); //Add subsequent configuration... }\\n\\npublic class MyTable2Configuration: ComplexTypeConfiguration<Class2> { public MyTable2Configuration() { Property(o => o.Field3).HasColumnName(\\\"Field3\\\"); Property(o => o.Field4).HasColumnName(\\\"Field4\\\"); } } \\n\")), mdx(\"p\", null, \"You do not have to configure the Table1 class, only the complex type. If you need more information about Complex Type, you can always check this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://weblogs.asp.net/manavi/archive/2011/03/28/associations-in-ef-4-1-code-first-part-2-complex-types.aspx\"\n  }, \"blog\"), \" which give additional information.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to map 1 table to 2 objects with Entity Framework 4.3 Code-First (POCO)?\",\n  \"date\": \"2012-06-20\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In some scenario, your database table may look different from your classes. You could have a class that contain an object which is a subdivision of some data with high cohesive representation and in the same time you may not want to divide this information in a 1-1 table. This is often the case if you cannot refactor an existing database or the case where information belong in a single table but since the data is conceptually better to be together in a second object that you need to be different from your database. In that case, Entity Framework call this scenario `}<strong parentName=\"p\">{`\"Complex Type\"`}</strong>{`.`}</p>\n    <p>{`Let say that you have a table with these fields:`}</p>\n    <p><inlineCode parentName=\"p\">{`[Table] -Field1 -Field2 -Field3 -Field4`}</inlineCode></p>\n    <p>{`And let say that you end up having classes like this:`}</p>\n    <p><inlineCode parentName=\"p\">{`[Class1] -Field1 -Field2 -Class2 object here  [Class2] -Field3 -Field4`}</inlineCode></p>\n    <p>{`In fact, as you can see, the Class1 can access Class2 data with the property Class2. For example : myClass1.Class2.Field3.`}</p>\n    <p>{`To be able to map automatically data with Entity Framework, you need to setup a complex type.`}</p>\n    <p>{`First of all, you need to ensure that the property doesn't have a null value. This mean that you have to initialize this property. The best way is to initialize the inner object (Class2) in the constructor of the main class (Class1).`}</p>\n    <p>{`Second, Entity Framework will do his mapping of the property inside the inner object with the property name of this one. That mean that Entity Framework will think that the table look like this:`}</p>\n    <p><inlineCode parentName=\"p\">{`[Table] -Field1 -Field2 -Class2_Field3 -Class2_Field4`}</inlineCode></p>\n    <p>{`If you do not want to alter your table, you will need to configure the Database Context.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Configuration.Add(new MyTable2Configuration()); //Add subsequent configuration... }\n\npublic class MyTable2Configuration: ComplexTypeConfiguration<Class2> { public MyTable2Configuration() { Property(o => o.Field3).HasColumnName(\"Field3\"); Property(o => o.Field4).HasColumnName(\"Field4\"); } } \n`}</code></pre>\n    <p>{`You do not have to configure the Table1 class, only the complex type. If you need more information about Complex Type, you can always check this `}<a parentName=\"p\" {...{\n        \"href\": \"http://weblogs.asp.net/manavi/archive/2011/03/28/associations-in-ef-4-1-code-first-part-2-complex-types.aspx\"\n      }}>{`blog`}</a>{` which give additional information.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}