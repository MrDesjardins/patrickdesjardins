{"expireTime":9007200886478397000,"key":"gatsby-plugin-mdx-entire-payload-e98cc433706f4f5bb4ca04f8f2f1ef57--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Let say that you have an exception on the server side and you want to specify this error to the client, what could you do?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":123,"offset":123},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":123,"offset":123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The easiest way is to return the error into the return value directly:","position":{"start":{"line":4,"column":1,"offset":125},"end":{"line":4,"column":71,"offset":195},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":125},"end":{"line":4,"column":71,"offset":195},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public JsonResult Create(MyObject myObject) { //AllFine return Json(new { IsCreated = True, Content = ViewGenerator(myObject)); //Error return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); } ","position":{"start":{"line":7,"column":1,"offset":198},"end":{"line":9,"column":4,"offset":469},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the Javascript, we just need to take the error message and display it. ```typescript\n$.ajax({ type: \"POST\", dataType: \"json\", url: \"MyObjectController/Create\", data: JSON.stringify(myObjectJson), success: function (result) { if(result.IsCreated) { //... } else { alert(result.ErrorMessage); } } }); ","position":{"start":{"line":11,"column":1,"offset":471},"end":{"line":12,"column":215,"offset":773},"indent":[1]}}],"position":{"start":{"line":11,"column":1,"offset":471},"end":{"line":12,"column":215,"offset":773},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"\n\nThis is a correct way to do it. But sometime, you may want to return handled error this way because you \"control\" the situation and do something else for unhandled error. This could be the case of any error that you do not catch with precision but you still need to return something to the client. Since you are using Ajax you may not want to redirect your user to another page but just to display an alert that the operation is unsuccessful.\n\nThis can be done by changing the Response Header with a Http Code that is different from the normal 200.\n\n\n```csharp\n public JsonResult Create(MyObject myObject) { //AllFine return Json(new { IsCreated = True, Content = ViewGenerator(myObject));\n\n//Use input may be wrong but nothing crashed return Json(new { IsCreated = False, Content = ViewGenerator(myObject)); //Error Response.StatusCode = (int)HttpStatusCode.InternalServerError; return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); } ","position":{"start":{"line":13,"column":1,"offset":774},"end":{"line":25,"column":4,"offset":1785},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Javascript can than go in three different direction:","position":{"start":{"line":27,"column":1,"offset":1787},"end":{"line":27,"column":57,"offset":1843},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1787},"end":{"line":27,"column":57,"offset":1843},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$.ajax({ type: \"POST\", dataType: \"json\", url: \"MyObjectController/Create\", data: JSON.stringify(myObjectJson), success: function (result) { if(result.IsCreated) { //... ALL FINE } else { //... Use input may be wrong but nothing crashed } }, error: function (jqXHR, textStatus, errorThrown) { alert(\"Error:\" + jQuery.parseJSON(jqXHR.responseText).Info); //Error\n\n} }); ","position":{"start":{"line":29,"column":1,"offset":1845},"end":{"line":33,"column":5,"offset":2232},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This way, you handle in a clear way how to display error to the user or to display problem with his inputs. It also give you the possibility to do it in a clean way at the server side and also to the client side.","position":{"start":{"line":36,"column":1,"offset":2235},"end":{"line":36,"column":213,"offset":2447},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2235},"end":{"line":36,"column":213,"offset":2447},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For you curiosity, if you want to play with different status you can go see in ","position":{"start":{"line":38,"column":1,"offset":2449},"end":{"line":38,"column":80,"offset":2528},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"System.Net","position":{"start":{"line":38,"column":82,"offset":2530},"end":{"line":38,"column":92,"offset":2540},"indent":[]}}],"position":{"start":{"line":38,"column":80,"offset":2528},"end":{"line":38,"column":94,"offset":2542},"indent":[]}},{"type":"text","value":" the enumeration ","position":{"start":{"line":38,"column":94,"offset":2542},"end":{"line":38,"column":111,"offset":2559},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"HttpStatusCode","position":{"start":{"line":38,"column":113,"offset":2561},"end":{"line":38,"column":127,"offset":2575},"indent":[]}}],"position":{"start":{"line":38,"column":111,"offset":2559},"end":{"line":38,"column":129,"offset":2577},"indent":[]}},{"type":"text","value":" all different possible values.","position":{"start":{"line":38,"column":129,"offset":2577},"end":{"line":38,"column":160,"offset":2608},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2449},"end":{"line":38,"column":160,"offset":2608},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is it:","position":{"start":{"line":40,"column":1,"offset":2610},"end":{"line":40,"column":12,"offset":2621},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2610},"end":{"line":40,"column":12,"offset":2621},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" namespace System.Net { public enum HttpStatusCode { Continue = 100, SwitchingProtocols = 101, OK = 200, Created = 201, Accepted = 202, NonAuthoritativeInformation = 203, NoContent = 204, ResetContent = 205, PartialContent = 206, Ambiguous = 300, MultipleChoices = 300, Moved = 301, MovedPermanently = 301, Found = 302, Redirect = 302, RedirectMethod = 303, SeeOther = 303, NotModified = 304, UseProxy = 305, Unused = 306, RedirectKeepVerb = 307, TemporaryRedirect = 307, BadRequest = 400, Unauthorized = 401, PaymentRequired = 402, Forbidden = 403, NotFound = 404, MethodNotAllowed = 405, NotAcceptable = 406, ProxyAuthenticationRequired = 407, RequestTimeout = 408, Conflict = 409, Gone = 410, LengthRequired = 411, PreconditionFailed = 412, RequestEntityTooLarge = 413, RequestUriTooLong = 414, UnsupportedMediaType = 415, RequestedRangeNotSatisfiable = 416, ExpectationFailed = 417, InternalServerError = 500, NotImplemented = 501, BadGateway = 502, ServiceUnavailable = 503, GatewayTimeout = 504, HttpVersionNotSupported = 505, } } ","position":{"start":{"line":43,"column":1,"offset":2624},"end":{"line":45,"column":4,"offset":3675},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Returning a JsonResult within the Error function of JQuery Ajax\",\"date\":\"2012-04-04\",\"categories\":[\"asp-mvc\",\"javascript\"]}","position":{"start":{"line":48,"column":1,"offset":3678},"end":{"line":48,"column":162,"offset":3839},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":48,"column":162,"offset":3839}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Returning a JsonResult within the Error function of JQuery Ajax\",\n  \"date\": \"2012-04-04\",\n  \"categories\": [\"asp-mvc\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let say that you have an exception on the server side and you want to specify this error to the client, what could you do?\"), mdx(\"p\", null, \"The easiest way is to return the error into the return value directly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public JsonResult Create(MyObject myObject) { //AllFine return Json(new { IsCreated = True, Content = ViewGenerator(myObject)); //Error return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); } \\n\")), mdx(\"p\", null, \"In the Javascript, we just need to take the error message and display it. ```typescript\\n$.ajax({ type: \\\"POST\\\", dataType: \\\"json\\\", url: \\\"MyObjectController/Create\\\", data: JSON.stringify(myObjectJson), success: function (result) { if(result.IsCreated) { //... } else { alert(result.ErrorMessage); } } }); \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\nThis is a correct way to do it. But sometime, you may want to return handled error this way because you \\\"control\\\" the situation and do something else for unhandled error. This could be the case of any error that you do not catch with precision but you still need to return something to the client. Since you are using Ajax you may not want to redirect your user to another page but just to display an alert that the operation is unsuccessful.\\n\\nThis can be done by changing the Response Header with a Http Code that is different from the normal 200.\\n\\n\\n```csharp\\n public JsonResult Create(MyObject myObject) { //AllFine return Json(new { IsCreated = True, Content = ViewGenerator(myObject));\\n\\n//Use input may be wrong but nothing crashed return Json(new { IsCreated = False, Content = ViewGenerator(myObject)); //Error Response.StatusCode = (int)HttpStatusCode.InternalServerError; return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); } \\n\")), mdx(\"p\", null, \"The Javascript can than go in three different direction:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$.ajax({ type: \\\"POST\\\", dataType: \\\"json\\\", url: \\\"MyObjectController/Create\\\", data: JSON.stringify(myObjectJson), success: function (result) { if(result.IsCreated) { //... ALL FINE } else { //... Use input may be wrong but nothing crashed } }, error: function (jqXHR, textStatus, errorThrown) { alert(\\\"Error:\\\" + jQuery.parseJSON(jqXHR.responseText).Info); //Error\\n\\n} }); \\n\")), mdx(\"p\", null, \"This way, you handle in a clear way how to display error to the user or to display problem with his inputs. It also give you the possibility to do it in a clean way at the server side and also to the client side.\"), mdx(\"p\", null, \"For you curiosity, if you want to play with different status you can go see in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Net\"), \" the enumeration \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HttpStatusCode\"), \" all different possible values.\"), mdx(\"p\", null, \"Here is it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" namespace System.Net { public enum HttpStatusCode { Continue = 100, SwitchingProtocols = 101, OK = 200, Created = 201, Accepted = 202, NonAuthoritativeInformation = 203, NoContent = 204, ResetContent = 205, PartialContent = 206, Ambiguous = 300, MultipleChoices = 300, Moved = 301, MovedPermanently = 301, Found = 302, Redirect = 302, RedirectMethod = 303, SeeOther = 303, NotModified = 304, UseProxy = 305, Unused = 306, RedirectKeepVerb = 307, TemporaryRedirect = 307, BadRequest = 400, Unauthorized = 401, PaymentRequired = 402, Forbidden = 403, NotFound = 404, MethodNotAllowed = 405, NotAcceptable = 406, ProxyAuthenticationRequired = 407, RequestTimeout = 408, Conflict = 409, Gone = 410, LengthRequired = 411, PreconditionFailed = 412, RequestEntityTooLarge = 413, RequestUriTooLong = 414, UnsupportedMediaType = 415, RequestedRangeNotSatisfiable = 416, ExpectationFailed = 417, InternalServerError = 500, NotImplemented = 501, BadGateway = 502, ServiceUnavailable = 503, GatewayTimeout = 504, HttpVersionNotSupported = 505, } } \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Returning a JsonResult within the Error function of JQuery Ajax\",\n  \"date\": \"2012-04-04\",\n  \"categories\": [\"asp-mvc\", \"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Let say that you have an exception on the server side and you want to specify this error to the client, what could you do?`}</p>\n    <p>{`The easiest way is to return the error into the return value directly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public JsonResult Create(MyObject myObject) { //AllFine return Json(new { IsCreated = True, Content = ViewGenerator(myObject)); //Error return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); } \n`}</code></pre>\n    <p>{`In the Javascript, we just need to take the error message and display it. \\`\\`\\`typescript\n$.ajax({ type: \"POST\", dataType: \"json\", url: \"MyObjectController/Create\", data: JSON.stringify(myObjectJson), success: function (result) { if(result.IsCreated) { //... } else { alert(result.ErrorMessage); } } }); `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n\nThis is a correct way to do it. But sometime, you may want to return handled error this way because you \"control\" the situation and do something else for unhandled error. This could be the case of any error that you do not catch with precision but you still need to return something to the client. Since you are using Ajax you may not want to redirect your user to another page but just to display an alert that the operation is unsuccessful.\n\nThis can be done by changing the Response Header with a Http Code that is different from the normal 200.\n\n\n\\`\\`\\`csharp\n public JsonResult Create(MyObject myObject) { //AllFine return Json(new { IsCreated = True, Content = ViewGenerator(myObject));\n\n//Use input may be wrong but nothing crashed return Json(new { IsCreated = False, Content = ViewGenerator(myObject)); //Error Response.StatusCode = (int)HttpStatusCode.InternalServerError; return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); } \n`}</code></pre>\n    <p>{`The Javascript can than go in three different direction:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$.ajax({ type: \"POST\", dataType: \"json\", url: \"MyObjectController/Create\", data: JSON.stringify(myObjectJson), success: function (result) { if(result.IsCreated) { //... ALL FINE } else { //... Use input may be wrong but nothing crashed } }, error: function (jqXHR, textStatus, errorThrown) { alert(\"Error:\" + jQuery.parseJSON(jqXHR.responseText).Info); //Error\n\n} }); \n`}</code></pre>\n    <p>{`This way, you handle in a clear way how to display error to the user or to display problem with his inputs. It also give you the possibility to do it in a clean way at the server side and also to the client side.`}</p>\n    <p>{`For you curiosity, if you want to play with different status you can go see in `}<strong parentName=\"p\">{`System.Net`}</strong>{` the enumeration `}<strong parentName=\"p\">{`HttpStatusCode`}</strong>{` all different possible values.`}</p>\n    <p>{`Here is it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` namespace System.Net { public enum HttpStatusCode { Continue = 100, SwitchingProtocols = 101, OK = 200, Created = 201, Accepted = 202, NonAuthoritativeInformation = 203, NoContent = 204, ResetContent = 205, PartialContent = 206, Ambiguous = 300, MultipleChoices = 300, Moved = 301, MovedPermanently = 301, Found = 302, Redirect = 302, RedirectMethod = 303, SeeOther = 303, NotModified = 304, UseProxy = 305, Unused = 306, RedirectKeepVerb = 307, TemporaryRedirect = 307, BadRequest = 400, Unauthorized = 401, PaymentRequired = 402, Forbidden = 403, NotFound = 404, MethodNotAllowed = 405, NotAcceptable = 406, ProxyAuthenticationRequired = 407, RequestTimeout = 408, Conflict = 409, Gone = 410, LengthRequired = 411, PreconditionFailed = 412, RequestEntityTooLarge = 413, RequestUriTooLong = 414, UnsupportedMediaType = 415, RequestedRangeNotSatisfiable = 416, ExpectationFailed = 417, InternalServerError = 500, NotImplemented = 501, BadGateway = 502, ServiceUnavailable = 503, GatewayTimeout = 504, HttpVersionNotSupported = 505, } } \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}