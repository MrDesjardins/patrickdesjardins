{"expireTime":9007200886478387000,"key":"gatsby-plugin-mdx-entire-payload-25253fa0f05aa0a09555b5b4668ab2c1--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I see in a lot of system an abuse of primitive types. Instead of using a class for an entity, the use of primitive is used. Often, when additional needs is required, additional primitives are used which duplicate. Here is some basic example:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":242,"offset":242},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":242,"offset":242},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Item { public double Price{get;set;} public string Name{get;set;} } \n``` The problem is obvious, the _Item_ class should not be in a primitive type for the _Price_. The first reason is if later we need to have **additional information**, like for example the currency, you will be stuck with a second property. The problem become even more obvious if you have several money element for the same class. The class become clutters of properties. It is also way easier in the future to add additional property or method without having to change a lot of place in your software -- you change at one place, the class.\n\n\n```csharp\n public class Item { public double Price{get;set;} public int CurrencyTypeForPrice{get;set;} public double SuggestedPrice{get;set;} public int CurrencyTypeForSuggestedPrice{get;set;} public string Name{get;set;} } ","position":{"start":{"line":5,"column":1,"offset":245},"end":{"line":12,"column":4,"offset":1111},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second problem is when your application become big and you realize that you should have used decimal instead of double that you have to change at several places instead to a ","position":{"start":{"line":14,"column":1,"offset":1113},"end":{"line":14,"column":179,"offset":1291},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"single class","position":{"start":{"line":14,"column":181,"offset":1293},"end":{"line":14,"column":193,"offset":1305},"indent":[]}}],"position":{"start":{"line":14,"column":179,"offset":1291},"end":{"line":14,"column":195,"offset":1307},"indent":[]}},{"type":"text","value":". The third problem is about ","position":{"start":{"line":14,"column":195,"offset":1307},"end":{"line":14,"column":224,"offset":1336},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"operations","position":{"start":{"line":14,"column":226,"offset":1338},"end":{"line":14,"column":236,"offset":1348},"indent":[]}}],"position":{"start":{"line":14,"column":224,"offset":1336},"end":{"line":14,"column":238,"offset":1350},"indent":[]}},{"type":"text","value":". How can you compare two prices? You have to compare the double properties (the price) with the int property (the currency type) every time. Rather than having a class with the operator equal overriding that does it at one place, you have to do it everywhere.","position":{"start":{"line":14,"column":238,"offset":1350},"end":{"line":14,"column":498,"offset":1610},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1113},"end":{"line":14,"column":498,"offset":1610},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The forth problem is about passing information by parameter. When you have a single class, for example a ","position":{"start":{"line":16,"column":1,"offset":1612},"end":{"line":16,"column":106,"offset":1717},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Money","position":{"start":{"line":16,"column":108,"offset":1719},"end":{"line":16,"column":113,"offset":1724},"indent":[]}}],"position":{"start":{"line":16,"column":106,"offset":1717},"end":{"line":16,"column":115,"offset":1726},"indent":[]}},{"type":"text","value":" class instead of a decimal + type for currency, it is way cleaner to use. The fifth reason is when you are using ","position":{"start":{"line":16,"column":115,"offset":1726},"end":{"line":16,"column":229,"offset":1840},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Asp.Net MVC and Template","position":{"start":{"line":16,"column":231,"offset":1842},"end":{"line":16,"column":255,"offset":1866},"indent":[]}}],"position":{"start":{"line":16,"column":229,"offset":1840},"end":{"line":16,"column":257,"offset":1868},"indent":[]}},{"type":"text","value":". You can create a visual editor and display template for your entity type. For example, you could create a Money.cshtml which shows the right control for the user to allow him to select from a drop down the currency. Without a specific class for your entity you would have to create an Html helper that take two parameters: the amount and the currency.","position":{"start":{"line":16,"column":257,"offset":1868},"end":{"line":16,"column":610,"offset":2221},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1612},"end":{"line":16,"column":610,"offset":2221},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, you can add additional ","position":{"start":{"line":18,"column":1,"offset":2223},"end":{"line":18,"column":33,"offset":2255},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"validation","position":{"start":{"line":18,"column":35,"offset":2257},"end":{"line":18,"column":45,"offset":2267},"indent":[]}}],"position":{"start":{"line":18,"column":33,"offset":2255},"end":{"line":18,"column":47,"offset":2269},"indent":[]}},{"type":"text","value":". If you entity is for money than you can say that your money must always be positive. This also imply the advantage to be able to unit test at a single place instead of everywhere when you use your money logic.","position":{"start":{"line":18,"column":47,"offset":2269},"end":{"line":18,"column":258,"offset":2480},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":2223},"end":{"line":18,"column":258,"offset":2480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To conclude, you can see that their is several advantages like when refactoring your entity, when adding operations or when using framework like Asp.Net MVC. A cleaner code and less repetition is also very interesting. None but not the less, having a class instead of a primitive type allow you to unit tests logic on any logic about your entity.","position":{"start":{"line":20,"column":1,"offset":2482},"end":{"line":20,"column":347,"offset":2828},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2482},"end":{"line":20,"column":347,"offset":2828},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Never use Primitive Type for any Entities\",\"date\":\"2015-03-24\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":23,"column":1,"offset":2831},"end":{"line":23,"column":136,"offset":2966},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":136,"offset":2966}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Never use Primitive Type for any Entities\",\n  \"date\": \"2015-03-24\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I see in a lot of system an abuse of primitive types. Instead of using a class for an entity, the use of primitive is used. Often, when additional needs is required, additional primitives are used which duplicate. Here is some basic example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Item { public double Price{get;set;} public string Name{get;set;} } \\n``` The problem is obvious, the _Item_ class should not be in a primitive type for the _Price_. The first reason is if later we need to have **additional information**, like for example the currency, you will be stuck with a second property. The problem become even more obvious if you have several money element for the same class. The class become clutters of properties. It is also way easier in the future to add additional property or method without having to change a lot of place in your software -- you change at one place, the class.\\n\\n\\n```csharp\\n public class Item { public double Price{get;set;} public int CurrencyTypeForPrice{get;set;} public double SuggestedPrice{get;set;} public int CurrencyTypeForSuggestedPrice{get;set;} public string Name{get;set;} } \\n\")), mdx(\"p\", null, \"The second problem is when your application become big and you realize that you should have used decimal instead of double that you have to change at several places instead to a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"single class\"), \". The third problem is about \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"operations\"), \". How can you compare two prices? You have to compare the double properties (the price) with the int property (the currency type) every time. Rather than having a class with the operator equal overriding that does it at one place, you have to do it everywhere.\"), mdx(\"p\", null, \"The forth problem is about passing information by parameter. When you have a single class, for example a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Money\"), \" class instead of a decimal + type for currency, it is way cleaner to use. The fifth reason is when you are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Asp.Net MVC and Template\"), \". You can create a visual editor and display template for your entity type. For example, you could create a Money.cshtml which shows the right control for the user to allow him to select from a drop down the currency. Without a specific class for your entity you would have to create an Html helper that take two parameters: the amount and the currency.\"), mdx(\"p\", null, \"Finally, you can add additional \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"validation\"), \". If you entity is for money than you can say that your money must always be positive. This also imply the advantage to be able to unit test at a single place instead of everywhere when you use your money logic.\"), mdx(\"p\", null, \"To conclude, you can see that their is several advantages like when refactoring your entity, when adding operations or when using framework like Asp.Net MVC. A cleaner code and less repetition is also very interesting. None but not the less, having a class instead of a primitive type allow you to unit tests logic on any logic about your entity.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Never use Primitive Type for any Entities\",\n  \"date\": \"2015-03-24\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`I see in a lot of system an abuse of primitive types. Instead of using a class for an entity, the use of primitive is used. Often, when additional needs is required, additional primitives are used which duplicate. Here is some basic example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Item { public double Price{get;set;} public string Name{get;set;} } \n\\`\\`\\` The problem is obvious, the _Item_ class should not be in a primitive type for the _Price_. The first reason is if later we need to have **additional information**, like for example the currency, you will be stuck with a second property. The problem become even more obvious if you have several money element for the same class. The class become clutters of properties. It is also way easier in the future to add additional property or method without having to change a lot of place in your software -- you change at one place, the class.\n\n\n\\`\\`\\`csharp\n public class Item { public double Price{get;set;} public int CurrencyTypeForPrice{get;set;} public double SuggestedPrice{get;set;} public int CurrencyTypeForSuggestedPrice{get;set;} public string Name{get;set;} } \n`}</code></pre>\n    <p>{`The second problem is when your application become big and you realize that you should have used decimal instead of double that you have to change at several places instead to a `}<strong parentName=\"p\">{`single class`}</strong>{`. The third problem is about `}<strong parentName=\"p\">{`operations`}</strong>{`. How can you compare two prices? You have to compare the double properties (the price) with the int property (the currency type) every time. Rather than having a class with the operator equal overriding that does it at one place, you have to do it everywhere.`}</p>\n    <p>{`The forth problem is about passing information by parameter. When you have a single class, for example a `}<strong parentName=\"p\">{`Money`}</strong>{` class instead of a decimal + type for currency, it is way cleaner to use. The fifth reason is when you are using `}<strong parentName=\"p\">{`Asp.Net MVC and Template`}</strong>{`. You can create a visual editor and display template for your entity type. For example, you could create a Money.cshtml which shows the right control for the user to allow him to select from a drop down the currency. Without a specific class for your entity you would have to create an Html helper that take two parameters: the amount and the currency.`}</p>\n    <p>{`Finally, you can add additional `}<strong parentName=\"p\">{`validation`}</strong>{`. If you entity is for money than you can say that your money must always be positive. This also imply the advantage to be able to unit test at a single place instead of everywhere when you use your money logic.`}</p>\n    <p>{`To conclude, you can see that their is several advantages like when refactoring your entity, when adding operations or when using framework like Asp.Net MVC. A cleaner code and less repetition is also very interesting. None but not the less, having a class instead of a primitive type allow you to unit tests logic on any logic about your entity.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}