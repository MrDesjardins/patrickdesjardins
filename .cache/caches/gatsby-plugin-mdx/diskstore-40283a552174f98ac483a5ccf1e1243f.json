{"expireTime":9007200886478389000,"key":"gatsby-plugin-mdx-entire-payload-43eec2da50c14d164b19f4b5c14e30ad--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Imagine that you are doing a commit and you forgot to bring a file or multiples files. You can do a second commit but this would have the consequence to have two commits for something that in fact would have been in one. Git allows you to alter a past commit with the amend parameter.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":285,"offset":285},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":285,"offset":285},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, here is a small commit of 1 file. ``` \n git add main.cs git commit -m \"This is my first commit\" ","position":{"start":{"line":4,"column":1,"offset":287},"end":{"line":5,"column":58,"offset":396},"indent":[1]}}],"position":{"start":{"line":4,"column":1,"offset":287},"end":{"line":5,"column":58,"offset":396},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"\nThis is how to add a second file to this first commit. ``` \n git add util.cs git commit --amend --no-edit ","position":{"start":{"line":6,"column":1,"offset":397},"end":{"line":10,"column":5,"offset":514},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":12,"column":1,"offset":516},"end":{"line":12,"column":5,"offset":520},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"--no-edit","position":{"start":{"line":12,"column":7,"offset":522},"end":{"line":12,"column":16,"offset":531},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":520},"end":{"line":12,"column":18,"offset":533},"indent":[]}},{"type":"text","value":" parameter specify that we do not want to modify the message. If you are doing a git log, you will see a single commit.","position":{"start":{"line":12,"column":18,"offset":533},"end":{"line":12,"column":137,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":516},"end":{"line":12,"column":137,"offset":652},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Git Adding a File to a Previous Commit\",\"date\":\"2014-12-06\",\"categories\":[\"git\"]}","position":{"start":{"line":15,"column":1,"offset":655},"end":{"line":15,"column":120,"offset":774},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":120,"offset":774}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git Adding a File to a Previous Commit\",\n  \"date\": \"2014-12-06\",\n  \"categories\": [\"git\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Imagine that you are doing a commit and you forgot to bring a file or multiples files. You can do a second commit but this would have the consequence to have two commits for something that in fact would have been in one. Git allows you to alter a past commit with the amend parameter.\"), mdx(\"p\", null, \"For example, here is a small commit of 1 file. ```\\ngit add main.cs git commit -m \\\"This is my first commit\\\" \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nThis is how to add a second file to this first commit. ``` \\n git add util.cs git commit --amend --no-edit \\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"--no-edit\"), \" parameter specify that we do not want to modify the message. If you are doing a git log, you will see a single commit.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Git Adding a File to a Previous Commit\",\n  \"date\": \"2014-12-06\",\n  \"categories\": [\"git\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Imagine that you are doing a commit and you forgot to bring a file or multiples files. You can do a second commit but this would have the consequence to have two commits for something that in fact would have been in one. Git allows you to alter a past commit with the amend parameter.`}</p>\n    <p>{`For example, here is a small commit of 1 file. \\`\\`\\`\ngit add main.cs git commit -m \"This is my first commit\" `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\nThis is how to add a second file to this first commit. \\`\\`\\` \n git add util.cs git commit --amend --no-edit \n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`--no-edit`}</strong>{` parameter specify that we do not want to modify the message. If you are doing a git log, you will see a single commit.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}