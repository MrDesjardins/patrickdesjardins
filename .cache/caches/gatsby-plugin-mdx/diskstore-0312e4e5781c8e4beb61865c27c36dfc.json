{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-ae82ddb8f5abb94c9d0e3c2d33da7eae--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Linear search is a basic search that is slow. Slow in the magnitude of having an asymptotic analysis of a BigO of O(n). This is the worse case is that the item is at the last position which require to traverse the whole array. Linear search moves one to one and check the value. It has the advantage of not needing to have an input sorted.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":340,"offset":340},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":340,"offset":340},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var arrayToSearch = [7, 23, 4, 23, 87, 2, 6, 3, 213, 43, 34, 1, 76, 43];\n\nconsole.log(\"Found at position :\" + linearSearch(arrayToSearch, 34));\n\nfunction linearSearch(arrayToSearch, valueToSearch) {\n  var length = arrayToSearch.length;\n  for (var i = 0; i < length; i++) {\n    if (arrayToSearch[i] === valueToSearch) {\n      return i;\n    }\n  }\n  return -1;\n}","position":{"start":{"line":4,"column":1,"offset":342},"end":{"line":18,"column":4,"offset":719},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a naive implementation where -1 is returned in the case of no element found. As you can see, the function is under the invocation of the function. This is possible because of JavaScript's hoisting mechanism that move function declaration at the beginning of the scope (not function expression).","position":{"start":{"line":20,"column":1,"offset":721},"end":{"line":20,"column":303,"offset":1023},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":721},"end":{"line":20,"column":303,"offset":1023},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A recursive solution is also possible :","position":{"start":{"line":22,"column":1,"offset":1025},"end":{"line":22,"column":40,"offset":1064},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1025},"end":{"line":22,"column":40,"offset":1064},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"console.log(\"Found at position :\" + linearSearch(arrayToSearch, 34, 0));\nfunction linearSearch(arrayToSearch, valueToSearch, index) {\n  if (arrayToSearch.length === 0) {\n    return -1;\n  }\n  if (arrayToSearch[0] === valueToSearch) {\n    return index;\n  }\n  return linearSearch(arrayToSearch.slice(1), valueToSearch, index + 1);\n}","position":{"start":{"line":24,"column":1,"offset":1066},"end":{"line":35,"column":4,"offset":1413},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The idea is to recursively remove the first element of the array and pass it down to the method again and again until the array is empty or the value is found.","position":{"start":{"line":37,"column":1,"offset":1415},"end":{"line":37,"column":160,"offset":1574},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1415},"end":{"line":37,"column":160,"offset":1574},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Linear Search\",\"date\":\"2017-06-12\",\"categories\":[\"javascript\"]}","position":{"start":{"line":40,"column":1,"offset":1577},"end":{"line":40,"column":113,"offset":1689},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":40,"column":113,"offset":1689}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Linear Search\",\n  \"date\": \"2017-06-12\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Linear search is a basic search that is slow. Slow in the magnitude of having an asymptotic analysis of a BigO of O(n). This is the worse case is that the item is at the last position which require to traverse the whole array. Linear search moves one to one and check the value. It has the advantage of not needing to have an input sorted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var arrayToSearch = [7, 23, 4, 23, 87, 2, 6, 3, 213, 43, 34, 1, 76, 43];\\n\\nconsole.log(\\\"Found at position :\\\" + linearSearch(arrayToSearch, 34));\\n\\nfunction linearSearch(arrayToSearch, valueToSearch) {\\n  var length = arrayToSearch.length;\\n  for (var i = 0; i < length; i++) {\\n    if (arrayToSearch[i] === valueToSearch) {\\n      return i;\\n    }\\n  }\\n  return -1;\\n}\\n\")), mdx(\"p\", null, \"Here is a naive implementation where -1 is returned in the case of no element found. As you can see, the function is under the invocation of the function. This is possible because of JavaScript's hoisting mechanism that move function declaration at the beginning of the scope (not function expression).\"), mdx(\"p\", null, \"A recursive solution is also possible :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"console.log(\\\"Found at position :\\\" + linearSearch(arrayToSearch, 34, 0));\\nfunction linearSearch(arrayToSearch, valueToSearch, index) {\\n  if (arrayToSearch.length === 0) {\\n    return -1;\\n  }\\n  if (arrayToSearch[0] === valueToSearch) {\\n    return index;\\n  }\\n  return linearSearch(arrayToSearch.slice(1), valueToSearch, index + 1);\\n}\\n\")), mdx(\"p\", null, \"The idea is to recursively remove the first element of the array and pass it down to the method again and again until the array is empty or the value is found.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Linear Search\",\n  \"date\": \"2017-06-12\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Linear search is a basic search that is slow. Slow in the magnitude of having an asymptotic analysis of a BigO of O(n). This is the worse case is that the item is at the last position which require to traverse the whole array. Linear search moves one to one and check the value. It has the advantage of not needing to have an input sorted.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var arrayToSearch = [7, 23, 4, 23, 87, 2, 6, 3, 213, 43, 34, 1, 76, 43];\n\nconsole.log(\"Found at position :\" + linearSearch(arrayToSearch, 34));\n\nfunction linearSearch(arrayToSearch, valueToSearch) {\n  var length = arrayToSearch.length;\n  for (var i = 0; i < length; i++) {\n    if (arrayToSearch[i] === valueToSearch) {\n      return i;\n    }\n  }\n  return -1;\n}\n`}</code></pre>\n    <p>{`Here is a naive implementation where -1 is returned in the case of no element found. As you can see, the function is under the invocation of the function. This is possible because of JavaScript's hoisting mechanism that move function declaration at the beginning of the scope (not function expression).`}</p>\n    <p>{`A recursive solution is also possible :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`console.log(\"Found at position :\" + linearSearch(arrayToSearch, 34, 0));\nfunction linearSearch(arrayToSearch, valueToSearch, index) {\n  if (arrayToSearch.length === 0) {\n    return -1;\n  }\n  if (arrayToSearch[0] === valueToSearch) {\n    return index;\n  }\n  return linearSearch(arrayToSearch.slice(1), valueToSearch, index + 1);\n}\n`}</code></pre>\n    <p>{`The idea is to recursively remove the first element of the array and pass it down to the method again and again until the array is empty or the value is found.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}