{"expireTime":9007200886478379000,"key":"gatsby-plugin-mdx-entire-payload-9dedc4caf450cda54f9fd90b96eb4463--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Most of the time, it is enough to simply mock a handful amount of member of an object while performing unit tests. However, if you are using the dependency injection pattern, it is faster to not send an actual object and manually cherry-pick which function to test. Since you are injected an external object, you definitely do not want to test that object and you do not want to manually create a stub object which can be time consuming.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":438,"offset":438},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":438,"offset":438},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"class MyClass{ \n  constructor(public myOtherInjectedClass: IMyInjectedClassTypeHere){ ...} \n} ","position":{"start":{"line":4,"column":1,"offset":440},"end":{"line":8,"column":5,"offset":553},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The idea is to use TypeScript mapped type to create a mirror of the type you inject but instead of having the raw function as a type to have the Jest's mocking type. Changing the type will allow having a strongly typed object that has the same members but the function to be a mock. It gives the ability to use safely the Jest's mocking features.Â ","position":{"start":{"line":11,"column":1,"offset":556},"end":{"line":11,"column":348,"offset":903},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":556},"end":{"line":11,"column":348,"offset":903},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to create a custom type mapping. The type has a generic type that is the object you are injecting. In the example, the ","position":{"start":{"line":13,"column":1,"offset":905},"end":{"line":13,"column":138,"offset":1042},"indent":[]}},{"type":"inlineCode","value":"IMyInjectedClasTypeHere","position":{"start":{"line":13,"column":138,"offset":1042},"end":{"line":13,"column":163,"offset":1067},"indent":[]}},{"type":"text","value":" is the one containing functions and variables. We want to change all the function to become a Jest's mock type.","position":{"start":{"line":13,"column":163,"offset":1067},"end":{"line":13,"column":275,"offset":1179},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":905},"end":{"line":13,"column":275,"offset":1179},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"type Mockify<T> = { [P in keyof T]: T[P] extends Function ? jest.Mock<{}> : T[P] }; ","position":{"start":{"line":15,"column":1,"offset":1181},"end":{"line":17,"column":5,"offset":1284},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The \"Mockify\" type is looping all the members and when found one that is a function return a new Mock object. Otherwise, it returns the member in its initial format.","position":{"start":{"line":20,"column":1,"offset":1287},"end":{"line":20,"column":166,"offset":1452},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1287},"end":{"line":20,"column":166,"offset":1452},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The next step is to create a function that transform an object into the Mockify one. So far, we only have a type translation, now we need to have the logic to transform.","position":{"start":{"line":22,"column":1,"offset":1454},"end":{"line":22,"column":170,"offset":1623},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1454},"end":{"line":22,"column":170,"offset":1623},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"function mapToMockify<T extends Object>(obj: T): Mockify<T> { \n  let newObject: Mockify<T> = {} as Mockify<T>; \n  const properties = Object.getOwnPropertyNames(Object.getPrototypeOf(obj)); \n  for (let i = 0; i < properties.length; i++) { \n    newObject[properties[i]] = jest.fn(); \n  } \n  return newObject; \n} ","position":{"start":{"line":24,"column":1,"offset":1625},"end":{"line":33,"column":5,"offset":1954},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"From this point, you can invoke the function from your real instance and get a modified one ready to be injected and interrogated with all the Jest's mocking features.","position":{"start":{"line":36,"column":1,"offset":1957},"end":{"line":36,"column":168,"offset":2124},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1957},"end":{"line":36,"column":168,"offset":2124},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"const toTest = new MyClass(mapToMockify(new MyInjectedClassTypeHere())); \nexpect(toTest.function1).toHaveBeenCalled(); ","position":{"start":{"line":38,"column":1,"offset":2126},"end":{"line":41,"column":5,"offset":2264},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To recap, in this article we saw that with the combination of TypeScript's mapped type and basic JavaScript we created an easy way to create a replica of a class that has all its functions transformed to Mock.","position":{"start":{"line":44,"column":1,"offset":2267},"end":{"line":44,"column":210,"offset":2476},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2267},"end":{"line":44,"column":210,"offset":2476},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Mocking Every Functions of an Object with Jest and TypeScript\",\"date\":\"2018-10-18\",\"categories\":[\"jest\",\"typescript\"]}","position":{"start":{"line":47,"column":1,"offset":2479},"end":{"line":47,"column":157,"offset":2635},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":157,"offset":2635}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Mocking Every Functions of an Object with Jest and TypeScript\",\n  \"date\": \"2018-10-18\",\n  \"categories\": [\"jest\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Most of the time, it is enough to simply mock a handful amount of member of an object while performing unit tests. However, if you are using the dependency injection pattern, it is faster to not send an actual object and manually cherry-pick which function to test. Since you are injected an external object, you definitely do not want to test that object and you do not want to manually create a stub object which can be time consuming.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class MyClass{ \\n  constructor(public myOtherInjectedClass: IMyInjectedClassTypeHere){ ...} \\n} \\n\")), mdx(\"p\", null, \"The idea is to use TypeScript mapped type to create a mirror of the type you inject but instead of having the raw function as a type to have the Jest's mocking type. Changing the type will allow having a strongly typed object that has the same members but the function to be a mock. It gives the ability to use safely the Jest's mocking features.\\xA0\"), mdx(\"p\", null, \"The first step is to create a custom type mapping. The type has a generic type that is the object you are injecting. In the example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IMyInjectedClasTypeHere\"), \" is the one containing functions and variables. We want to change all the function to become a Jest's mock type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"type Mockify<T> = { [P in keyof T]: T[P] extends Function ? jest.Mock<{}> : T[P] }; \\n\")), mdx(\"p\", null, \"The \\\"Mockify\\\" type is looping all the members and when found one that is a function return a new Mock object. Otherwise, it returns the member in its initial format.\"), mdx(\"p\", null, \"The next step is to create a function that transform an object into the Mockify one. So far, we only have a type translation, now we need to have the logic to transform.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function mapToMockify<T extends Object>(obj: T): Mockify<T> { \\n  let newObject: Mockify<T> = {} as Mockify<T>; \\n  const properties = Object.getOwnPropertyNames(Object.getPrototypeOf(obj)); \\n  for (let i = 0; i < properties.length; i++) { \\n    newObject[properties[i]] = jest.fn(); \\n  } \\n  return newObject; \\n} \\n\")), mdx(\"p\", null, \"From this point, you can invoke the function from your real instance and get a modified one ready to be injected and interrogated with all the Jest's mocking features.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const toTest = new MyClass(mapToMockify(new MyInjectedClassTypeHere())); \\nexpect(toTest.function1).toHaveBeenCalled(); \\n\")), mdx(\"p\", null, \"To recap, in this article we saw that with the combination of TypeScript's mapped type and basic JavaScript we created an easy way to create a replica of a class that has all its functions transformed to Mock.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Mocking Every Functions of an Object with Jest and TypeScript\",\n  \"date\": \"2018-10-18\",\n  \"categories\": [\"jest\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Most of the time, it is enough to simply mock a handful amount of member of an object while performing unit tests. However, if you are using the dependency injection pattern, it is faster to not send an actual object and manually cherry-pick which function to test. Since you are injected an external object, you definitely do not want to test that object and you do not want to manually create a stub object which can be time consuming.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class MyClass{ \n  constructor(public myOtherInjectedClass: IMyInjectedClassTypeHere){ ...} \n} \n`}</code></pre>\n    <p>{`The idea is to use TypeScript mapped type to create a mirror of the type you inject but instead of having the raw function as a type to have the Jest's mocking type. Changing the type will allow having a strongly typed object that has the same members but the function to be a mock. It gives the ability to use safely the Jest's mocking features.Â `}</p>\n    <p>{`The first step is to create a custom type mapping. The type has a generic type that is the object you are injecting. In the example, the `}<inlineCode parentName=\"p\">{`IMyInjectedClasTypeHere`}</inlineCode>{` is the one containing functions and variables. We want to change all the function to become a Jest's mock type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type Mockify<T> = { [P in keyof T]: T[P] extends Function ? jest.Mock<{}> : T[P] }; \n`}</code></pre>\n    <p>{`The \"Mockify\" type is looping all the members and when found one that is a function return a new Mock object. Otherwise, it returns the member in its initial format.`}</p>\n    <p>{`The next step is to create a function that transform an object into the Mockify one. So far, we only have a type translation, now we need to have the logic to transform.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function mapToMockify<T extends Object>(obj: T): Mockify<T> { \n  let newObject: Mockify<T> = {} as Mockify<T>; \n  const properties = Object.getOwnPropertyNames(Object.getPrototypeOf(obj)); \n  for (let i = 0; i < properties.length; i++) { \n    newObject[properties[i]] = jest.fn(); \n  } \n  return newObject; \n} \n`}</code></pre>\n    <p>{`From this point, you can invoke the function from your real instance and get a modified one ready to be injected and interrogated with all the Jest's mocking features.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const toTest = new MyClass(mapToMockify(new MyInjectedClassTypeHere())); \nexpect(toTest.function1).toHaveBeenCalled(); \n`}</code></pre>\n    <p>{`To recap, in this article we saw that with the combination of TypeScript's mapped type and basic JavaScript we created an easy way to create a replica of a class that has all its functions transformed to Mock.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}