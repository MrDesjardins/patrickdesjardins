{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-46b737ce1ce6ebd175ea7d9b18659d6b--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Having to update an object from an edit action is pretty standard. In fact, it's also very straight forward with basic object (without containing other object). You could use the FormCollection way to do it:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":208,"offset":208},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":208,"offset":208},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [AcceptVerbs(HttpVerbs.Post)] public ActionResult Edit(FormCollection form) { // Get movie to update var id = Int32.Parse(form[\"id\"]); var movieToUpdate =_db.MovieSet.First(m => m.Id == id);\n\n// Deserialize (Include white list!) TryUpdateModel(movieToUpdate, new string[] { \"Title\", \"Director\" }, form.ToValueProvider());\n\n// If valid, save movie to database if (ModelState.IsValid) {_db.SaveChanges(); //... } ","position":{"start":{"line":5,"column":1,"offset":211},"end":{"line":11,"column":4,"offset":637},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Or, you could use the ability of auto binding each http parameters:","position":{"start":{"line":13,"column":1,"offset":639},"end":{"line":13,"column":68,"offset":706},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":639},"end":{"line":13,"column":68,"offset":706},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [HttpPost] public ActionResult Edit(Course course) { if (ModelState.IsValid) { db.Entry(course).State = EntityState.Modified; db.SaveChanges(); //... } ","position":{"start":{"line":16,"column":1,"offset":709},"end":{"line":18,"column":4,"offset":876},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, the problem remain that these two examples are only good for object with scalar properties. This mean that it works fine until you have object that reference other object. In real life, you have a lot of change that you will handle complex object that contain reference to many to many others objects or to optional object or to 1 to 1 object.","position":{"start":{"line":20,"column":1,"offset":878},"end":{"line":20,"column":353,"offset":1230},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":878},"end":{"line":20,"column":353,"offset":1230},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To be able to handle those scenario, you need to handle scalar data and reference object separately. Here is an example of saving a complex object and its references.","position":{"start":{"line":22,"column":1,"offset":1232},"end":{"line":22,"column":167,"offset":1398},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1232},"end":{"line":22,"column":167,"offset":1398},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public void Update(MyObject obj) { //Update all but not relationship (scalar properties are updated) var fromDatabase = Database.Customers.Where(p=>p.Id==customer.ID); Database.Entry(fromDatabase).CurrentValues.SetValues(obj);\n\n//Update reference if (obj.OtherObject!= null) { Database.OtherObjects.Attach(obj.OtherObject); } fromDatabase.OtherObject = obj.OtherObject;\n\nreturn Database.SaveChanges(); } ","position":{"start":{"line":25,"column":1,"offset":1401},"end":{"line":31,"column":4,"offset":1820},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This check if the reference is null from the form. If yes, it mean that we need to save NULL to be able to have NULL in the foreign key of the database. If not, you need to attach to the Database Context the object (even if this one is not fully loaded, we just need the primary key to be available).","position":{"start":{"line":33,"column":1,"offset":1822},"end":{"line":33,"column":301,"offset":2122},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1822},"end":{"line":33,"column":301,"offset":2122},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework 4.3 Update a complex object from Asp.Mvc controller\",\"date\":\"2012-03-27\",\"categories\":[\"asp-mvc\",\"entity-framework\"]}","position":{"start":{"line":36,"column":1,"offset":2125},"end":{"line":36,"column":173,"offset":2297},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":173,"offset":2297}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework 4.3 Update a complex object from Asp.Mvc controller\",\n  \"date\": \"2012-03-27\",\n  \"categories\": [\"asp-mvc\", \"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Having to update an object from an edit action is pretty standard. In fact, it's also very straight forward with basic object (without containing other object). You could use the FormCollection way to do it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [AcceptVerbs(HttpVerbs.Post)] public ActionResult Edit(FormCollection form) { // Get movie to update var id = Int32.Parse(form[\\\"id\\\"]); var movieToUpdate =_db.MovieSet.First(m => m.Id == id);\\n\\n// Deserialize (Include white list!) TryUpdateModel(movieToUpdate, new string[] { \\\"Title\\\", \\\"Director\\\" }, form.ToValueProvider());\\n\\n// If valid, save movie to database if (ModelState.IsValid) {_db.SaveChanges(); //... } \\n\")), mdx(\"p\", null, \"Or, you could use the ability of auto binding each http parameters:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [HttpPost] public ActionResult Edit(Course course) { if (ModelState.IsValid) { db.Entry(course).State = EntityState.Modified; db.SaveChanges(); //... } \\n\")), mdx(\"p\", null, \"However, the problem remain that these two examples are only good for object with scalar properties. This mean that it works fine until you have object that reference other object. In real life, you have a lot of change that you will handle complex object that contain reference to many to many others objects or to optional object or to 1 to 1 object.\"), mdx(\"p\", null, \"To be able to handle those scenario, you need to handle scalar data and reference object separately. Here is an example of saving a complex object and its references.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public void Update(MyObject obj) { //Update all but not relationship (scalar properties are updated) var fromDatabase = Database.Customers.Where(p=>p.Id==customer.ID); Database.Entry(fromDatabase).CurrentValues.SetValues(obj);\\n\\n//Update reference if (obj.OtherObject!= null) { Database.OtherObjects.Attach(obj.OtherObject); } fromDatabase.OtherObject = obj.OtherObject;\\n\\nreturn Database.SaveChanges(); } \\n\")), mdx(\"p\", null, \"This check if the reference is null from the form. If yes, it mean that we need to save NULL to be able to have NULL in the foreign key of the database. If not, you need to attach to the Database Context the object (even if this one is not fully loaded, we just need the primary key to be available).\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework 4.3 Update a complex object from Asp.Mvc controller\",\n  \"date\": \"2012-03-27\",\n  \"categories\": [\"asp-mvc\", \"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Having to update an object from an edit action is pretty standard. In fact, it's also very straight forward with basic object (without containing other object). You could use the FormCollection way to do it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [AcceptVerbs(HttpVerbs.Post)] public ActionResult Edit(FormCollection form) { // Get movie to update var id = Int32.Parse(form[\"id\"]); var movieToUpdate =_db.MovieSet.First(m => m.Id == id);\n\n// Deserialize (Include white list!) TryUpdateModel(movieToUpdate, new string[] { \"Title\", \"Director\" }, form.ToValueProvider());\n\n// If valid, save movie to database if (ModelState.IsValid) {_db.SaveChanges(); //... } \n`}</code></pre>\n    <p>{`Or, you could use the ability of auto binding each http parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [HttpPost] public ActionResult Edit(Course course) { if (ModelState.IsValid) { db.Entry(course).State = EntityState.Modified; db.SaveChanges(); //... } \n`}</code></pre>\n    <p>{`However, the problem remain that these two examples are only good for object with scalar properties. This mean that it works fine until you have object that reference other object. In real life, you have a lot of change that you will handle complex object that contain reference to many to many others objects or to optional object or to 1 to 1 object.`}</p>\n    <p>{`To be able to handle those scenario, you need to handle scalar data and reference object separately. Here is an example of saving a complex object and its references.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public void Update(MyObject obj) { //Update all but not relationship (scalar properties are updated) var fromDatabase = Database.Customers.Where(p=>p.Id==customer.ID); Database.Entry(fromDatabase).CurrentValues.SetValues(obj);\n\n//Update reference if (obj.OtherObject!= null) { Database.OtherObjects.Attach(obj.OtherObject); } fromDatabase.OtherObject = obj.OtherObject;\n\nreturn Database.SaveChanges(); } \n`}</code></pre>\n    <p>{`This check if the reference is null from the form. If yes, it mean that we need to save NULL to be able to have NULL in the foreign key of the database. If not, you need to attach to the Database Context the object (even if this one is not fully loaded, we just need the primary key to be available).`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}