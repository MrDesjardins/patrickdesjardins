{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-d656aaff159b009b321bc4cdeb6b075b--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are using Gulp to build your TypeScript you may use the default configuration that is used in a lot of website which is letter the tsconfig.json to handle what to include and having Gulp to use Gulp-TypeScript to read the tsconfig.json file. However, if you want to build just a portion of the TypeScript, let say a single folder, you will be out of luck.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":363,"offset":363},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":363,"offset":363},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So the idea is to not use this kind of configuration in tsconfig.json ","position":{"start":{"line":4,"column":1,"offset":365},"end":{"line":4,"column":71,"offset":435},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":365},"end":{"line":4,"column":71,"offset":435},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{ \n  \"compilerOptions\": \n  { \"sourceMap\": true, \n  \"target\": \"es6\", \n  \"module\": \"amd\", \n  \"outDir\": \"./deploy/output\", \n  \"types\": [ \"jquery\", \"requirejs\", \"lodash\", \"reflect-metadata\" ], \n  \"experimentalDecorators\": true, \n  \"emitDecoratorMetadata\": true \n  }, \n  \"include\": [ \"app/scripts/**/*\" ], \"exclude\": [ \"node_modules\", \"**/*.spec.ts\" ] \n} ","position":{"start":{"line":6,"column":1,"offset":437},"end":{"line":19,"column":5,"offset":806},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and not this task in Gulp task code:","position":{"start":{"line":21,"column":1,"offset":808},"end":{"line":21,"column":37,"offset":844},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":808},"end":{"line":21,"column":37,"offset":844},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"gulp.task(\"build\", () => { \n  const r = \"./app/output\"; \n  var compilationResults = tsProject.src() \n    .pipe(sourcemaps.init()) \n    .pipe(tsProject()); \n  compilationResults.dts.pipe(gulp.dest(r)); \n  return compilationResults.js \n    .pipe(sourcemaps.write('.')) \n    .pipe(gulp.dest(r)); \n}); ","position":{"start":{"line":23,"column":1,"offset":846},"end":{"line":34,"column":5,"offset":1163},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But to use this tsconfig.json:","position":{"start":{"line":36,"column":1,"offset":1165},"end":{"line":36,"column":31,"offset":1195},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1165},"end":{"line":36,"column":31,"offset":1195},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"{ \n  \"compilerOptions\": { \n    \"sourceMap\": true, \n    \"target\": \"es6\", \n    \"module\": \"amd\", \n    \"outDir\": \"./deploy/output\", \n    \"types\": [ \"jquery\", \"requirejs\", \"lodash\", \"reflect-metadata\" ], \n    \"experimentalDecorators\": true, \n    \"emitDecoratorMetadata\": true \n    }, \n    \"exclude\": [ \"node_modules\", \"**/*.spec.ts\" ] \n} ","position":{"start":{"line":38,"column":1,"offset":1197},"end":{"line":51,"column":5,"offset":1549},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":" and this Gulp task code: ","position":{"start":{"line":53,"column":1,"offset":1551},"end":{"line":53,"column":27,"offset":1577},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1551},"end":{"line":53,"column":27,"offset":1577},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"gulp.task(\"build\", () => { \n const outFolder = \"./app/output\"; \n var compilationResults = gulp.src(\"app/scripts/**/*.ts\") \n   .pipe(sourcemaps.init()) \n   .pipe(tsProject());\n compilationResults.dts.pipe(gulp.dest(outFolder)); \n return compilationResults.js \n   .pipe(sourcemaps.write('.')) \n   .pipe(gulp.dest(outFolder)); \n}); ","position":{"start":{"line":55,"column":1,"offset":1579},"end":{"line":66,"column":5,"offset":1936},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The whole idea is that you can move the include files outside TypeScript configuration file, but inject the files from Gulp. So far, everything is build from the root of the app/script folder, but you could define a new task that take a sub folder like the following code:","position":{"start":{"line":68,"column":1,"offset":1938},"end":{"line":68,"column":273,"offset":2210},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1938},"end":{"line":68,"column":273,"offset":2210},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"gulp.task(\"buildgeneral\", () => { \n  const outFolder = \"deploy/output/general\"; \n  var compilationResults = gulp.src(\"app/scripts/general/*.ts\")\n    .pipe(sourcemaps.init())\n    .pipe(tsProject());\n  compilationResults.dts.pipe(gulp.dest(outFolder)); \n  return compilationResults.js\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest(outFolder)); \n}); ","position":{"start":{"line":70,"column":1,"offset":2212},"end":{"line":81,"column":5,"offset":2585},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is very interesting if you have a project with thousand files. Instead of building the whole project every time, you can just build the file or the folder that the file reside.","position":{"start":{"line":82,"column":1,"offset":2586},"end":{"line":82,"column":182,"offset":2767},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2586},"end":{"line":82,"column":182,"offset":2767},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Compiling TypeScript for a specific folder to increase build performance\",\"date\":\"2017-04-11\",\"categories\":[\"gulp\",\"typescript\"]}","position":{"start":{"line":85,"column":1,"offset":2770},"end":{"line":85,"column":168,"offset":2937},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":85,"column":168,"offset":2937}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Compiling TypeScript for a specific folder to increase build performance\",\n  \"date\": \"2017-04-11\",\n  \"categories\": [\"gulp\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using Gulp to build your TypeScript you may use the default configuration that is used in a lot of website which is letter the tsconfig.json to handle what to include and having Gulp to use Gulp-TypeScript to read the tsconfig.json file. However, if you want to build just a portion of the TypeScript, let say a single folder, you will be out of luck.\"), mdx(\"p\", null, \"So the idea is to not use this kind of configuration in tsconfig.json \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{ \\n  \\\"compilerOptions\\\": \\n  { \\\"sourceMap\\\": true, \\n  \\\"target\\\": \\\"es6\\\", \\n  \\\"module\\\": \\\"amd\\\", \\n  \\\"outDir\\\": \\\"./deploy/output\\\", \\n  \\\"types\\\": [ \\\"jquery\\\", \\\"requirejs\\\", \\\"lodash\\\", \\\"reflect-metadata\\\" ], \\n  \\\"experimentalDecorators\\\": true, \\n  \\\"emitDecoratorMetadata\\\": true \\n  }, \\n  \\\"include\\\": [ \\\"app/scripts/**/*\\\" ], \\\"exclude\\\": [ \\\"node_modules\\\", \\\"**/*.spec.ts\\\" ] \\n} \\n\")), mdx(\"p\", null, \"and not this task in Gulp task code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"gulp.task(\\\"build\\\", () => { \\n  const r = \\\"./app/output\\\"; \\n  var compilationResults = tsProject.src() \\n    .pipe(sourcemaps.init()) \\n    .pipe(tsProject()); \\n  compilationResults.dts.pipe(gulp.dest(r)); \\n  return compilationResults.js \\n    .pipe(sourcemaps.write('.')) \\n    .pipe(gulp.dest(r)); \\n}); \\n\")), mdx(\"p\", null, \"But to use this tsconfig.json:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{ \\n  \\\"compilerOptions\\\": { \\n    \\\"sourceMap\\\": true, \\n    \\\"target\\\": \\\"es6\\\", \\n    \\\"module\\\": \\\"amd\\\", \\n    \\\"outDir\\\": \\\"./deploy/output\\\", \\n    \\\"types\\\": [ \\\"jquery\\\", \\\"requirejs\\\", \\\"lodash\\\", \\\"reflect-metadata\\\" ], \\n    \\\"experimentalDecorators\\\": true, \\n    \\\"emitDecoratorMetadata\\\": true \\n    }, \\n    \\\"exclude\\\": [ \\\"node_modules\\\", \\\"**/*.spec.ts\\\" ] \\n} \\n\")), mdx(\"p\", null, \" and this Gulp task code: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"gulp.task(\\\"build\\\", () => { \\n const outFolder = \\\"./app/output\\\"; \\n var compilationResults = gulp.src(\\\"app/scripts/**/*.ts\\\") \\n   .pipe(sourcemaps.init()) \\n   .pipe(tsProject());\\n compilationResults.dts.pipe(gulp.dest(outFolder)); \\n return compilationResults.js \\n   .pipe(sourcemaps.write('.')) \\n   .pipe(gulp.dest(outFolder)); \\n}); \\n\")), mdx(\"p\", null, \"The whole idea is that you can move the include files outside TypeScript configuration file, but inject the files from Gulp. So far, everything is build from the root of the app/script folder, but you could define a new task that take a sub folder like the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"gulp.task(\\\"buildgeneral\\\", () => { \\n  const outFolder = \\\"deploy/output/general\\\"; \\n  var compilationResults = gulp.src(\\\"app/scripts/general/*.ts\\\")\\n    .pipe(sourcemaps.init())\\n    .pipe(tsProject());\\n  compilationResults.dts.pipe(gulp.dest(outFolder)); \\n  return compilationResults.js\\n    .pipe(sourcemaps.write('.'))\\n    .pipe(gulp.dest(outFolder)); \\n}); \\n\")), mdx(\"p\", null, \"This is very interesting if you have a project with thousand files. Instead of building the whole project every time, you can just build the file or the folder that the file reside.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Compiling TypeScript for a specific folder to increase build performance\",\n  \"date\": \"2017-04-11\",\n  \"categories\": [\"gulp\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are using Gulp to build your TypeScript you may use the default configuration that is used in a lot of website which is letter the tsconfig.json to handle what to include and having Gulp to use Gulp-TypeScript to read the tsconfig.json file. However, if you want to build just a portion of the TypeScript, let say a single folder, you will be out of luck.`}</p>\n    <p>{`So the idea is to not use this kind of configuration in tsconfig.json `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{ \n  \"compilerOptions\": \n  { \"sourceMap\": true, \n  \"target\": \"es6\", \n  \"module\": \"amd\", \n  \"outDir\": \"./deploy/output\", \n  \"types\": [ \"jquery\", \"requirejs\", \"lodash\", \"reflect-metadata\" ], \n  \"experimentalDecorators\": true, \n  \"emitDecoratorMetadata\": true \n  }, \n  \"include\": [ \"app/scripts/**/*\" ], \"exclude\": [ \"node_modules\", \"**/*.spec.ts\" ] \n} \n`}</code></pre>\n    <p>{`and not this task in Gulp task code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`gulp.task(\"build\", () => { \n  const r = \"./app/output\"; \n  var compilationResults = tsProject.src() \n    .pipe(sourcemaps.init()) \n    .pipe(tsProject()); \n  compilationResults.dts.pipe(gulp.dest(r)); \n  return compilationResults.js \n    .pipe(sourcemaps.write('.')) \n    .pipe(gulp.dest(r)); \n}); \n`}</code></pre>\n    <p>{`But to use this tsconfig.json:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{ \n  \"compilerOptions\": { \n    \"sourceMap\": true, \n    \"target\": \"es6\", \n    \"module\": \"amd\", \n    \"outDir\": \"./deploy/output\", \n    \"types\": [ \"jquery\", \"requirejs\", \"lodash\", \"reflect-metadata\" ], \n    \"experimentalDecorators\": true, \n    \"emitDecoratorMetadata\": true \n    }, \n    \"exclude\": [ \"node_modules\", \"**/*.spec.ts\" ] \n} \n`}</code></pre>\n    <p>{` and this Gulp task code: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`gulp.task(\"build\", () => { \n const outFolder = \"./app/output\"; \n var compilationResults = gulp.src(\"app/scripts/**/*.ts\") \n   .pipe(sourcemaps.init()) \n   .pipe(tsProject());\n compilationResults.dts.pipe(gulp.dest(outFolder)); \n return compilationResults.js \n   .pipe(sourcemaps.write('.')) \n   .pipe(gulp.dest(outFolder)); \n}); \n`}</code></pre>\n    <p>{`The whole idea is that you can move the include files outside TypeScript configuration file, but inject the files from Gulp. So far, everything is build from the root of the app/script folder, but you could define a new task that take a sub folder like the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`gulp.task(\"buildgeneral\", () => { \n  const outFolder = \"deploy/output/general\"; \n  var compilationResults = gulp.src(\"app/scripts/general/*.ts\")\n    .pipe(sourcemaps.init())\n    .pipe(tsProject());\n  compilationResults.dts.pipe(gulp.dest(outFolder)); \n  return compilationResults.js\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest(outFolder)); \n}); \n`}</code></pre>\n    <p>{`This is very interesting if you have a project with thousand files. Instead of building the whole project every time, you can just build the file or the folder that the file reside.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}