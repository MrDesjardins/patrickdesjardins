{"expireTime":9007200886478401000,"key":"gatsby-plugin-mdx-entire-payload-5542aa5f5d54463ca92bb11d5aefd728--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You may have some situation that you need to communicate with the page that your Silverlight reside.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":101,"offset":101},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":101,"offset":101},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be done by three methods:","position":{"start":{"line":4,"column":1,"offset":103},"end":{"line":4,"column":35,"offset":137},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":103},"end":{"line":4,"column":35,"offset":137},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Passing parameter to Silverlight","position":{"start":{"line":6,"column":3,"offset":141},"end":{"line":6,"column":35,"offset":173},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":141},"end":{"line":6,"column":35,"offset":173},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":139},"end":{"line":6,"column":35,"offset":173},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Silverlight call a Javascript method of your page","position":{"start":{"line":7,"column":3,"offset":176},"end":{"line":7,"column":52,"offset":225},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":176},"end":{"line":7,"column":52,"offset":225},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":174},"end":{"line":7,"column":52,"offset":225},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Javascript call a Silverlight method","position":{"start":{"line":8,"column":3,"offset":228},"end":{"line":8,"column":43,"offset":268},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":228},"end":{"line":8,"column":43,"offset":268},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":226},"end":{"line":8,"column":43,"offset":268},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":139},"end":{"line":8,"column":43,"offset":268},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Silverlight parameter","position":{"start":{"line":10,"column":4,"offset":273},"end":{"line":10,"column":25,"offset":294},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":270},"end":{"line":10,"column":25,"offset":294},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All Silverlight application contain a startup method that has a StartupEventArgs. This class has a InitParam dictionary (IDictionary) that contains all parameters.","position":{"start":{"line":12,"column":1,"offset":296},"end":{"line":12,"column":164,"offset":459},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":296},"end":{"line":12,"column":164,"offset":459},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private void Application_Startup(object sender, StartupEventArgs e) { if (e.InitParams.ContainsKey(\"debug\")) { Debug.WriteLine(e.InitParams[\"debug\"]); } } ","position":{"start":{"line":15,"column":1,"offset":462},"end":{"line":17,"column":4,"offset":632},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To pass parameters you need to add in the html a new element with the attribute name \"initParams\".","position":{"start":{"line":19,"column":1,"offset":634},"end":{"line":19,"column":99,"offset":732},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":634},"end":{"line":19,"column":99,"offset":732},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"<div id=\"silverlightControlHost\"> <object data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\" width=\"100%\" height=\"100%\"> <param name=\"source\" value=\"ClientBin/MyProject.xap\"/> <param name=\"onError\" value=\"onSilverlightError\" /> <param name=\"background\" value=\"white\" /> <param name=\"minRuntimeVersion\" value=\"4.0.50826.0\" /> <param name=\"autoUpgrade\" value=\"true\" /> <a href=\"http://go.microsoft.com/fwlink/?LinkID=149156&v=4.0.50826.0\" style=\"text-decoration:none\"> <img src=\"http://go.microsoft.com/fwlink/?LinkId=161376\" alt=\"Get Microsoft Silverlight\" style=\"border-style:none\"/> </a> <param name=\"initParams\" value=\"debug=false, secondParameter=2 \" />\n\n</object> <iframe id=\"_sl_historyFrame\" style=\"visibility:hidden;height:0px;width:0px;border:0px\"></iframe> </div> ","position":{"start":{"line":21,"column":1,"offset":734},"end":{"line":25,"column":4,"offset":1546},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see in this example, if you need more than one parameter you need to use a comma between all parameter. The value is automatically a string. You will need to parse it to the desired type inside Silverlight.","position":{"start":{"line":27,"column":1,"offset":1548},"end":{"line":27,"column":218,"offset":1765},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1548},"end":{"line":27,"column":218,"offset":1765},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Silverlight communicate with Javascript","position":{"start":{"line":29,"column":4,"offset":1770},"end":{"line":29,"column":43,"offset":1809},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1767},"end":{"line":29,"column":43,"offset":1809},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The communication between Silverlight and Javascript is straight forward. You need to use the Invoke method of HtmlPage.Window.","position":{"start":{"line":31,"column":1,"offset":1811},"end":{"line":31,"column":128,"offset":1938},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1811},"end":{"line":31,"column":128,"offset":1938},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" System.Windows.Browser.HtmlPage.Window.Invoke(\"MyFunction\", \"Parameter1\"); System.Windows.Browser.HtmlPage.Window.Invoke(\"MyFunction\", \"Parameter1\", \"Parameter2\"); ","position":{"start":{"line":34,"column":1,"offset":1941},"end":{"line":36,"column":4,"offset":2120},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The invoke method has a params[] for its second parameter. That let you add has many parameter value that the function in Javascript require. ","position":{"start":{"line":38,"column":1,"offset":2122},"end":{"line":38,"column":143,"offset":2264},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2122},"end":{"line":38,"column":143,"offset":2264},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public virtual object Invoke(string name, params object[] args); ","position":{"start":{"line":39,"column":1,"offset":2265},"end":{"line":41,"column":4,"offset":2345},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Javascript to communicate with Silverlight","position":{"start":{"line":43,"column":4,"offset":2350},"end":{"line":43,"column":46,"offset":2392},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2347},"end":{"line":43,"column":46,"offset":2392},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Javascript can also call method inside a Silverlight application. To do, you need to first declare an entry point name.","position":{"start":{"line":45,"column":1,"offset":2394},"end":{"line":45,"column":120,"offset":2513},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2394},"end":{"line":45,"column":120,"offset":2513},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" System.Windows.Browser.HtmlPage.RegisterScriptableObject(\"Page123\", this); \n``` This code can be added at the beginning of the constructor of the method that will be called. It specifies a unique identifier that will be used in the Javascript.\n\nThe second thing that need to be done inside Silverlight is to add an attribute to the method that you want to expose to the external.\n\n```csharp\n[ScriptableMember] public void JavascriptWillCallThisMethod(string textFromJavaScript) { \n  Debug.WriteLine(textFromJavaScript); \n} ","position":{"start":{"line":48,"column":1,"offset":2516},"end":{"line":58,"column":4,"offset":3054},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The third and last step is to call this method from the Javascript code.","position":{"start":{"line":60,"column":1,"offset":3056},"end":{"line":60,"column":73,"offset":3128},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3056},"end":{"line":60,"column":73,"offset":3128},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var control = document.getElementById(\"silverlightControl\"); control.Content.Page123.JavascriptWillCallThisMethod(\"Hello from Javascript!\"); ","position":{"start":{"line":62,"column":1,"offset":3130},"end":{"line":64,"column":5,"offset":3290},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, you find the \"Page123\" again here. It's the name declared in the Silverlight application when calling the ","position":{"start":{"line":67,"column":1,"offset":3293},"end":{"line":67,"column":123,"offset":3415},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"RegisterScriptableObject","position":{"start":{"line":67,"column":124,"offset":3416},"end":{"line":67,"column":148,"offset":3440},"indent":[]}}],"position":{"start":{"line":67,"column":123,"offset":3415},"end":{"line":67,"column":149,"offset":3441},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":67,"column":149,"offset":3441},"end":{"line":67,"column":157,"offset":3449},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":3293},"end":{"line":67,"column":157,"offset":3449},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Silverlight communication with Javascript\",\"date\":\"2011-10-16\",\"categories\":[\"silverlight\"]}","position":{"start":{"line":70,"column":1,"offset":3452},"end":{"line":70,"column":131,"offset":3582},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":70,"column":131,"offset":3582}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Silverlight communication with Javascript\",\n  \"date\": \"2011-10-16\",\n  \"categories\": [\"silverlight\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You may have some situation that you need to communicate with the page that your Silverlight reside.\"), mdx(\"p\", null, \"This can be done by three methods:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Passing parameter to Silverlight\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Silverlight call a Javascript method of your page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Javascript call a Silverlight method\")), mdx(\"h2\", null, \"Silverlight parameter\"), mdx(\"p\", null, \"All Silverlight application contain a startup method that has a StartupEventArgs. This class has a InitParam dictionary (IDictionary) that contains all parameters.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private void Application_Startup(object sender, StartupEventArgs e) { if (e.InitParams.ContainsKey(\\\"debug\\\")) { Debug.WriteLine(e.InitParams[\\\"debug\\\"]); } } \\n\")), mdx(\"p\", null, \"To pass parameters you need to add in the html a new element with the attribute name \\\"initParams\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"<div id=\\\"silverlightControlHost\\\"> <object data=\\\"data:application/x-silverlight-2,\\\" type=\\\"application/x-silverlight-2\\\" width=\\\"100%\\\" height=\\\"100%\\\"> <param name=\\\"source\\\" value=\\\"ClientBin/MyProject.xap\\\"/> <param name=\\\"onError\\\" value=\\\"onSilverlightError\\\" /> <param name=\\\"background\\\" value=\\\"white\\\" /> <param name=\\\"minRuntimeVersion\\\" value=\\\"4.0.50826.0\\\" /> <param name=\\\"autoUpgrade\\\" value=\\\"true\\\" /> <a href=\\\"http://go.microsoft.com/fwlink/?LinkID=149156&v=4.0.50826.0\\\" style=\\\"text-decoration:none\\\"> <img src=\\\"http://go.microsoft.com/fwlink/?LinkId=161376\\\" alt=\\\"Get Microsoft Silverlight\\\" style=\\\"border-style:none\\\"/> </a> <param name=\\\"initParams\\\" value=\\\"debug=false, secondParameter=2 \\\" />\\n\\n</object> <iframe id=\\\"_sl_historyFrame\\\" style=\\\"visibility:hidden;height:0px;width:0px;border:0px\\\"></iframe> </div> \\n\")), mdx(\"p\", null, \"As you can see in this example, if you need more than one parameter you need to use a comma between all parameter. The value is automatically a string. You will need to parse it to the desired type inside Silverlight.\"), mdx(\"h2\", null, \"Silverlight communicate with Javascript\"), mdx(\"p\", null, \"The communication between Silverlight and Javascript is straight forward. You need to use the Invoke method of HtmlPage.Window.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" System.Windows.Browser.HtmlPage.Window.Invoke(\\\"MyFunction\\\", \\\"Parameter1\\\"); System.Windows.Browser.HtmlPage.Window.Invoke(\\\"MyFunction\\\", \\\"Parameter1\\\", \\\"Parameter2\\\"); \\n\")), mdx(\"p\", null, \"The invoke method has a params[] for its second parameter. That let you add has many parameter value that the function in Javascript require. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public virtual object Invoke(string name, params object[] args); \\n\")), mdx(\"h2\", null, \"Javascript to communicate with Silverlight\"), mdx(\"p\", null, \"Javascript can also call method inside a Silverlight application. To do, you need to first declare an entry point name.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" System.Windows.Browser.HtmlPage.RegisterScriptableObject(\\\"Page123\\\", this); \\n``` This code can be added at the beginning of the constructor of the method that will be called. It specifies a unique identifier that will be used in the Javascript.\\n\\nThe second thing that need to be done inside Silverlight is to add an attribute to the method that you want to expose to the external.\\n\\n```csharp\\n[ScriptableMember] public void JavascriptWillCallThisMethod(string textFromJavaScript) { \\n  Debug.WriteLine(textFromJavaScript); \\n} \\n\")), mdx(\"p\", null, \"The third and last step is to call this method from the Javascript code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var control = document.getElementById(\\\"silverlightControl\\\"); control.Content.Page123.JavascriptWillCallThisMethod(\\\"Hello from Javascript!\\\"); \\n\")), mdx(\"p\", null, \"As you can see, you find the \\\"Page123\\\" again here. It's the name declared in the Silverlight application when calling the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"RegisterScriptableObject\"), \" method.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Silverlight communication with Javascript\",\n  \"date\": \"2011-10-16\",\n  \"categories\": [\"silverlight\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You may have some situation that you need to communicate with the page that your Silverlight reside.`}</p>\n    <p>{`This can be done by three methods:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Passing parameter to Silverlight`}</li>\n      <li parentName=\"ul\">{`Silverlight call a Javascript method of your page`}</li>\n      <li parentName=\"ul\">{`The Javascript call a Silverlight method`}</li>\n    </ul>\n    <h2>{`Silverlight parameter`}</h2>\n    <p>{`All Silverlight application contain a startup method that has a StartupEventArgs. This class has a InitParam dictionary (IDictionary) that contains all parameters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private void Application_Startup(object sender, StartupEventArgs e) { if (e.InitParams.ContainsKey(\"debug\")) { Debug.WriteLine(e.InitParams[\"debug\"]); } } \n`}</code></pre>\n    <p>{`To pass parameters you need to add in the html a new element with the attribute name \"initParams\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`<div id=\"silverlightControlHost\"> <object data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\" width=\"100%\" height=\"100%\"> <param name=\"source\" value=\"ClientBin/MyProject.xap\"/> <param name=\"onError\" value=\"onSilverlightError\" /> <param name=\"background\" value=\"white\" /> <param name=\"minRuntimeVersion\" value=\"4.0.50826.0\" /> <param name=\"autoUpgrade\" value=\"true\" /> <a href=\"http://go.microsoft.com/fwlink/?LinkID=149156&v=4.0.50826.0\" style=\"text-decoration:none\"> <img src=\"http://go.microsoft.com/fwlink/?LinkId=161376\" alt=\"Get Microsoft Silverlight\" style=\"border-style:none\"/> </a> <param name=\"initParams\" value=\"debug=false, secondParameter=2 \" />\n\n</object> <iframe id=\"_sl_historyFrame\" style=\"visibility:hidden;height:0px;width:0px;border:0px\"></iframe> </div> \n`}</code></pre>\n    <p>{`As you can see in this example, if you need more than one parameter you need to use a comma between all parameter. The value is automatically a string. You will need to parse it to the desired type inside Silverlight.`}</p>\n    <h2>{`Silverlight communicate with Javascript`}</h2>\n    <p>{`The communication between Silverlight and Javascript is straight forward. You need to use the Invoke method of HtmlPage.Window.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` System.Windows.Browser.HtmlPage.Window.Invoke(\"MyFunction\", \"Parameter1\"); System.Windows.Browser.HtmlPage.Window.Invoke(\"MyFunction\", \"Parameter1\", \"Parameter2\"); \n`}</code></pre>\n    <p>{`The invoke method has a params[] for its second parameter. That let you add has many parameter value that the function in Javascript require. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public virtual object Invoke(string name, params object[] args); \n`}</code></pre>\n    <h2>{`Javascript to communicate with Silverlight`}</h2>\n    <p>{`Javascript can also call method inside a Silverlight application. To do, you need to first declare an entry point name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` System.Windows.Browser.HtmlPage.RegisterScriptableObject(\"Page123\", this); \n\\`\\`\\` This code can be added at the beginning of the constructor of the method that will be called. It specifies a unique identifier that will be used in the Javascript.\n\nThe second thing that need to be done inside Silverlight is to add an attribute to the method that you want to expose to the external.\n\n\\`\\`\\`csharp\n[ScriptableMember] public void JavascriptWillCallThisMethod(string textFromJavaScript) { \n  Debug.WriteLine(textFromJavaScript); \n} \n`}</code></pre>\n    <p>{`The third and last step is to call this method from the Javascript code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var control = document.getElementById(\"silverlightControl\"); control.Content.Page123.JavascriptWillCallThisMethod(\"Hello from Javascript!\"); \n`}</code></pre>\n    <p>{`As you can see, you find the \"Page123\" again here. It's the name declared in the Silverlight application when calling the `}<em parentName=\"p\">{`RegisterScriptableObject`}</em>{` method.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}