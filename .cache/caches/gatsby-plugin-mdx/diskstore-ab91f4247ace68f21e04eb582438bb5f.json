{"expireTime":9007200886478392000,"key":"gatsby-plugin-mdx-entire-payload-0568037b334011d706a95555c6fe81ee--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Using the default json serializer with Asp.Net MVC can be limited. One classic example is with date which return a slashed format with a integer from the epoch number. Usually, people want a formatted date with a standard format like yyyy-MM-dd. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":247,"offset":247},"indent":[]}},{"type":"link","title":null,"url":"http://james.newtonking.com/json","children":[{"type":"text","value":"Json.Net library","position":{"start":{"line":2,"column":248,"offset":248},"end":{"line":2,"column":264,"offset":264},"indent":[]}}],"position":{"start":{"line":2,"column":247,"offset":247},"end":{"line":2,"column":299,"offset":299},"indent":[]}},{"type":"text","value":" handle this kind of feature. It also give you a lot of options that I'll let you explore directly from the ","position":{"start":{"line":2,"column":299,"offset":299},"end":{"line":2,"column":407,"offset":407},"indent":[]}},{"type":"link","title":null,"url":"http://james.newtonking.com/json","children":[{"type":"text","value":"Json.Net newton king website","position":{"start":{"line":2,"column":408,"offset":408},"end":{"line":2,"column":436,"offset":436},"indent":[]}}],"position":{"start":{"line":2,"column":407,"offset":407},"end":{"line":2,"column":471,"offset":471},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":471,"offset":471},"end":{"line":2,"column":472,"offset":472},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":472,"offset":472},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The goal of this article is to show you how to use Json.Net library manually. This solution will require to repeat the use of a class manually into each of your action method every time you want to use the new serializer. This can be useful if you do not want to change at large in your system. Often, if you have a big system and you do not want to test everything, you may want to keep the new serializer for few methods. Later, we will see how to change to default .Net serializer with the Json.Net one.","position":{"start":{"line":4,"column":1,"offset":474},"end":{"line":4,"column":507,"offset":980},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":474},"end":{"line":4,"column":507,"offset":980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, we need to inherit from ActionResult (or JsonResult) to have your own custom result class. This is where we will use Json.Net library.","position":{"start":{"line":6,"column":1,"offset":982},"end":{"line":6,"column":142,"offset":1123},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":982},"end":{"line":6,"column":142,"offset":1123},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public class JsonNetResult : ActionResult { public Encoding ContentEncoding { get; set; } public string ContentType { get; set; } public object Data { get; set; }\n\npublic JsonSerializerSettings SerializerSettings { get; set; } public Formatting Formatting { get; set; }\n\npublic JsonNetResult(object data) { this.Data = data; SerializerSettings = new JsonSerializerSettings(); Formatting = Formatting.Indented; }\n\npublic override void ExecuteResult(ControllerContext context) { if (context == null) { throw new ArgumentNullException(\"context\"); }\n\nvar response = context.HttpContext.Response; response.ContentType = !string.IsNullOrEmpty(ContentType) ? ContentType : \"application/json\";\n\nif (ContentEncoding != null) { response.ContentEncoding = ContentEncoding; }\n\nif (Data != null) { var writer = new JsonTextWriter(response.Output) { Formatting = Formatting }; var serializer = JsonSerializer.Create(SerializerSettings); serializer.Serialize(writer, Data); writer.Flush(); } } } ","position":{"start":{"line":8,"column":1,"offset":1125},"end":{"line":22,"column":5,"offset":2121},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Most of the work is at the end where we use ","position":{"start":{"line":23,"column":1,"offset":2122},"end":{"line":23,"column":45,"offset":2166},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"JsonSerializer.Create","position":{"start":{"line":23,"column":47,"offset":2168},"end":{"line":23,"column":68,"offset":2189},"indent":[]}}],"position":{"start":{"line":23,"column":45,"offset":2166},"end":{"line":23,"column":70,"offset":2191},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":23,"column":70,"offset":2191},"end":{"line":23,"column":75,"offset":2196},"indent":[]}},{"type":"strong","children":[{"type":"text","value":".Serialize","position":{"start":{"line":23,"column":77,"offset":2198},"end":{"line":23,"column":87,"offset":2208},"indent":[]}}],"position":{"start":{"line":23,"column":75,"offset":2196},"end":{"line":23,"column":89,"offset":2210},"indent":[]}},{"type":"text","value":". You could set additional default serialization setting in this class.","position":{"start":{"line":23,"column":89,"offset":2210},"end":{"line":23,"column":160,"offset":2281},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2122},"end":{"line":23,"column":160,"offset":2281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to use this class in an action method, you need to return this class. ","position":{"start":{"line":25,"column":1,"offset":2283},"end":{"line":25,"column":83,"offset":2365},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2283},"end":{"line":25,"column":83,"offset":2365},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public JsonResult YourMethodAction() { var model = //... return new JsonNetResult(model); } ","position":{"start":{"line":27,"column":1,"offset":2367},"end":{"line":29,"column":4,"offset":2473},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you see, you need to return every time a new class manually. If you do not want to do it manually and continue to use the ","position":{"start":{"line":31,"column":1,"offset":2475},"end":{"line":31,"column":126,"offset":2600},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"return Json(...)","position":{"start":{"line":31,"column":128,"offset":2602},"end":{"line":31,"column":144,"offset":2618},"indent":[]}}],"position":{"start":{"line":31,"column":126,"offset":2600},"end":{"line":31,"column":146,"offset":2620},"indent":[]}},{"type":"text","value":" as you are used to do with Asp.Net MVC, you will need to override the default method. This can be easily done if you have a ","position":{"start":{"line":31,"column":146,"offset":2620},"end":{"line":31,"column":271,"offset":2745},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-3-controller","children":[{"type":"text","value":"base controller","position":{"start":{"line":31,"column":272,"offset":2746},"end":{"line":31,"column":287,"offset":2761},"indent":[]}}],"position":{"start":{"line":31,"column":271,"offset":2745},"end":{"line":31,"column":332,"offset":2806},"indent":[]}},{"type":"text","value":" where all your controller inherit. In fact, you should have a ","position":{"start":{"line":31,"column":332,"offset":2806},"end":{"line":31,"column":395,"offset":2869},"indent":[]}},{"type":"link","title":null,"url":"./enterprise-asp-net-mvc-part-3-controller","children":[{"type":"text","value":"base controller","position":{"start":{"line":31,"column":396,"offset":2870},"end":{"line":31,"column":411,"offset":2885},"indent":[]}}],"position":{"start":{"line":31,"column":395,"offset":2869},"end":{"line":31,"column":456,"offset":2930},"indent":[]}},{"type":"text","value":" for many reasons.","position":{"start":{"line":31,"column":456,"offset":2930},"end":{"line":31,"column":474,"offset":2948},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2475},"end":{"line":31,"column":474,"offset":2948},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class BaseController:Controller { protected internal override JsonResult Json(object data) { return new JsonNetResult(data); } } ","position":{"start":{"line":34,"column":1,"offset":2951},"end":{"line":36,"column":4,"offset":3102},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This create for you the new custom serialization class and it's transparent for all your method that need to return a Json formatted value.","position":{"start":{"line":38,"column":1,"offset":3104},"end":{"line":38,"column":140,"offset":3243},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":3104},"end":{"line":38,"column":140,"offset":3243},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to use Json.Net library as the default serializer of Json in Asp.Net\",\"date\":\"2013-10-10\",\"categories\":[\"asp-mvc\",\"javascript\"]}","position":{"start":{"line":41,"column":1,"offset":3246},"end":{"line":41,"column":171,"offset":3416},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":171,"offset":3416}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use Json.Net library as the default serializer of Json in Asp.Net\",\n  \"date\": \"2013-10-10\",\n  \"categories\": [\"asp-mvc\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Using the default json serializer with Asp.Net MVC can be limited. One classic example is with date which return a slashed format with a integer from the epoch number. Usually, people want a formatted date with a standard format like yyyy-MM-dd. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://james.newtonking.com/json\"\n  }, \"Json.Net library\"), \" handle this kind of feature. It also give you a lot of options that I'll let you explore directly from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://james.newtonking.com/json\"\n  }, \"Json.Net newton king website\"), \".\"), mdx(\"p\", null, \"The goal of this article is to show you how to use Json.Net library manually. This solution will require to repeat the use of a class manually into each of your action method every time you want to use the new serializer. This can be useful if you do not want to change at large in your system. Often, if you have a big system and you do not want to test everything, you may want to keep the new serializer for few methods. Later, we will see how to change to default .Net serializer with the Json.Net one.\"), mdx(\"p\", null, \"First, we need to inherit from ActionResult (or JsonResult) to have your own custom result class. This is where we will use Json.Net library.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class JsonNetResult : ActionResult { public Encoding ContentEncoding { get; set; } public string ContentType { get; set; } public object Data { get; set; }\\n\\npublic JsonSerializerSettings SerializerSettings { get; set; } public Formatting Formatting { get; set; }\\n\\npublic JsonNetResult(object data) { this.Data = data; SerializerSettings = new JsonSerializerSettings(); Formatting = Formatting.Indented; }\\n\\npublic override void ExecuteResult(ControllerContext context) { if (context == null) { throw new ArgumentNullException(\\\"context\\\"); }\\n\\nvar response = context.HttpContext.Response; response.ContentType = !string.IsNullOrEmpty(ContentType) ? ContentType : \\\"application/json\\\";\\n\\nif (ContentEncoding != null) { response.ContentEncoding = ContentEncoding; }\\n\\nif (Data != null) { var writer = new JsonTextWriter(response.Output) { Formatting = Formatting }; var serializer = JsonSerializer.Create(SerializerSettings); serializer.Serialize(writer, Data); writer.Flush(); } } } \\n\")), mdx(\"p\", null, \"Most of the work is at the end where we use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JsonSerializer.Create\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".Serialize\"), \". You could set additional default serialization setting in this class.\"), mdx(\"p\", null, \"If you want to use this class in an action method, you need to return this class. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public JsonResult YourMethodAction() { var model = //... return new JsonNetResult(model); } \\n\")), mdx(\"p\", null, \"As you see, you need to return every time a new class manually. If you do not want to do it manually and continue to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return Json(...)\"), \" as you are used to do with Asp.Net MVC, you will need to override the default method. This can be easily done if you have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-3-controller\"\n  }, \"base controller\"), \" where all your controller inherit. In fact, you should have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./enterprise-asp-net-mvc-part-3-controller\"\n  }, \"base controller\"), \" for many reasons.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class BaseController:Controller { protected internal override JsonResult Json(object data) { return new JsonNetResult(data); } } \\n\")), mdx(\"p\", null, \"This create for you the new custom serialization class and it's transparent for all your method that need to return a Json formatted value.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to use Json.Net library as the default serializer of Json in Asp.Net\",\n  \"date\": \"2013-10-10\",\n  \"categories\": [\"asp-mvc\", \"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Using the default json serializer with Asp.Net MVC can be limited. One classic example is with date which return a slashed format with a integer from the epoch number. Usually, people want a formatted date with a standard format like yyyy-MM-dd. `}<a parentName=\"p\" {...{\n        \"href\": \"http://james.newtonking.com/json\"\n      }}>{`Json.Net library`}</a>{` handle this kind of feature. It also give you a lot of options that I'll let you explore directly from the `}<a parentName=\"p\" {...{\n        \"href\": \"http://james.newtonking.com/json\"\n      }}>{`Json.Net newton king website`}</a>{`.`}</p>\n    <p>{`The goal of this article is to show you how to use Json.Net library manually. This solution will require to repeat the use of a class manually into each of your action method every time you want to use the new serializer. This can be useful if you do not want to change at large in your system. Often, if you have a big system and you do not want to test everything, you may want to keep the new serializer for few methods. Later, we will see how to change to default .Net serializer with the Json.Net one.`}</p>\n    <p>{`First, we need to inherit from ActionResult (or JsonResult) to have your own custom result class. This is where we will use Json.Net library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public class JsonNetResult : ActionResult { public Encoding ContentEncoding { get; set; } public string ContentType { get; set; } public object Data { get; set; }\n\npublic JsonSerializerSettings SerializerSettings { get; set; } public Formatting Formatting { get; set; }\n\npublic JsonNetResult(object data) { this.Data = data; SerializerSettings = new JsonSerializerSettings(); Formatting = Formatting.Indented; }\n\npublic override void ExecuteResult(ControllerContext context) { if (context == null) { throw new ArgumentNullException(\"context\"); }\n\nvar response = context.HttpContext.Response; response.ContentType = !string.IsNullOrEmpty(ContentType) ? ContentType : \"application/json\";\n\nif (ContentEncoding != null) { response.ContentEncoding = ContentEncoding; }\n\nif (Data != null) { var writer = new JsonTextWriter(response.Output) { Formatting = Formatting }; var serializer = JsonSerializer.Create(SerializerSettings); serializer.Serialize(writer, Data); writer.Flush(); } } } \n`}</code></pre>\n    <p>{`Most of the work is at the end where we use `}<strong parentName=\"p\">{`JsonSerializer.Create`}</strong>{` and `}<strong parentName=\"p\">{`.Serialize`}</strong>{`. You could set additional default serialization setting in this class.`}</p>\n    <p>{`If you want to use this class in an action method, you need to return this class. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public JsonResult YourMethodAction() { var model = //... return new JsonNetResult(model); } \n`}</code></pre>\n    <p>{`As you see, you need to return every time a new class manually. If you do not want to do it manually and continue to use the `}<strong parentName=\"p\">{`return Json(...)`}</strong>{` as you are used to do with Asp.Net MVC, you will need to override the default method. This can be easily done if you have a `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-3-controller\"\n      }}>{`base controller`}</a>{` where all your controller inherit. In fact, you should have a `}<a parentName=\"p\" {...{\n        \"href\": \"./enterprise-asp-net-mvc-part-3-controller\"\n      }}>{`base controller`}</a>{` for many reasons.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class BaseController:Controller { protected internal override JsonResult Json(object data) { return new JsonNetResult(data); } } \n`}</code></pre>\n    <p>{`This create for you the new custom serialization class and it's transparent for all your method that need to return a Json formatted value.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}