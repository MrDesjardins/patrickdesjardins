{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-6dd16c814c4ae67f2fb5056b0a262889--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"A few weeks ago, I had to present the benefits of TypeScript to a group of people. One argument was that many projects were built in JavaScript, so bringing a new tool to the mix would create a disparity amongst the fleet of repositories we need to maintain. This is a valid argument when we have many different languages like Java, C#, C++, Python, but is it when TypeScript is a superset of JavaScript? No that much since going with TypeScript allows you to still work in JavaScript if desired. Coming back to JavaScript from TypeScript is allow smooth since you could always transpile into EcmaScript 6 and work from the output. Nevertheless, it's an interesting exercise to demonstrate how to migrate an existing AngularJs project from JavaScript into TypeScript. This also may be a good argument to switch to TypeScript since it's easy and bring all the power of strongly typed language and still be very close of JavaScript.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":931,"offset":931},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":931,"offset":931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before going any further, let's see what kind of project we will migrate. First, it's using AngularJS 1.5. Any version before 2 was built in JavaScript. There is an official definition file available which will be required to fetch during our conversion. Second, the project is using RequireJs as the module loader. Again, this is not an issue since RequireJs has also official definition file. Third and last, this project is using Grunt as tasks manager. This is pretty old since the community drifted to Gulp and now Webpack. However, this won't be a problem since TypeScript has a Grunt library.","position":{"start":{"line":4,"column":1,"offset":933},"end":{"line":4,"column":600,"offset":1532},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":933},"end":{"line":4,"column":600,"offset":1532},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to bring TypeScript into the project and this can be done easily by using NPM. This project was using mostly Bower, but also NPM. Since I am more familiar with NPM, I decided to use NPM to fetch TypeScript.","position":{"start":{"line":6,"column":1,"offset":1534},"end":{"line":6,"column":225,"offset":1758},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1534},"end":{"line":6,"column":225,"offset":1758},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"npm install typescript --save-dev","position":{"start":{"line":8,"column":1,"offset":1760},"end":{"line":10,"column":4,"offset":1811},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We also need to get the Grunt library that will bridge Grunt and Typescript.","position":{"start":{"line":12,"column":1,"offset":1813},"end":{"line":12,"column":77,"offset":1889},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1813},"end":{"line":12,"column":77,"offset":1889},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"npm install grunt-ts --save-dev","position":{"start":{"line":14,"column":1,"offset":1891},"end":{"line":16,"column":4,"offset":1940},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have the tool to transpile, let's do the migration in two phases. The first phase will be to keep every JavaScript in .js file and only use it as a transpiler. We will change some JavaScript file to use the latest EcmaScript and transpile using TypeScript to EcmaScript 3. The second phase will be to migrate files to be TypeScript (.ts) file. To have TypeScript transpiler configured for the need of reading JavaScript, we must specify that TypeScript is allowed to get into JavaScript file. The actual project is having its source code in a folder named ","position":{"start":{"line":18,"column":1,"offset":1942},"end":{"line":18,"column":569,"offset":2510},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"public","position":{"start":{"line":18,"column":571,"offset":2512},"end":{"line":18,"column":577,"offset":2518},"indent":[]}}],"position":{"start":{"line":18,"column":569,"offset":2510},"end":{"line":18,"column":579,"offset":2520},"indent":[]}},{"type":"text","value":" and was using Grunt's task to move the code to distribute in a folder named ","position":{"start":{"line":18,"column":579,"offset":2520},"end":{"line":18,"column":656,"offset":2597},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist","position":{"start":{"line":18,"column":658,"offset":2599},"end":{"line":18,"column":662,"offset":2603},"indent":[]}}],"position":{"start":{"line":18,"column":656,"offset":2597},"end":{"line":18,"column":664,"offset":2605},"indent":[]}},{"type":"text","value":". Since the goal is to migrate without modifying too much, we will introduce a ","position":{"start":{"line":18,"column":664,"offset":2605},"end":{"line":18,"column":743,"offset":2684},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist_ts","position":{"start":{"line":18,"column":745,"offset":2686},"end":{"line":18,"column":752,"offset":2693},"indent":[]}}],"position":{"start":{"line":18,"column":743,"offset":2684},"end":{"line":18,"column":754,"offset":2695},"indent":[]}},{"type":"text","value":"folder that will be then moved to the ","position":{"start":{"line":18,"column":754,"offset":2695},"end":{"line":18,"column":792,"offset":2733},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist","position":{"start":{"line":18,"column":794,"offset":2735},"end":{"line":18,"column":798,"offset":2739},"indent":[]}}],"position":{"start":{"line":18,"column":792,"offset":2733},"end":{"line":18,"column":800,"offset":2741},"indent":[]}},{"type":"text","value":" folder. At the end, the ","position":{"start":{"line":18,"column":800,"offset":2741},"end":{"line":18,"column":825,"offset":2766},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist","position":{"start":{"line":18,"column":827,"offset":2768},"end":{"line":18,"column":831,"offset":2772},"indent":[]}}],"position":{"start":{"line":18,"column":825,"offset":2766},"end":{"line":18,"column":833,"offset":2774},"indent":[]}},{"type":"text","value":" folder remains the folder to use to deploy and the ","position":{"start":{"line":18,"column":833,"offset":2774},"end":{"line":18,"column":885,"offset":2826},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"public","position":{"start":{"line":18,"column":887,"offset":2828},"end":{"line":18,"column":893,"offset":2834},"indent":[]}}],"position":{"start":{"line":18,"column":885,"offset":2826},"end":{"line":18,"column":895,"offset":2836},"indent":[]}},{"type":"text","value":" folder the source folder to modify. We just created an intermediary folder to output our TypeScript file and do some modifications. In the following configuration, you will see all what we just discussed.","position":{"start":{"line":18,"column":895,"offset":2836},"end":{"line":18,"column":1100,"offset":3041},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1942},"end":{"line":18,"column":1100,"offset":3041},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"{\n   \"compilerOptions\":\n   {\n   \"outDir\": \"./dist_ts\",\n   \"allowJs\": true,\n   \"target\": \"es3\",\n   \"rootDir\": \"./\"\n   },\n   \"include\": [\n   \"./public/**/*.js\"\n   ],\n   \"exclude\": [\n   \"./public/assets/\"\n   ]\n}","position":{"start":{"line":20,"column":1,"offset":3043},"end":{"line":36,"column":4,"offset":3269},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For phase 2, we will have to change the include and bring few other configurations, but so far, it does what we want. We just need to put the configuration in tsconfig.json and we are all set to go in the Gruntfile.js to create a task to build TypeScript.","position":{"start":{"line":38,"column":1,"offset":3271},"end":{"line":38,"column":256,"offset":3526},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":3271},"end":{"line":38,"column":256,"offset":3526},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"ts: {\n default: {\n tsconfig: true\n }\n}\n","position":{"start":{"line":40,"column":1,"offset":3528},"end":{"line":47,"column":4,"offset":3585},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This step as you can see was pretty straightforward. The only thing it says is to read the configuration file. However, a little more work was required to have TypeScript to work properly. The first thing is that this project has a requirejs Grunt task that was using the public folder to bring the whole code into a single JavaScript file. This couldn't point to the public folder since we output the JavaScript in ","position":{"start":{"line":49,"column":1,"offset":3587},"end":{"line":49,"column":417,"offset":4003},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist_ts","position":{"start":{"line":49,"column":419,"offset":4005},"end":{"line":49,"column":426,"offset":4012},"indent":[]}}],"position":{"start":{"line":49,"column":417,"offset":4003},"end":{"line":49,"column":428,"offset":4014},"indent":[]}},{"type":"text","value":". It's not a big deal. We need to change the ","position":{"start":{"line":49,"column":428,"offset":4014},"end":{"line":49,"column":473,"offset":4059},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"mainConfigFile","position":{"start":{"line":49,"column":475,"offset":4061},"end":{"line":49,"column":489,"offset":4075},"indent":[]}}],"position":{"start":{"line":49,"column":473,"offset":4059},"end":{"line":49,"column":491,"offset":4077},"indent":[]}},{"type":"text","value":" path of requirejs to point to the intermediary folder. However, the requirejs task needed to have access to some assets and third library that was under the public folder. So, a pre-build task was required before calling the Gulp's TypeScript task to move some files in ","position":{"start":{"line":49,"column":491,"offset":4077},"end":{"line":49,"column":762,"offset":4348},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist_ts","position":{"start":{"line":49,"column":764,"offset":4350},"end":{"line":49,"column":771,"offset":4357},"indent":[]}}],"position":{"start":{"line":49,"column":762,"offset":4348},"end":{"line":49,"column":773,"offset":4359},"indent":[]}},{"type":"text","value":". And finally, a post-build task to move all the generated JavaScript file and JavaScript's map file in the final destination folder.","position":{"start":{"line":49,"column":773,"offset":4359},"end":{"line":49,"column":906,"offset":4492},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":3587},"end":{"line":49,"column":906,"offset":4492},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From here, any actual JavaScript file could be changed to use ","position":{"start":{"line":51,"column":1,"offset":4494},"end":{"line":51,"column":63,"offset":4556},"indent":[]}},{"type":"inlineCode","value":"const","position":{"start":{"line":51,"column":63,"offset":4556},"end":{"line":51,"column":70,"offset":4563},"indent":[]}},{"type":"text","value":" or the fat arrow way to work with function and this one will be with ","position":{"start":{"line":51,"column":70,"offset":4563},"end":{"line":51,"column":140,"offset":4633},"indent":[]}},{"type":"inlineCode","value":"var","position":{"start":{"line":51,"column":140,"offset":4633},"end":{"line":51,"column":145,"offset":4638},"indent":[]}},{"type":"text","value":" and conventional function at the end.","position":{"start":{"line":51,"column":145,"offset":4638},"end":{"line":51,"column":183,"offset":4676},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":4494},"end":{"line":51,"column":183,"offset":4676},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Migrating from JavaScript with a big framework like Angular can be done in steps. So far in this phase 1, we were able to bring TypeScript very smoothly without disrupting any actual JavaScript code. In a next article, we will see phase two which is to bring TypeScript file parallel to JavaScript file to run in a hybrid mode where both can cohabit.","position":{"start":{"line":53,"column":1,"offset":4678},"end":{"line":53,"column":351,"offset":5028},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":4678},"end":{"line":53,"column":351,"offset":5028},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"how-i-migrated-an-existing-angularjs-project-from-javascript-to-typescript-part-2-of-2","children":[{"type":"text","value":"Migrating from AngularJS to React Part 2","position":{"start":{"line":55,"column":2,"offset":5031},"end":{"line":55,"column":42,"offset":5071},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5030},"end":{"line":55,"column":131,"offset":5160},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5030},"end":{"line":55,"column":131,"offset":5160},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How I Migrated an Existing AngularJs Project from JavaScript to TypeScript (Part 1 of 2)\",\"date\":\"2017-10-02\",\"categories\":[\"angular\",\"javascript\",\"typescript\"]}","position":{"start":{"line":58,"column":1,"offset":5163},"end":{"line":58,"column":200,"offset":5362},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":58,"column":200,"offset":5362}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How I Migrated an Existing AngularJs Project from JavaScript to TypeScript (Part 1 of 2)\",\n  \"date\": \"2017-10-02\",\n  \"categories\": [\"angular\", \"javascript\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A few weeks ago, I had to present the benefits of TypeScript to a group of people. One argument was that many projects were built in JavaScript, so bringing a new tool to the mix would create a disparity amongst the fleet of repositories we need to maintain. This is a valid argument when we have many different languages like Java, C#, C++, Python, but is it when TypeScript is a superset of JavaScript? No that much since going with TypeScript allows you to still work in JavaScript if desired. Coming back to JavaScript from TypeScript is allow smooth since you could always transpile into EcmaScript 6 and work from the output. Nevertheless, it's an interesting exercise to demonstrate how to migrate an existing AngularJs project from JavaScript into TypeScript. This also may be a good argument to switch to TypeScript since it's easy and bring all the power of strongly typed language and still be very close of JavaScript.\"), mdx(\"p\", null, \"Before going any further, let's see what kind of project we will migrate. First, it's using AngularJS 1.5. Any version before 2 was built in JavaScript. There is an official definition file available which will be required to fetch during our conversion. Second, the project is using RequireJs as the module loader. Again, this is not an issue since RequireJs has also official definition file. Third and last, this project is using Grunt as tasks manager. This is pretty old since the community drifted to Gulp and now Webpack. However, this won't be a problem since TypeScript has a Grunt library.\"), mdx(\"p\", null, \"The first step is to bring TypeScript into the project and this can be done easily by using NPM. This project was using mostly Bower, but also NPM. Since I am more familiar with NPM, I decided to use NPM to fetch TypeScript.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"npm install typescript --save-dev\\n\")), mdx(\"p\", null, \"We also need to get the Grunt library that will bridge Grunt and Typescript.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"npm install grunt-ts --save-dev\\n\")), mdx(\"p\", null, \"Now that we have the tool to transpile, let's do the migration in two phases. The first phase will be to keep every JavaScript in .js file and only use it as a transpiler. We will change some JavaScript file to use the latest EcmaScript and transpile using TypeScript to EcmaScript 3. The second phase will be to migrate files to be TypeScript (.ts) file. To have TypeScript transpiler configured for the need of reading JavaScript, we must specify that TypeScript is allowed to get into JavaScript file. The actual project is having its source code in a folder named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public\"), \" and was using Grunt's task to move the code to distribute in a folder named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist\"), \". Since the goal is to migrate without modifying too much, we will introduce a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist_ts\"), \"folder that will be then moved to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist\"), \" folder. At the end, the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist\"), \" folder remains the folder to use to deploy and the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public\"), \" folder the source folder to modify. We just created an intermediary folder to output our TypeScript file and do some modifications. In the following configuration, you will see all what we just discussed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{\\n   \\\"compilerOptions\\\":\\n   {\\n   \\\"outDir\\\": \\\"./dist_ts\\\",\\n   \\\"allowJs\\\": true,\\n   \\\"target\\\": \\\"es3\\\",\\n   \\\"rootDir\\\": \\\"./\\\"\\n   },\\n   \\\"include\\\": [\\n   \\\"./public/**/*.js\\\"\\n   ],\\n   \\\"exclude\\\": [\\n   \\\"./public/assets/\\\"\\n   ]\\n}\\n\")), mdx(\"p\", null, \"For phase 2, we will have to change the include and bring few other configurations, but so far, it does what we want. We just need to put the configuration in tsconfig.json and we are all set to go in the Gruntfile.js to create a task to build TypeScript.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"ts: {\\n default: {\\n tsconfig: true\\n }\\n}\\n\\n\")), mdx(\"p\", null, \"This step as you can see was pretty straightforward. The only thing it says is to read the configuration file. However, a little more work was required to have TypeScript to work properly. The first thing is that this project has a requirejs Grunt task that was using the public folder to bring the whole code into a single JavaScript file. This couldn't point to the public folder since we output the JavaScript in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist_ts\"), \". It's not a big deal. We need to change the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mainConfigFile\"), \" path of requirejs to point to the intermediary folder. However, the requirejs task needed to have access to some assets and third library that was under the public folder. So, a pre-build task was required before calling the Gulp's TypeScript task to move some files in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist_ts\"), \". And finally, a post-build task to move all the generated JavaScript file and JavaScript's map file in the final destination folder.\"), mdx(\"p\", null, \"From here, any actual JavaScript file could be changed to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \" or the fat arrow way to work with function and this one will be with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" and conventional function at the end.\"), mdx(\"p\", null, \"Migrating from JavaScript with a big framework like Angular can be done in steps. So far in this phase 1, we were able to bring TypeScript very smoothly without disrupting any actual JavaScript code. In a next article, we will see phase two which is to bring TypeScript file parallel to JavaScript file to run in a hybrid mode where both can cohabit.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"how-i-migrated-an-existing-angularjs-project-from-javascript-to-typescript-part-2-of-2\"\n  }, \"Migrating from AngularJS to React Part 2\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How I Migrated an Existing AngularJs Project from JavaScript to TypeScript (Part 1 of 2)\",\n  \"date\": \"2017-10-02\",\n  \"categories\": [\"angular\", \"javascript\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`A few weeks ago, I had to present the benefits of TypeScript to a group of people. One argument was that many projects were built in JavaScript, so bringing a new tool to the mix would create a disparity amongst the fleet of repositories we need to maintain. This is a valid argument when we have many different languages like Java, C#, C++, Python, but is it when TypeScript is a superset of JavaScript? No that much since going with TypeScript allows you to still work in JavaScript if desired. Coming back to JavaScript from TypeScript is allow smooth since you could always transpile into EcmaScript 6 and work from the output. Nevertheless, it's an interesting exercise to demonstrate how to migrate an existing AngularJs project from JavaScript into TypeScript. This also may be a good argument to switch to TypeScript since it's easy and bring all the power of strongly typed language and still be very close of JavaScript.`}</p>\n    <p>{`Before going any further, let's see what kind of project we will migrate. First, it's using AngularJS 1.5. Any version before 2 was built in JavaScript. There is an official definition file available which will be required to fetch during our conversion. Second, the project is using RequireJs as the module loader. Again, this is not an issue since RequireJs has also official definition file. Third and last, this project is using Grunt as tasks manager. This is pretty old since the community drifted to Gulp and now Webpack. However, this won't be a problem since TypeScript has a Grunt library.`}</p>\n    <p>{`The first step is to bring TypeScript into the project and this can be done easily by using NPM. This project was using mostly Bower, but also NPM. Since I am more familiar with NPM, I decided to use NPM to fetch TypeScript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`npm install typescript --save-dev\n`}</code></pre>\n    <p>{`We also need to get the Grunt library that will bridge Grunt and Typescript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`npm install grunt-ts --save-dev\n`}</code></pre>\n    <p>{`Now that we have the tool to transpile, let's do the migration in two phases. The first phase will be to keep every JavaScript in .js file and only use it as a transpiler. We will change some JavaScript file to use the latest EcmaScript and transpile using TypeScript to EcmaScript 3. The second phase will be to migrate files to be TypeScript (.ts) file. To have TypeScript transpiler configured for the need of reading JavaScript, we must specify that TypeScript is allowed to get into JavaScript file. The actual project is having its source code in a folder named `}<strong parentName=\"p\">{`public`}</strong>{` and was using Grunt's task to move the code to distribute in a folder named `}<strong parentName=\"p\">{`dist`}</strong>{`. Since the goal is to migrate without modifying too much, we will introduce a `}<strong parentName=\"p\">{`dist_ts`}</strong>{`folder that will be then moved to the `}<strong parentName=\"p\">{`dist`}</strong>{` folder. At the end, the `}<strong parentName=\"p\">{`dist`}</strong>{` folder remains the folder to use to deploy and the `}<strong parentName=\"p\">{`public`}</strong>{` folder the source folder to modify. We just created an intermediary folder to output our TypeScript file and do some modifications. In the following configuration, you will see all what we just discussed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{\n   \"compilerOptions\":\n   {\n   \"outDir\": \"./dist_ts\",\n   \"allowJs\": true,\n   \"target\": \"es3\",\n   \"rootDir\": \"./\"\n   },\n   \"include\": [\n   \"./public/**/*.js\"\n   ],\n   \"exclude\": [\n   \"./public/assets/\"\n   ]\n}\n`}</code></pre>\n    <p>{`For phase 2, we will have to change the include and bring few other configurations, but so far, it does what we want. We just need to put the configuration in tsconfig.json and we are all set to go in the Gruntfile.js to create a task to build TypeScript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`ts: {\n default: {\n tsconfig: true\n }\n}\n\n`}</code></pre>\n    <p>{`This step as you can see was pretty straightforward. The only thing it says is to read the configuration file. However, a little more work was required to have TypeScript to work properly. The first thing is that this project has a requirejs Grunt task that was using the public folder to bring the whole code into a single JavaScript file. This couldn't point to the public folder since we output the JavaScript in `}<strong parentName=\"p\">{`dist_ts`}</strong>{`. It's not a big deal. We need to change the `}<strong parentName=\"p\">{`mainConfigFile`}</strong>{` path of requirejs to point to the intermediary folder. However, the requirejs task needed to have access to some assets and third library that was under the public folder. So, a pre-build task was required before calling the Gulp's TypeScript task to move some files in `}<strong parentName=\"p\">{`dist_ts`}</strong>{`. And finally, a post-build task to move all the generated JavaScript file and JavaScript's map file in the final destination folder.`}</p>\n    <p>{`From here, any actual JavaScript file could be changed to use `}<inlineCode parentName=\"p\">{`const`}</inlineCode>{` or the fat arrow way to work with function and this one will be with `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` and conventional function at the end.`}</p>\n    <p>{`Migrating from JavaScript with a big framework like Angular can be done in steps. So far in this phase 1, we were able to bring TypeScript very smoothly without disrupting any actual JavaScript code. In a next article, we will see phase two which is to bring TypeScript file parallel to JavaScript file to run in a hybrid mode where both can cohabit.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"how-i-migrated-an-existing-angularjs-project-from-javascript-to-typescript-part-2-of-2\"\n      }}>{`Migrating from AngularJS to React Part 2`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}