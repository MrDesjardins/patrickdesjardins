{"expireTime":9007200886478390000,"key":"gatsby-plugin-mdx-entire-payload-735b0c8e84b4c271a8f24c3e076b2ecb--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are running Visual Studio 2013 and execute inside the Package Manager Console a Power Shell script, you may stumble into a failure. A message concerning PSSecurityException that cannot load the script because of something disabled. Even if few minutes ago you were able to run the command, this can appear.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":314,"offset":314},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":314,"offset":314},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Script.ps1 cannot be loaded because the execution of scripts is disabled on this system. Please see \"get-help about_signing\" for more details.","position":{"start":{"line":4,"column":3,"offset":318},"end":{"line":4,"column":145,"offset":460},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":318},"end":{"line":4,"column":145,"offset":460},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":316},"end":{"line":4,"column":145,"offset":460},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The trick is to execute the following line. ","position":{"start":{"line":6,"column":1,"offset":462},"end":{"line":6,"column":45,"offset":506},"indent":[]}},{"type":"inlineCode","value":"\n Set-ExecutionPolicy RemoteSigned ","position":{"start":{"line":6,"column":45,"offset":506},"end":{"line":8,"column":4,"offset":549},"indent":[1,1]}},{"type":"text","value":"  This will raise a question that you have to write \"y\" to accept. ``` \n Execution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic. Do you want to change the execution policy? ","position":{"start":{"line":8,"column":4,"offset":549},"end":{"line":9,"column":268,"offset":888},"indent":[1]}},{"type":"linkReference","identifier":"y","label":"Y","referenceType":"shortcut","children":[{"type":"text","value":"Y","position":{"start":{"line":9,"column":269,"offset":889},"end":{"line":9,"column":270,"offset":890},"indent":[]}}],"position":{"start":{"line":9,"column":268,"offset":888},"end":{"line":9,"column":271,"offset":891},"indent":[]}},{"type":"text","value":" Yes ","position":{"start":{"line":9,"column":271,"offset":891},"end":{"line":9,"column":276,"offset":896},"indent":[]}},{"type":"linkReference","identifier":"n","label":"N","referenceType":"shortcut","children":[{"type":"text","value":"N","position":{"start":{"line":9,"column":277,"offset":897},"end":{"line":9,"column":278,"offset":898},"indent":[]}}],"position":{"start":{"line":9,"column":276,"offset":896},"end":{"line":9,"column":279,"offset":899},"indent":[]}},{"type":"text","value":" No ","position":{"start":{"line":9,"column":279,"offset":899},"end":{"line":9,"column":283,"offset":903},"indent":[]}},{"type":"linkReference","identifier":"s","label":"S","referenceType":"shortcut","children":[{"type":"text","value":"S","position":{"start":{"line":9,"column":284,"offset":904},"end":{"line":9,"column":285,"offset":905},"indent":[]}}],"position":{"start":{"line":9,"column":283,"offset":903},"end":{"line":9,"column":286,"offset":906},"indent":[]}},{"type":"text","value":" Suspend ","position":{"start":{"line":9,"column":286,"offset":906},"end":{"line":9,"column":295,"offset":915},"indent":[]}},{"type":"linkReference","identifier":"?","label":"?","referenceType":"shortcut","children":[{"type":"text","value":"?","position":{"start":{"line":9,"column":296,"offset":916},"end":{"line":9,"column":297,"offset":917},"indent":[]}}],"position":{"start":{"line":9,"column":295,"offset":915},"end":{"line":9,"column":298,"offset":918},"indent":[]}},{"type":"text","value":" Help (default is \"Y\"):y ","position":{"start":{"line":9,"column":298,"offset":918},"end":{"line":9,"column":323,"offset":943},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":462},"end":{"line":9,"column":323,"offset":943},"indent":[1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"\n\nexport const _frontmatter = {\"title\":\"Power Shell refuses to execute script inside Visual Studio\",\"date\":\"2014-04-01\",\"categories\":[\"visual-studio\"]}","position":{"start":{"line":10,"column":1,"offset":944},"end":{"line":13,"column":150,"offset":1100},"indent":[1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":13,"column":150,"offset":1100}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are running Visual Studio 2013 and execute inside the Package Manager Console a Power Shell script, you may stumble into a failure. A message concerning PSSecurityException that cannot load the script because of something disabled. Even if few minutes ago you were able to run the command, this can appear.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Script.ps1 cannot be loaded because the execution of scripts is disabled on this system. Please see \\\"get-help about_signing\\\" for more details.\")), mdx(\"p\", null, \"The trick is to execute the following line. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\n Set-ExecutionPolicy RemoteSigned \"), \"  This will raise a question that you have to write \\\"y\\\" to accept. ```\\nExecution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic. Do you want to change the execution policy? \", \"[Y]\", \" Yes \", \"[N]\", \" No \", \"[S]\", \" Suspend \", \"[?]\", \" Help (default is \\\"Y\\\"):y \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"Power Shell refuses to execute script inside Visual Studio\\\",\\\"date\\\":\\\"2014-04-01\\\",\\\"categories\\\":[\\\"visual-studio\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are running Visual Studio 2013 and execute inside the Package Manager Console a Power Shell script, you may stumble into a failure. A message concerning PSSecurityException that cannot load the script because of something disabled. Even if few minutes ago you were able to run the command, this can appear.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Script.ps1 cannot be loaded because the execution of scripts is disabled on this system. Please see \"get-help about_signing\" for more details.`}</p>\n    </blockquote>\n    <p>{`The trick is to execute the following line. `}<inlineCode parentName=\"p\">{`\n Set-ExecutionPolicy RemoteSigned `}</inlineCode>{`  This will raise a question that you have to write \"y\" to accept. \\`\\`\\`\nExecution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic. Do you want to change the execution policy? `}{`[Y]`}{` Yes `}{`[N]`}{` No `}{`[S]`}{` Suspend `}{`[?]`}{` Help (default is \"Y\"):y `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n\nexport const _frontmatter = {\"title\":\"Power Shell refuses to execute script inside Visual Studio\",\"date\":\"2014-04-01\",\"categories\":[\"visual-studio\"]}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}