{"expireTime":9007200886478386000,"key":"gatsby-plugin-mdx-entire-payload-f844120a6d26ce7b2238e114307032c7--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In the current application I am developing, I wanted to have an Html element to have a shining effect with CSS3. The goal is to make an Html's element to look new. Here is an animated gif that show the final result. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":217,"offset":217},"indent":[]}},{"type":"image","title":null,"url":"images/AnimationDiv.gif","alt":null,"position":{"start":{"line":2,"column":217,"offset":217},"end":{"line":2,"column":245,"offset":245},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":245,"offset":245},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This animation must be set by setting a class to any Html element that we want the animation. For my purpose, it was a link element, but it could be a Div or an Li without problem. Once the class is set to the element you want, this one must run in an infinite loop. This is done by setting a custom class the CSS3 animation. This example work only for Chrome but you can define additional vendor prefix than ","position":{"start":{"line":4,"column":1,"offset":247},"end":{"line":4,"column":410,"offset":656},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"webkit","position":{"start":{"line":4,"column":412,"offset":658},"end":{"line":4,"column":418,"offset":664},"indent":[]}}],"position":{"start":{"line":4,"column":410,"offset":656},"end":{"line":4,"column":420,"offset":666},"indent":[]}},{"type":"text","value":". The first line ensure that the animation will take place on the whole width of the Html element where we add the class. Then, we specify which animation we want to run, the duration of the animation, that we want to run in infinitely and the animation effect by setting a cubic-bezier tempo. ","position":{"start":{"line":4,"column":420,"offset":666},"end":{"line":4,"column":714,"offset":960},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":247},"end":{"line":4,"column":714,"offset":960},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":" .shine-me { width:100%; /*Make sure the animation is over the whole element*/\n\n-webkit-animation-name: ShineAnimation; -webkit-animation-duration: 5s; -webkit-animation-iteration-count: infinite; -webkit-animation-timing-function: cubic-bezier(.12,.89,.98,.47); } ","position":{"start":{"line":5,"column":1,"offset":961},"end":{"line":9,"column":4,"offset":1237},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The animation goes from an initial state to an ending state. What we want is to move an background-image that we define totally in CSS by creating a linear-gradient. What we want is to have a transparent color that goes to a white color in the middle and go back to a transparent color. We then move from a position outside the vision to a position out of vision. ","position":{"start":{"line":12,"column":1,"offset":1240},"end":{"line":12,"column":365,"offset":1604},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1240},"end":{"line":12,"column":365,"offset":1604},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":" @-webkit-keyframes ShineAnimation{ from { background-repeat:no-repeat; background-image:-webkit-linear-gradient( top left, rgba(255, 255, 255, 0.0) 0%, rgba(255, 255, 255, 0.0) 45%, rgba(255, 255, 255, 0.5) 48%, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0.5) 52%, rgba(255, 255, 255, 0.0) 57%, rgba(255, 255, 255, 0.0) 100% ); background-position:-250px -250px; background-size: 600px 600px } to { background-repeat:no-repeat; background-position:250px 250px; } } ","position":{"start":{"line":13,"column":1,"offset":1605},"end":{"line":15,"column":4,"offset":2089},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":" This code has obviously some flaws. First of all, it does not scale very well with big Html element. This is due mainly because of the background-position that is set the specific pixel position. The second flaw is the color of the shining animation. If the background of the Html element is too bright, than we do not see the shining effect, if it is too dark, the shining effect looks fake.","position":{"start":{"line":16,"column":1,"offset":2090},"end":{"line":16,"column":394,"offset":2483},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":2090},"end":{"line":16,"column":394,"offset":2483},"indent":[]}},{"type":"jsx","value":"<iframe style=\"width: 100%; height: 300px\" src=\"http://jsfiddle.net/kg2fw40v/embedded/result,html,css\"></iframe>","position":{"start":{"line":18,"column":1,"offset":2485},"end":{"line":18,"column":113,"offset":2597},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" You can find the code and a demo in this JsFiddle : ","position":{"start":{"line":20,"column":1,"offset":2599},"end":{"line":20,"column":54,"offset":2652},"indent":[]}},{"type":"link","title":null,"url":"http://jsfiddle.net/kg2fw40v/","children":[{"type":"text","value":"http://jsfiddle.net/kg2fw40v/","position":{"start":{"line":20,"column":55,"offset":2653},"end":{"line":20,"column":84,"offset":2682},"indent":[]}}],"position":{"start":{"line":20,"column":54,"offset":2652},"end":{"line":20,"column":116,"offset":2714},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":20,"column":116,"offset":2714},"end":{"line":20,"column":117,"offset":2715},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2599},"end":{"line":20,"column":117,"offset":2715},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Css3 shining animation for Html element\",\"date\":\"2015-05-14\",\"categories\":[\"css\"]}","position":{"start":{"line":23,"column":1,"offset":2718},"end":{"line":23,"column":121,"offset":2838},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":121,"offset":2838}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Css3 shining animation for Html element\",\n  \"date\": \"2015-05-14\",\n  \"categories\": [\"css\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the current application I am developing, I wanted to have an Html element to have a shining effect with CSS3. The goal is to make an Html's element to look new. Here is an animated gif that show the final result. \", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"images/AnimationDiv.gif\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"This animation must be set by setting a class to any Html element that we want the animation. For my purpose, it was a link element, but it could be a Div or an Li without problem. Once the class is set to the element you want, this one must run in an infinite loop. This is done by setting a custom class the CSS3 animation. This example work only for Chrome but you can define additional vendor prefix than \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"webkit\"), \". The first line ensure that the animation will take place on the whole width of the Html element where we add the class. Then, we specify which animation we want to run, the duration of the animation, that we want to run in infinitely and the animation effect by setting a cubic-bezier tempo. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \" .shine-me { width:100%; /*Make sure the animation is over the whole element*/\\n\\n-webkit-animation-name: ShineAnimation; -webkit-animation-duration: 5s; -webkit-animation-iteration-count: infinite; -webkit-animation-timing-function: cubic-bezier(.12,.89,.98,.47); } \\n\")), mdx(\"p\", null, \"The animation goes from an initial state to an ending state. What we want is to move an background-image that we define totally in CSS by creating a linear-gradient. What we want is to have a transparent color that goes to a white color in the middle and go back to a transparent color. We then move from a position outside the vision to a position out of vision. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \" @-webkit-keyframes ShineAnimation{ from { background-repeat:no-repeat; background-image:-webkit-linear-gradient( top left, rgba(255, 255, 255, 0.0) 0%, rgba(255, 255, 255, 0.0) 45%, rgba(255, 255, 255, 0.5) 48%, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0.5) 52%, rgba(255, 255, 255, 0.0) 57%, rgba(255, 255, 255, 0.0) 100% ); background-position:-250px -250px; background-size: 600px 600px } to { background-repeat:no-repeat; background-position:250px 250px; } } \\n\")), mdx(\"p\", null, \" This code has obviously some flaws. First of all, it does not scale very well with big Html element. This is due mainly because of the background-position that is set the specific pixel position. The second flaw is the color of the shining animation. If the background of the Html element is too bright, than we do not see the shining effect, if it is too dark, the shining effect looks fake.\"), mdx(\"iframe\", {\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"300px\"\n    },\n    src: \"http://jsfiddle.net/kg2fw40v/embedded/result,html,css\"\n  }), mdx(\"p\", null, \" You can find the code and a demo in this JsFiddle : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/kg2fw40v/\"\n  }, \"http://jsfiddle.net/kg2fw40v/\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Css3 shining animation for Html element\",\n  \"date\": \"2015-05-14\",\n  \"categories\": [\"css\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In the current application I am developing, I wanted to have an Html element to have a shining effect with CSS3. The goal is to make an Html's element to look new. Here is an animated gif that show the final result. `}<img parentName=\"p\" {...{\n        \"src\": \"images/AnimationDiv.gif\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`This animation must be set by setting a class to any Html element that we want the animation. For my purpose, it was a link element, but it could be a Div or an Li without problem. Once the class is set to the element you want, this one must run in an infinite loop. This is done by setting a custom class the CSS3 animation. This example work only for Chrome but you can define additional vendor prefix than `}<strong parentName=\"p\">{`webkit`}</strong>{`. The first line ensure that the animation will take place on the whole width of the Html element where we add the class. Then, we specify which animation we want to run, the duration of the animation, that we want to run in infinitely and the animation effect by setting a cubic-bezier tempo. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{` .shine-me { width:100%; /*Make sure the animation is over the whole element*/\n\n-webkit-animation-name: ShineAnimation; -webkit-animation-duration: 5s; -webkit-animation-iteration-count: infinite; -webkit-animation-timing-function: cubic-bezier(.12,.89,.98,.47); } \n`}</code></pre>\n    <p>{`The animation goes from an initial state to an ending state. What we want is to move an background-image that we define totally in CSS by creating a linear-gradient. What we want is to have a transparent color that goes to a white color in the middle and go back to a transparent color. We then move from a position outside the vision to a position out of vision. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{` @-webkit-keyframes ShineAnimation{ from { background-repeat:no-repeat; background-image:-webkit-linear-gradient( top left, rgba(255, 255, 255, 0.0) 0%, rgba(255, 255, 255, 0.0) 45%, rgba(255, 255, 255, 0.5) 48%, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0.5) 52%, rgba(255, 255, 255, 0.0) 57%, rgba(255, 255, 255, 0.0) 100% ); background-position:-250px -250px; background-size: 600px 600px } to { background-repeat:no-repeat; background-position:250px 250px; } } \n`}</code></pre>\n    <p>{` This code has obviously some flaws. First of all, it does not scale very well with big Html element. This is due mainly because of the background-position that is set the specific pixel position. The second flaw is the color of the shining animation. If the background of the Html element is too bright, than we do not see the shining effect, if it is too dark, the shining effect looks fake.`}</p>\n    <iframe style=\"width: 100%; height: 300px\" src=\"http://jsfiddle.net/kg2fw40v/embedded/result,html,css\"></iframe>\n    <p>{` You can find the code and a demo in this JsFiddle : `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsfiddle.net/kg2fw40v/\"\n      }}>{`http://jsfiddle.net/kg2fw40v/`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}