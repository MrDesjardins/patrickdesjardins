{"expireTime":9007200886478389000,"key":"gatsby-plugin-mdx-entire-payload-245f1b9f3ee6eab4fc0d9f2450e03b75--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Entity Framework has a ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"change tracker API","position":{"start":{"line":2,"column":26,"offset":26},"end":{"line":2,"column":44,"offset":44},"indent":[]}}],"position":{"start":{"line":2,"column":24,"offset":24},"end":{"line":2,"column":46,"offset":46},"indent":[]}},{"type":"text","value":" exposed by the ","position":{"start":{"line":2,"column":46,"offset":46},"end":{"line":2,"column":62,"offset":62},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Entry","position":{"start":{"line":2,"column":64,"offset":64},"end":{"line":2,"column":69,"offset":69},"indent":[]}}],"position":{"start":{"line":2,"column":62,"offset":62},"end":{"line":2,"column":71,"offset":71},"indent":[]}},{"type":"text","value":" property of the DbContext. The Entry method or the ","position":{"start":{"line":2,"column":71,"offset":71},"end":{"line":2,"column":123,"offset":123},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Entries","position":{"start":{"line":2,"column":125,"offset":125},"end":{"line":2,"column":132,"offset":132},"indent":[]}}],"position":{"start":{"line":2,"column":123,"offset":123},"end":{"line":2,"column":134,"offset":134},"indent":[]}},{"type":"text","value":" method can be used to fin or to change information that is tracked by Entity Framework. It is possible to know the current value but also the original value. It also possible to track the state of every entity, to read it and to modify it. This article cover the use of Entry for scalar properties. Scalar properties are property that has primitive type like integer, string, datetime, double, etc. It does not include any of your classes. In a subsequent post, we will cover how to track entity inside entity, and also collection of entity.","position":{"start":{"line":2,"column":134,"offset":134},"end":{"line":2,"column":676,"offset":676},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":676,"offset":676},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The entry method has two methods that let you drill down inside an entity to change collection of others entity from an entity or to have access to other reference of entities. From there, we could use the explicit loading method, Load, to load specific portion of information without loading the whole table (as seen in a previous article with DbSet).","position":{"start":{"line":4,"column":1,"offset":678},"end":{"line":4,"column":353,"offset":1030},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":678},"end":{"line":4,"column":353,"offset":1030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a simple example to add a new entity with Entry. The code display the Person in the Local memory. The new entry is only set in the Local when its state is changed to Added. ","position":{"start":{"line":6,"column":1,"offset":1032},"end":{"line":6,"column":182,"offset":1213},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1032},"end":{"line":6,"column":182,"offset":1213},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private static void EntryToAddNewEntity() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var newPerson = new Person {Name = \"New Person\", BirthDate = new DateTime(1980, 1, 2) }; var entryPerson = context.Entry(newPerson); Console.WriteLine(context.Persons.Local.Count); //0 entryPerson.State = EntityState.Added; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } ","position":{"start":{"line":7,"column":1,"offset":1214},"end":{"line":9,"column":4,"offset":1670},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Modifying an existing entity with Entry is also possible without loading this one from the database and without having to update every fields. ","position":{"start":{"line":11,"column":1,"offset":1672},"end":{"line":11,"column":144,"offset":1815},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1672},"end":{"line":11,"column":144,"offset":1815},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private static void EntryToModifyExistingEntityWithoutLoadingFromDatabase() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = new Person { Id=1, Name = \"Updated Name\"}; context.Persons.Attach(existingPerson); var entryPerson = context.Entry(existingPerson); Console.WriteLine(context.Persons.Local.Count); //1 entryPerson.Property(d => d.Name).IsModified = true; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n``` It produces a SQL statement with only a single SET. \n```sql\n exec sp_executesql N'UPDATE [dbo].[People] SET [Name] = @0 WHERE ([Id] = @1) ',N'@0 nvarchar(max) ,@1 int',@0=N'Updated Name',@1=1 ","position":{"start":{"line":12,"column":1,"offset":1816},"end":{"line":17,"column":4,"offset":2537},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The advantage of loading from the database is that we do not have to specify which property has been changed. ","position":{"start":{"line":20,"column":1,"offset":2540},"end":{"line":20,"column":111,"offset":2650},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2540},"end":{"line":20,"column":111,"offset":2650},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private static void EntryToModifyExistingEntityByLoadingFromDatabase() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = context.Persons.Find(1); Console.WriteLine(context.Persons.Local.Count); //1 existingPerson.Name = \"Updated from database\"; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n``` By modifying the property, Entity Framework has inside the tracking the original value and the current value. It knows that the only property changed is the name. When you are developing Client-Server application, you may want to modify only properties that has changed. For example, if you have a web form that has every fields and that the user modify one value, you would want to have an update executed with only the field that has changed to be in the update sql statement. Entity Framework has a method in the Entry property named CurrentValues. CurrentValues lets you set the value you want to be the active one. If this one differ from the the OriginalValues, then it is updated. To simplify the process, the CurrentValues properties has a SetValues method. It takes from an object all scalar properties and map them into the entry. Scalar properties are property that is not another entity or a collection.\n\n\n```csharp\n private static void EntryToModifyByPropertyChanged() { var objectFromUser = new Person {Id = 1, Name=\"Test\", BirthDate = new DateTime(1801, 12, 25)}; using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = context.Persons.Find(1); Console.WriteLine(context.Persons.Local.Count); //1 context.Entry(existingPerson).CurrentValues.SetValues(objectFromUser); Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } ","position":{"start":{"line":21,"column":1,"offset":2651},"end":{"line":28,"column":4,"offset":4483},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This code update Name and BirthDate only if the entity with the ID one has not already in the database this name and birthday. If the name is the same, than only the birthday change. If you execute twice this method, nothing will be updated.","position":{"start":{"line":30,"column":1,"offset":4485},"end":{"line":30,"column":242,"offset":4726},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":4485},"end":{"line":30,"column":242,"offset":4726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is also possible to update without doing any select statement from the database by setting to Modified the state of the object that came from the client side.","position":{"start":{"line":32,"column":1,"offset":4728},"end":{"line":32,"column":162,"offset":4889},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":4728},"end":{"line":32,"column":162,"offset":4889},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private static void EntryToModifyByPropertyChangedWithoutUsingFind() { var objectFromUser = new Person { Id = 1, Name = \"Tester #2\", BirthDate = new DateTime(1941, 12, 25) }; using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 context.Entry(objectFromUser).State = EntityState.Modified; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } ","position":{"start":{"line":35,"column":1,"offset":4892},"end":{"line":37,"column":4,"offset":5315},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So far we have seen how to access the tracking information for all scalar properties with the Entry method. Three others scenarios exist that has not been covered. First, it is about Complex Object. The second is entity that reference an other (optional or required) property. And the third is entity that has a collection of entities. All code in this article is accessible through ","position":{"start":{"line":39,"column":1,"offset":5317},"end":{"line":39,"column":384,"offset":5700},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/MrDesjardins/EntityFrameworkTestConsole/tree/4db72abce6a1c2efcda8929d2fed7965922553c7","children":[{"type":"text","value":"GitHub","position":{"start":{"line":39,"column":385,"offset":5701},"end":{"line":39,"column":391,"offset":5707},"indent":[]}}],"position":{"start":{"line":39,"column":384,"offset":5700},"end":{"line":39,"column":498,"offset":5814},"indent":[]}},{"type":"text","value":" or can be ","position":{"start":{"line":39,"column":498,"offset":5814},"end":{"line":39,"column":509,"offset":5825},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/MrDesjardins/EntityFrameworkTestConsole/archive/4db72abce6a1c2efcda8929d2fed7965922553c7.zip","children":[{"type":"text","value":"downloaded from a Zip file","position":{"start":{"line":39,"column":510,"offset":5826},"end":{"line":39,"column":536,"offset":5852},"indent":[]}}],"position":{"start":{"line":39,"column":509,"offset":5825},"end":{"line":39,"column":650,"offset":5966},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":39,"column":650,"offset":5966},"end":{"line":39,"column":651,"offset":5967},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":5317},"end":{"line":39,"column":651,"offset":5967},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework Entry Property to Access Tracking Information for Scalar Properties\",\"date\":\"2014-06-05\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":42,"column":1,"offset":5970},"end":{"line":42,"column":179,"offset":6148},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":42,"column":179,"offset":6148}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework Entry Property to Access Tracking Information for Scalar Properties\",\n  \"date\": \"2014-06-05\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Entity Framework has a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"change tracker API\"), \" exposed by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Entry\"), \" property of the DbContext. The Entry method or the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Entries\"), \" method can be used to fin or to change information that is tracked by Entity Framework. It is possible to know the current value but also the original value. It also possible to track the state of every entity, to read it and to modify it. This article cover the use of Entry for scalar properties. Scalar properties are property that has primitive type like integer, string, datetime, double, etc. It does not include any of your classes. In a subsequent post, we will cover how to track entity inside entity, and also collection of entity.\"), mdx(\"p\", null, \"The entry method has two methods that let you drill down inside an entity to change collection of others entity from an entity or to have access to other reference of entities. From there, we could use the explicit loading method, Load, to load specific portion of information without loading the whole table (as seen in a previous article with DbSet).\"), mdx(\"p\", null, \"This is a simple example to add a new entity with Entry. The code display the Person in the Local memory. The new entry is only set in the Local when its state is changed to Added. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private static void EntryToAddNewEntity() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var newPerson = new Person {Name = \\\"New Person\\\", BirthDate = new DateTime(1980, 1, 2) }; var entryPerson = context.Entry(newPerson); Console.WriteLine(context.Persons.Local.Count); //0 entryPerson.State = EntityState.Added; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \\n\")), mdx(\"p\", null, \"Modifying an existing entity with Entry is also possible without loading this one from the database and without having to update every fields. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private static void EntryToModifyExistingEntityWithoutLoadingFromDatabase() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = new Person { Id=1, Name = \\\"Updated Name\\\"}; context.Persons.Attach(existingPerson); var entryPerson = context.Entry(existingPerson); Console.WriteLine(context.Persons.Local.Count); //1 entryPerson.Property(d => d.Name).IsModified = true; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \\n``` It produces a SQL statement with only a single SET. \\n```sql\\n exec sp_executesql N'UPDATE [dbo].[People] SET [Name] = @0 WHERE ([Id] = @1) ',N'@0 nvarchar(max) ,@1 int',@0=N'Updated Name',@1=1 \\n\")), mdx(\"p\", null, \"The advantage of loading from the database is that we do not have to specify which property has been changed. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private static void EntryToModifyExistingEntityByLoadingFromDatabase() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = context.Persons.Find(1); Console.WriteLine(context.Persons.Local.Count); //1 existingPerson.Name = \\\"Updated from database\\\"; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \\n``` By modifying the property, Entity Framework has inside the tracking the original value and the current value. It knows that the only property changed is the name. When you are developing Client-Server application, you may want to modify only properties that has changed. For example, if you have a web form that has every fields and that the user modify one value, you would want to have an update executed with only the field that has changed to be in the update sql statement. Entity Framework has a method in the Entry property named CurrentValues. CurrentValues lets you set the value you want to be the active one. If this one differ from the the OriginalValues, then it is updated. To simplify the process, the CurrentValues properties has a SetValues method. It takes from an object all scalar properties and map them into the entry. Scalar properties are property that is not another entity or a collection.\\n\\n\\n```csharp\\n private static void EntryToModifyByPropertyChanged() { var objectFromUser = new Person {Id = 1, Name=\\\"Test\\\", BirthDate = new DateTime(1801, 12, 25)}; using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = context.Persons.Find(1); Console.WriteLine(context.Persons.Local.Count); //1 context.Entry(existingPerson).CurrentValues.SetValues(objectFromUser); Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \\n\")), mdx(\"p\", null, \"This code update Name and BirthDate only if the entity with the ID one has not already in the database this name and birthday. If the name is the same, than only the birthday change. If you execute twice this method, nothing will be updated.\"), mdx(\"p\", null, \"It is also possible to update without doing any select statement from the database by setting to Modified the state of the object that came from the client side.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private static void EntryToModifyByPropertyChangedWithoutUsingFind() { var objectFromUser = new Person { Id = 1, Name = \\\"Tester #2\\\", BirthDate = new DateTime(1941, 12, 25) }; using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 context.Entry(objectFromUser).State = EntityState.Modified; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \\n\")), mdx(\"p\", null, \"So far we have seen how to access the tracking information for all scalar properties with the Entry method. Three others scenarios exist that has not been covered. First, it is about Complex Object. The second is entity that reference an other (optional or required) property. And the third is entity that has a collection of entities. All code in this article is accessible through \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/MrDesjardins/EntityFrameworkTestConsole/tree/4db72abce6a1c2efcda8929d2fed7965922553c7\"\n  }, \"GitHub\"), \" or can be \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/MrDesjardins/EntityFrameworkTestConsole/archive/4db72abce6a1c2efcda8929d2fed7965922553c7.zip\"\n  }, \"downloaded from a Zip file\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework Entry Property to Access Tracking Information for Scalar Properties\",\n  \"date\": \"2014-06-05\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Entity Framework has a `}<strong parentName=\"p\">{`change tracker API`}</strong>{` exposed by the `}<strong parentName=\"p\">{`Entry`}</strong>{` property of the DbContext. The Entry method or the `}<strong parentName=\"p\">{`Entries`}</strong>{` method can be used to fin or to change information that is tracked by Entity Framework. It is possible to know the current value but also the original value. It also possible to track the state of every entity, to read it and to modify it. This article cover the use of Entry for scalar properties. Scalar properties are property that has primitive type like integer, string, datetime, double, etc. It does not include any of your classes. In a subsequent post, we will cover how to track entity inside entity, and also collection of entity.`}</p>\n    <p>{`The entry method has two methods that let you drill down inside an entity to change collection of others entity from an entity or to have access to other reference of entities. From there, we could use the explicit loading method, Load, to load specific portion of information without loading the whole table (as seen in a previous article with DbSet).`}</p>\n    <p>{`This is a simple example to add a new entity with Entry. The code display the Person in the Local memory. The new entry is only set in the Local when its state is changed to Added. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private static void EntryToAddNewEntity() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var newPerson = new Person {Name = \"New Person\", BirthDate = new DateTime(1980, 1, 2) }; var entryPerson = context.Entry(newPerson); Console.WriteLine(context.Persons.Local.Count); //0 entryPerson.State = EntityState.Added; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n`}</code></pre>\n    <p>{`Modifying an existing entity with Entry is also possible without loading this one from the database and without having to update every fields. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private static void EntryToModifyExistingEntityWithoutLoadingFromDatabase() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = new Person { Id=1, Name = \"Updated Name\"}; context.Persons.Attach(existingPerson); var entryPerson = context.Entry(existingPerson); Console.WriteLine(context.Persons.Local.Count); //1 entryPerson.Property(d => d.Name).IsModified = true; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n\\`\\`\\` It produces a SQL statement with only a single SET. \n\\`\\`\\`sql\n exec sp_executesql N'UPDATE [dbo].[People] SET [Name] = @0 WHERE ([Id] = @1) ',N'@0 nvarchar(max) ,@1 int',@0=N'Updated Name',@1=1 \n`}</code></pre>\n    <p>{`The advantage of loading from the database is that we do not have to specify which property has been changed. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private static void EntryToModifyExistingEntityByLoadingFromDatabase() { using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = context.Persons.Find(1); Console.WriteLine(context.Persons.Local.Count); //1 existingPerson.Name = \"Updated from database\"; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n\\`\\`\\` By modifying the property, Entity Framework has inside the tracking the original value and the current value. It knows that the only property changed is the name. When you are developing Client-Server application, you may want to modify only properties that has changed. For example, if you have a web form that has every fields and that the user modify one value, you would want to have an update executed with only the field that has changed to be in the update sql statement. Entity Framework has a method in the Entry property named CurrentValues. CurrentValues lets you set the value you want to be the active one. If this one differ from the the OriginalValues, then it is updated. To simplify the process, the CurrentValues properties has a SetValues method. It takes from an object all scalar properties and map them into the entry. Scalar properties are property that is not another entity or a collection.\n\n\n\\`\\`\\`csharp\n private static void EntryToModifyByPropertyChanged() { var objectFromUser = new Person {Id = 1, Name=\"Test\", BirthDate = new DateTime(1801, 12, 25)}; using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 var existingPerson = context.Persons.Find(1); Console.WriteLine(context.Persons.Local.Count); //1 context.Entry(existingPerson).CurrentValues.SetValues(objectFromUser); Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n`}</code></pre>\n    <p>{`This code update Name and BirthDate only if the entity with the ID one has not already in the database this name and birthday. If the name is the same, than only the birthday change. If you execute twice this method, nothing will be updated.`}</p>\n    <p>{`It is also possible to update without doing any select statement from the database by setting to Modified the state of the object that came from the client side.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private static void EntryToModifyByPropertyChangedWithoutUsingFind() { var objectFromUser = new Person { Id = 1, Name = \"Tester #2\", BirthDate = new DateTime(1941, 12, 25) }; using (var context = new YourContext()) { Console.WriteLine(context.Persons.Local.Count); //0 context.Entry(objectFromUser).State = EntityState.Modified; Console.WriteLine(context.Persons.Local.Count); //1 context.SaveChanges(); } } \n`}</code></pre>\n    <p>{`So far we have seen how to access the tracking information for all scalar properties with the Entry method. Three others scenarios exist that has not been covered. First, it is about Complex Object. The second is entity that reference an other (optional or required) property. And the third is entity that has a collection of entities. All code in this article is accessible through `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/MrDesjardins/EntityFrameworkTestConsole/tree/4db72abce6a1c2efcda8929d2fed7965922553c7\"\n      }}>{`GitHub`}</a>{` or can be `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/MrDesjardins/EntityFrameworkTestConsole/archive/4db72abce6a1c2efcda8929d2fed7965922553c7.zip\"\n      }}>{`downloaded from a Zip file`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}