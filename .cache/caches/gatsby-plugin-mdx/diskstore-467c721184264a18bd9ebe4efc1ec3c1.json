{"expireTime":9007200886478394000,"key":"gatsby-plugin-mdx-entire-payload-718c050dd9937f13ad2ae2ddcae82d3e--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to consume web services inside your .Net application, a tool exist to help you create the .Net code to interact with web services. This tool is a console application called \"","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":187,"offset":187},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ScvUtil.exe","position":{"start":{"line":2,"column":189,"offset":189},"end":{"line":2,"column":200,"offset":200},"indent":[]}}],"position":{"start":{"line":2,"column":187,"offset":187},"end":{"line":2,"column":202,"offset":202},"indent":[]}},{"type":"text","value":"\".","position":{"start":{"line":2,"column":202,"offset":202},"end":{"line":2,"column":204,"offset":204},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":204,"offset":204},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can find in this blog post the information concerning the location of this tool.","position":{"start":{"line":4,"column":1,"offset":206},"end":{"line":4,"column":85,"offset":290},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":206},"end":{"line":4,"column":85,"offset":290},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This application generate two files. The first file is a .cs file that contains the code of the proxy and the code of the DTO classes (complex class used by the service). The second file is a .config file that contains the information about how to connect to the web services.","position":{"start":{"line":6,"column":1,"offset":292},"end":{"line":6,"column":277,"offset":568},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":292},"end":{"line":6,"column":277,"offset":568},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To generate those files, you can simply call the ScvUtil application with the path of the webservice (the WSDL path). This is an URL.","position":{"start":{"line":8,"column":1,"offset":570},"end":{"line":8,"column":134,"offset":703},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":570},"end":{"line":8,"column":134,"offset":703},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" svcutil.exe http://localhost:1234/MyService.svc?wsdl ","position":{"start":{"line":10,"column":1,"offset":705},"end":{"line":12,"column":5,"offset":769},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The problem is that doing it with only a single parameter will output those file to your C:","position":{"start":{"line":14,"column":1,"offset":771},"end":{"line":14,"column":92,"offset":862},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":14,"column":92,"offset":862},"end":{"line":14,"column":94,"offset":864},"indent":[]}},{"type":"text","value":"windows","position":{"start":{"line":14,"column":94,"offset":864},"end":{"line":14,"column":101,"offset":871},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":14,"column":101,"offset":871},"end":{"line":14,"column":103,"offset":873},"indent":[]}},{"type":"text","value":"system32","position":{"start":{"line":14,"column":103,"offset":873},"end":{"line":14,"column":111,"offset":881},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":14,"column":111,"offset":881},"end":{"line":14,"column":113,"offset":883},"indent":[]}},{"type":"text","value":" which is not clean and can cause security problem. However, it's possible to tell where to output those two files but adding 2 parameters to the svcutil.exe tools.","position":{"start":{"line":14,"column":113,"offset":883},"end":{"line":14,"column":277,"offset":1047},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":771},"end":{"line":14,"column":277,"offset":1047},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" svcutil.exe http://localhost:1234/MyService.svc?wsdl /out:\"c:\\\\myPath\\\\proxy.cs\" /config:\"c:\\\\myPath\\\\config.config\" ","position":{"start":{"line":16,"column":1,"offset":1049},"end":{"line":18,"column":5,"offset":1177},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Explicit destinations give you the leverage to output the CS file and the configuration file where you want.","position":{"start":{"line":20,"column":1,"offset":1179},"end":{"line":20,"column":109,"offset":1287},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1179},"end":{"line":20,"column":109,"offset":1287},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"What is ScvUtil.exe?\",\"date\":\"2013-03-15\",\"categories\":[\"webservices\"]}","position":{"start":{"line":23,"column":1,"offset":1290},"end":{"line":23,"column":110,"offset":1399},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":110,"offset":1399}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What is ScvUtil.exe?\",\n  \"date\": \"2013-03-15\",\n  \"categories\": [\"webservices\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you want to consume web services inside your .Net application, a tool exist to help you create the .Net code to interact with web services. This tool is a console application called \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ScvUtil.exe\"), \"\\\".\"), mdx(\"p\", null, \"You can find in this blog post the information concerning the location of this tool.\"), mdx(\"p\", null, \"This application generate two files. The first file is a .cs file that contains the code of the proxy and the code of the DTO classes (complex class used by the service). The second file is a .config file that contains the information about how to connect to the web services.\"), mdx(\"p\", null, \"To generate those files, you can simply call the ScvUtil application with the path of the webservice (the WSDL path). This is an URL.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" svcutil.exe http://localhost:1234/MyService.svc?wsdl \\n\")), mdx(\"p\", null, \"The problem is that doing it with only a single parameter will output those file to your C:\", \"\\\\\", \"windows\", \"\\\\\", \"system32\", \"\\\\\", \" which is not clean and can cause security problem. However, it's possible to tell where to output those two files but adding 2 parameters to the svcutil.exe tools.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" svcutil.exe http://localhost:1234/MyService.svc?wsdl /out:\\\"c:\\\\\\\\myPath\\\\\\\\proxy.cs\\\" /config:\\\"c:\\\\\\\\myPath\\\\\\\\config.config\\\" \\n\")), mdx(\"p\", null, \"Explicit destinations give you the leverage to output the CS file and the configuration file where you want.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"What is ScvUtil.exe?\",\n  \"date\": \"2013-03-15\",\n  \"categories\": [\"webservices\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you want to consume web services inside your .Net application, a tool exist to help you create the .Net code to interact with web services. This tool is a console application called \"`}<strong parentName=\"p\">{`ScvUtil.exe`}</strong>{`\".`}</p>\n    <p>{`You can find in this blog post the information concerning the location of this tool.`}</p>\n    <p>{`This application generate two files. The first file is a .cs file that contains the code of the proxy and the code of the DTO classes (complex class used by the service). The second file is a .config file that contains the information about how to connect to the web services.`}</p>\n    <p>{`To generate those files, you can simply call the ScvUtil application with the path of the webservice (the WSDL path). This is an URL.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` svcutil.exe http://localhost:1234/MyService.svc?wsdl \n`}</code></pre>\n    <p>{`The problem is that doing it with only a single parameter will output those file to your C:`}{`\\\\`}{`windows`}{`\\\\`}{`system32`}{`\\\\`}{` which is not clean and can cause security problem. However, it's possible to tell where to output those two files but adding 2 parameters to the svcutil.exe tools.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` svcutil.exe http://localhost:1234/MyService.svc?wsdl /out:\"c:\\\\\\\\myPath\\\\\\\\proxy.cs\" /config:\"c:\\\\\\\\myPath\\\\\\\\config.config\" \n`}</code></pre>\n    <p>{`Explicit destinations give you the leverage to output the CS file and the configuration file where you want.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}