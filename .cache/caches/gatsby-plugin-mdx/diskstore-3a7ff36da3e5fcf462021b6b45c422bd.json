{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-d90462d842b617524dc7ad529e3fb69e--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you must pass to a Store Procedure or just for a simple query a variable of type ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":85,"offset":85},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInt","position":{"start":{"line":2,"column":87,"offset":87},"end":{"line":2,"column":93,"offset":93},"indent":[]}}],"position":{"start":{"line":2,"column":85,"offset":85},"end":{"line":2,"column":95,"offset":95},"indent":[]}},{"type":"text","value":" beware you can be surprised with the result. ","position":{"start":{"line":2,"column":95,"offset":95},"end":{"line":2,"column":141,"offset":141},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInt","position":{"start":{"line":2,"column":143,"offset":143},"end":{"line":2,"column":149,"offset":149},"indent":[]}}],"position":{"start":{"line":2,"column":141,"offset":141},"end":{"line":2,"column":151,"offset":151},"indent":[]}},{"type":"text","value":" in SqlServer has nothing to do with the ","position":{"start":{"line":2,"column":151,"offset":151},"end":{"line":2,"column":192,"offset":192},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInteger","position":{"start":{"line":2,"column":194,"offset":194},"end":{"line":2,"column":204,"offset":204},"indent":[]}}],"position":{"start":{"line":2,"column":192,"offset":192},"end":{"line":2,"column":206,"offset":206},"indent":[]}},{"type":"text","value":" class of .Net. ","position":{"start":{"line":2,"column":206,"offset":206},"end":{"line":2,"column":222,"offset":222},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInt","position":{"start":{"line":2,"column":224,"offset":224},"end":{"line":2,"column":230,"offset":230},"indent":[]}}],"position":{"start":{"line":2,"column":222,"offset":222},"end":{"line":2,"column":232,"offset":232},"indent":[]}},{"type":"text","value":" in Sql exists a long way before ","position":{"start":{"line":2,"column":232,"offset":232},"end":{"line":2,"column":265,"offset":265},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInteger","position":{"start":{"line":2,"column":267,"offset":267},"end":{"line":2,"column":277,"offset":277},"indent":[]}}],"position":{"start":{"line":2,"column":265,"offset":265},"end":{"line":2,"column":279,"offset":279},"indent":[]}},{"type":"text","value":" from .Net (4.0). If you are using ","position":{"start":{"line":2,"column":279,"offset":279},"end":{"line":2,"column":314,"offset":314},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInteger","position":{"start":{"line":2,"column":316,"offset":316},"end":{"line":2,"column":326,"offset":326},"indent":[]}}],"position":{"start":{"line":2,"column":314,"offset":314},"end":{"line":2,"column":328,"offset":328},"indent":[]}},{"type":"text","value":" you will get a ","position":{"start":{"line":2,"column":328,"offset":328},"end":{"line":2,"column":344,"offset":344},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"System.InvalidCastException","position":{"start":{"line":2,"column":345,"offset":345},"end":{"line":2,"column":372,"offset":372},"indent":[]}}],"position":{"start":{"line":2,"column":344,"offset":344},"end":{"line":2,"column":373,"offset":373},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":373,"offset":373},"end":{"line":2,"column":374,"offset":374},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":374,"offset":374},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"An exception of type 'System.InvalidCastException' occurred in System.Data.dll but was not handled in user code","position":{"start":{"line":4,"column":3,"offset":378},"end":{"line":4,"column":114,"offset":489},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":378},"end":{"line":4,"column":114,"offset":489},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Additional information: Failed to convert parameter value from a BigInteger to a Int64.","position":{"start":{"line":6,"column":3,"offset":495},"end":{"line":6,"column":90,"offset":582},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":495},"end":{"line":6,"column":90,"offset":582},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":376},"end":{"line":6,"column":90,"offset":582},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To pass a value to Sql Server of type ","position":{"start":{"line":8,"column":1,"offset":584},"end":{"line":8,"column":39,"offset":622},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BigInt","position":{"start":{"line":8,"column":41,"offset":624},"end":{"line":8,"column":47,"offset":630},"indent":[]}}],"position":{"start":{"line":8,"column":39,"offset":622},"end":{"line":8,"column":49,"offset":632},"indent":[]}},{"type":"text","value":", you must use a ","position":{"start":{"line":8,"column":49,"offset":632},"end":{"line":8,"column":66,"offset":649},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"long","position":{"start":{"line":8,"column":68,"offset":651},"end":{"line":8,"column":72,"offset":655},"indent":[]}}],"position":{"start":{"line":8,"column":66,"offset":649},"end":{"line":8,"column":74,"offset":657},"indent":[]}},{"type":"text","value":" in .Net.","position":{"start":{"line":8,"column":74,"offset":657},"end":{"line":8,"column":83,"offset":666},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":584},"end":{"line":8,"column":83,"offset":666},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, here is how to pass a ","position":{"start":{"line":10,"column":1,"offset":668},"end":{"line":10,"column":36,"offset":703},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"long","position":{"start":{"line":10,"column":38,"offset":705},"end":{"line":10,"column":42,"offset":709},"indent":[]}}],"position":{"start":{"line":10,"column":36,"offset":703},"end":{"line":10,"column":44,"offset":711},"indent":[]}},{"type":"text","value":" to SqlServer using SqlParameter.","position":{"start":{"line":10,"column":44,"offset":711},"end":{"line":10,"column":77,"offset":744},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":668},"end":{"line":10,"column":77,"offset":744},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" long myBigNumber = 1; var myParameter = new SqlParameter(\"@myParameterName\", myBigNumber) { SqlDbType = SqlDbType.BigInt }; ","position":{"start":{"line":13,"column":1,"offset":747},"end":{"line":15,"column":4,"offset":886},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You have to use a long for the value, but you specify the type to be of SqlDbType.BigInt. Has you can see, we do not need to specify the DbType but only the SqlDbType. We are using a long because a long and Int64 is the same type.","position":{"start":{"line":17,"column":1,"offset":888},"end":{"line":17,"column":231,"offset":1118},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":888},"end":{"line":17,"column":231,"offset":1118},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Working with BigInteger with C# .Net and Sql Server\",\"date\":\"2014-07-29\",\"categories\":[\"c-sharp\",\"sql\"]}","position":{"start":{"line":20,"column":1,"offset":1121},"end":{"line":20,"column":143,"offset":1263},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":143,"offset":1263}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Working with BigInteger with C# .Net and Sql Server\",\n  \"date\": \"2014-07-29\",\n  \"categories\": [\"c-sharp\", \"sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you must pass to a Store Procedure or just for a simple query a variable of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \" beware you can be surprised with the result. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \" in SqlServer has nothing to do with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInteger\"), \" class of .Net. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \" in Sql exists a long way before \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInteger\"), \" from .Net (4.0). If you are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInteger\"), \" you will get a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"System.InvalidCastException\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An exception of type 'System.InvalidCastException' occurred in System.Data.dll but was not handled in user code\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Additional information: Failed to convert parameter value from a BigInteger to a Int64.\")), mdx(\"p\", null, \"To pass a value to Sql Server of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \", you must use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"long\"), \" in .Net.\"), mdx(\"p\", null, \"For example, here is how to pass a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"long\"), \" to SqlServer using SqlParameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" long myBigNumber = 1; var myParameter = new SqlParameter(\\\"@myParameterName\\\", myBigNumber) { SqlDbType = SqlDbType.BigInt }; \\n\")), mdx(\"p\", null, \"You have to use a long for the value, but you specify the type to be of SqlDbType.BigInt. Has you can see, we do not need to specify the DbType but only the SqlDbType. We are using a long because a long and Int64 is the same type.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Working with BigInteger with C# .Net and Sql Server\",\n  \"date\": \"2014-07-29\",\n  \"categories\": [\"c-sharp\", \"sql\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you must pass to a Store Procedure or just for a simple query a variable of type `}<strong parentName=\"p\">{`BigInt`}</strong>{` beware you can be surprised with the result. `}<strong parentName=\"p\">{`BigInt`}</strong>{` in SqlServer has nothing to do with the `}<strong parentName=\"p\">{`BigInteger`}</strong>{` class of .Net. `}<strong parentName=\"p\">{`BigInt`}</strong>{` in Sql exists a long way before `}<strong parentName=\"p\">{`BigInteger`}</strong>{` from .Net (4.0). If you are using `}<strong parentName=\"p\">{`BigInteger`}</strong>{` you will get a `}<em parentName=\"p\">{`System.InvalidCastException`}</em>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An exception of type 'System.InvalidCastException' occurred in System.Data.dll but was not handled in user code`}</p>\n      <p parentName=\"blockquote\">{`Additional information: Failed to convert parameter value from a BigInteger to a Int64.`}</p>\n    </blockquote>\n    <p>{`To pass a value to Sql Server of type `}<strong parentName=\"p\">{`BigInt`}</strong>{`, you must use a `}<strong parentName=\"p\">{`long`}</strong>{` in .Net.`}</p>\n    <p>{`For example, here is how to pass a `}<strong parentName=\"p\">{`long`}</strong>{` to SqlServer using SqlParameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` long myBigNumber = 1; var myParameter = new SqlParameter(\"@myParameterName\", myBigNumber) { SqlDbType = SqlDbType.BigInt }; \n`}</code></pre>\n    <p>{`You have to use a long for the value, but you specify the type to be of SqlDbType.BigInt. Has you can see, we do not need to specify the DbType but only the SqlDbType. We are using a long because a long and Int64 is the same type.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}