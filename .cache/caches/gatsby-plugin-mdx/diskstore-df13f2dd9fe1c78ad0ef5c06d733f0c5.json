{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-355a88ab4c2cb78605aa2d808fd06d5f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to create in your SELECT a new DateTime within your Linq to Entity query, you will reach an exception telling you that you cannot use parameterless class.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":167,"offset":167},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":167,"offset":167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To solve this problem, you need to use a special function that only Linq to Entity can use. Entity Framework has some methods that will convert C# code into Sql function. In our case, the method is called \"","position":{"start":{"line":4,"column":1,"offset":169},"end":{"line":4,"column":207,"offset":375},"indent":[]}},{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"EntityFunctions.CreateDateTime(...)","position":{"start":{"line":4,"column":210,"offset":378},"end":{"line":4,"column":245,"offset":413},"indent":[]}}],"position":{"start":{"line":4,"column":209,"offset":377},"end":{"line":4,"column":246,"offset":414},"indent":[]}}],"position":{"start":{"line":4,"column":207,"offset":375},"end":{"line":4,"column":248,"offset":416},"indent":[]}},{"type":"text","value":"\".","position":{"start":{"line":4,"column":248,"offset":416},"end":{"line":4,"column":250,"offset":418},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":169},"end":{"line":4,"column":250,"offset":418},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of having something like this:","position":{"start":{"line":6,"column":1,"offset":420},"end":{"line":6,"column":39,"offset":458},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":420},"end":{"line":6,"column":39,"offset":458},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var data = (from i in Database.Users group i by new {y=i.InvoiceDate.Year,m = i.InvoiceDate.Month} into g select new UserStatistic{ Date = new DateTime(g.Key.y, g.Key.m, 1), Experience = g.Sum(o => o.Exp)); ","position":{"start":{"line":9,"column":1,"offset":461},"end":{"line":11,"column":4,"offset":683},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You need to use the EntityFunctions.CreateDateTime :","position":{"start":{"line":13,"column":1,"offset":685},"end":{"line":13,"column":53,"offset":737},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":685},"end":{"line":13,"column":53,"offset":737},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var data = (from i in Database.Users group i by new {y=i.InvoiceDate.Year,m = i.InvoiceDate.Month} into g select new UserStatistic{ Date = EntityFunctions.CreateDateTime(g.Key.y, g.Key.m, 1, 0, 0, 0), Experience = g.Sum(o => o.Exp)); ","position":{"start":{"line":16,"column":1,"offset":740},"end":{"line":18,"column":4,"offset":989},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Both code do the same thing, but the second work with Entity Framework. This is because it uses Linq to Entity which convert its statement into SQL and hence, doesn't know how to create a .Net DateTime object.","position":{"start":{"line":20,"column":1,"offset":991},"end":{"line":20,"column":210,"offset":1200},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":991},"end":{"line":20,"column":210,"offset":1200},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can find the complete exhaustive list of entity functions at ","position":{"start":{"line":22,"column":1,"offset":1202},"end":{"line":22,"column":66,"offset":1267},"indent":[]}},{"type":"link","title":"Entity Framework Functions to Sql","url":"http://msdn.microsoft.com/en-us/library/dd412643","children":[{"type":"text","value":"Microsoft MSDN web site","position":{"start":{"line":22,"column":67,"offset":1268},"end":{"line":22,"column":90,"offset":1291},"indent":[]}}],"position":{"start":{"line":22,"column":66,"offset":1267},"end":{"line":22,"column":177,"offset":1378},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":22,"column":177,"offset":1378},"end":{"line":22,"column":178,"offset":1379},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1202},"end":{"line":22,"column":178,"offset":1379},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to use DateTime in Select with Linq to Entity (Entity Framework 4.3)\",\"date\":\"2012-07-27\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":25,"column":1,"offset":1382},"end":{"line":25,"column":167,"offset":1548},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":25,"column":167,"offset":1548}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use DateTime in Select with Linq to Entity (Entity Framework 4.3)\",\n  \"date\": \"2012-07-27\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you want to create in your SELECT a new DateTime within your Linq to Entity query, you will reach an exception telling you that you cannot use parameterless class.\"), mdx(\"p\", null, \"To solve this problem, you need to use a special function that only Linq to Entity can use. Entity Framework has some methods that will convert C# code into Sql function. In our case, the method is called \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"EntityFunctions.CreateDateTime(...)\")), \"\\\".\"), mdx(\"p\", null, \"Instead of having something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var data = (from i in Database.Users group i by new {y=i.InvoiceDate.Year,m = i.InvoiceDate.Month} into g select new UserStatistic{ Date = new DateTime(g.Key.y, g.Key.m, 1), Experience = g.Sum(o => o.Exp)); \\n\")), mdx(\"p\", null, \"You need to use the EntityFunctions.CreateDateTime :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var data = (from i in Database.Users group i by new {y=i.InvoiceDate.Year,m = i.InvoiceDate.Month} into g select new UserStatistic{ Date = EntityFunctions.CreateDateTime(g.Key.y, g.Key.m, 1, 0, 0, 0), Experience = g.Sum(o => o.Exp)); \\n\")), mdx(\"p\", null, \"Both code do the same thing, but the second work with Entity Framework. This is because it uses Linq to Entity which convert its statement into SQL and hence, doesn't know how to create a .Net DateTime object.\"), mdx(\"p\", null, \"You can find the complete exhaustive list of entity functions at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/dd412643\",\n    \"title\": \"Entity Framework Functions to Sql\"\n  }, \"Microsoft MSDN web site\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to use DateTime in Select with Linq to Entity (Entity Framework 4.3)\",\n  \"date\": \"2012-07-27\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you want to create in your SELECT a new DateTime within your Linq to Entity query, you will reach an exception telling you that you cannot use parameterless class.`}</p>\n    <p>{`To solve this problem, you need to use a special function that only Linq to Entity can use. Entity Framework has some methods that will convert C# code into Sql function. In our case, the method is called \"`}<strong parentName=\"p\"><em parentName=\"strong\">{`EntityFunctions.CreateDateTime(...)`}</em></strong>{`\".`}</p>\n    <p>{`Instead of having something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var data = (from i in Database.Users group i by new {y=i.InvoiceDate.Year,m = i.InvoiceDate.Month} into g select new UserStatistic{ Date = new DateTime(g.Key.y, g.Key.m, 1), Experience = g.Sum(o => o.Exp)); \n`}</code></pre>\n    <p>{`You need to use the EntityFunctions.CreateDateTime :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var data = (from i in Database.Users group i by new {y=i.InvoiceDate.Year,m = i.InvoiceDate.Month} into g select new UserStatistic{ Date = EntityFunctions.CreateDateTime(g.Key.y, g.Key.m, 1, 0, 0, 0), Experience = g.Sum(o => o.Exp)); \n`}</code></pre>\n    <p>{`Both code do the same thing, but the second work with Entity Framework. This is because it uses Linq to Entity which convert its statement into SQL and hence, doesn't know how to create a .Net DateTime object.`}</p>\n    <p>{`You can find the complete exhaustive list of entity functions at `}<a parentName=\"p\" {...{\n        \"href\": \"http://msdn.microsoft.com/en-us/library/dd412643\",\n        \"title\": \"Entity Framework Functions to Sql\"\n      }}>{`Microsoft MSDN web site`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}