{"expireTime":9007200886478390000,"key":"gatsby-plugin-mdx-entire-payload-0e916f08cdc78e3da9d79e9ab2c42ed1--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you have a list of ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":23,"offset":23},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"key value pair","position":{"start":{"line":2,"column":25,"offset":25},"end":{"line":2,"column":39,"offset":39},"indent":[]}}],"position":{"start":{"line":2,"column":23,"offset":23},"end":{"line":2,"column":41,"offset":41},"indent":[]}},{"type":"text","value":" and you are searching something that might not be there, you may want to use ","position":{"start":{"line":2,"column":41,"offset":41},"end":{"line":2,"column":119,"offset":119},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"SingleOrDefault","position":{"start":{"line":2,"column":121,"offset":121},"end":{"line":2,"column":136,"offset":136},"indent":[]}}],"position":{"start":{"line":2,"column":119,"offset":119},"end":{"line":2,"column":138,"offset":138},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":2,"column":138,"offset":138},"end":{"line":2,"column":143,"offset":143},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"FirstOrDefault","position":{"start":{"line":2,"column":145,"offset":145},"end":{"line":2,"column":159,"offset":159},"indent":[]}}],"position":{"start":{"line":2,"column":143,"offset":143},"end":{"line":2,"column":161,"offset":161},"indent":[]}},{"type":"text","value":" to get this element. If it does not exist, you may think that the Linq to object return null but in fact, it return the default value which is a new instance of KeyValuePair class.","position":{"start":{"line":2,"column":161,"offset":161},"end":{"line":2,"column":342,"offset":342},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":342,"offset":342},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var kvp1 = new KeyValuePair<string, string>(\"a\", \"b\"); var kvp2 = new KeyValuePair<string, string>(\"c\", \"d\"); var list = new List<KeyValuePair<string, string>> {kvp1, kvp2}; var value = list.SingleOrDefault(d => d.Key == \"notfound\").Value; ","position":{"start":{"line":5,"column":1,"offset":345},"end":{"line":7,"column":4,"offset":600},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above return from SingleOrDefault a new KeyValuePair object with the Key and the Value to NULL. The return of the Linq is not NULL.","position":{"start":{"line":9,"column":1,"offset":602},"end":{"line":9,"column":141,"offset":742},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":602},"end":{"line":9,"column":141,"offset":742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In fact, this is the case of any of your classes that you search and that this one is not found. ","position":{"start":{"line":11,"column":1,"offset":744},"end":{"line":11,"column":98,"offset":841},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":744},"end":{"line":11,"column":98,"offset":841},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var kvp3 = new MyKeyValuePair {Key = \"a\", Value = \"b\"}; var kvp4 = new MyKeyValuePair {Key = \"c\", Value = \"d\"}; var list2 = new List<MyKeyValuePair> { kvp3, kvp4 }; var value2 = list.SingleOrDefault(d => d.Key == \"notfound\").Value;\n\npublic class MyKeyValuePair { public string Key { get; set; } public string Value { get; set; } } ","position":{"start":{"line":12,"column":1,"offset":842},"end":{"line":16,"column":4,"offset":1188},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The result is that value2 is an ","position":{"start":{"line":18,"column":1,"offset":1190},"end":{"line":18,"column":33,"offset":1222},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Exception","position":{"start":{"line":18,"column":35,"offset":1224},"end":{"line":18,"column":44,"offset":1233},"indent":[]}}],"position":{"start":{"line":18,"column":33,"offset":1222},"end":{"line":18,"column":46,"offset":1235},"indent":[]}},{"type":"text","value":" and this is because SingleOrDefault has returned NULL. How come? It returns the default value has the name of the method specify. So, if we verify the default value of a class we will get an empty object right? Wrong! We are getting a NULL.","position":{"start":{"line":18,"column":46,"offset":1235},"end":{"line":18,"column":287,"offset":1476},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1190},"end":{"line":18,"column":287,"offset":1476},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var defaultIs = default(MyKeyValuePair); //This return null! ","position":{"start":{"line":21,"column":1,"offset":1479},"end":{"line":23,"column":4,"offset":1555},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we check the source code of SingleOrDefault, we realize that it uses the exact same default method.","position":{"start":{"line":25,"column":1,"offset":1557},"end":{"line":25,"column":103,"offset":1659},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1557},"end":{"line":25,"column":103,"offset":1659},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) { if (source == null) throw Error.ArgumentNull(\"source\"); if (predicate == null) throw Error.ArgumentNull(\"predicate\"); TSource result = default(TSource); long count = 0; foreach (TSource element in source) { if (predicate(element)) { result = element; checked { count++; } } } switch (count) { case 0: return default(TSource); case 1: return result; } throw Error.MoreThanOneMatch(); } ","position":{"start":{"line":27,"column":1,"offset":1661},"end":{"line":29,"column":4,"offset":2174},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"KeyValuePair class, or should I say the KeyValuePair ","position":{"start":{"line":31,"column":1,"offset":2176},"end":{"line":31,"column":54,"offset":2229},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"struct","position":{"start":{"line":31,"column":56,"offset":2231},"end":{"line":31,"column":62,"offset":2237},"indent":[]}}],"position":{"start":{"line":31,"column":54,"offset":2229},"end":{"line":31,"column":64,"offset":2239},"indent":[]}},{"type":"text","value":" default is different. The reason is that the default value of a structure is not the same as a class. It returns an new structure and not null. The mystery is now resolved. For your information, you cannot define you \"default value\" for your classes. Here are something interesting from MSDN.","position":{"start":{"line":31,"column":64,"offset":2239},"end":{"line":31,"column":357,"offset":2532},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2176},"end":{"line":31,"column":357,"offset":2532},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The solution is to use the default keyword, which will return null for reference types and zero for numeric value types. For structs, it will return each member of the struct initialized to zero or null depending on whether they are value or reference type.","position":{"start":{"line":33,"column":3,"offset":2536},"end":{"line":33,"column":260,"offset":2793},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":2536},"end":{"line":33,"column":260,"offset":2793},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2534},"end":{"line":33,"column":260,"offset":2793},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"KeyValuePair does not return NULL with Linq to Object SingleOrDefault Method\",\"date\":\"2014-11-24\",\"categories\":[\"c-sharp\",\"linq\"]}","position":{"start":{"line":36,"column":1,"offset":2796},"end":{"line":36,"column":169,"offset":2964},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":169,"offset":2964}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"KeyValuePair does not return NULL with Linq to Object SingleOrDefault Method\",\n  \"date\": \"2014-11-24\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have a list of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"key value pair\"), \" and you are searching something that might not be there, you may want to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SingleOrDefault\"), \", or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FirstOrDefault\"), \" to get this element. If it does not exist, you may think that the Linq to object return null but in fact, it return the default value which is a new instance of KeyValuePair class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var kvp1 = new KeyValuePair<string, string>(\\\"a\\\", \\\"b\\\"); var kvp2 = new KeyValuePair<string, string>(\\\"c\\\", \\\"d\\\"); var list = new List<KeyValuePair<string, string>> {kvp1, kvp2}; var value = list.SingleOrDefault(d => d.Key == \\\"notfound\\\").Value; \\n\")), mdx(\"p\", null, \"The code above return from SingleOrDefault a new KeyValuePair object with the Key and the Value to NULL. The return of the Linq is not NULL.\"), mdx(\"p\", null, \"In fact, this is the case of any of your classes that you search and that this one is not found. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var kvp3 = new MyKeyValuePair {Key = \\\"a\\\", Value = \\\"b\\\"}; var kvp4 = new MyKeyValuePair {Key = \\\"c\\\", Value = \\\"d\\\"}; var list2 = new List<MyKeyValuePair> { kvp3, kvp4 }; var value2 = list.SingleOrDefault(d => d.Key == \\\"notfound\\\").Value;\\n\\npublic class MyKeyValuePair { public string Key { get; set; } public string Value { get; set; } } \\n\")), mdx(\"p\", null, \"The result is that value2 is an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Exception\"), \" and this is because SingleOrDefault has returned NULL. How come? It returns the default value has the name of the method specify. So, if we verify the default value of a class we will get an empty object right? Wrong! We are getting a NULL.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var defaultIs = default(MyKeyValuePair); //This return null! \\n\")), mdx(\"p\", null, \"If we check the source code of SingleOrDefault, we realize that it uses the exact same default method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) { if (source == null) throw Error.ArgumentNull(\\\"source\\\"); if (predicate == null) throw Error.ArgumentNull(\\\"predicate\\\"); TSource result = default(TSource); long count = 0; foreach (TSource element in source) { if (predicate(element)) { result = element; checked { count++; } } } switch (count) { case 0: return default(TSource); case 1: return result; } throw Error.MoreThanOneMatch(); } \\n\")), mdx(\"p\", null, \"KeyValuePair class, or should I say the KeyValuePair \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"struct\"), \" default is different. The reason is that the default value of a structure is not the same as a class. It returns an new structure and not null. The mystery is now resolved. For your information, you cannot define you \\\"default value\\\" for your classes. Here are something interesting from MSDN.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The solution is to use the default keyword, which will return null for reference types and zero for numeric value types. For structs, it will return each member of the struct initialized to zero or null depending on whether they are value or reference type.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"KeyValuePair does not return NULL with Linq to Object SingleOrDefault Method\",\n  \"date\": \"2014-11-24\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you have a list of `}<strong parentName=\"p\">{`key value pair`}</strong>{` and you are searching something that might not be there, you may want to use `}<strong parentName=\"p\">{`SingleOrDefault`}</strong>{`, or `}<strong parentName=\"p\">{`FirstOrDefault`}</strong>{` to get this element. If it does not exist, you may think that the Linq to object return null but in fact, it return the default value which is a new instance of KeyValuePair class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var kvp1 = new KeyValuePair<string, string>(\"a\", \"b\"); var kvp2 = new KeyValuePair<string, string>(\"c\", \"d\"); var list = new List<KeyValuePair<string, string>> {kvp1, kvp2}; var value = list.SingleOrDefault(d => d.Key == \"notfound\").Value; \n`}</code></pre>\n    <p>{`The code above return from SingleOrDefault a new KeyValuePair object with the Key and the Value to NULL. The return of the Linq is not NULL.`}</p>\n    <p>{`In fact, this is the case of any of your classes that you search and that this one is not found. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var kvp3 = new MyKeyValuePair {Key = \"a\", Value = \"b\"}; var kvp4 = new MyKeyValuePair {Key = \"c\", Value = \"d\"}; var list2 = new List<MyKeyValuePair> { kvp3, kvp4 }; var value2 = list.SingleOrDefault(d => d.Key == \"notfound\").Value;\n\npublic class MyKeyValuePair { public string Key { get; set; } public string Value { get; set; } } \n`}</code></pre>\n    <p>{`The result is that value2 is an `}<strong parentName=\"p\">{`Exception`}</strong>{` and this is because SingleOrDefault has returned NULL. How come? It returns the default value has the name of the method specify. So, if we verify the default value of a class we will get an empty object right? Wrong! We are getting a NULL.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var defaultIs = default(MyKeyValuePair); //This return null! \n`}</code></pre>\n    <p>{`If we check the source code of SingleOrDefault, we realize that it uses the exact same default method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) { if (source == null) throw Error.ArgumentNull(\"source\"); if (predicate == null) throw Error.ArgumentNull(\"predicate\"); TSource result = default(TSource); long count = 0; foreach (TSource element in source) { if (predicate(element)) { result = element; checked { count++; } } } switch (count) { case 0: return default(TSource); case 1: return result; } throw Error.MoreThanOneMatch(); } \n`}</code></pre>\n    <p>{`KeyValuePair class, or should I say the KeyValuePair `}<strong parentName=\"p\">{`struct`}</strong>{` default is different. The reason is that the default value of a structure is not the same as a class. It returns an new structure and not null. The mystery is now resolved. For your information, you cannot define you \"default value\" for your classes. Here are something interesting from MSDN.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The solution is to use the default keyword, which will return null for reference types and zero for numeric value types. For structs, it will return each member of the struct initialized to zero or null depending on whether they are value or reference type.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}