{"expireTime":9007200886478398000,"key":"gatsby-plugin-mdx-entire-payload-0d589c563f4ef46bcc1d9857f35dc15a--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Entity Framework Object Context","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":35,"offset":35},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":35,"offset":35},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The object created from the Entity Model that hold all objects has a life cycle like all other objects. But, this one should catch more your attention because it can come very big with all the object's state tracking that it has to remember. Moreover, it caches values. So, I do not have to tell you that with a medium or big application that the ram memory can come very high.","position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":4,"column":378,"offset":414},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":4,"column":378,"offset":414},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"ObjectContext","position":{"start":{"line":6,"column":3,"offset":418},"end":{"line":6,"column":16,"offset":431},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":416},"end":{"line":6,"column":18,"offset":433},"indent":[]}},{"type":"text","value":" class inherit from ","position":{"start":{"line":6,"column":18,"offset":433},"end":{"line":6,"column":38,"offset":453},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IDisposable","position":{"start":{"line":6,"column":40,"offset":455},"end":{"line":6,"column":51,"offset":466},"indent":[]}}],"position":{"start":{"line":6,"column":38,"offset":453},"end":{"line":6,"column":53,"offset":468},"indent":[]}},{"type":"text","value":" interface so you can, and should, use USING statement when using Entity Framework. The problem with this approach is that the object tracking is loss. So, it solves only the problem concerning the memory. If you are getting information and know that you gonna change it than is better not to use USING, but still use .Dispose at the end. But, if you get information only or you update right away the information, it's better to use USING.","position":{"start":{"line":6,"column":53,"offset":468},"end":{"line":6,"column":492,"offset":907},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":416},"end":{"line":6,"column":492,"offset":907},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"States","position":{"start":{"line":8,"column":5,"offset":913},"end":{"line":8,"column":11,"offset":919},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":909},"end":{"line":8,"column":11,"offset":919},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Entity Framework has 5 possibles states. The first one is when new object is adding. The state is than ","position":{"start":{"line":10,"column":1,"offset":921},"end":{"line":10,"column":104,"offset":1024},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Added","position":{"start":{"line":10,"column":105,"offset":1025},"end":{"line":10,"column":110,"offset":1030},"indent":[]}}],"position":{"start":{"line":10,"column":104,"offset":1024},"end":{"line":10,"column":111,"offset":1031},"indent":[]}},{"type":"text","value":". Once saved the state of this object come to ","position":{"start":{"line":10,"column":111,"offset":1031},"end":{"line":10,"column":157,"offset":1077},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Unchanged","position":{"start":{"line":10,"column":158,"offset":1078},"end":{"line":10,"column":167,"offset":1087},"indent":[]}}],"position":{"start":{"line":10,"column":157,"offset":1077},"end":{"line":10,"column":168,"offset":1088},"indent":[]}},{"type":"text","value":". When an object is deleted, its state changes to Deleted until the object context saves it to the database. It's than to ","position":{"start":{"line":10,"column":168,"offset":1088},"end":{"line":10,"column":290,"offset":1210},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Detached","position":{"start":{"line":10,"column":291,"offset":1211},"end":{"line":10,"column":299,"offset":1219},"indent":[]}}],"position":{"start":{"line":10,"column":290,"offset":1210},"end":{"line":10,"column":300,"offset":1220},"indent":[]}},{"type":"text","value":". The Modified state is a little bit more tricky. When using Entity Object (Not POCO) when a scalar object is changed, the state automatically change to ","position":{"start":{"line":10,"column":300,"offset":1220},"end":{"line":10,"column":453,"offset":1373},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Modified","position":{"start":{"line":10,"column":454,"offset":1374},"end":{"line":10,"column":462,"offset":1382},"indent":[]}}],"position":{"start":{"line":10,"column":453,"offset":1373},"end":{"line":10,"column":463,"offset":1383},"indent":[]}},{"type":"text","value":". For POCO, it requires to have a call to ","position":{"start":{"line":10,"column":463,"offset":1383},"end":{"line":10,"column":505,"offset":1425},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"DetectChanges","position":{"start":{"line":10,"column":506,"offset":1426},"end":{"line":10,"column":519,"offset":1439},"indent":[]}}],"position":{"start":{"line":10,"column":505,"offset":1425},"end":{"line":10,"column":520,"offset":1440},"indent":[]}},{"type":"text","value":" to be able to mark the object as ","position":{"start":{"line":10,"column":520,"offset":1440},"end":{"line":10,"column":554,"offset":1474},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Modified","position":{"start":{"line":10,"column":555,"offset":1475},"end":{"line":10,"column":563,"offset":1483},"indent":[]}}],"position":{"start":{"line":10,"column":554,"offset":1474},"end":{"line":10,"column":564,"offset":1484},"indent":[]}},{"type":"text","value":". When an object is loaded from the object context, it's default state is unchanged.","position":{"start":{"line":10,"column":564,"offset":1484},"end":{"line":10,"column":648,"offset":1568},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":921},"end":{"line":10,"column":648,"offset":1568},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a complete example that show with the Northwind database and Entityframework the state change from the creating to the removing phase.","position":{"start":{"line":12,"column":1,"offset":1570},"end":{"line":12,"column":143,"offset":1712},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1570},"end":{"line":12,"column":143,"offset":1712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets take this code that create a new Order for a Customer and then remove it. ","position":{"start":{"line":14,"column":1,"offset":1714},"end":{"line":14,"column":80,"offset":1793},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1714},"end":{"line":14,"column":80,"offset":1793},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var db = new NorthwindEntities(); //Add a new Order var firstCustomer = db.Customers.First(); Debug.WriteLine(\"---Customer loaded---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); var newOrder = new Orders(); // db.CreateObject<Orders>(); would do the samethiing Debug.WriteLine(\"---Orders Created---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder: N/A because not yet inside the ObjectContext so not state yet. Could attach before adding to get state but not applicable now because the key is generated by the db and can't attack without key.\"); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); firstCustomer.Orders.Add(newOrder); Debug.WriteLine(\"---Orders added---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); db.SaveChanges(); Debug.WriteLine(\"---Object Context save---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); Debug.WriteLine(\"---Remove the created object---\"); firstCustomer.Orders.Remove(newOrder); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); db.SaveChanges(); Debug.WriteLine(\"---Object Context save---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); ","position":{"start":{"line":15,"column":1,"offset":1794},"end":{"line":17,"column":4,"offset":3638},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The output of this code is :","position":{"start":{"line":19,"column":1,"offset":3640},"end":{"line":19,"column":29,"offset":3668},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":3640},"end":{"line":19,"column":29,"offset":3668},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"---Customer loaded--- FirstCustomer:Unchanged ---Orders Created--- FirstCustomer:Unchanged newOrder: N/A because not yet inside the ObjectContext so not state yet. Could attach before adding to get state ---Orders added--- FirstCustomer:Unchanged newOrder:Added ---Object Context save--- FirstCustomer:Unchanged newOrder:Unchanged ---Remove the created object--- FirstCustomer:Unchanged newOrder:Modified ---Object Context save--- FirstCustomer:Unchanged newOrder:Unchanged ","position":{"start":{"line":21,"column":1,"offset":3670},"end":{"line":23,"column":5,"offset":4153},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We could also explore the state with the event. ","position":{"start":{"line":25,"column":1,"offset":4155},"end":{"line":25,"column":49,"offset":4203},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":4155},"end":{"line":25,"column":49,"offset":4203},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var db = new NorthwindEntities(); db.ObjectStateManager.ObjectStateManagerChanged += new System.ComponentModel.CollectionChangeEventHandler(ObjectStateManager_ObjectStateManagerChanged); //Get existing Customer that has Order var customersWithOrder = db.Customers.Where(customer => customer.Orders.Count>15); //Add a new Order var firstCustomer = db.Customers.First(); var newOrder = new Orders(); // db.CreateObject<Orders>(); would do the samethiing firstCustomer.Orders.Add(newOrder); db.SaveChanges(); firstCustomer.Orders.Remove(newOrder); db.DeleteObject(newOrder); db.SaveChanges(); ","position":{"start":{"line":26,"column":1,"offset":4204},"end":{"line":28,"column":4,"offset":4809},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This produce: ","position":{"start":{"line":30,"column":1,"offset":4811},"end":{"line":30,"column":15,"offset":4825},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":4811},"end":{"line":30,"column":15,"offset":4825},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" -->LifeCycle.Customers-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Remove -->LifeCycle.Orders-->Remove ","position":{"start":{"line":31,"column":1,"offset":4826},"end":{"line":33,"column":6,"offset":5133},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I prefer the first output because it's more clear.","position":{"start":{"line":34,"column":1,"offset":5134},"end":{"line":34,"column":51,"offset":5184},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":5134},"end":{"line":34,"column":51,"offset":5184},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Thread","position":{"start":{"line":36,"column":5,"offset":5190},"end":{"line":36,"column":11,"offset":5196},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":5186},"end":{"line":36,"column":11,"offset":5196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ObjectContext class is not tread safe. You must have one object context per thread or to create you own thread synchronization process.","position":{"start":{"line":38,"column":1,"offset":5198},"end":{"line":38,"column":140,"offset":5337},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":5198},"end":{"line":38,"column":140,"offset":5337},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Linq to Sql Data Context","position":{"start":{"line":40,"column":4,"offset":5342},"end":{"line":40,"column":28,"offset":5366},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":5339},"end":{"line":40,"column":28,"offset":5366},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As the ObjectContext, the DataContext class hold the track of each object state. It knows what has been modified, deleted or added. Also, Linq to Sql uses state even if nothing has changed to the object. When loaded, the object will be ","position":{"start":{"line":42,"column":1,"offset":5368},"end":{"line":42,"column":237,"offset":5604},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Unchanged","position":{"start":{"line":42,"column":238,"offset":5605},"end":{"line":42,"column":247,"offset":5614},"indent":[]}}],"position":{"start":{"line":42,"column":237,"offset":5604},"end":{"line":42,"column":248,"offset":5615},"indent":[]}},{"type":"text","value":" or if you create a new object or deserialize an object, it will be a ","position":{"start":{"line":42,"column":248,"offset":5615},"end":{"line":42,"column":318,"offset":5685},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Untracked","position":{"start":{"line":42,"column":319,"offset":5686},"end":{"line":42,"column":328,"offset":5695},"indent":[]}}],"position":{"start":{"line":42,"column":318,"offset":5685},"end":{"line":42,"column":329,"offset":5696},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":42,"column":329,"offset":5696},"end":{"line":42,"column":330,"offset":5697},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":5368},"end":{"line":42,"column":330,"offset":5697},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When an object is attached, by default its state will be ","position":{"start":{"line":44,"column":1,"offset":5699},"end":{"line":44,"column":58,"offset":5756},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"PossiblyModified","position":{"start":{"line":44,"column":59,"offset":5757},"end":{"line":44,"column":75,"offset":5773},"indent":[]}}],"position":{"start":{"line":44,"column":58,"offset":5756},"end":{"line":44,"column":76,"offset":5774},"indent":[]}},{"type":"text","value":" and this is until the ","position":{"start":{"line":44,"column":76,"offset":5774},"end":{"line":44,"column":99,"offset":5797},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"SubmitChange","position":{"start":{"line":44,"column":100,"offset":5798},"end":{"line":44,"column":112,"offset":5810},"indent":[]}}],"position":{"start":{"line":44,"column":99,"offset":5797},"end":{"line":44,"column":113,"offset":5811},"indent":[]}},{"type":"text","value":". The next three states are very common ","position":{"start":{"line":44,"column":113,"offset":5811},"end":{"line":44,"column":153,"offset":5851},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ToBeInserted","position":{"start":{"line":44,"column":154,"offset":5852},"end":{"line":44,"column":166,"offset":5864},"indent":[]}}],"position":{"start":{"line":44,"column":153,"offset":5851},"end":{"line":44,"column":167,"offset":5865},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":44,"column":167,"offset":5865},"end":{"line":44,"column":169,"offset":5867},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ToBeModified","position":{"start":{"line":44,"column":170,"offset":5868},"end":{"line":44,"column":182,"offset":5880},"indent":[]}}],"position":{"start":{"line":44,"column":169,"offset":5867},"end":{"line":44,"column":183,"offset":5881},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":44,"column":183,"offset":5881},"end":{"line":44,"column":185,"offset":5883},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ToBeDeleted","position":{"start":{"line":44,"column":186,"offset":5884},"end":{"line":44,"column":197,"offset":5895},"indent":[]}}],"position":{"start":{"line":44,"column":185,"offset":5883},"end":{"line":44,"column":198,"offset":5896},"indent":[]}},{"type":"text","value":". The last possible state is when an object has been ","position":{"start":{"line":44,"column":198,"offset":5896},"end":{"line":44,"column":251,"offset":5949},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"SumbitChange","position":{"start":{"line":44,"column":252,"offset":5950},"end":{"line":44,"column":264,"offset":5962},"indent":[]}}],"position":{"start":{"line":44,"column":251,"offset":5949},"end":{"line":44,"column":265,"offset":5963},"indent":[]}},{"type":"text","value":" when it was ","position":{"start":{"line":44,"column":265,"offset":5963},"end":{"line":44,"column":278,"offset":5976},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ToBeDeleted","position":{"start":{"line":44,"column":279,"offset":5977},"end":{"line":44,"column":290,"offset":5988},"indent":[]}}],"position":{"start":{"line":44,"column":278,"offset":5976},"end":{"line":44,"column":291,"offset":5989},"indent":[]}},{"type":"text","value":". When this happen, the object is still in the DataContext but with the ","position":{"start":{"line":44,"column":291,"offset":5989},"end":{"line":44,"column":363,"offset":6061},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Deleted","position":{"start":{"line":44,"column":364,"offset":6062},"end":{"line":44,"column":371,"offset":6069},"indent":[]}}],"position":{"start":{"line":44,"column":363,"offset":6061},"end":{"line":44,"column":372,"offset":6070},"indent":[]}},{"type":"text","value":" state.","position":{"start":{"line":44,"column":372,"offset":6070},"end":{"line":44,"column":379,"offset":6077},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5699},"end":{"line":44,"column":379,"offset":6077},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Thread","position":{"start":{"line":46,"column":5,"offset":6083},"end":{"line":46,"column":11,"offset":6089},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":6079},"end":{"line":46,"column":11,"offset":6089},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Linq to Sql DataContext class is not thread safe. It should not be static, neither","position":{"start":{"line":48,"column":1,"offset":6091},"end":{"line":48,"column":87,"offset":6177},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":6091},"end":{"line":48,"column":87,"offset":6177},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Where and when should EF or Linq2Sql live?","position":{"start":{"line":50,"column":4,"offset":6182},"end":{"line":50,"column":46,"offset":6224},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6179},"end":{"line":50,"column":46,"offset":6224},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://blogs.msdn.com/b/mattwar/archive/2004/03/05/about-me.aspx","children":[{"type":"text","value":"Matt Warren","position":{"start":{"line":52,"column":2,"offset":6227},"end":{"line":52,"column":13,"offset":6238},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6226},"end":{"line":52,"column":80,"offset":6305},"indent":[]}},{"type":"text","value":", software achitect at Microsoft on the C# programming language product team and member of the team that created LINQ to SQL ","position":{"start":{"line":52,"column":80,"offset":6305},"end":{"line":52,"column":205,"offset":6430},"indent":[]}},{"type":"link","title":null,"url":"http://social.msdn.microsoft.com/forums/en-US/linqprojectgeneral/thread/3ae5e457-099e-4d13-9a8b-df3ed4ba0bab/","children":[{"type":"text","value":"explains","position":{"start":{"line":52,"column":206,"offset":6431},"end":{"line":52,"column":214,"offset":6439},"indent":[]}}],"position":{"start":{"line":52,"column":205,"offset":6430},"end":{"line":52,"column":326,"offset":6551},"indent":[]}},{"type":"text","value":" this question with a design pattern. Theses ORM should be treated as the ","position":{"start":{"line":52,"column":326,"offset":6551},"end":{"line":52,"column":400,"offset":6625},"indent":[]}},{"type":"link","title":"Martin Fowler's Enterprise Design Pattern Unit Of Work","url":"http://martinfowler.com/eaaCatalog/unitOfWork.html","children":[{"type":"text","value":"Unit of Work pattern","position":{"start":{"line":52,"column":401,"offset":6626},"end":{"line":52,"column":421,"offset":6646},"indent":[]}}],"position":{"start":{"line":52,"column":400,"offset":6625},"end":{"line":52,"column":531,"offset":6756},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":52,"column":531,"offset":6756},"end":{"line":52,"column":532,"offset":6757},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6226},"end":{"line":52,"column":532,"offset":6757},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you're done, it figures out everything that needs to be done to alter the database as a result of your work.","position":{"start":{"line":54,"column":3,"offset":6761},"end":{"line":54,"column":224,"offset":6982},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":6761},"end":{"line":54,"column":224,"offset":6982},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6759},"end":{"line":54,"column":224,"offset":6982},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That's it. The ORM object should live until the business task is done. For example, you need to edit a employee, you create the object when loading it, it's alive until it's saved or the task is cancelled. It does not remain until the application close in the memory.","position":{"start":{"line":56,"column":1,"offset":6984},"end":{"line":56,"column":268,"offset":7251},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6984},"end":{"line":56,"column":268,"offset":7251},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework Object Context Life Cycle compared to Linq to Sql Data Context Life Cycle\",\"date\":\"2011-09-22\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":59,"column":1,"offset":7254},"end":{"line":59,"column":185,"offset":7438},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":185,"offset":7438}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework Object Context Life Cycle compared to Linq to Sql Data Context Life Cycle\",\n  \"date\": \"2011-09-22\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Entity Framework Object Context\"), mdx(\"p\", null, \"The object created from the Entity Model that hold all objects has a life cycle like all other objects. But, this one should catch more your attention because it can come very big with all the object's state tracking that it has to remember. Moreover, it caches values. So, I do not have to tell you that with a medium or big application that the ram memory can come very high.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjectContext\"), \" class inherit from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IDisposable\"), \" interface so you can, and should, use USING statement when using Entity Framework. The problem with this approach is that the object tracking is loss. So, it solves only the problem concerning the memory. If you are getting information and know that you gonna change it than is better not to use USING, but still use .Dispose at the end. But, if you get information only or you update right away the information, it's better to use USING.\"), mdx(\"h3\", null, \"States\"), mdx(\"p\", null, \"Entity Framework has 5 possibles states. The first one is when new object is adding. The state is than \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Added\"), \". Once saved the state of this object come to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Unchanged\"), \". When an object is deleted, its state changes to Deleted until the object context saves it to the database. It's than to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Detached\"), \". The Modified state is a little bit more tricky. When using Entity Object (Not POCO) when a scalar object is changed, the state automatically change to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Modified\"), \". For POCO, it requires to have a call to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DetectChanges\"), \" to be able to mark the object as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Modified\"), \". When an object is loaded from the object context, it's default state is unchanged.\"), mdx(\"p\", null, \"Here is a complete example that show with the Northwind database and Entityframework the state change from the creating to the removing phase.\"), mdx(\"p\", null, \"Lets take this code that create a new Order for a Customer and then remove it. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var db = new NorthwindEntities(); //Add a new Order var firstCustomer = db.Customers.First(); Debug.WriteLine(\\\"---Customer loaded---\\\"); Debug.WriteLine(\\\"FirstCustomer:\\\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); var newOrder = new Orders(); // db.CreateObject<Orders>(); would do the samethiing Debug.WriteLine(\\\"---Orders Created---\\\"); Debug.WriteLine(\\\"FirstCustomer:\\\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\\\"newOrder: N/A because not yet inside the ObjectContext so not state yet. Could attach before adding to get state but not applicable now because the key is generated by the db and can't attack without key.\\\"); Debug.WriteLine(\\\"newOrder:\\\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); firstCustomer.Orders.Add(newOrder); Debug.WriteLine(\\\"---Orders added---\\\"); Debug.WriteLine(\\\"FirstCustomer:\\\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\\\"newOrder:\\\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); db.SaveChanges(); Debug.WriteLine(\\\"---Object Context save---\\\"); Debug.WriteLine(\\\"FirstCustomer:\\\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\\\"newOrder:\\\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); Debug.WriteLine(\\\"---Remove the created object---\\\"); firstCustomer.Orders.Remove(newOrder); Debug.WriteLine(\\\"FirstCustomer:\\\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\\\"newOrder:\\\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); db.SaveChanges(); Debug.WriteLine(\\\"---Object Context save---\\\"); Debug.WriteLine(\\\"FirstCustomer:\\\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\\\"newOrder:\\\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); \\n\")), mdx(\"p\", null, \"The output of this code is :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"---Customer loaded--- FirstCustomer:Unchanged ---Orders Created--- FirstCustomer:Unchanged newOrder: N/A because not yet inside the ObjectContext so not state yet. Could attach before adding to get state ---Orders added--- FirstCustomer:Unchanged newOrder:Added ---Object Context save--- FirstCustomer:Unchanged newOrder:Unchanged ---Remove the created object--- FirstCustomer:Unchanged newOrder:Modified ---Object Context save--- FirstCustomer:Unchanged newOrder:Unchanged \\n\")), mdx(\"p\", null, \"We could also explore the state with the event. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var db = new NorthwindEntities(); db.ObjectStateManager.ObjectStateManagerChanged += new System.ComponentModel.CollectionChangeEventHandler(ObjectStateManager_ObjectStateManagerChanged); //Get existing Customer that has Order var customersWithOrder = db.Customers.Where(customer => customer.Orders.Count>15); //Add a new Order var firstCustomer = db.Customers.First(); var newOrder = new Orders(); // db.CreateObject<Orders>(); would do the samethiing firstCustomer.Orders.Add(newOrder); db.SaveChanges(); firstCustomer.Orders.Remove(newOrder); db.DeleteObject(newOrder); db.SaveChanges(); \\n\")), mdx(\"p\", null, \"This produce: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" -->LifeCycle.Customers-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Remove -->LifeCycle.Orders-->Remove \\n\")), mdx(\"p\", null, \"I prefer the first output because it's more clear.\"), mdx(\"h3\", null, \"Thread\"), mdx(\"p\", null, \"The ObjectContext class is not tread safe. You must have one object context per thread or to create you own thread synchronization process.\"), mdx(\"h2\", null, \"Linq to Sql Data Context\"), mdx(\"p\", null, \"As the ObjectContext, the DataContext class hold the track of each object state. It knows what has been modified, deleted or added. Also, Linq to Sql uses state even if nothing has changed to the object. When loaded, the object will be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Unchanged\"), \" or if you create a new object or deserialize an object, it will be a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Untracked\"), \".\"), mdx(\"p\", null, \"When an object is attached, by default its state will be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"PossiblyModified\"), \" and this is until the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SubmitChange\"), \". The next three states are very common \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ToBeInserted\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ToBeModified\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ToBeDeleted\"), \". The last possible state is when an object has been \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SumbitChange\"), \" when it was \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ToBeDeleted\"), \". When this happen, the object is still in the DataContext but with the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Deleted\"), \" state.\"), mdx(\"h3\", null, \"Thread\"), mdx(\"p\", null, \"The Linq to Sql DataContext class is not thread safe. It should not be static, neither\"), mdx(\"h2\", null, \"Where and when should EF or Linq2Sql live?\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://blogs.msdn.com/b/mattwar/archive/2004/03/05/about-me.aspx\"\n  }, \"Matt Warren\"), \", software achitect at Microsoft on the C# programming language product team and member of the team that created LINQ to SQL \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://social.msdn.microsoft.com/forums/en-US/linqprojectgeneral/thread/3ae5e457-099e-4d13-9a8b-df3ed4ba0bab/\"\n  }, \"explains\"), \" this question with a design pattern. Theses ORM should be treated as the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://martinfowler.com/eaaCatalog/unitOfWork.html\",\n    \"title\": \"Martin Fowler's Enterprise Design Pattern Unit Of Work\"\n  }, \"Unit of Work pattern\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you're done, it figures out everything that needs to be done to alter the database as a result of your work.\")), mdx(\"p\", null, \"That's it. The ORM object should live until the business task is done. For example, you need to edit a employee, you create the object when loading it, it's alive until it's saved or the task is cancelled. It does not remain until the application close in the memory.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework Object Context Life Cycle compared to Linq to Sql Data Context Life Cycle\",\n  \"date\": \"2011-09-22\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Entity Framework Object Context`}</h2>\n    <p>{`The object created from the Entity Model that hold all objects has a life cycle like all other objects. But, this one should catch more your attention because it can come very big with all the object's state tracking that it has to remember. Moreover, it caches values. So, I do not have to tell you that with a medium or big application that the ram memory can come very high.`}</p>\n    <p><strong parentName=\"p\">{`ObjectContext`}</strong>{` class inherit from `}<strong parentName=\"p\">{`IDisposable`}</strong>{` interface so you can, and should, use USING statement when using Entity Framework. The problem with this approach is that the object tracking is loss. So, it solves only the problem concerning the memory. If you are getting information and know that you gonna change it than is better not to use USING, but still use .Dispose at the end. But, if you get information only or you update right away the information, it's better to use USING.`}</p>\n    <h3>{`States`}</h3>\n    <p>{`Entity Framework has 5 possibles states. The first one is when new object is adding. The state is than `}<em parentName=\"p\">{`Added`}</em>{`. Once saved the state of this object come to `}<em parentName=\"p\">{`Unchanged`}</em>{`. When an object is deleted, its state changes to Deleted until the object context saves it to the database. It's than to `}<em parentName=\"p\">{`Detached`}</em>{`. The Modified state is a little bit more tricky. When using Entity Object (Not POCO) when a scalar object is changed, the state automatically change to `}<em parentName=\"p\">{`Modified`}</em>{`. For POCO, it requires to have a call to `}<em parentName=\"p\">{`DetectChanges`}</em>{` to be able to mark the object as `}<em parentName=\"p\">{`Modified`}</em>{`. When an object is loaded from the object context, it's default state is unchanged.`}</p>\n    <p>{`Here is a complete example that show with the Northwind database and Entityframework the state change from the creating to the removing phase.`}</p>\n    <p>{`Lets take this code that create a new Order for a Customer and then remove it. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var db = new NorthwindEntities(); //Add a new Order var firstCustomer = db.Customers.First(); Debug.WriteLine(\"---Customer loaded---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); var newOrder = new Orders(); // db.CreateObject<Orders>(); would do the samethiing Debug.WriteLine(\"---Orders Created---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder: N/A because not yet inside the ObjectContext so not state yet. Could attach before adding to get state but not applicable now because the key is generated by the db and can't attack without key.\"); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); firstCustomer.Orders.Add(newOrder); Debug.WriteLine(\"---Orders added---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); db.SaveChanges(); Debug.WriteLine(\"---Object Context save---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); Debug.WriteLine(\"---Remove the created object---\"); firstCustomer.Orders.Remove(newOrder); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); db.SaveChanges(); Debug.WriteLine(\"---Object Context save---\"); Debug.WriteLine(\"FirstCustomer:\" + db.ObjectStateManager.GetObjectStateEntry(firstCustomer).State); Debug.WriteLine(\"newOrder:\" + db.ObjectStateManager.GetObjectStateEntry(newOrder).State); \n`}</code></pre>\n    <p>{`The output of this code is :`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`---Customer loaded--- FirstCustomer:Unchanged ---Orders Created--- FirstCustomer:Unchanged newOrder: N/A because not yet inside the ObjectContext so not state yet. Could attach before adding to get state ---Orders added--- FirstCustomer:Unchanged newOrder:Added ---Object Context save--- FirstCustomer:Unchanged newOrder:Unchanged ---Remove the created object--- FirstCustomer:Unchanged newOrder:Modified ---Object Context save--- FirstCustomer:Unchanged newOrder:Unchanged \n`}</code></pre>\n    <p>{`We could also explore the state with the event. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var db = new NorthwindEntities(); db.ObjectStateManager.ObjectStateManagerChanged += new System.ComponentModel.CollectionChangeEventHandler(ObjectStateManager_ObjectStateManagerChanged); //Get existing Customer that has Order var customersWithOrder = db.Customers.Where(customer => customer.Orders.Count>15); //Add a new Order var firstCustomer = db.Customers.First(); var newOrder = new Orders(); // db.CreateObject<Orders>(); would do the samethiing firstCustomer.Orders.Add(newOrder); db.SaveChanges(); firstCustomer.Orders.Remove(newOrder); db.DeleteObject(newOrder); db.SaveChanges(); \n`}</code></pre>\n    <p>{`This produce: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` -->LifeCycle.Customers-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Add -->LifeCycle.Orders-->Remove -->LifeCycle.Orders-->Remove \n`}</code></pre>\n    <p>{`I prefer the first output because it's more clear.`}</p>\n    <h3>{`Thread`}</h3>\n    <p>{`The ObjectContext class is not tread safe. You must have one object context per thread or to create you own thread synchronization process.`}</p>\n    <h2>{`Linq to Sql Data Context`}</h2>\n    <p>{`As the ObjectContext, the DataContext class hold the track of each object state. It knows what has been modified, deleted or added. Also, Linq to Sql uses state even if nothing has changed to the object. When loaded, the object will be `}<em parentName=\"p\">{`Unchanged`}</em>{` or if you create a new object or deserialize an object, it will be a `}<em parentName=\"p\">{`Untracked`}</em>{`.`}</p>\n    <p>{`When an object is attached, by default its state will be `}<em parentName=\"p\">{`PossiblyModified`}</em>{` and this is until the `}<em parentName=\"p\">{`SubmitChange`}</em>{`. The next three states are very common `}<em parentName=\"p\">{`ToBeInserted`}</em>{`, `}<em parentName=\"p\">{`ToBeModified`}</em>{`, `}<em parentName=\"p\">{`ToBeDeleted`}</em>{`. The last possible state is when an object has been `}<em parentName=\"p\">{`SumbitChange`}</em>{` when it was `}<em parentName=\"p\">{`ToBeDeleted`}</em>{`. When this happen, the object is still in the DataContext but with the `}<em parentName=\"p\">{`Deleted`}</em>{` state.`}</p>\n    <h3>{`Thread`}</h3>\n    <p>{`The Linq to Sql DataContext class is not thread safe. It should not be static, neither`}</p>\n    <h2>{`Where and when should EF or Linq2Sql live?`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://blogs.msdn.com/b/mattwar/archive/2004/03/05/about-me.aspx\"\n      }}>{`Matt Warren`}</a>{`, software achitect at Microsoft on the C# programming language product team and member of the team that created LINQ to SQL `}<a parentName=\"p\" {...{\n        \"href\": \"http://social.msdn.microsoft.com/forums/en-US/linqprojectgeneral/thread/3ae5e457-099e-4d13-9a8b-df3ed4ba0bab/\"\n      }}>{`explains`}</a>{` this question with a design pattern. Theses ORM should be treated as the `}<a parentName=\"p\" {...{\n        \"href\": \"http://martinfowler.com/eaaCatalog/unitOfWork.html\",\n        \"title\": \"Martin Fowler's Enterprise Design Pattern Unit Of Work\"\n      }}>{`Unit of Work pattern`}</a>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you're done, it figures out everything that needs to be done to alter the database as a result of your work.`}</p>\n    </blockquote>\n    <p>{`That's it. The ORM object should live until the business task is done. For example, you need to edit a employee, you create the object when loading it, it's alive until it's saved or the task is cancelled. It does not remain until the application close in the memory.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}