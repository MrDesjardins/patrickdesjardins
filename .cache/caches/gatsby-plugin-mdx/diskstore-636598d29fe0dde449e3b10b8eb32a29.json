{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-e4907d39df9d1d8d2677dc0661149be6--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"By default cookie are not secured when using Https with SSL(TSL) security.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":75,"offset":75},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":75,"offset":75},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Asp.net security with cookies","position":{"start":{"line":4,"column":4,"offset":80},"end":{"line":4,"column":33,"offset":109},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":77},"end":{"line":4,"column":33,"offset":109},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You have two choices with ","position":{"start":{"line":6,"column":1,"offset":111},"end":{"line":6,"column":27,"offset":137},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ASP.NET","position":{"start":{"line":6,"column":29,"offset":139},"end":{"line":6,"column":36,"offset":146},"indent":[]}}],"position":{"start":{"line":6,"column":27,"offset":137},"end":{"line":6,"column":38,"offset":148},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":111},"end":{"line":6,"column":38,"offset":148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first one is to explicitly mark the cookie has secure.","position":{"start":{"line":8,"column":1,"offset":150},"end":{"line":8,"column":59,"offset":208},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":150},"end":{"line":8,"column":59,"offset":208},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var cookie = new HttpCookie(\"MyCookieName\", \"MyValue\"); cookie.Secure = true; Response.Cookies.Add(cookie); ","position":{"start":{"line":11,"column":1,"offset":211},"end":{"line":13,"column":4,"offset":334},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The advantage is that not even if the page is accessed with http that the cookie will still works. But, it has the cost to add more code.","position":{"start":{"line":15,"column":1,"offset":336},"end":{"line":15,"column":138,"offset":473},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":336},"end":{"line":15,"column":138,"offset":473},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second choice is to change in the web.config a line that will implicit all cookie to be secure. But, the disadvantage is that the http won't work, only https.","position":{"start":{"line":17,"column":1,"offset":475},"end":{"line":17,"column":163,"offset":637},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":475},"end":{"line":17,"column":163,"offset":637},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" <httpCookies requireSSL=\"true\" /> ","position":{"start":{"line":20,"column":1,"offset":640},"end":{"line":22,"column":4,"offset":686},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Asp.Mvc security with cookies","position":{"start":{"line":25,"column":4,"offset":692},"end":{"line":25,"column":33,"offset":721},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":689},"end":{"line":25,"column":33,"offset":721},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On the other side, with ","position":{"start":{"line":27,"column":1,"offset":723},"end":{"line":27,"column":25,"offset":747},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ASP MVC","position":{"start":{"line":27,"column":27,"offset":749},"end":{"line":27,"column":34,"offset":756},"indent":[]}}],"position":{"start":{"line":27,"column":25,"offset":747},"end":{"line":27,"column":36,"offset":758},"indent":[]}},{"type":"text","value":" if you want to secure you have two ways and it's better to use both of them in the same time.","position":{"start":{"line":27,"column":36,"offset":758},"end":{"line":27,"column":130,"offset":852},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":723},"end":{"line":27,"column":130,"offset":852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first approach is to use Https attribute to the controller class.","position":{"start":{"line":29,"column":1,"offset":854},"end":{"line":29,"column":70,"offset":923},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":854},"end":{"line":29,"column":70,"offset":923},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [RequireHttps] public class MyLoginController: Controller { ... ","position":{"start":{"line":32,"column":1,"offset":926},"end":{"line":34,"column":4,"offset":1005},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will create a 302 redirect to the Https version of this page. If you want to avoid having a call two times to the server (avoid the redirect) you can also use the overloaded method of ActionLink which let you specify the protocol.","position":{"start":{"line":36,"column":1,"offset":1007},"end":{"line":36,"column":236,"offset":1242},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1007},"end":{"line":36,"column":236,"offset":1242},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" @Html.ActionLink(\"My Login Link\", \"LogOn\", \"MyLoginController\", \"https\", null, null, null, null) ","position":{"start":{"line":39,"column":1,"offset":1245},"end":{"line":41,"column":4,"offset":1357},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So that's it. If you need to have a secured website, do not forget to secure your cookie.","position":{"start":{"line":43,"column":1,"offset":1359},"end":{"line":43,"column":90,"offset":1448},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1359},"end":{"line":43,"column":90,"offset":1448},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to secure Cookie when using Https\",\"date\":\"2011-12-01\",\"categories\":[\"asp-mvc\",\"asp-net\"]}","position":{"start":{"line":46,"column":1,"offset":1451},"end":{"line":46,"column":133,"offset":1583},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":46,"column":133,"offset":1583}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to secure Cookie when using Https\",\n  \"date\": \"2011-12-01\",\n  \"categories\": [\"asp-mvc\", \"asp-net\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"By default cookie are not secured when using Https with SSL(TSL) security.\"), mdx(\"h2\", null, \"Asp.net security with cookies\"), mdx(\"p\", null, \"You have two choices with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ASP.NET\")), mdx(\"p\", null, \"The first one is to explicitly mark the cookie has secure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var cookie = new HttpCookie(\\\"MyCookieName\\\", \\\"MyValue\\\"); cookie.Secure = true; Response.Cookies.Add(cookie); \\n\")), mdx(\"p\", null, \"The advantage is that not even if the page is accessed with http that the cookie will still works. But, it has the cost to add more code.\"), mdx(\"p\", null, \"The second choice is to change in the web.config a line that will implicit all cookie to be secure. But, the disadvantage is that the http won't work, only https.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <httpCookies requireSSL=\\\"true\\\" /> \\n\")), mdx(\"h2\", null, \"Asp.Mvc security with cookies\"), mdx(\"p\", null, \"On the other side, with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ASP MVC\"), \" if you want to secure you have two ways and it's better to use both of them in the same time.\"), mdx(\"p\", null, \"The first approach is to use Https attribute to the controller class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [RequireHttps] public class MyLoginController: Controller { ... \\n\")), mdx(\"p\", null, \"This will create a 302 redirect to the Https version of this page. If you want to avoid having a call two times to the server (avoid the redirect) you can also use the overloaded method of ActionLink which let you specify the protocol.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @Html.ActionLink(\\\"My Login Link\\\", \\\"LogOn\\\", \\\"MyLoginController\\\", \\\"https\\\", null, null, null, null) \\n\")), mdx(\"p\", null, \"So that's it. If you need to have a secured website, do not forget to secure your cookie.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to secure Cookie when using Https\",\n  \"date\": \"2011-12-01\",\n  \"categories\": [\"asp-mvc\", \"asp-net\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`By default cookie are not secured when using Https with SSL(TSL) security.`}</p>\n    <h2>{`Asp.net security with cookies`}</h2>\n    <p>{`You have two choices with `}<strong parentName=\"p\">{`ASP.NET`}</strong></p>\n    <p>{`The first one is to explicitly mark the cookie has secure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var cookie = new HttpCookie(\"MyCookieName\", \"MyValue\"); cookie.Secure = true; Response.Cookies.Add(cookie); \n`}</code></pre>\n    <p>{`The advantage is that not even if the page is accessed with http that the cookie will still works. But, it has the cost to add more code.`}</p>\n    <p>{`The second choice is to change in the web.config a line that will implicit all cookie to be secure. But, the disadvantage is that the http won't work, only https.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <httpCookies requireSSL=\"true\" /> \n`}</code></pre>\n    <h2>{`Asp.Mvc security with cookies`}</h2>\n    <p>{`On the other side, with `}<strong parentName=\"p\">{`ASP MVC`}</strong>{` if you want to secure you have two ways and it's better to use both of them in the same time.`}</p>\n    <p>{`The first approach is to use Https attribute to the controller class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [RequireHttps] public class MyLoginController: Controller { ... \n`}</code></pre>\n    <p>{`This will create a 302 redirect to the Https version of this page. If you want to avoid having a call two times to the server (avoid the redirect) you can also use the overloaded method of ActionLink which let you specify the protocol.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` @Html.ActionLink(\"My Login Link\", \"LogOn\", \"MyLoginController\", \"https\", null, null, null, null) \n`}</code></pre>\n    <p>{`So that's it. If you need to have a secured website, do not forget to secure your cookie.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}