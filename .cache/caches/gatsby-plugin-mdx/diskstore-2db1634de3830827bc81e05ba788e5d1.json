{"expireTime":9007200886478393000,"key":"gatsby-plugin-mdx-entire-payload-9296eb9e56678438616836b42513658c--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you need to call two different WCF service and be sure that both are successful before committing, you'll need to use transaction. This will require that both service's operation contain the attribute ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":205,"offset":205},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TransactionFlow","position":{"start":{"line":2,"column":207,"offset":207},"end":{"line":2,"column":222,"offset":222},"indent":[]}}],"position":{"start":{"line":2,"column":205,"offset":205},"end":{"line":2,"column":224,"offset":224},"indent":[]}},{"type":"text","value":" with the option to ","position":{"start":{"line":2,"column":224,"offset":224},"end":{"line":2,"column":244,"offset":244},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Allowed","position":{"start":{"line":2,"column":246,"offset":246},"end":{"line":2,"column":253,"offset":253},"indent":[]}}],"position":{"start":{"line":2,"column":244,"offset":244},"end":{"line":2,"column":255,"offset":255},"indent":[]}},{"type":"text","value":". Many other option could have been possible. NotAllowed is when you do not want to be part of transaction, which is the default value. Allowed allows to participate in a transaction if the client specify in his code a transaction scope. Finally, mandatory force that the operation is called within a transaction scope.","position":{"start":{"line":2,"column":255,"offset":255},"end":{"line":2,"column":574,"offset":574},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":574,"offset":574},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [ServiceContract] public interface IServiceContractOne { [OperationContract] [TransactionFlow(TransactionFlowOption.Allowed)] void Method1(); } ","position":{"start":{"line":5,"column":1,"offset":577},"end":{"line":7,"column":4,"offset":736},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The next step is the implementation of this contract. The method Method1() that has the TransactionFlow attribute needs to have also an attribute, this time it's ","position":{"start":{"line":9,"column":1,"offset":738},"end":{"line":9,"column":163,"offset":900},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OperationBehavior","position":{"start":{"line":9,"column":165,"offset":902},"end":{"line":9,"column":182,"offset":919},"indent":[]}}],"position":{"start":{"line":9,"column":163,"offset":900},"end":{"line":9,"column":184,"offset":921},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":9,"column":184,"offset":921},"end":{"line":9,"column":186,"offset":923},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":738},"end":{"line":9,"column":186,"offset":923},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"\n\n[OperationBehavior(TransactionScopeRequired = true)] public void Method1() { //Entity Framework here } ","position":{"start":{"line":10,"column":1,"offset":924},"end":{"line":14,"column":4,"offset":1043},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The method of the contract has an operation behavior that tell that it's require to be inside a transaction scope.","position":{"start":{"line":16,"column":1,"offset":1045},"end":{"line":16,"column":115,"offset":1159},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1045},"end":{"line":16,"column":115,"offset":1159},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The next step is to configure the web.config. It needs to have for the binding the attribute transactionflow to true.","position":{"start":{"line":18,"column":1,"offset":1161},"end":{"line":18,"column":118,"offset":1278},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1161},"end":{"line":18,"column":118,"offset":1278},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" <configuration> <system.serviceModel> <bindings> <wsHttpBinding> <binding name=\"MyBinding\" transactionFlow=\"true\" /> </wsHttpBinding> ... ... ","position":{"start":{"line":21,"column":1,"offset":1281},"end":{"line":23,"column":4,"offset":1435},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Once the binding is created, you need to use this binding.","position":{"start":{"line":26,"column":1,"offset":1438},"end":{"line":26,"column":59,"offset":1496},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1438},"end":{"line":26,"column":59,"offset":1496},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" <configuration> <system.serviceModel> <services> <service name=\"MyServiceA.Service1\"> <endpoint address=\"\" behaviorConfiguration=\"behavior1\" binding=\"wsHttpBinding\" bindingConfiguration=\"MyBinding\" contract=\"MyServiceA.IService1\" /> ... ... ","position":{"start":{"line":29,"column":1,"offset":1499},"end":{"line":31,"column":4,"offset":1752},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I have chosen wshttpbinding because to use transaction you need to use a WS-Atomic Transaction or OleTransactions protocol.","position":{"start":{"line":34,"column":1,"offset":1755},"end":{"line":34,"column":124,"offset":1878},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1755},"end":{"line":34,"column":124,"offset":1878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, you can test the transaction by having an application that use the two services (or more) that you created with the contract that has transaction score required.","position":{"start":{"line":36,"column":1,"offset":1880},"end":{"line":36,"column":171,"offset":2050},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1880},"end":{"line":36,"column":171,"offset":2050},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew)) { try { var obj = new ServiceReference1.Service1(); obj.Method1(); var obj1 = new ServiceReference2.Service1(); obj1.Method1(); ts.Complete(); //Commit everything! } catch (Exception ex) { ts.Dispose(); } } ","position":{"start":{"line":39,"column":1,"offset":2053},"end":{"line":41,"column":4,"offset":2352},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If any exception occur during the scope of the transaction, everything is rollback.","position":{"start":{"line":43,"column":1,"offset":2354},"end":{"line":43,"column":84,"offset":2437},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2354},"end":{"line":43,"column":84,"offset":2437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add additional information to the service that has method with transaction mandatory or allowed. It's done with ServiceBehavior. You can specify the transaction time out and also the transaction isolation level. The timeout is a time that you allow for the service to be executed. The isolation level is the same as when you use transaction without services. It tells how to lock the information during the transaction. By default, it's serializable which block everything to be changed. It's the most protective and also the worst in term of performance. I won't discuss about every type of isolation level but some allow you to insert new data while other allow you to simply change everything. You have to figure out which one is the correct for your needs. Do not forget to add System.Transaction reference into your project if you do want to use transaction.","position":{"start":{"line":45,"column":1,"offset":2439},"end":{"line":45,"column":872,"offset":3310},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2439},"end":{"line":45,"column":872,"offset":3310},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [ServiceBehavior(TransactionIsolationLevel=System.Transactions.IsolationLevel.Serializable, TransactionTimeout=\"00:00:30\")] ","position":{"start":{"line":48,"column":1,"offset":3313},"end":{"line":50,"column":4,"offset":3452},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Using Transaction with WCF Services\",\"date\":\"2013-12-20\",\"categories\":[\"wcf\",\"webservices\"]}","position":{"start":{"line":53,"column":1,"offset":3455},"end":{"line":53,"column":131,"offset":3585},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":53,"column":131,"offset":3585}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using Transaction with WCF Services\",\n  \"date\": \"2013-12-20\",\n  \"categories\": [\"wcf\", \"webservices\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you need to call two different WCF service and be sure that both are successful before committing, you'll need to use transaction. This will require that both service's operation contain the attribute \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TransactionFlow\"), \" with the option to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Allowed\"), \". Many other option could have been possible. NotAllowed is when you do not want to be part of transaction, which is the default value. Allowed allows to participate in a transaction if the client specify in his code a transaction scope. Finally, mandatory force that the operation is called within a transaction scope.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [ServiceContract] public interface IServiceContractOne { [OperationContract] [TransactionFlow(TransactionFlowOption.Allowed)] void Method1(); } \\n\")), mdx(\"p\", null, \"The next step is the implementation of this contract. The method Method1() that has the TransactionFlow attribute needs to have also an attribute, this time it's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OperationBehavior\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"\\n\\n[OperationBehavior(TransactionScopeRequired = true)] public void Method1() { //Entity Framework here } \\n\")), mdx(\"p\", null, \"The method of the contract has an operation behavior that tell that it's require to be inside a transaction scope.\"), mdx(\"p\", null, \"The next step is to configure the web.config. It needs to have for the binding the attribute transactionflow to true.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <configuration> <system.serviceModel> <bindings> <wsHttpBinding> <binding name=\\\"MyBinding\\\" transactionFlow=\\\"true\\\" /> </wsHttpBinding> ... ... \\n\")), mdx(\"p\", null, \"Once the binding is created, you need to use this binding.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <configuration> <system.serviceModel> <services> <service name=\\\"MyServiceA.Service1\\\"> <endpoint address=\\\"\\\" behaviorConfiguration=\\\"behavior1\\\" binding=\\\"wsHttpBinding\\\" bindingConfiguration=\\\"MyBinding\\\" contract=\\\"MyServiceA.IService1\\\" /> ... ... \\n\")), mdx(\"p\", null, \"I have chosen wshttpbinding because to use transaction you need to use a WS-Atomic Transaction or OleTransactions protocol.\"), mdx(\"p\", null, \"Finally, you can test the transaction by having an application that use the two services (or more) that you created with the contract that has transaction score required.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew)) { try { var obj = new ServiceReference1.Service1(); obj.Method1(); var obj1 = new ServiceReference2.Service1(); obj1.Method1(); ts.Complete(); //Commit everything! } catch (Exception ex) { ts.Dispose(); } } \\n\")), mdx(\"p\", null, \"If any exception occur during the scope of the transaction, everything is rollback.\"), mdx(\"p\", null, \"You can add additional information to the service that has method with transaction mandatory or allowed. It's done with ServiceBehavior. You can specify the transaction time out and also the transaction isolation level. The timeout is a time that you allow for the service to be executed. The isolation level is the same as when you use transaction without services. It tells how to lock the information during the transaction. By default, it's serializable which block everything to be changed. It's the most protective and also the worst in term of performance. I won't discuss about every type of isolation level but some allow you to insert new data while other allow you to simply change everything. You have to figure out which one is the correct for your needs. Do not forget to add System.Transaction reference into your project if you do want to use transaction.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [ServiceBehavior(TransactionIsolationLevel=System.Transactions.IsolationLevel.Serializable, TransactionTimeout=\\\"00:00:30\\\")] \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Using Transaction with WCF Services\",\n  \"date\": \"2013-12-20\",\n  \"categories\": [\"wcf\", \"webservices\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you need to call two different WCF service and be sure that both are successful before committing, you'll need to use transaction. This will require that both service's operation contain the attribute `}<strong parentName=\"p\">{`TransactionFlow`}</strong>{` with the option to `}<strong parentName=\"p\">{`Allowed`}</strong>{`. Many other option could have been possible. NotAllowed is when you do not want to be part of transaction, which is the default value. Allowed allows to participate in a transaction if the client specify in his code a transaction scope. Finally, mandatory force that the operation is called within a transaction scope.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [ServiceContract] public interface IServiceContractOne { [OperationContract] [TransactionFlow(TransactionFlowOption.Allowed)] void Method1(); } \n`}</code></pre>\n    <p>{`The next step is the implementation of this contract. The method Method1() that has the TransactionFlow attribute needs to have also an attribute, this time it's `}<strong parentName=\"p\">{`OperationBehavior`}</strong>{`. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`\n\n[OperationBehavior(TransactionScopeRequired = true)] public void Method1() { //Entity Framework here } \n`}</code></pre>\n    <p>{`The method of the contract has an operation behavior that tell that it's require to be inside a transaction scope.`}</p>\n    <p>{`The next step is to configure the web.config. It needs to have for the binding the attribute transactionflow to true.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <configuration> <system.serviceModel> <bindings> <wsHttpBinding> <binding name=\"MyBinding\" transactionFlow=\"true\" /> </wsHttpBinding> ... ... \n`}</code></pre>\n    <p>{`Once the binding is created, you need to use this binding.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <configuration> <system.serviceModel> <services> <service name=\"MyServiceA.Service1\"> <endpoint address=\"\" behaviorConfiguration=\"behavior1\" binding=\"wsHttpBinding\" bindingConfiguration=\"MyBinding\" contract=\"MyServiceA.IService1\" /> ... ... \n`}</code></pre>\n    <p>{`I have chosen wshttpbinding because to use transaction you need to use a WS-Atomic Transaction or OleTransactions protocol.`}</p>\n    <p>{`Finally, you can test the transaction by having an application that use the two services (or more) that you created with the contract that has transaction score required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew)) { try { var obj = new ServiceReference1.Service1(); obj.Method1(); var obj1 = new ServiceReference2.Service1(); obj1.Method1(); ts.Complete(); //Commit everything! } catch (Exception ex) { ts.Dispose(); } } \n`}</code></pre>\n    <p>{`If any exception occur during the scope of the transaction, everything is rollback.`}</p>\n    <p>{`You can add additional information to the service that has method with transaction mandatory or allowed. It's done with ServiceBehavior. You can specify the transaction time out and also the transaction isolation level. The timeout is a time that you allow for the service to be executed. The isolation level is the same as when you use transaction without services. It tells how to lock the information during the transaction. By default, it's serializable which block everything to be changed. It's the most protective and also the worst in term of performance. I won't discuss about every type of isolation level but some allow you to insert new data while other allow you to simply change everything. You have to figure out which one is the correct for your needs. Do not forget to add System.Transaction reference into your project if you do want to use transaction.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [ServiceBehavior(TransactionIsolationLevel=System.Transactions.IsolationLevel.Serializable, TransactionTimeout=\"00:00:30\")] \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}