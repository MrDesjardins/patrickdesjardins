{"expireTime":9007200886478393000,"key":"gatsby-plugin-mdx-entire-payload-58daff65eb81af1c63cb8dfd2b89d451--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are using an application that require to have your user to own data and not let other to see or edit it, you need to specify to each of your entity a user id to whom the entity belong. All my entities that belong to a user inherit from ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":244,"offset":244},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IUserOwnable","position":{"start":{"line":2,"column":246,"offset":246},"end":{"line":2,"column":258,"offset":258},"indent":[]}}],"position":{"start":{"line":2,"column":244,"offset":244},"end":{"line":2,"column":260,"offset":260},"indent":[]}},{"type":"text","value":". This interface force the entity to have a UserId.","position":{"start":{"line":2,"column":260,"offset":260},"end":{"line":2,"column":311,"offset":311},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":311,"offset":311},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public interface IUserOwnable { int UserId { get; set; } } \n``` From here, when I want to get the list of entity of my user I just need to specify in the where clause the logged user id and Entity Framework get me all entities that belong to this one. The following example show you how to get all workout from the logged user.\n\n\n```csharp\n public override IQueryable<Workout> GetAll() { return DatabaseContext.Set<Workout>().Where(e=>e.UserId == logguedUserId); } ","position":{"start":{"line":5,"column":1,"offset":314},"end":{"line":12,"column":4,"offset":794},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The problem is that you need to set the UserId every time. This can lead to a problem of security if a developer forget to add the condition. It also a pain to repeat this code everywhere. This is why a better way to do it is to have a ","position":{"start":{"line":14,"column":1,"offset":796},"end":{"line":14,"column":237,"offset":1032},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"FilteredDbSet","position":{"start":{"line":14,"column":239,"offset":1034},"end":{"line":14,"column":252,"offset":1047},"indent":[]}}],"position":{"start":{"line":14,"column":237,"offset":1032},"end":{"line":14,"column":254,"offset":1049},"indent":[]}},{"type":"text","value":" which will automatically add this condition. Here is the FilteredDbSet class.","position":{"start":{"line":14,"column":254,"offset":1049},"end":{"line":14,"column":332,"offset":1127},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":796},"end":{"line":14,"column":332,"offset":1127},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class FilteredDbSet<TEntity> : IDbSet<TEntity>, IOrderedQueryable<TEntity>, IListSource where TEntity : class { private readonly DbSet<TEntity>_set; private readonly Action<TEntity>_initializeEntity; private readonly Expression<Func<TEntity, bool>>_filter;\n\npublic FilteredDbSet(DbContext context, Expression<Func<TEntity, bool>> filter, Action<TEntity> initializeEntity) : this(context.Set<TEntity>(), filter, initializeEntity) { }\n\npublic IQueryable<TEntity> Include(string path) { return_set.Include(path).Where(_filter).AsQueryable(); }\n\nprivate FilteredDbSet(DbSet<TEntity> set, Expression<Func<TEntity, bool>> filter, Action<TEntity> initializeEntity) {_set = set;_filter = filter;_initializeEntity = initializeEntity; }\n\npublic IQueryable<TEntity> Unfiltered() { return_set; }\n\npublic TEntity Add(TEntity entity) { DoInitializeEntity(entity); return_set.Add(entity); } public void AddOrUpdate(TEntity entity) { DoInitializeEntity(entity);_set.AddOrUpdate(entity); } public TEntity Attach(TEntity entity) { DoInitializeEntity(entity); return_set.Attach(entity); }\n\npublic TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : class, TEntity { var entity =_set.Create<TDerivedEntity>(); DoInitializeEntity(entity); return entity; }\n\npublic TEntity Create() { var entity =_set.Create(); DoInitializeEntity(entity); return entity; }\n\npublic TEntity Find(params object[] keyValues) { var entity =_set.Find(keyValues); if (entity == null) return null;\n\nreturn entity; }\n\npublic TEntity Remove(TEntity entity) { if (!_set.Local.Contains(entity)) {_set.Attach(entity); } return_set.Remove(entity); }\n\npublic ObservableCollection<TEntity> Local { get { return_set.Local; } }\n\nIEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() { return_set.Where(_filter).GetEnumerator(); }\n\nIEnumerator IEnumerable.GetEnumerator() { return_set.Where(_filter).GetEnumerator(); }\n\nType IQueryable.ElementType { get { return typeof(TEntity); } }\n\nExpression IQueryable.Expression { get { return_set.Where(_filter).Expression; } }\n\nIQueryProvider IQueryable.Provider { get { return_set.AsQueryable().Provider; } }\n\nbool IListSource.ContainsListCollection { get { return false; } }\n\nIList IListSource.GetList() { throw new InvalidOperationException(); }\n\nvoid DoInitializeEntity(TEntity entity) { if (_initializeEntity != null)_initializeEntity(entity); }\n\npublic DbSqlQuery<TEntity> SqlQuery(string sql, params object[] parameters) { return_set.SqlQuery(sql, parameters); } } ","position":{"start":{"line":17,"column":1,"offset":1130},"end":{"line":59,"column":4,"offset":3622},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"From here, you just need to call the DbSet that is filtered instead of the default one.","position":{"start":{"line":61,"column":1,"offset":3624},"end":{"line":61,"column":88,"offset":3711},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":3624},"end":{"line":61,"column":88,"offset":3711},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public override IQueryable<Workout> GetAll() { return DatabaseContext.SetOwnable<Workout>(); } ","position":{"start":{"line":64,"column":1,"offset":3714},"end":{"line":66,"column":4,"offset":3824},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Of course, the DatabaseContext is your class that inherit from DbContext. The SetOwnable method will call the FilteredDbSet.","position":{"start":{"line":68,"column":1,"offset":3826},"end":{"line":68,"column":125,"offset":3950},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3826},"end":{"line":68,"column":125,"offset":3950},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public IDbSet<TEntity> SetOwnable<TEntity>() where TEntity : class, IUserOwnable { return new FilteredDbSet<TEntity>(this, entity => entity.UserId == CurrentUser.UserId, entity => entity.UserId = CurrentUser.UserId); } \n``` As you can see, we create a **FilteredDbSet** and assign the user Id with the CurrentUser which is the logged user.\n\n\nexport const _frontmatter = {\"title\":\"Using a FilteredDbSet with Entity Framework to have dynamic Filtering\",\"date\":\"2013-03-21\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":71,"column":1,"offset":3953},"end":{"line":76,"column":164,"offset":4469},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":164,"offset":4469}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using an application that require to have your user to own data and not let other to see or edit it, you need to specify to each of your entity a user id to whom the entity belong. All my entities that belong to a user inherit from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IUserOwnable\"), \". This interface force the entity to have a UserId.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public interface IUserOwnable { int UserId { get; set; } } \\n``` From here, when I want to get the list of entity of my user I just need to specify in the where clause the logged user id and Entity Framework get me all entities that belong to this one. The following example show you how to get all workout from the logged user.\\n\\n\\n```csharp\\n public override IQueryable<Workout> GetAll() { return DatabaseContext.Set<Workout>().Where(e=>e.UserId == logguedUserId); } \\n\")), mdx(\"p\", null, \"The problem is that you need to set the UserId every time. This can lead to a problem of security if a developer forget to add the condition. It also a pain to repeat this code everywhere. This is why a better way to do it is to have a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilteredDbSet\"), \" which will automatically add this condition. Here is the FilteredDbSet class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class FilteredDbSet<TEntity> : IDbSet<TEntity>, IOrderedQueryable<TEntity>, IListSource where TEntity : class { private readonly DbSet<TEntity>_set; private readonly Action<TEntity>_initializeEntity; private readonly Expression<Func<TEntity, bool>>_filter;\\n\\npublic FilteredDbSet(DbContext context, Expression<Func<TEntity, bool>> filter, Action<TEntity> initializeEntity) : this(context.Set<TEntity>(), filter, initializeEntity) { }\\n\\npublic IQueryable<TEntity> Include(string path) { return_set.Include(path).Where(_filter).AsQueryable(); }\\n\\nprivate FilteredDbSet(DbSet<TEntity> set, Expression<Func<TEntity, bool>> filter, Action<TEntity> initializeEntity) {_set = set;_filter = filter;_initializeEntity = initializeEntity; }\\n\\npublic IQueryable<TEntity> Unfiltered() { return_set; }\\n\\npublic TEntity Add(TEntity entity) { DoInitializeEntity(entity); return_set.Add(entity); } public void AddOrUpdate(TEntity entity) { DoInitializeEntity(entity);_set.AddOrUpdate(entity); } public TEntity Attach(TEntity entity) { DoInitializeEntity(entity); return_set.Attach(entity); }\\n\\npublic TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : class, TEntity { var entity =_set.Create<TDerivedEntity>(); DoInitializeEntity(entity); return entity; }\\n\\npublic TEntity Create() { var entity =_set.Create(); DoInitializeEntity(entity); return entity; }\\n\\npublic TEntity Find(params object[] keyValues) { var entity =_set.Find(keyValues); if (entity == null) return null;\\n\\nreturn entity; }\\n\\npublic TEntity Remove(TEntity entity) { if (!_set.Local.Contains(entity)) {_set.Attach(entity); } return_set.Remove(entity); }\\n\\npublic ObservableCollection<TEntity> Local { get { return_set.Local; } }\\n\\nIEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() { return_set.Where(_filter).GetEnumerator(); }\\n\\nIEnumerator IEnumerable.GetEnumerator() { return_set.Where(_filter).GetEnumerator(); }\\n\\nType IQueryable.ElementType { get { return typeof(TEntity); } }\\n\\nExpression IQueryable.Expression { get { return_set.Where(_filter).Expression; } }\\n\\nIQueryProvider IQueryable.Provider { get { return_set.AsQueryable().Provider; } }\\n\\nbool IListSource.ContainsListCollection { get { return false; } }\\n\\nIList IListSource.GetList() { throw new InvalidOperationException(); }\\n\\nvoid DoInitializeEntity(TEntity entity) { if (_initializeEntity != null)_initializeEntity(entity); }\\n\\npublic DbSqlQuery<TEntity> SqlQuery(string sql, params object[] parameters) { return_set.SqlQuery(sql, parameters); } } \\n\")), mdx(\"p\", null, \"From here, you just need to call the DbSet that is filtered instead of the default one.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public override IQueryable<Workout> GetAll() { return DatabaseContext.SetOwnable<Workout>(); } \\n\")), mdx(\"p\", null, \"Of course, the DatabaseContext is your class that inherit from DbContext. The SetOwnable method will call the FilteredDbSet.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public IDbSet<TEntity> SetOwnable<TEntity>() where TEntity : class, IUserOwnable { return new FilteredDbSet<TEntity>(this, entity => entity.UserId == CurrentUser.UserId, entity => entity.UserId = CurrentUser.UserId); } \\n``` As you can see, we create a **FilteredDbSet** and assign the user Id with the CurrentUser which is the logged user.\\n\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"Using a FilteredDbSet with Entity Framework to have dynamic Filtering\\\",\\\"date\\\":\\\"2013-03-21\\\",\\\"categories\\\":[\\\"entity-framework\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are using an application that require to have your user to own data and not let other to see or edit it, you need to specify to each of your entity a user id to whom the entity belong. All my entities that belong to a user inherit from `}<strong parentName=\"p\">{`IUserOwnable`}</strong>{`. This interface force the entity to have a UserId.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public interface IUserOwnable { int UserId { get; set; } } \n\\`\\`\\` From here, when I want to get the list of entity of my user I just need to specify in the where clause the logged user id and Entity Framework get me all entities that belong to this one. The following example show you how to get all workout from the logged user.\n\n\n\\`\\`\\`csharp\n public override IQueryable<Workout> GetAll() { return DatabaseContext.Set<Workout>().Where(e=>e.UserId == logguedUserId); } \n`}</code></pre>\n    <p>{`The problem is that you need to set the UserId every time. This can lead to a problem of security if a developer forget to add the condition. It also a pain to repeat this code everywhere. This is why a better way to do it is to have a `}<strong parentName=\"p\">{`FilteredDbSet`}</strong>{` which will automatically add this condition. Here is the FilteredDbSet class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class FilteredDbSet<TEntity> : IDbSet<TEntity>, IOrderedQueryable<TEntity>, IListSource where TEntity : class { private readonly DbSet<TEntity>_set; private readonly Action<TEntity>_initializeEntity; private readonly Expression<Func<TEntity, bool>>_filter;\n\npublic FilteredDbSet(DbContext context, Expression<Func<TEntity, bool>> filter, Action<TEntity> initializeEntity) : this(context.Set<TEntity>(), filter, initializeEntity) { }\n\npublic IQueryable<TEntity> Include(string path) { return_set.Include(path).Where(_filter).AsQueryable(); }\n\nprivate FilteredDbSet(DbSet<TEntity> set, Expression<Func<TEntity, bool>> filter, Action<TEntity> initializeEntity) {_set = set;_filter = filter;_initializeEntity = initializeEntity; }\n\npublic IQueryable<TEntity> Unfiltered() { return_set; }\n\npublic TEntity Add(TEntity entity) { DoInitializeEntity(entity); return_set.Add(entity); } public void AddOrUpdate(TEntity entity) { DoInitializeEntity(entity);_set.AddOrUpdate(entity); } public TEntity Attach(TEntity entity) { DoInitializeEntity(entity); return_set.Attach(entity); }\n\npublic TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : class, TEntity { var entity =_set.Create<TDerivedEntity>(); DoInitializeEntity(entity); return entity; }\n\npublic TEntity Create() { var entity =_set.Create(); DoInitializeEntity(entity); return entity; }\n\npublic TEntity Find(params object[] keyValues) { var entity =_set.Find(keyValues); if (entity == null) return null;\n\nreturn entity; }\n\npublic TEntity Remove(TEntity entity) { if (!_set.Local.Contains(entity)) {_set.Attach(entity); } return_set.Remove(entity); }\n\npublic ObservableCollection<TEntity> Local { get { return_set.Local; } }\n\nIEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() { return_set.Where(_filter).GetEnumerator(); }\n\nIEnumerator IEnumerable.GetEnumerator() { return_set.Where(_filter).GetEnumerator(); }\n\nType IQueryable.ElementType { get { return typeof(TEntity); } }\n\nExpression IQueryable.Expression { get { return_set.Where(_filter).Expression; } }\n\nIQueryProvider IQueryable.Provider { get { return_set.AsQueryable().Provider; } }\n\nbool IListSource.ContainsListCollection { get { return false; } }\n\nIList IListSource.GetList() { throw new InvalidOperationException(); }\n\nvoid DoInitializeEntity(TEntity entity) { if (_initializeEntity != null)_initializeEntity(entity); }\n\npublic DbSqlQuery<TEntity> SqlQuery(string sql, params object[] parameters) { return_set.SqlQuery(sql, parameters); } } \n`}</code></pre>\n    <p>{`From here, you just need to call the DbSet that is filtered instead of the default one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public override IQueryable<Workout> GetAll() { return DatabaseContext.SetOwnable<Workout>(); } \n`}</code></pre>\n    <p>{`Of course, the DatabaseContext is your class that inherit from DbContext. The SetOwnable method will call the FilteredDbSet.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public IDbSet<TEntity> SetOwnable<TEntity>() where TEntity : class, IUserOwnable { return new FilteredDbSet<TEntity>(this, entity => entity.UserId == CurrentUser.UserId, entity => entity.UserId = CurrentUser.UserId); } \n\\`\\`\\` As you can see, we create a **FilteredDbSet** and assign the user Id with the CurrentUser which is the logged user.\n\n\nexport const _frontmatter = {\"title\":\"Using a FilteredDbSet with Entity Framework to have dynamic Filtering\",\"date\":\"2013-03-21\",\"categories\":[\"entity-framework\"]}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}