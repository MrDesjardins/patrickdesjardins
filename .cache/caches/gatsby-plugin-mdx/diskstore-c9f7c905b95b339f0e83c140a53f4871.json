{"expireTime":9007200886478397000,"key":"gatsby-plugin-mdx-entire-payload-0bc57a5a048e0bfda01e6c6a44a26504--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"TempDataDictionary (TempData is of type of TempDataDictionary) is useful if you need to keep you data between redirection. I have see some case of error with programmer who use the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":182,"offset":182},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TempData","position":{"start":{"line":2,"column":184,"offset":184},"end":{"line":2,"column":192,"offset":192},"indent":[]}}],"position":{"start":{"line":2,"column":182,"offset":182},"end":{"line":2,"column":194,"offset":194},"indent":[]}},{"type":"text","value":" with the ","position":{"start":{"line":2,"column":194,"offset":194},"end":{"line":2,"column":204,"offset":204},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Add","position":{"start":{"line":2,"column":206,"offset":206},"end":{"line":2,"column":209,"offset":209},"indent":[]}}],"position":{"start":{"line":2,"column":204,"offset":204},"end":{"line":2,"column":211,"offset":211},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":2,"column":211,"offset":211},"end":{"line":2,"column":219,"offset":219},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":219,"offset":219},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First the Add method won't let you add more than 1 same key. This mean that it will crash if you write: ","position":{"start":{"line":4,"column":1,"offset":221},"end":{"line":4,"column":105,"offset":325},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":221},"end":{"line":4,"column":105,"offset":325},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" TempData.Add(\"key1\",\"value1\"); TempData.Add(\"key1\",\"value2\"); \n``` You will tell me why someone will do this, well, in the scenario of redirection, which should occur if you are using **TempData** instead of **ViewBag** you may comeback in the same path of code that the user set the data. In this case, the value are set twice cause the TempData in a redirection keep its values.\n\nSo, you can add some validation with the ContainsKey method. \n```csharp\n if(!TempData.ContainsKey(\"key1\")) { TempData.Add(\"key1\",\"value1\"); } ","position":{"start":{"line":5,"column":1,"offset":326},"end":{"line":12,"column":4,"offset":865},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Second, this solve the problem but create overwhelming code for a simple task. The solution in my opinion is to simply use the bracket overload of the TempDataDictionary.","position":{"start":{"line":14,"column":1,"offset":867},"end":{"line":14,"column":171,"offset":1037},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":867},"end":{"line":14,"column":171,"offset":1037},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" TempData[\"key1\"] = \"value1\"; ","position":{"start":{"line":17,"column":1,"offset":1040},"end":{"line":19,"column":4,"offset":1084},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code is shorter, cleaner and do what we want. It set the value and if it's a redirection to the same code who has set the value this one will just reset the same value. That's it! Simple and clean.","position":{"start":{"line":21,"column":1,"offset":1086},"end":{"line":21,"column":202,"offset":1287},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1086},"end":{"line":21,"column":202,"offset":1287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are curious about the bracket code, here is the source code of the TempData for the property [].","position":{"start":{"line":23,"column":1,"offset":1289},"end":{"line":23,"column":104,"offset":1392},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1289},"end":{"line":23,"column":104,"offset":1392},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" private Dictionary<string, object>_data; private HashSet<string>_initialKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase); //... public object this[string key] { get { object value; if (TryGetValue(key, out value)) {_initialKeys.Remove(key); return value; } return null; } set {_data[key] = value;_initialKeys.Add(key); } } ","position":{"start":{"line":26,"column":1,"offset":1395},"end":{"line":28,"column":4,"offset":1745},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Of course, the real question now is why does this code has redirection that double set this value, but this is another story.","position":{"start":{"line":30,"column":1,"offset":1747},"end":{"line":30,"column":126,"offset":1872},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1747},"end":{"line":30,"column":126,"offset":1872},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"TempData why you should use bracket instead of .Add\",\"date\":\"2012-08-13\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":33,"column":1,"offset":1875},"end":{"line":33,"column":137,"offset":2011},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":33,"column":137,"offset":2011}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TempData why you should use bracket instead of .Add\",\n  \"date\": \"2012-08-13\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TempDataDictionary (TempData is of type of TempDataDictionary) is useful if you need to keep you data between redirection. I have see some case of error with programmer who use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TempData\"), \" with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add\"), \" method.\"), mdx(\"p\", null, \"First the Add method won't let you add more than 1 same key. This mean that it will crash if you write: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" TempData.Add(\\\"key1\\\",\\\"value1\\\"); TempData.Add(\\\"key1\\\",\\\"value2\\\"); \\n``` You will tell me why someone will do this, well, in the scenario of redirection, which should occur if you are using **TempData** instead of **ViewBag** you may comeback in the same path of code that the user set the data. In this case, the value are set twice cause the TempData in a redirection keep its values.\\n\\nSo, you can add some validation with the ContainsKey method. \\n```csharp\\n if(!TempData.ContainsKey(\\\"key1\\\")) { TempData.Add(\\\"key1\\\",\\\"value1\\\"); } \\n\")), mdx(\"p\", null, \"Second, this solve the problem but create overwhelming code for a simple task. The solution in my opinion is to simply use the bracket overload of the TempDataDictionary.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" TempData[\\\"key1\\\"] = \\\"value1\\\"; \\n\")), mdx(\"p\", null, \"The code is shorter, cleaner and do what we want. It set the value and if it's a redirection to the same code who has set the value this one will just reset the same value. That's it! Simple and clean.\"), mdx(\"p\", null, \"If you are curious about the bracket code, here is the source code of the TempData for the property [].\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" private Dictionary<string, object>_data; private HashSet<string>_initialKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase); //... public object this[string key] { get { object value; if (TryGetValue(key, out value)) {_initialKeys.Remove(key); return value; } return null; } set {_data[key] = value;_initialKeys.Add(key); } } \\n\")), mdx(\"p\", null, \"Of course, the real question now is why does this code has redirection that double set this value, but this is another story.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"TempData why you should use bracket instead of .Add\",\n  \"date\": \"2012-08-13\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`TempDataDictionary (TempData is of type of TempDataDictionary) is useful if you need to keep you data between redirection. I have see some case of error with programmer who use the `}<strong parentName=\"p\">{`TempData`}</strong>{` with the `}<strong parentName=\"p\">{`Add`}</strong>{` method.`}</p>\n    <p>{`First the Add method won't let you add more than 1 same key. This mean that it will crash if you write: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` TempData.Add(\"key1\",\"value1\"); TempData.Add(\"key1\",\"value2\"); \n\\`\\`\\` You will tell me why someone will do this, well, in the scenario of redirection, which should occur if you are using **TempData** instead of **ViewBag** you may comeback in the same path of code that the user set the data. In this case, the value are set twice cause the TempData in a redirection keep its values.\n\nSo, you can add some validation with the ContainsKey method. \n\\`\\`\\`csharp\n if(!TempData.ContainsKey(\"key1\")) { TempData.Add(\"key1\",\"value1\"); } \n`}</code></pre>\n    <p>{`Second, this solve the problem but create overwhelming code for a simple task. The solution in my opinion is to simply use the bracket overload of the TempDataDictionary.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` TempData[\"key1\"] = \"value1\"; \n`}</code></pre>\n    <p>{`The code is shorter, cleaner and do what we want. It set the value and if it's a redirection to the same code who has set the value this one will just reset the same value. That's it! Simple and clean.`}</p>\n    <p>{`If you are curious about the bracket code, here is the source code of the TempData for the property [].`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` private Dictionary<string, object>_data; private HashSet<string>_initialKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase); //... public object this[string key] { get { object value; if (TryGetValue(key, out value)) {_initialKeys.Remove(key); return value; } return null; } set {_data[key] = value;_initialKeys.Add(key); } } \n`}</code></pre>\n    <p>{`Of course, the real question now is why does this code has redirection that double set this value, but this is another story.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}