{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-bf5e194151153958f8a9ca6301d8b689--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you have an Ajax call to do an action on the server side you may want to answer back with a message, refreshed values or a portion of the page to be updated. To do, you need to send back into a JSON object the view (or partial view). In this article, we will create a method that should be placed into every of your controller (maybe in a Base Controller).","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":360,"offset":360},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":360,"offset":360},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The method is this one:","position":{"start":{"line":4,"column":1,"offset":362},"end":{"line":4,"column":24,"offset":385},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":362},"end":{"line":4,"column":24,"offset":385},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" /// <summary> /// Render a PartialView into a string that contain the Html to display to the browser. /// </summary> /// <param name=\"partialViewName\">The name of the partial view to render</param> /// <param name=\"model\">The model to bind to the partial view</param> /// <returns>The html rendered partial view</returns> protected virtual string RenderPartialView(string partialViewName, object model) { if (ControllerContext == null) return string.Empty;\n\nif (model == null) throw new ArgumentNullException(\"model\");\n\nif (string.IsNullOrEmpty(partialViewName)) throw new ArgumentNullException(\"partialViewName\");\n\nModelState.Clear();//Remove possible model binding error.\n\nViewData.Model = model;//Set the model to the partial view\n\nusing (var sw = new StringWriter()) { var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, partialViewName); var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw); viewResult.View.Render(viewContext, sw); return sw.GetStringBuilder().ToString(); } } ","position":{"start":{"line":7,"column":1,"offset":388},"end":{"line":19,"column":4,"offset":1447},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In short, it uses the View Engines of Mvc to get the result of the partial view (if found). From there, a view context is generated from the current call (with the current controller context). The model is passed with the ViewData that is required by the ViewContext constructor. Finally, we generated the html that is returned.","position":{"start":{"line":21,"column":1,"offset":1449},"end":{"line":21,"column":329,"offset":1777},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1449},"end":{"line":21,"column":329,"offset":1777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example of use.","position":{"start":{"line":23,"column":1,"offset":1779},"end":{"line":23,"column":27,"offset":1805},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1779},"end":{"line":23,"column":27,"offset":1805},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" return Json(new { StatusCode= 1, StatusMessage = \"Customer has been created\", ResponseView = RenderPartialView(\"CustomerPanel\", customer) }); ","position":{"start":{"line":26,"column":1,"offset":1808},"end":{"line":28,"column":4,"offset":1965},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This could have been otherwise, but you can see the logic behind using Json to have an anonymous object serialized back to the client. From there, you can use JQuery or a plain Javascript statement to display the ResponseView into an html element. The idea of rendering a partial view from a controller came from this other ","position":{"start":{"line":30,"column":1,"offset":1967},"end":{"line":30,"column":325,"offset":2291},"indent":[]}},{"type":"link","title":null,"url":"http://craftycodeblog.com/2010/05/15/asp-net-mvc-render-partial-view-to-string/","children":[{"type":"text","value":"blog","position":{"start":{"line":30,"column":326,"offset":2292},"end":{"line":30,"column":330,"offset":2296},"indent":[]}}],"position":{"start":{"line":30,"column":325,"offset":2291},"end":{"line":30,"column":412,"offset":2378},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":30,"column":412,"offset":2378},"end":{"line":30,"column":413,"offset":2379},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1967},"end":{"line":30,"column":413,"offset":2379},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to render a partial view for an Ajax call in Asp.Net MVC\",\"date\":\"2012-09-19\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":33,"column":1,"offset":2382},"end":{"line":33,"column":146,"offset":2527},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":33,"column":146,"offset":2527}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to render a partial view for an Ajax call in Asp.Net MVC\",\n  \"date\": \"2012-09-19\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have an Ajax call to do an action on the server side you may want to answer back with a message, refreshed values or a portion of the page to be updated. To do, you need to send back into a JSON object the view (or partial view). In this article, we will create a method that should be placed into every of your controller (maybe in a Base Controller).\"), mdx(\"p\", null, \"The method is this one:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" /// <summary> /// Render a PartialView into a string that contain the Html to display to the browser. /// </summary> /// <param name=\\\"partialViewName\\\">The name of the partial view to render</param> /// <param name=\\\"model\\\">The model to bind to the partial view</param> /// <returns>The html rendered partial view</returns> protected virtual string RenderPartialView(string partialViewName, object model) { if (ControllerContext == null) return string.Empty;\\n\\nif (model == null) throw new ArgumentNullException(\\\"model\\\");\\n\\nif (string.IsNullOrEmpty(partialViewName)) throw new ArgumentNullException(\\\"partialViewName\\\");\\n\\nModelState.Clear();//Remove possible model binding error.\\n\\nViewData.Model = model;//Set the model to the partial view\\n\\nusing (var sw = new StringWriter()) { var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, partialViewName); var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw); viewResult.View.Render(viewContext, sw); return sw.GetStringBuilder().ToString(); } } \\n\")), mdx(\"p\", null, \"In short, it uses the View Engines of Mvc to get the result of the partial view (if found). From there, a view context is generated from the current call (with the current controller context). The model is passed with the ViewData that is required by the ViewContext constructor. Finally, we generated the html that is returned.\"), mdx(\"p\", null, \"Here is an example of use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" return Json(new { StatusCode= 1, StatusMessage = \\\"Customer has been created\\\", ResponseView = RenderPartialView(\\\"CustomerPanel\\\", customer) }); \\n\")), mdx(\"p\", null, \"This could have been otherwise, but you can see the logic behind using Json to have an anonymous object serialized back to the client. From there, you can use JQuery or a plain Javascript statement to display the ResponseView into an html element. The idea of rendering a partial view from a controller came from this other \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://craftycodeblog.com/2010/05/15/asp-net-mvc-render-partial-view-to-string/\"\n  }, \"blog\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to render a partial view for an Ajax call in Asp.Net MVC\",\n  \"date\": \"2012-09-19\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you have an Ajax call to do an action on the server side you may want to answer back with a message, refreshed values or a portion of the page to be updated. To do, you need to send back into a JSON object the view (or partial view). In this article, we will create a method that should be placed into every of your controller (maybe in a Base Controller).`}</p>\n    <p>{`The method is this one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` /// <summary> /// Render a PartialView into a string that contain the Html to display to the browser. /// </summary> /// <param name=\"partialViewName\">The name of the partial view to render</param> /// <param name=\"model\">The model to bind to the partial view</param> /// <returns>The html rendered partial view</returns> protected virtual string RenderPartialView(string partialViewName, object model) { if (ControllerContext == null) return string.Empty;\n\nif (model == null) throw new ArgumentNullException(\"model\");\n\nif (string.IsNullOrEmpty(partialViewName)) throw new ArgumentNullException(\"partialViewName\");\n\nModelState.Clear();//Remove possible model binding error.\n\nViewData.Model = model;//Set the model to the partial view\n\nusing (var sw = new StringWriter()) { var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, partialViewName); var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw); viewResult.View.Render(viewContext, sw); return sw.GetStringBuilder().ToString(); } } \n`}</code></pre>\n    <p>{`In short, it uses the View Engines of Mvc to get the result of the partial view (if found). From there, a view context is generated from the current call (with the current controller context). The model is passed with the ViewData that is required by the ViewContext constructor. Finally, we generated the html that is returned.`}</p>\n    <p>{`Here is an example of use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` return Json(new { StatusCode= 1, StatusMessage = \"Customer has been created\", ResponseView = RenderPartialView(\"CustomerPanel\", customer) }); \n`}</code></pre>\n    <p>{`This could have been otherwise, but you can see the logic behind using Json to have an anonymous object serialized back to the client. From there, you can use JQuery or a plain Javascript statement to display the ResponseView into an html element. The idea of rendering a partial view from a controller came from this other `}<a parentName=\"p\" {...{\n        \"href\": \"http://craftycodeblog.com/2010/05/15/asp-net-mvc-render-partial-view-to-string/\"\n      }}>{`blog`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}