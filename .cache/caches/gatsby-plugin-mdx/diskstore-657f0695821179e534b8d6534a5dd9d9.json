{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-d05652ecabd36ecb4a679477c26c1933--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Lets imagine that you have a collection with a class containing Images. All images are identified by an unique key and a caption that the user enter. You want to verify that the caption entered by the user is unique to the collection. How to do it?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":249,"offset":249},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":249,"offset":249},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be done with Linq to Object pretty easily by using 2 from statement.","position":{"start":{"line":4,"column":1,"offset":251},"end":{"line":4,"column":78,"offset":328},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":251},"end":{"line":4,"column":78,"offset":328},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var hasDouble = (from s1 in this.Images from s2 in this.Images where s1.Key != s2.Key && s1.Caption == s2.Caption select new { Image1 = s1, Image2 = s2 }).Any(); ","position":{"start":{"line":7,"column":1,"offset":331},"end":{"line":9,"column":4,"offset":508},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will loop through all the images and will compare the caption of all shape but not compare node with itself. I have created an anonymous object because in fact, I may want to get those 2 elements that have the same caption. In that case I just need to call the same code and remove the .Any().","position":{"start":{"line":11,"column":1,"offset":510},"end":{"line":11,"column":299,"offset":808},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":510},"end":{"line":11,"column":299,"offset":808},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be translated to Lambda expression. ","position":{"start":{"line":13,"column":1,"offset":810},"end":{"line":13,"column":46,"offset":855},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":810},"end":{"line":13,"column":46,"offset":855},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" (this.Shapes.SelectMany(s1 => this.Images, (s1, s2) => new{s1, s2}) .Where(tt => tt.s1.Key != tt.s2.Key && tt.s1.Caption == tt.s2.Caption) .Select(tt => new { Image1 = tt.s1, Image2 = tt.s2} ) ","position":{"start":{"line":14,"column":1,"offset":856},"end":{"line":16,"column":4,"offset":1064},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But for this kind of task, Lambda is more confusing from my point of view.","position":{"start":{"line":18,"column":1,"offset":1066},"end":{"line":18,"column":75,"offset":1140},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1066},"end":{"line":18,"column":75,"offset":1140},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to compare element from the same collection with Linq?\",\"date\":\"2011-12-11\",\"categories\":[\"c-sharp\",\"linq\"]}","position":{"start":{"line":21,"column":1,"offset":1143},"end":{"line":21,"column":151,"offset":1293},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":151,"offset":1293}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to compare element from the same collection with Linq?\",\n  \"date\": \"2011-12-11\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Lets imagine that you have a collection with a class containing Images. All images are identified by an unique key and a caption that the user enter. You want to verify that the caption entered by the user is unique to the collection. How to do it?\"), mdx(\"p\", null, \"This can be done with Linq to Object pretty easily by using 2 from statement.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var hasDouble = (from s1 in this.Images from s2 in this.Images where s1.Key != s2.Key && s1.Caption == s2.Caption select new { Image1 = s1, Image2 = s2 }).Any(); \\n\")), mdx(\"p\", null, \"This will loop through all the images and will compare the caption of all shape but not compare node with itself. I have created an anonymous object because in fact, I may want to get those 2 elements that have the same caption. In that case I just need to call the same code and remove the .Any().\"), mdx(\"p\", null, \"This can be translated to Lambda expression. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" (this.Shapes.SelectMany(s1 => this.Images, (s1, s2) => new{s1, s2}) .Where(tt => tt.s1.Key != tt.s2.Key && tt.s1.Caption == tt.s2.Caption) .Select(tt => new { Image1 = tt.s1, Image2 = tt.s2} ) \\n\")), mdx(\"p\", null, \"But for this kind of task, Lambda is more confusing from my point of view.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to compare element from the same collection with Linq?\",\n  \"date\": \"2011-12-11\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Lets imagine that you have a collection with a class containing Images. All images are identified by an unique key and a caption that the user enter. You want to verify that the caption entered by the user is unique to the collection. How to do it?`}</p>\n    <p>{`This can be done with Linq to Object pretty easily by using 2 from statement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var hasDouble = (from s1 in this.Images from s2 in this.Images where s1.Key != s2.Key && s1.Caption == s2.Caption select new { Image1 = s1, Image2 = s2 }).Any(); \n`}</code></pre>\n    <p>{`This will loop through all the images and will compare the caption of all shape but not compare node with itself. I have created an anonymous object because in fact, I may want to get those 2 elements that have the same caption. In that case I just need to call the same code and remove the .Any().`}</p>\n    <p>{`This can be translated to Lambda expression. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` (this.Shapes.SelectMany(s1 => this.Images, (s1, s2) => new{s1, s2}) .Where(tt => tt.s1.Key != tt.s2.Key && tt.s1.Caption == tt.s2.Caption) .Select(tt => new { Image1 = tt.s1, Image2 = tt.s2} ) \n`}</code></pre>\n    <p>{`But for this kind of task, Lambda is more confusing from my point of view.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}