{"expireTime":9007200886478392000,"key":"gatsby-plugin-mdx-entire-payload-6dc4a7dd4d8323748d24249550afe2e9--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to use Unity with a Microsoft Data Service, you need to setup your ioc container once and the perfect time to do it is in the startup. OData service doesn't have global.asax, neither does it have a ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":211,"offset":211},"indent":[]}},{"type":"link","title":null,"url":"./how-to-use-log-every-call-of-your-wcf-services-methods","children":[{"type":"text","value":"ServiceHostFactory","position":{"start":{"line":2,"column":212,"offset":212},"end":{"line":2,"column":230,"offset":230},"indent":[]}}],"position":{"start":{"line":2,"column":211,"offset":211},"end":{"line":2,"column":289,"offset":289},"indent":[]}},{"type":"text","value":" where you could setup your container.","position":{"start":{"line":2,"column":289,"offset":289},"end":{"line":2,"column":327,"offset":327},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":327,"offset":327},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With Microsoft Data Service (OData) you want to setup your Unity container with the method ","position":{"start":{"line":4,"column":1,"offset":329},"end":{"line":4,"column":92,"offset":420},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"CreateDataSource","position":{"start":{"line":4,"column":93,"offset":421},"end":{"line":4,"column":109,"offset":437},"indent":[]}}],"position":{"start":{"line":4,"column":92,"offset":420},"end":{"line":4,"column":110,"offset":438},"indent":[]}},{"type":"text","value":" which is available since you must inherit from ","position":{"start":{"line":4,"column":110,"offset":438},"end":{"line":4,"column":158,"offset":486},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"DataService","position":{"start":{"line":4,"column":159,"offset":487},"end":{"line":4,"column":170,"offset":498},"indent":[]}}],"position":{"start":{"line":4,"column":158,"offset":486},"end":{"line":4,"column":171,"offset":499},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":171,"offset":499},"end":{"line":4,"column":172,"offset":500},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":329},"end":{"line":4,"column":172,"offset":500},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class MyDataService : DataService<MyContext> { public UnityContainer Container { get; set; }\n\npublic static void InitializeService(DataServiceConfiguration config) { config.SetEntitySetAccessRule(\"*\", EntitySetRights.AllRead); config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V3; config.UseVerboseErrors = true; } protected override ODataDbContext CreateDataSource() { Container = new UnityContainer(); Bootstrapper.Initialise(Container); return new MyDataSourceContext(Container.Resolve<IMyInterface>()); } } ","position":{"start":{"line":7,"column":1,"offset":503},"end":{"line":11,"column":4,"offset":1061},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, you just need to define your UnityContainer as a property to your class (or you could use an attribute) and then initialize it inside ","position":{"start":{"line":13,"column":1,"offset":1063},"end":{"line":13,"column":151,"offset":1213},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"CreateDataSource","position":{"start":{"line":13,"column":152,"offset":1214},"end":{"line":13,"column":168,"offset":1230},"indent":[]}}],"position":{"start":{"line":13,"column":151,"offset":1213},"end":{"line":13,"column":169,"offset":1231},"indent":[]}},{"type":"text","value":" method. Not only you can initialize your container here, but you can override the one defined in DataSerivce to use yours (MyDataSourceContext) which use unity for its parameters.","position":{"start":{"line":13,"column":169,"offset":1231},"end":{"line":13,"column":349,"offset":1411},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1063},"end":{"line":13,"column":349,"offset":1411},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, if you have a context for test and for your Data Service, then you could simply put any of the two in the class signature : ","position":{"start":{"line":15,"column":1,"offset":1413},"end":{"line":15,"column":129,"offset":1541},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"public class MyDataService : DataService","position":{"start":{"line":15,"column":130,"offset":1542},"end":{"line":15,"column":170,"offset":1582},"indent":[]}}],"position":{"start":{"line":15,"column":129,"offset":1541},"end":{"line":15,"column":171,"offset":1583},"indent":[]}},{"type":"text","value":", and defined the real context to use later in the override method. The main advantage is that you can inject with Unity (or any ioc container you use) classes to you context.","position":{"start":{"line":15,"column":171,"offset":1583},"end":{"line":15,"column":346,"offset":1758},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1413},"end":{"line":15,"column":346,"offset":1758},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to use Microsoft Data Service OData with Unity\",\"date\":\"2013-06-03\",\"categories\":[\"entity-framework\",\"webservices\"]}","position":{"start":{"line":18,"column":1,"offset":1761},"end":{"line":18,"column":159,"offset":1919},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":159,"offset":1919}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use Microsoft Data Service OData with Unity\",\n  \"date\": \"2013-06-03\",\n  \"categories\": [\"entity-framework\", \"webservices\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you want to use Unity with a Microsoft Data Service, you need to setup your ioc container once and the perfect time to do it is in the startup. OData service doesn't have global.asax, neither does it have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./how-to-use-log-every-call-of-your-wcf-services-methods\"\n  }, \"ServiceHostFactory\"), \" where you could setup your container.\"), mdx(\"p\", null, \"With Microsoft Data Service (OData) you want to setup your Unity container with the method \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CreateDataSource\"), \" which is available since you must inherit from \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DataService\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class MyDataService : DataService<MyContext> { public UnityContainer Container { get; set; }\\n\\npublic static void InitializeService(DataServiceConfiguration config) { config.SetEntitySetAccessRule(\\\"*\\\", EntitySetRights.AllRead); config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V3; config.UseVerboseErrors = true; } protected override ODataDbContext CreateDataSource() { Container = new UnityContainer(); Bootstrapper.Initialise(Container); return new MyDataSourceContext(Container.Resolve<IMyInterface>()); } } \\n\")), mdx(\"p\", null, \"As you can see, you just need to define your UnityContainer as a property to your class (or you could use an attribute) and then initialize it inside \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CreateDataSource\"), \" method. Not only you can initialize your container here, but you can override the one defined in DataSerivce to use yours (MyDataSourceContext) which use unity for its parameters.\"), mdx(\"p\", null, \"So, if you have a context for test and for your Data Service, then you could simply put any of the two in the class signature : \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"public class MyDataService : DataService\"), \", and defined the real context to use later in the override method. The main advantage is that you can inject with Unity (or any ioc container you use) classes to you context.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to use Microsoft Data Service OData with Unity\",\n  \"date\": \"2013-06-03\",\n  \"categories\": [\"entity-framework\", \"webservices\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you want to use Unity with a Microsoft Data Service, you need to setup your ioc container once and the perfect time to do it is in the startup. OData service doesn't have global.asax, neither does it have a `}<a parentName=\"p\" {...{\n        \"href\": \"./how-to-use-log-every-call-of-your-wcf-services-methods\"\n      }}>{`ServiceHostFactory`}</a>{` where you could setup your container.`}</p>\n    <p>{`With Microsoft Data Service (OData) you want to setup your Unity container with the method `}<em parentName=\"p\">{`CreateDataSource`}</em>{` which is available since you must inherit from `}<em parentName=\"p\">{`DataService`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class MyDataService : DataService<MyContext> { public UnityContainer Container { get; set; }\n\npublic static void InitializeService(DataServiceConfiguration config) { config.SetEntitySetAccessRule(\"*\", EntitySetRights.AllRead); config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V3; config.UseVerboseErrors = true; } protected override ODataDbContext CreateDataSource() { Container = new UnityContainer(); Bootstrapper.Initialise(Container); return new MyDataSourceContext(Container.Resolve<IMyInterface>()); } } \n`}</code></pre>\n    <p>{`As you can see, you just need to define your UnityContainer as a property to your class (or you could use an attribute) and then initialize it inside `}<em parentName=\"p\">{`CreateDataSource`}</em>{` method. Not only you can initialize your container here, but you can override the one defined in DataSerivce to use yours (MyDataSourceContext) which use unity for its parameters.`}</p>\n    <p>{`So, if you have a context for test and for your Data Service, then you could simply put any of the two in the class signature : `}<em parentName=\"p\">{`public class MyDataService : DataService`}</em>{`, and defined the real context to use later in the override method. The main advantage is that you can inject with Unity (or any ioc container you use) classes to you context.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}