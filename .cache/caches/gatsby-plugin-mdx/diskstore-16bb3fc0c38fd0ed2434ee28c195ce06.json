{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-8eb68d77d56c016b452ebfbf96b008fe--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"There are four ways to call a function in JavaScript. In this article, we will see them all and see the pros and cons of each of them.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":135,"offset":135},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":135,"offset":135},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Function invocation pattern","position":{"start":{"line":4,"column":3,"offset":139},"end":{"line":4,"column":30,"offset":166},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":137},"end":{"line":4,"column":32,"offset":168},"indent":[]}},{"type":"text","value":" This is when a function is not attached to anything, it's floating which in fact is attached to \"window\" when in a browser if this one is created not within an object. Here is two examples:","position":{"start":{"line":4,"column":32,"offset":168},"end":{"line":4,"column":222,"offset":358},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":137},"end":{"line":4,"column":222,"offset":358},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var f1 = function () {\n  console.log(\"F1\");\n};\nf1();\nwindow.f1();\nfunction f2() {\n  console.log(\"F2\");\n}\nf2();\nwindow.f2();","position":{"start":{"line":6,"column":1,"offset":360},"end":{"line":17,"column":4,"offset":501},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, if a function is not bound to an object but created withing a function, this one belong to the function. Still, it is not attached to anything.","position":{"start":{"line":19,"column":1,"offset":503},"end":{"line":19,"column":153,"offset":655},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":503},"end":{"line":19,"column":153,"offset":655},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var myObject = {\n  function2: function () {\n    console.log(\"Function2\");\n    var function2_1 = function () {\n      console.log(\"Function2_1\");\n    };\n    function2_1();\n  },\n};\nmyObject.function2();","position":{"start":{"line":21,"column":1,"offset":657},"end":{"line":32,"column":4,"offset":874},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Method invocation pattern","position":{"start":{"line":34,"column":3,"offset":878},"end":{"line":34,"column":28,"offset":903},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":876},"end":{"line":34,"column":30,"offset":905},"indent":[]}},{"type":"text","value":" Method invocation pattern is when a function is attached to an object that is not instantiated with the \"new\" keyword.","position":{"start":{"line":34,"column":30,"offset":905},"end":{"line":34,"column":149,"offset":1024},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":876},"end":{"line":34,"column":149,"offset":1024},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var myObject = {\n  function2: function () {\n    console.log(\"Function2\");\n  },\n};\nmyObject.function2();","position":{"start":{"line":36,"column":1,"offset":1026},"end":{"line":43,"column":4,"offset":1147},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Constructor invocation pattern","position":{"start":{"line":45,"column":3,"offset":1151},"end":{"line":45,"column":33,"offset":1181},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1149},"end":{"line":45,"column":35,"offset":1183},"indent":[]}},{"type":"text","value":" I already covered in previous article about prototype. Invoking with a constructor trigger the prototype chain for the created object. Constructor function are created with the keyword \"new\".","position":{"start":{"line":45,"column":35,"offset":1183},"end":{"line":45,"column":227,"offset":1375},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1149},"end":{"line":45,"column":227,"offset":1375},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var MyClass1 = function () {\n  this.function2 = function () {\n    return \"F2\";\n  };\n};\n\nMyClass1.prototype.function1 = function () {\n  return \"F1\";\n};\n\nvar instance = new MyClass1();\nconsole.log(instance.function1());\nconsole.log(instance.function2());","position":{"start":{"line":47,"column":1,"offset":1377},"end":{"line":61,"column":4,"offset":1647},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, you can invoke method from the instance or the prototype.","position":{"start":{"line":63,"column":1,"offset":1649},"end":{"line":63,"column":74,"offset":1722},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1649},"end":{"line":63,"column":74,"offset":1722},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Apply invocation pattern","position":{"start":{"line":65,"column":3,"offset":1726},"end":{"line":65,"column":27,"offset":1750},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1724},"end":{"line":65,"column":29,"offset":1752},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1724},"end":{"line":65,"column":29,"offset":1752},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The last pattern is to use a function to call a function! This is possible because every object has some default function attached to their prototype, like the one that interest us which is \"apply\".","position":{"start":{"line":67,"column":1,"offset":1754},"end":{"line":67,"column":199,"offset":1952},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1754},"end":{"line":67,"column":199,"offset":1952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following example shows how to invoke with apply. Both call to the apply function uses the class' prototype which call the function and apply. The difference is that one pass the method which has a member assigned with ","position":{"start":{"line":69,"column":1,"offset":1954},"end":{"line":69,"column":224,"offset":2177},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":69,"column":224,"offset":2177},"end":{"line":69,"column":230,"offset":2183},"indent":[]}},{"type":"text","value":", while the second call an anonymous object. The importance is to have a \"m1\" member because function1 access it in its prototype.","position":{"start":{"line":69,"column":230,"offset":2183},"end":{"line":69,"column":360,"offset":2313},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1954},"end":{"line":69,"column":360,"offset":2313},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The important detail about \"apply\" is the parameter. The first one is the pointer ","position":{"start":{"line":71,"column":1,"offset":2315},"end":{"line":71,"column":83,"offset":2397},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":71,"column":83,"offset":2397},"end":{"line":71,"column":89,"offset":2403},"indent":[]}},{"type":"text","value":", the others are the the function arguments.","position":{"start":{"line":71,"column":89,"offset":2403},"end":{"line":71,"column":133,"offset":2447},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2315},"end":{"line":71,"column":133,"offset":2447},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var MyClass1 = function () {\n  this.m1 = \"Member Value\";\n};\n\nMyClass1.prototype.function1 = function () {\n  return \"From function1 here is the m1 value : \" + this.m1;\n};\n\nvar instance = new MyClass1();\nvar objectOnTheFly = { m1: \"on-the-fly\" };\nconsole.log(MyClass1.prototype.function1.apply(MyClass1()));\nconsole.log(MyClass1.prototype.function1.apply(objectOnTheFly));","position":{"start":{"line":73,"column":1,"offset":2449},"end":{"line":86,"column":4,"offset":2837},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, the ","position":{"start":{"line":88,"column":1,"offset":2839},"end":{"line":88,"column":22,"offset":2860},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":88,"column":22,"offset":2860},"end":{"line":88,"column":28,"offset":2866},"indent":[]}},{"type":"text","value":" got assigned dynamically and the function uses the value by accessing with ","position":{"start":{"line":88,"column":28,"offset":2866},"end":{"line":88,"column":104,"offset":2942},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":88,"column":104,"offset":2942},"end":{"line":88,"column":110,"offset":2948},"indent":[]}},{"type":"text","value":". In this article we saw 4 different ways to invoke function in JavaScript.","position":{"start":{"line":88,"column":110,"offset":2948},"end":{"line":88,"column":185,"offset":3023},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2839},"end":{"line":88,"column":185,"offset":3023},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Four Patterns to Invoke a Function\",\"date\":\"2017-05-25\",\"categories\":[\"javascript\"]}","position":{"start":{"line":91,"column":1,"offset":3026},"end":{"line":91,"column":134,"offset":3159},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":91,"column":134,"offset":3159}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Four Patterns to Invoke a Function\",\n  \"date\": \"2017-05-25\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are four ways to call a function in JavaScript. In this article, we will see them all and see the pros and cons of each of them.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Function invocation pattern\"), \" This is when a function is not attached to anything, it's floating which in fact is attached to \\\"window\\\" when in a browser if this one is created not within an object. Here is two examples:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var f1 = function () {\\n  console.log(\\\"F1\\\");\\n};\\nf1();\\nwindow.f1();\\nfunction f2() {\\n  console.log(\\\"F2\\\");\\n}\\nf2();\\nwindow.f2();\\n\")), mdx(\"p\", null, \"However, if a function is not bound to an object but created withing a function, this one belong to the function. Still, it is not attached to anything.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var myObject = {\\n  function2: function () {\\n    console.log(\\\"Function2\\\");\\n    var function2_1 = function () {\\n      console.log(\\\"Function2_1\\\");\\n    };\\n    function2_1();\\n  },\\n};\\nmyObject.function2();\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Method invocation pattern\"), \" Method invocation pattern is when a function is attached to an object that is not instantiated with the \\\"new\\\" keyword.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var myObject = {\\n  function2: function () {\\n    console.log(\\\"Function2\\\");\\n  },\\n};\\nmyObject.function2();\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Constructor invocation pattern\"), \" I already covered in previous article about prototype. Invoking with a constructor trigger the prototype chain for the created object. Constructor function are created with the keyword \\\"new\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var MyClass1 = function () {\\n  this.function2 = function () {\\n    return \\\"F2\\\";\\n  };\\n};\\n\\nMyClass1.prototype.function1 = function () {\\n  return \\\"F1\\\";\\n};\\n\\nvar instance = new MyClass1();\\nconsole.log(instance.function1());\\nconsole.log(instance.function2());\\n\")), mdx(\"p\", null, \"As you can see, you can invoke method from the instance or the prototype.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Apply invocation pattern\")), mdx(\"p\", null, \"The last pattern is to use a function to call a function! This is possible because every object has some default function attached to their prototype, like the one that interest us which is \\\"apply\\\".\"), mdx(\"p\", null, \"The following example shows how to invoke with apply. Both call to the apply function uses the class' prototype which call the function and apply. The difference is that one pass the method which has a member assigned with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", while the second call an anonymous object. The importance is to have a \\\"m1\\\" member because function1 access it in its prototype.\"), mdx(\"p\", null, \"The important detail about \\\"apply\\\" is the parameter. The first one is the pointer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", the others are the the function arguments.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var MyClass1 = function () {\\n  this.m1 = \\\"Member Value\\\";\\n};\\n\\nMyClass1.prototype.function1 = function () {\\n  return \\\"From function1 here is the m1 value : \\\" + this.m1;\\n};\\n\\nvar instance = new MyClass1();\\nvar objectOnTheFly = { m1: \\\"on-the-fly\\\" };\\nconsole.log(MyClass1.prototype.function1.apply(MyClass1()));\\nconsole.log(MyClass1.prototype.function1.apply(objectOnTheFly));\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" got assigned dynamically and the function uses the value by accessing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \". In this article we saw 4 different ways to invoke function in JavaScript.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Four Patterns to Invoke a Function\",\n  \"date\": \"2017-05-25\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`There are four ways to call a function in JavaScript. In this article, we will see them all and see the pros and cons of each of them.`}</p>\n    <p><strong parentName=\"p\">{`Function invocation pattern`}</strong>{` This is when a function is not attached to anything, it's floating which in fact is attached to \"window\" when in a browser if this one is created not within an object. Here is two examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var f1 = function () {\n  console.log(\"F1\");\n};\nf1();\nwindow.f1();\nfunction f2() {\n  console.log(\"F2\");\n}\nf2();\nwindow.f2();\n`}</code></pre>\n    <p>{`However, if a function is not bound to an object but created withing a function, this one belong to the function. Still, it is not attached to anything.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var myObject = {\n  function2: function () {\n    console.log(\"Function2\");\n    var function2_1 = function () {\n      console.log(\"Function2_1\");\n    };\n    function2_1();\n  },\n};\nmyObject.function2();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Method invocation pattern`}</strong>{` Method invocation pattern is when a function is attached to an object that is not instantiated with the \"new\" keyword.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var myObject = {\n  function2: function () {\n    console.log(\"Function2\");\n  },\n};\nmyObject.function2();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Constructor invocation pattern`}</strong>{` I already covered in previous article about prototype. Invoking with a constructor trigger the prototype chain for the created object. Constructor function are created with the keyword \"new\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var MyClass1 = function () {\n  this.function2 = function () {\n    return \"F2\";\n  };\n};\n\nMyClass1.prototype.function1 = function () {\n  return \"F1\";\n};\n\nvar instance = new MyClass1();\nconsole.log(instance.function1());\nconsole.log(instance.function2());\n`}</code></pre>\n    <p>{`As you can see, you can invoke method from the instance or the prototype.`}</p>\n    <p><strong parentName=\"p\">{`Apply invocation pattern`}</strong></p>\n    <p>{`The last pattern is to use a function to call a function! This is possible because every object has some default function attached to their prototype, like the one that interest us which is \"apply\".`}</p>\n    <p>{`The following example shows how to invoke with apply. Both call to the apply function uses the class' prototype which call the function and apply. The difference is that one pass the method which has a member assigned with `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, while the second call an anonymous object. The importance is to have a \"m1\" member because function1 access it in its prototype.`}</p>\n    <p>{`The important detail about \"apply\" is the parameter. The first one is the pointer `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, the others are the the function arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var MyClass1 = function () {\n  this.m1 = \"Member Value\";\n};\n\nMyClass1.prototype.function1 = function () {\n  return \"From function1 here is the m1 value : \" + this.m1;\n};\n\nvar instance = new MyClass1();\nvar objectOnTheFly = { m1: \"on-the-fly\" };\nconsole.log(MyClass1.prototype.function1.apply(MyClass1()));\nconsole.log(MyClass1.prototype.function1.apply(objectOnTheFly));\n`}</code></pre>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` got assigned dynamically and the function uses the value by accessing with `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`. In this article we saw 4 different ways to invoke function in JavaScript.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}