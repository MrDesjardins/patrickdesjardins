{"expireTime":9007200886478397000,"key":"gatsby-plugin-mdx-entire-payload-8ab9f8c00c8fbee02fafaf668f7d68af--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Microsoft have been working on the garbage collector since version 1 of the .Net framework. Nevertheless, since Framework 4, they have increased their effort to make this one more efficient. The version 4.5 (still in RC version at this moment), go a step further with a garbage collector that run concurrently from the user thread. This result to shorter time to recycle memory for large application. The new garbage collector is called \"","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":439,"offset":439},"indent":[]}},{"type":"link","title":"Background Server Garbage Collector","url":"http://msdn.microsoft.com/library/ee787088(v=vs.110).aspx#background_server_garbage_collection","children":[{"type":"text","value":"background server garbage collection","position":{"start":{"line":2,"column":440,"offset":440},"end":{"line":2,"column":476,"offset":476},"indent":[]}}],"position":{"start":{"line":2,"column":439,"offset":439},"end":{"line":2,"column":611,"offset":611},"indent":[]}},{"type":"text","value":"\".","position":{"start":{"line":2,"column":611,"offset":611},"end":{"line":2,"column":613,"offset":613},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":613,"offset":613},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Heap balancing","position":{"start":{"line":4,"column":3,"offset":617},"end":{"line":4,"column":17,"offset":631},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":615},"end":{"line":4,"column":19,"offset":633},"indent":[]}},{"type":"text","value":" Another improvement is that now, the garbage collector heap is balanced (small and large object). That mean that if a thread is using a lot of resource while others thread are not, the charge will be distributed evenly on all threads' heap. This will reduce the time before cleaning memory.","position":{"start":{"line":4,"column":19,"offset":633},"end":{"line":4,"column":310,"offset":924},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":615},"end":{"line":4,"column":310,"offset":924},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Scheduler","position":{"start":{"line":6,"column":3,"offset":928},"end":{"line":6,"column":12,"offset":937},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":926},"end":{"line":6,"column":14,"offset":939},"indent":[]}},{"type":"text","value":" A third improvement concern the time when the garbage collector can recycle its memory. It's possible to activate a mode \"SustainedLowLatency\" which will let you set a schedule when it's more appropriate to recycle memory. This let you have monster memory computer that will recycle only in a time frame or with exception within if the server run low in memory.","position":{"start":{"line":6,"column":14,"offset":939},"end":{"line":6,"column":376,"offset":1301},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":926},"end":{"line":6,"column":376,"offset":1301},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Large memory allocation","position":{"start":{"line":8,"column":3,"offset":1305},"end":{"line":8,"column":26,"offset":1328},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1303},"end":{"line":8,"column":28,"offset":1330},"indent":[]}},{"type":"text","value":" Also, it's now possible with Microsoft Framework 4.5 to have large memory allocated without having the \"OutOMemoryException\". Before, any allocation over 2gb would raise an out of memory exception. Now, if the physical machine have more than 2gb, than you can have more than 2gb memory allocation.","position":{"start":{"line":8,"column":28,"offset":1330},"end":{"line":8,"column":326,"offset":1628},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1303},"end":{"line":8,"column":326,"offset":1628},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Microsoft .Net 4.5 Garbage collector\",\"date\":\"2012-07-24\",\"categories\":[\"asp\",\"c-sharp\"]}","position":{"start":{"line":11,"column":1,"offset":1631},"end":{"line":11,"column":128,"offset":1758},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":128,"offset":1758}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Microsoft .Net 4.5 Garbage collector\",\n  \"date\": \"2012-07-24\",\n  \"categories\": [\"asp\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Microsoft have been working on the garbage collector since version 1 of the .Net framework. Nevertheless, since Framework 4, they have increased their effort to make this one more efficient. The version 4.5 (still in RC version at this moment), go a step further with a garbage collector that run concurrently from the user thread. This result to shorter time to recycle memory for large application. The new garbage collector is called \\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/library/ee787088(v=vs.110).aspx#background_server_garbage_collection\",\n    \"title\": \"Background Server Garbage Collector\"\n  }, \"background server garbage collection\"), \"\\\".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Heap balancing\"), \" Another improvement is that now, the garbage collector heap is balanced (small and large object). That mean that if a thread is using a lot of resource while others thread are not, the charge will be distributed evenly on all threads' heap. This will reduce the time before cleaning memory.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Scheduler\"), \" A third improvement concern the time when the garbage collector can recycle its memory. It's possible to activate a mode \\\"SustainedLowLatency\\\" which will let you set a schedule when it's more appropriate to recycle memory. This let you have monster memory computer that will recycle only in a time frame or with exception within if the server run low in memory.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Large memory allocation\"), \" Also, it's now possible with Microsoft Framework 4.5 to have large memory allocated without having the \\\"OutOMemoryException\\\". Before, any allocation over 2gb would raise an out of memory exception. Now, if the physical machine have more than 2gb, than you can have more than 2gb memory allocation.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Microsoft .Net 4.5 Garbage collector\",\n  \"date\": \"2012-07-24\",\n  \"categories\": [\"asp\", \"c-sharp\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Microsoft have been working on the garbage collector since version 1 of the .Net framework. Nevertheless, since Framework 4, they have increased their effort to make this one more efficient. The version 4.5 (still in RC version at this moment), go a step further with a garbage collector that run concurrently from the user thread. This result to shorter time to recycle memory for large application. The new garbage collector is called \"`}<a parentName=\"p\" {...{\n        \"href\": \"http://msdn.microsoft.com/library/ee787088(v=vs.110).aspx#background_server_garbage_collection\",\n        \"title\": \"Background Server Garbage Collector\"\n      }}>{`background server garbage collection`}</a>{`\".`}</p>\n    <p><strong parentName=\"p\">{`Heap balancing`}</strong>{` Another improvement is that now, the garbage collector heap is balanced (small and large object). That mean that if a thread is using a lot of resource while others thread are not, the charge will be distributed evenly on all threads' heap. This will reduce the time before cleaning memory.`}</p>\n    <p><strong parentName=\"p\">{`Scheduler`}</strong>{` A third improvement concern the time when the garbage collector can recycle its memory. It's possible to activate a mode \"SustainedLowLatency\" which will let you set a schedule when it's more appropriate to recycle memory. This let you have monster memory computer that will recycle only in a time frame or with exception within if the server run low in memory.`}</p>\n    <p><strong parentName=\"p\">{`Large memory allocation`}</strong>{` Also, it's now possible with Microsoft Framework 4.5 to have large memory allocated without having the \"OutOMemoryException\". Before, any allocation over 2gb would raise an out of memory exception. Now, if the physical machine have more than 2gb, than you can have more than 2gb memory allocation.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}