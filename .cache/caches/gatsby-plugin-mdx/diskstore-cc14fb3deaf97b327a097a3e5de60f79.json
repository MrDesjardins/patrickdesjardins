{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-8608dcb19e743f633c6aad310079337b--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"It can happen in old project that array objet are accessed with parentheses instead of square bracket.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":103,"offset":103},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":103,"offset":103},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, MyArray","position":{"start":{"line":4,"column":1,"offset":105},"end":{"line":4,"column":21,"offset":125},"indent":[]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":4,"column":22,"offset":126},"end":{"line":4,"column":23,"offset":127},"indent":[]}}],"position":{"start":{"line":4,"column":21,"offset":125},"end":{"line":4,"column":24,"offset":128},"indent":[]}},{"type":"text","value":" is in fact the first element of an array in Javascript. But, IE let you use MyArray(0). This is not a good practice and other browsers doesn't accept this syntax.","position":{"start":{"line":4,"column":24,"offset":128},"end":{"line":4,"column":187,"offset":291},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":105},"end":{"line":4,"column":187,"offset":291},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To convert easily, you can use a Regex expression. In my case, the array name was InTran.","position":{"start":{"line":6,"column":1,"offset":293},"end":{"line":6,"column":90,"offset":382},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":293},"end":{"line":6,"column":90,"offset":382},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" InTran\\\\({(.+)}\\\\) //Find\n\nInTran\\\\[\\\\1\\\\] //Replace\n\n","position":{"start":{"line":8,"column":1,"offset":384},"end":{"line":14,"column":5,"offset":449},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The curly bracket is required by Visual Studio to have a backreference but is not required by all Regex tool.","position":{"start":{"line":16,"column":1,"offset":451},"end":{"line":16,"column":110,"offset":560},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":451},"end":{"line":16,"column":110,"offset":560},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to convert Javascript parenthese to access array to square bracket?\",\"date\":\"2011-11-11\",\"categories\":[\"regex\"]}","position":{"start":{"line":19,"column":1,"offset":563},"end":{"line":19,"column":155,"offset":717},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":155,"offset":717}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to convert Javascript parenthese to access array to square bracket?\",\n  \"date\": \"2011-11-11\",\n  \"categories\": [\"regex\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It can happen in old project that array objet are accessed with parentheses instead of square bracket.\"), mdx(\"p\", null, \"For example, MyArray\", \"[0]\", \" is in fact the first element of an array in Javascript. But, IE let you use MyArray(0). This is not a good practice and other browsers doesn't accept this syntax.\"), mdx(\"p\", null, \"To convert easily, you can use a Regex expression. In my case, the array name was InTran.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" InTran\\\\\\\\({(.+)}\\\\\\\\) //Find\\n\\nInTran\\\\\\\\[\\\\\\\\1\\\\\\\\] //Replace\\n\\n\\n\")), mdx(\"p\", null, \"The curly bracket is required by Visual Studio to have a backreference but is not required by all Regex tool.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to convert Javascript parenthese to access array to square bracket?\",\n  \"date\": \"2011-11-11\",\n  \"categories\": [\"regex\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`It can happen in old project that array objet are accessed with parentheses instead of square bracket.`}</p>\n    <p>{`For example, MyArray`}{`[0]`}{` is in fact the first element of an array in Javascript. But, IE let you use MyArray(0). This is not a good practice and other browsers doesn't accept this syntax.`}</p>\n    <p>{`To convert easily, you can use a Regex expression. In my case, the array name was InTran.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` InTran\\\\\\\\({(.+)}\\\\\\\\) //Find\n\nInTran\\\\\\\\[\\\\\\\\1\\\\\\\\] //Replace\n\n\n`}</code></pre>\n    <p>{`The curly bracket is required by Visual Studio to have a backreference but is not required by all Regex tool.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}