{"expireTime":9007200886478395000,"key":"gatsby-plugin-mdx-entire-payload-5d885e3c9054e04f803d937e66216a55--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Entity Framework provide a method that remove the tracking ability of objects which will increase the performance. Of course, the drawback is that the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":152,"offset":152},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbContext","position":{"start":{"line":2,"column":154,"offset":154},"end":{"line":2,"column":163,"offset":163},"indent":[]}}],"position":{"start":{"line":2,"column":152,"offset":152},"end":{"line":2,"column":165,"offset":165},"indent":[]}},{"type":"text","value":" won't be able to know if an entity has changed.","position":{"start":{"line":2,"column":165,"offset":165},"end":{"line":2,"column":213,"offset":213},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":213,"offset":213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's start with a simple example. First the model which contain an ID (in BaseEntity) and a FirstName and LastName.","position":{"start":{"line":4,"column":1,"offset":215},"end":{"line":4,"column":117,"offset":331},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":215},"end":{"line":4,"column":117,"offset":331},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Customer:BaseEntity { public string FirstName { get; set; } public string LastName { get; set; } } ","position":{"start":{"line":7,"column":1,"offset":334},"end":{"line":9,"column":4,"offset":461},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We will add 5000 rows into the database to be able to get some time information about loading these 5000 customers into the view.","position":{"start":{"line":11,"column":1,"offset":463},"end":{"line":11,"column":130,"offset":592},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":463},"end":{"line":11,"column":130,"offset":592},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":" DECLARE @count INT DECLARE @firstname varchar(100) DECLARE @lastname varchar(100)\n\nSET @count = 0\n\nWHILE (@count < 5000) BEGIN SET @firstname = 'FirstName' + cast(@count as varchar) SET @lastname = 'LastName' + cast(@count as varchar) INSERT INTO [Autoshop].[dbo].[Customers] ( [FirstName] ,[LastName] ) VALUES ( @firstname , @lastname )\n\nSET @count = (@count + 1) END ","position":{"start":{"line":14,"column":1,"offset":595},"end":{"line":22,"column":4,"offset":976},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, we will time the time it takes to Entity Framework to generate the loading of the object into the view.","position":{"start":{"line":25,"column":1,"offset":979},"end":{"line":25,"column":113,"offset":1091},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":979},"end":{"line":25,"column":113,"offset":1091},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public ViewResult Index() { var watch = new Stopwatch(); watch.Start(); var customers = db.Customers.Include(c => c.License).ToList(); watch.Stop(); ViewBag.TimeElapsed = watch.ElapsedMilliseconds; return View(customers); } ","position":{"start":{"line":27,"column":1,"offset":1093},"end":{"line":29,"column":4,"offset":1331},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The result from several test give me (on my machine) ","position":{"start":{"line":31,"column":1,"offset":1333},"end":{"line":31,"column":54,"offset":1386},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"237ms","position":{"start":{"line":31,"column":56,"offset":1388},"end":{"line":31,"column":61,"offset":1393},"indent":[]}}],"position":{"start":{"line":31,"column":54,"offset":1386},"end":{"line":31,"column":63,"offset":1395},"indent":[]}},{"type":"text","value":". Now, let's do the same test with AsNoTracking().","position":{"start":{"line":31,"column":63,"offset":1395},"end":{"line":31,"column":113,"offset":1445},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1333},"end":{"line":31,"column":113,"offset":1445},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public ViewResult Index() { var watch = new Stopwatch(); watch.Start(); var customers = db.Customers.Include(c => c.License).AsNoTracking().ToList(); watch.Stop(); ViewBag.TimeElapsed = watch.ElapsedMilliseconds; return View(customers); } ","position":{"start":{"line":33,"column":1,"offset":1447},"end":{"line":35,"column":4,"offset":1700},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now I have an average on ","position":{"start":{"line":37,"column":1,"offset":1702},"end":{"line":37,"column":26,"offset":1727},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"108ms","position":{"start":{"line":37,"column":28,"offset":1729},"end":{"line":37,"column":33,"offset":1734},"indent":[]}}],"position":{"start":{"line":37,"column":26,"offset":1727},"end":{"line":37,"column":35,"offset":1736},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":37,"column":35,"offset":1736},"end":{"line":37,"column":37,"offset":1738},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"It's about 2 times faster","position":{"start":{"line":37,"column":39,"offset":1740},"end":{"line":37,"column":64,"offset":1765},"indent":[]}}],"position":{"start":{"line":37,"column":37,"offset":1738},"end":{"line":37,"column":66,"offset":1767},"indent":[]}},{"type":"text","value":" with 5000 rows of a simple Entity.","position":{"start":{"line":37,"column":66,"offset":1767},"end":{"line":37,"column":101,"offset":1802},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1702},"end":{"line":37,"column":101,"offset":1802},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Entity Framework's keyword ","position":{"start":{"line":39,"column":1,"offset":1804},"end":{"line":39,"column":32,"offset":1835},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"AsNoTracking()","position":{"start":{"line":39,"column":34,"offset":1837},"end":{"line":39,"column":48,"offset":1851},"indent":[]}}],"position":{"start":{"line":39,"column":32,"offset":1835},"end":{"line":39,"column":50,"offset":1853},"indent":[]}},{"type":"text","value":" give a big boost of speed if you need to display data without having them tracked by Entity Framework. Most report, list or data that are display to the user as information should use ","position":{"start":{"line":39,"column":50,"offset":1853},"end":{"line":39,"column":235,"offset":2038},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"AsNoTracking()","position":{"start":{"line":39,"column":237,"offset":2040},"end":{"line":39,"column":251,"offset":2054},"indent":[]}}],"position":{"start":{"line":39,"column":235,"offset":2038},"end":{"line":39,"column":253,"offset":2056},"indent":[]}},{"type":"text","value":" since it removes overhead that is not used.","position":{"start":{"line":39,"column":253,"offset":2056},"end":{"line":39,"column":297,"offset":2100},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1804},"end":{"line":39,"column":297,"offset":2100},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"What does AsNoTracking() behind the scene is a good question. First, AsNoTracking came from the ","position":{"start":{"line":41,"column":1,"offset":2102},"end":{"line":41,"column":97,"offset":2198},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbExtensions.cs","position":{"start":{"line":41,"column":99,"offset":2200},"end":{"line":41,"column":114,"offset":2215},"indent":[]}}],"position":{"start":{"line":41,"column":97,"offset":2198},"end":{"line":41,"column":116,"offset":2217},"indent":[]}},{"type":"text","value":" file. It's an extension method (static method) that will call the dbQuery.AsNoTracking() if the dbQuery is defined and if yes will call the AsNoTracking of this one which will simply return a new DbQuery with a parameter of ","position":{"start":{"line":41,"column":116,"offset":2217},"end":{"line":41,"column":341,"offset":2442},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IInternalQuery","position":{"start":{"line":41,"column":343,"offset":2444},"end":{"line":41,"column":357,"offset":2458},"indent":[]}}],"position":{"start":{"line":41,"column":341,"offset":2442},"end":{"line":41,"column":359,"offset":2460},"indent":[]}},{"type":"text","value":" with the speciality of being AsNoTracking. This lead us to some implementation. The one that concern us is the InternalQuery that look like this:","position":{"start":{"line":41,"column":359,"offset":2460},"end":{"line":41,"column":505,"offset":2606},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2102},"end":{"line":41,"column":505,"offset":2606},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public virtual IInternalQuery<TElement> AsNoTracking() { return (IInternalQuery<TElement>) new InternalQuery<TElement>(this._internalContext, (ObjectQuery) DbHelpers.CreateNoTrackingQuery((ObjectQuery) this._objectQuery)); } ","position":{"start":{"line":44,"column":1,"offset":2609},"end":{"line":46,"column":4,"offset":2849},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, it create a new InternalQuery with the second parameter who use ","position":{"start":{"line":48,"column":1,"offset":2851},"end":{"line":48,"column":81,"offset":2931},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbHelpers.CreateNoTrackingQuery(...)","position":{"start":{"line":48,"column":83,"offset":2933},"end":{"line":48,"column":119,"offset":2969},"indent":[]}}],"position":{"start":{"line":48,"column":81,"offset":2931},"end":{"line":48,"column":121,"offset":2971},"indent":[]}},{"type":"text","value":". The second parameter should be ObjectQuery, so what does the DbHelpers.CreateNoTrackingQuery to remove the overhead?","position":{"start":{"line":48,"column":121,"offset":2971},"end":{"line":48,"column":239,"offset":3089},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2851},"end":{"line":48,"column":239,"offset":3089},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"public static IQueryable CreateNoTrackingQuery(ObjectQuery query) { IQueryable queryable = (IQueryable) query; ObjectQuery objectQuery = (ObjectQuery) queryable.Provider.CreateQuery(queryable.Expression); objectQuery.MergeOption = MergeOption.NoTracking; return (IQueryable) objectQuery; } ","position":{"start":{"line":50,"column":1,"offset":3091},"end":{"line":52,"column":4,"offset":3395},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Well it does the samething that if you has set at the ","position":{"start":{"line":54,"column":1,"offset":3397},"end":{"line":54,"column":55,"offset":3451},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ObjectContext","position":{"start":{"line":54,"column":57,"offset":3453},"end":{"line":54,"column":70,"offset":3466},"indent":[]}}],"position":{"start":{"line":54,"column":55,"offset":3451},"end":{"line":54,"column":72,"offset":3468},"indent":[]}},{"type":"text","value":" property MergeOption to NoTracking. The only advantage is that it doesn't affect every ","position":{"start":{"line":54,"column":72,"offset":3468},"end":{"line":54,"column":160,"offset":3556},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbContext","position":{"start":{"line":54,"column":162,"offset":3558},"end":{"line":54,"column":171,"offset":3567},"indent":[]}}],"position":{"start":{"line":54,"column":160,"offset":3556},"end":{"line":54,"column":173,"offset":3569},"indent":[]}},{"type":"text","value":" but only the query specified. But in Code First, you no longer have access to MergeOption since you are no longer using the ObjectContext but the DbContext. ","position":{"start":{"line":54,"column":173,"offset":3569},"end":{"line":54,"column":331,"offset":3727},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DbContext","position":{"start":{"line":54,"column":333,"offset":3729},"end":{"line":54,"column":342,"offset":3738},"indent":[]}}],"position":{"start":{"line":54,"column":331,"offset":3727},"end":{"line":54,"column":344,"offset":3740},"indent":[]}},{"type":"text","value":" is a lightweight version of ObjectContext. This is why you should use now the extension AsNoTracking() instead of configuring the ObjectContext (that even if you use DbContext could be accessed).","position":{"start":{"line":54,"column":344,"offset":3740},"end":{"line":54,"column":540,"offset":3936},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":3397},"end":{"line":54,"column":540,"offset":3936},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the curious, you could access the ObjectContext from the DbContext by casting the dbContext with IObjectContextAdapter.","position":{"start":{"line":56,"column":1,"offset":3938},"end":{"line":56,"column":124,"offset":4061},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3938},"end":{"line":56,"column":124,"offset":4061},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" ObjectContext objectContext = ((IObjectContextAdapter)dbContext).ObjectContext; ","position":{"start":{"line":59,"column":1,"offset":4064},"end":{"line":61,"column":4,"offset":4159},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework boost select performance with AsNoTracking() method\",\"date\":\"2012-09-13\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":64,"column":1,"offset":4162},"end":{"line":64,"column":163,"offset":4324},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":64,"column":163,"offset":4324}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework boost select performance with AsNoTracking() method\",\n  \"date\": \"2012-09-13\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Entity Framework provide a method that remove the tracking ability of objects which will increase the performance. Of course, the drawback is that the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbContext\"), \" won't be able to know if an entity has changed.\"), mdx(\"p\", null, \"Let's start with a simple example. First the model which contain an ID (in BaseEntity) and a FirstName and LastName.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Customer:BaseEntity { public string FirstName { get; set; } public string LastName { get; set; } } \\n\")), mdx(\"p\", null, \"We will add 5000 rows into the database to be able to get some time information about loading these 5000 customers into the view.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" DECLARE @count INT DECLARE @firstname varchar(100) DECLARE @lastname varchar(100)\\n\\nSET @count = 0\\n\\nWHILE (@count < 5000) BEGIN SET @firstname = 'FirstName' + cast(@count as varchar) SET @lastname = 'LastName' + cast(@count as varchar) INSERT INTO [Autoshop].[dbo].[Customers] ( [FirstName] ,[LastName] ) VALUES ( @firstname , @lastname )\\n\\nSET @count = (@count + 1) END \\n\")), mdx(\"p\", null, \"Finally, we will time the time it takes to Entity Framework to generate the loading of the object into the view.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public ViewResult Index() { var watch = new Stopwatch(); watch.Start(); var customers = db.Customers.Include(c => c.License).ToList(); watch.Stop(); ViewBag.TimeElapsed = watch.ElapsedMilliseconds; return View(customers); } \\n\")), mdx(\"p\", null, \"The result from several test give me (on my machine) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"237ms\"), \". Now, let's do the same test with AsNoTracking().\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public ViewResult Index() { var watch = new Stopwatch(); watch.Start(); var customers = db.Customers.Include(c => c.License).AsNoTracking().ToList(); watch.Stop(); ViewBag.TimeElapsed = watch.ElapsedMilliseconds; return View(customers); } \\n\")), mdx(\"p\", null, \"Now I have an average on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"108ms\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"It's about 2 times faster\"), \" with 5000 rows of a simple Entity.\"), mdx(\"p\", null, \"The Entity Framework's keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AsNoTracking()\"), \" give a big boost of speed if you need to display data without having them tracked by Entity Framework. Most report, list or data that are display to the user as information should use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AsNoTracking()\"), \" since it removes overhead that is not used.\"), mdx(\"p\", null, \"What does AsNoTracking() behind the scene is a good question. First, AsNoTracking came from the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbExtensions.cs\"), \" file. It's an extension method (static method) that will call the dbQuery.AsNoTracking() if the dbQuery is defined and if yes will call the AsNoTracking of this one which will simply return a new DbQuery with a parameter of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IInternalQuery\"), \" with the speciality of being AsNoTracking. This lead us to some implementation. The one that concern us is the InternalQuery that look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public virtual IInternalQuery<TElement> AsNoTracking() { return (IInternalQuery<TElement>) new InternalQuery<TElement>(this._internalContext, (ObjectQuery) DbHelpers.CreateNoTrackingQuery((ObjectQuery) this._objectQuery)); } \\n\")), mdx(\"p\", null, \"As you can see, it create a new InternalQuery with the second parameter who use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbHelpers.CreateNoTrackingQuery(...)\"), \". The second parameter should be ObjectQuery, so what does the DbHelpers.CreateNoTrackingQuery to remove the overhead?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public static IQueryable CreateNoTrackingQuery(ObjectQuery query) { IQueryable queryable = (IQueryable) query; ObjectQuery objectQuery = (ObjectQuery) queryable.Provider.CreateQuery(queryable.Expression); objectQuery.MergeOption = MergeOption.NoTracking; return (IQueryable) objectQuery; } \\n\")), mdx(\"p\", null, \"Well it does the samething that if you has set at the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjectContext\"), \" property MergeOption to NoTracking. The only advantage is that it doesn't affect every \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbContext\"), \" but only the query specified. But in Code First, you no longer have access to MergeOption since you are no longer using the ObjectContext but the DbContext. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DbContext\"), \" is a lightweight version of ObjectContext. This is why you should use now the extension AsNoTracking() instead of configuring the ObjectContext (that even if you use DbContext could be accessed).\"), mdx(\"p\", null, \"For the curious, you could access the ObjectContext from the DbContext by casting the dbContext with IObjectContextAdapter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" ObjectContext objectContext = ((IObjectContextAdapter)dbContext).ObjectContext; \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework boost select performance with AsNoTracking() method\",\n  \"date\": \"2012-09-13\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Entity Framework provide a method that remove the tracking ability of objects which will increase the performance. Of course, the drawback is that the `}<strong parentName=\"p\">{`DbContext`}</strong>{` won't be able to know if an entity has changed.`}</p>\n    <p>{`Let's start with a simple example. First the model which contain an ID (in BaseEntity) and a FirstName and LastName.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Customer:BaseEntity { public string FirstName { get; set; } public string LastName { get; set; } } \n`}</code></pre>\n    <p>{`We will add 5000 rows into the database to be able to get some time information about loading these 5000 customers into the view.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{` DECLARE @count INT DECLARE @firstname varchar(100) DECLARE @lastname varchar(100)\n\nSET @count = 0\n\nWHILE (@count < 5000) BEGIN SET @firstname = 'FirstName' + cast(@count as varchar) SET @lastname = 'LastName' + cast(@count as varchar) INSERT INTO [Autoshop].[dbo].[Customers] ( [FirstName] ,[LastName] ) VALUES ( @firstname , @lastname )\n\nSET @count = (@count + 1) END \n`}</code></pre>\n    <p>{`Finally, we will time the time it takes to Entity Framework to generate the loading of the object into the view.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public ViewResult Index() { var watch = new Stopwatch(); watch.Start(); var customers = db.Customers.Include(c => c.License).ToList(); watch.Stop(); ViewBag.TimeElapsed = watch.ElapsedMilliseconds; return View(customers); } \n`}</code></pre>\n    <p>{`The result from several test give me (on my machine) `}<strong parentName=\"p\">{`237ms`}</strong>{`. Now, let's do the same test with AsNoTracking().`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public ViewResult Index() { var watch = new Stopwatch(); watch.Start(); var customers = db.Customers.Include(c => c.License).AsNoTracking().ToList(); watch.Stop(); ViewBag.TimeElapsed = watch.ElapsedMilliseconds; return View(customers); } \n`}</code></pre>\n    <p>{`Now I have an average on `}<strong parentName=\"p\">{`108ms`}</strong>{`. `}<strong parentName=\"p\">{`It's about 2 times faster`}</strong>{` with 5000 rows of a simple Entity.`}</p>\n    <p>{`The Entity Framework's keyword `}<strong parentName=\"p\">{`AsNoTracking()`}</strong>{` give a big boost of speed if you need to display data without having them tracked by Entity Framework. Most report, list or data that are display to the user as information should use `}<strong parentName=\"p\">{`AsNoTracking()`}</strong>{` since it removes overhead that is not used.`}</p>\n    <p>{`What does AsNoTracking() behind the scene is a good question. First, AsNoTracking came from the `}<strong parentName=\"p\">{`DbExtensions.cs`}</strong>{` file. It's an extension method (static method) that will call the dbQuery.AsNoTracking() if the dbQuery is defined and if yes will call the AsNoTracking of this one which will simply return a new DbQuery with a parameter of `}<strong parentName=\"p\">{`IInternalQuery`}</strong>{` with the speciality of being AsNoTracking. This lead us to some implementation. The one that concern us is the InternalQuery that look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public virtual IInternalQuery<TElement> AsNoTracking() { return (IInternalQuery<TElement>) new InternalQuery<TElement>(this._internalContext, (ObjectQuery) DbHelpers.CreateNoTrackingQuery((ObjectQuery) this._objectQuery)); } \n`}</code></pre>\n    <p>{`As you can see, it create a new InternalQuery with the second parameter who use `}<strong parentName=\"p\">{`DbHelpers.CreateNoTrackingQuery(...)`}</strong>{`. The second parameter should be ObjectQuery, so what does the DbHelpers.CreateNoTrackingQuery to remove the overhead?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public static IQueryable CreateNoTrackingQuery(ObjectQuery query) { IQueryable queryable = (IQueryable) query; ObjectQuery objectQuery = (ObjectQuery) queryable.Provider.CreateQuery(queryable.Expression); objectQuery.MergeOption = MergeOption.NoTracking; return (IQueryable) objectQuery; } \n`}</code></pre>\n    <p>{`Well it does the samething that if you has set at the `}<strong parentName=\"p\">{`ObjectContext`}</strong>{` property MergeOption to NoTracking. The only advantage is that it doesn't affect every `}<strong parentName=\"p\">{`DbContext`}</strong>{` but only the query specified. But in Code First, you no longer have access to MergeOption since you are no longer using the ObjectContext but the DbContext. `}<strong parentName=\"p\">{`DbContext`}</strong>{` is a lightweight version of ObjectContext. This is why you should use now the extension AsNoTracking() instead of configuring the ObjectContext (that even if you use DbContext could be accessed).`}</p>\n    <p>{`For the curious, you could access the ObjectContext from the DbContext by casting the dbContext with IObjectContextAdapter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` ObjectContext objectContext = ((IObjectContextAdapter)dbContext).ObjectContext; \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}