{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-196f0f9075024af441e2ab67ed4af801--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Application Insights has a table with performance details. It's called \"browser timings\". You can have a glimpse of what it contains by executing","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":146,"offset":146},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":146,"offset":146},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" browserTimings | where timestamp >= ago(1d) | where totalDuration > 10000 | order by totalDuration desc nulls last","position":{"start":{"line":4,"column":1,"offset":148},"end":{"line":6,"column":4,"offset":271},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The most interesting columns are these following four:","position":{"start":{"line":8,"column":1,"offset":273},"end":{"line":8,"column":55,"offset":327},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":273},"end":{"line":8,"column":55,"offset":327},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"networkDuration","position":{"start":{"line":10,"column":3,"offset":331},"end":{"line":10,"column":18,"offset":346},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":331},"end":{"line":10,"column":18,"offset":346},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":329},"end":{"line":10,"column":18,"offset":346},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"sendDuration","position":{"start":{"line":11,"column":3,"offset":349},"end":{"line":11,"column":15,"offset":361},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":349},"end":{"line":11,"column":15,"offset":361},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":347},"end":{"line":11,"column":15,"offset":361},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"receiveDuration","position":{"start":{"line":12,"column":3,"offset":364},"end":{"line":12,"column":18,"offset":379},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":364},"end":{"line":12,"column":18,"offset":379},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":362},"end":{"line":12,"column":18,"offset":379},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"processingDuration","position":{"start":{"line":13,"column":3,"offset":382},"end":{"line":13,"column":21,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":382},"end":{"line":13,"column":21,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":380},"end":{"line":13,"column":21,"offset":400},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":329},"end":{"line":13,"column":21,"offset":400},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To understand what it means, you can look at ","position":{"start":{"line":15,"column":1,"offset":402},"end":{"line":15,"column":46,"offset":447},"indent":[]}},{"type":"link","title":null,"url":"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-javascript#page-load-performance","children":[{"type":"text","value":"Azure Application Insights documentation","position":{"start":{"line":15,"column":47,"offset":448},"end":{"line":15,"column":87,"offset":488},"indent":[]}}],"position":{"start":{"line":15,"column":46,"offset":447},"end":{"line":15,"column":195,"offset":596},"indent":[]}},{"type":"text","value":". It has a good image (","position":{"start":{"line":15,"column":195,"offset":596},"end":{"line":15,"column":218,"offset":619},"indent":[]}},{"type":"link","title":null,"url":"https://docs.microsoft.com/en-us/azure/application-insights/media/app-insights-javascript/08-client-split.png","children":[{"type":"text","value":"https://docs.microsoft.com/en-us/azure/application-insights/media/app-insights-javascript/08-client-split.png","position":{"start":{"line":15,"column":218,"offset":619},"end":{"line":15,"column":327,"offset":728},"indent":[]}}],"position":{"start":{"line":15,"column":218,"offset":619},"end":{"line":15,"column":327,"offset":728},"indent":[]}},{"type":"text","value":"), in short, Application Insights is categorizing the ","position":{"start":{"line":15,"column":327,"offset":728},"end":{"line":15,"column":381,"offset":782},"indent":[]}},{"type":"link","title":null,"url":"https://www.w3.org/TR/navigation-timing/#processing-model","children":[{"type":"text","value":"official processing model from the navigation timing","position":{"start":{"line":15,"column":382,"offset":783},"end":{"line":15,"column":434,"offset":835},"indent":[]}}],"position":{"start":{"line":15,"column":381,"offset":782},"end":{"line":15,"column":494,"offset":895},"indent":[]}},{"type":"text","value":". Nine steps is heavy and some steps are not directly the cause of the code. The segregation in 4 categories help to focus of where you should spend your time to fix your performance issue.","position":{"start":{"line":15,"column":494,"offset":895},"end":{"line":15,"column":683,"offset":1084},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":402},"end":{"line":15,"column":683,"offset":1084},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reading the navigation timing can be confusing in term of what needs to be improved. Most of the time, you do not need to understand every step to improve the overall performance.","position":{"start":{"line":17,"column":1,"offset":1086},"end":{"line":17,"column":180,"offset":1265},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1086},"end":{"line":17,"column":180,"offset":1265},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first interesting column of the ","position":{"start":{"line":19,"column":1,"offset":1267},"end":{"line":19,"column":37,"offset":1303},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"browsertiming","position":{"start":{"line":19,"column":39,"offset":1305},"end":{"line":19,"column":52,"offset":1318},"indent":[]}}],"position":{"start":{"line":19,"column":37,"offset":1303},"end":{"line":19,"column":54,"offset":1320},"indent":[]}},{"type":"text","value":" table is ","position":{"start":{"line":19,"column":54,"offset":1320},"end":{"line":19,"column":64,"offset":1330},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"networkDuration","position":{"start":{"line":19,"column":66,"offset":1332},"end":{"line":19,"column":81,"offset":1347},"indent":[]}}],"position":{"start":{"line":19,"column":64,"offset":1330},"end":{"line":19,"column":83,"offset":1349},"indent":[]}},{"type":"text","value":". This column includes 4 of the navigation timing processing step that include mostly the network call. It includes redirection, if the fetched resource result is an HTTP redirect (3xx). It also has DNS and TCP delays. What it means is that it contains all the time before users reach the Asp.Net code. It's the time to translate the domain into an IP address, the time between different hops that separate the user and the machine that host the HTTP server and the time the http request move from the machine to the HTTP server (IIS, Apache, etc). This time tend to be huge if the HTTP server is sleeping. For example, if you release a new version on Azure Website and do not warm the server, the first hit will be slow. This will translate in Application Insights by having the ","position":{"start":{"line":19,"column":83,"offset":1349},"end":{"line":19,"column":863,"offset":2129},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"networkDuration","position":{"start":{"line":19,"column":865,"offset":2131},"end":{"line":19,"column":880,"offset":2146},"indent":[]}}],"position":{"start":{"line":19,"column":863,"offset":2129},"end":{"line":19,"column":882,"offset":2148},"indent":[]}},{"type":"text","value":" higher than usual. That is why, it's always good to remove from the statistic very high time, let say 1 minute. That said, I currently experience very long query above 5 minutes from GoogleBot that need to be investigated.","position":{"start":{"line":19,"column":882,"offset":2148},"end":{"line":19,"column":1105,"offset":2371},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1267},"end":{"line":19,"column":1105,"offset":2371},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" browserTimings\n | where timestamp >= ago(12d)\n | where totalDuration < 300000\n | where networkDuration < 10000\n | order by totalDuration desc nulls last","position":{"start":{"line":21,"column":1,"offset":2373},"end":{"line":27,"column":4,"offset":2534},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second column is ","position":{"start":{"line":29,"column":1,"offset":2536},"end":{"line":29,"column":22,"offset":2557},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"sendDuration","position":{"start":{"line":29,"column":24,"offset":2559},"end":{"line":29,"column":36,"offset":2571},"indent":[]}}],"position":{"start":{"line":29,"column":22,"offset":2557},"end":{"line":29,"column":38,"offset":2573},"indent":[]}},{"type":"text","value":". The starting point is when the browser starts sending the first byte, the ending point the server sent the first byte back to the browser. In other word, it is when the browser receives the whole response from the HTTP server. In other words, it's the time spent in your Asp.Net MVC controller. If you want to isolate long request to identifier Asp.Net MVC Controller's action problem, you can change the Application Insight query to order by the ","position":{"start":{"line":29,"column":38,"offset":2573},"end":{"line":29,"column":487,"offset":3022},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"sendDuration","position":{"start":{"line":29,"column":489,"offset":3024},"end":{"line":29,"column":501,"offset":3036},"indent":[]}}],"position":{"start":{"line":29,"column":487,"offset":3022},"end":{"line":29,"column":503,"offset":3038},"indent":[]}},{"type":"text","value":" and find all every duration above 2 seconds (or what ever is your desired maximum time on the server).","position":{"start":{"line":29,"column":503,"offset":3038},"end":{"line":29,"column":606,"offset":3141},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2536},"end":{"line":29,"column":606,"offset":3141},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" browserTimings\n | where timestamp >= ago(12d)\n | where totalDuration < 300000\n | where networkDuration < 10000\n | where sendDuration > 2000\n | where url !startswith \"http://localhost\"\n | where url !contains \"azurewebsites.net\"\n | order by sendDuration desc nulls last | project timestamp , url, sendDuration","position":{"start":{"line":31,"column":1,"offset":3143},"end":{"line":40,"column":4,"offset":3459},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"While exploring the data, I realized that I was sending development localhost into Application Insights. Only on for the client side since the code was injected and didn't take in consideration the C# flag \"TelemetryConfiguration.Active.DisableTelemetry\". That is why you can a new clause that get rid of any development requests. Also, I am using multiple Azure's slots which mean I want to remove the experimental slot too by removing \"azurewebsites.net\" from the data.","position":{"start":{"line":42,"column":1,"offset":3461},"end":{"line":42,"column":472,"offset":3932},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":3461},"end":{"line":42,"column":472,"offset":3932},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" browserTimings\n | where timestamp >= ago(12d)\n | where totalDuration < 300000\n | where networkDuration < 10000\n | where sendDuration > 2000\n | where url !startswith \"http://localhost\"\n | where url !contains \"azurewebsites.net\"\n | order by sendDuration desc nulls last\n | extend urlWithoutNumber = replace(@\"([^?]+).*\", @\"\\\\1\", replace(@\"([a-z0-9]{8})\\-([a-z0-9]{4})\\-([a-z0-9]{4})\\-([a-z0-9]{4})\\-([a-z0-9]){12}\", @\"x\", replace(@\"(\\\\d)\", @\"x\", url)))\n | project timestamp , urlWithoutNumber, sendDuration","position":{"start":{"line":44,"column":1,"offset":3934},"end":{"line":55,"column":4,"offset":4447},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The third column is the ","position":{"start":{"line":57,"column":1,"offset":4449},"end":{"line":57,"column":25,"offset":4473},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"receiveDuration","position":{"start":{"line":57,"column":27,"offset":4475},"end":{"line":57,"column":42,"offset":4490},"indent":[]}}],"position":{"start":{"line":57,"column":25,"offset":4473},"end":{"line":57,"column":44,"offset":4492},"indent":[]}},{"type":"text","value":" which is the time it tooks to download the data from the server. This can be long if you send a big HTML back for example. You can lower this metric by having a single page application where most request download only the data and not UI details. This metric is important to keep low especially on mobile where the connection is slow and users have limited data plan.","position":{"start":{"line":57,"column":44,"offset":4492},"end":{"line":57,"column":412,"offset":4860},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":4449},"end":{"line":57,"column":412,"offset":4860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The last and forth column is the ","position":{"start":{"line":59,"column":1,"offset":4862},"end":{"line":59,"column":34,"offset":4895},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"processingDuration","position":{"start":{"line":59,"column":36,"offset":4897},"end":{"line":59,"column":54,"offset":4915},"indent":[]}}],"position":{"start":{"line":59,"column":34,"offset":4895},"end":{"line":59,"column":56,"offset":4917},"indent":[]}},{"type":"text","value":". This is the time it takes for the browser to render the received data. It contains several JavaScript events. domLoading, domInteractive, domContentLoaded (JQuery DocumentReady), domComplete, loadEventStart and loadEventEnd. Quick recaps of these rendering events.","position":{"start":{"line":59,"column":56,"offset":4917},"end":{"line":59,"column":322,"offset":5183},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":4862},"end":{"line":59,"column":322,"offset":5183},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"domLoading: The document has been downloaded from the server, the browser is ready to work on it.","position":{"start":{"line":61,"column":3,"offset":5187},"end":{"line":61,"column":100,"offset":5284},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":5187},"end":{"line":61,"column":100,"offset":5284},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":5185},"end":{"line":61,"column":100,"offset":5284},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"domInteractive: The browser parsed the HTML and built the DOM.","position":{"start":{"line":62,"column":3,"offset":5287},"end":{"line":62,"column":65,"offset":5349},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":5287},"end":{"line":62,"column":65,"offset":5349},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":5285},"end":{"line":62,"column":65,"offset":5349},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"domContentLoaded: The CSSOM is built (browser analyzed CSS). Browsers is not blocked by any JavaScript.","position":{"start":{"line":63,"column":3,"offset":5352},"end":{"line":63,"column":106,"offset":5455},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":5352},"end":{"line":63,"column":106,"offset":5455},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":5350},"end":{"line":63,"column":106,"offset":5455},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"domComplete: The browser doesn't have anymore images or any resource to download.","position":{"start":{"line":64,"column":3,"offset":5458},"end":{"line":64,"column":84,"offset":5539},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":5458},"end":{"line":64,"column":84,"offset":5539},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":5456},"end":{"line":64,"column":84,"offset":5539},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"loadEventStart and loadEventEnd: Browser rendered the DOM to the user.","position":{"start":{"line":65,"column":3,"offset":5542},"end":{"line":65,"column":73,"offset":5612},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":5542},"end":{"line":65,"column":73,"offset":5612},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":5540},"end":{"line":65,"column":73,"offset":5612},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":5185},"end":{"line":65,"column":73,"offset":5612},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It means that you can reduce the ","position":{"start":{"line":67,"column":1,"offset":5614},"end":{"line":67,"column":34,"offset":5647},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"processingDuration","position":{"start":{"line":67,"column":36,"offset":5649},"end":{"line":67,"column":54,"offset":5667},"indent":[]}}],"position":{"start":{"line":67,"column":34,"offset":5647},"end":{"line":67,"column":56,"offset":5669},"indent":[]}},{"type":"text","value":" by having simpler CSS and faster JavaScript code. You can get this information in Application Insights by showing the percentiles of the processingDuration. I added some filtering to reduce the amount of result.","position":{"start":{"line":67,"column":56,"offset":5669},"end":{"line":67,"column":268,"offset":5881},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":5614},"end":{"line":67,"column":268,"offset":5881},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" browserTimings\n | where timestamp >= ago(7d)\n | where networkDuration < 5000\n | where totalDuration > 5000\n | where url !startswith(\"http://localhost\")\n | where url !contains(\"azurewebsites.net\")\n | extend urlClean = replace(@\"([^?]+).*\", @\"\\\\1\", replace(@\"([a-z0-9]{8})\\-([a-z0-9]{4})\\-([a-z0-9]{4})\\-([a-z0-9]{4})\\-([a-z0-9]){12}\", @\"x\", replace(@\"(\\\\d)\", @\"x\", url)))\n | summarize percentiles(processingDuration, 50, 95) , percentiles(totalDuration, 50, 95) by urlClean\n | where percentile_processingDuration_50 > 2000\n | order by percentile_processingDuration_50 desc nulls last","position":{"start":{"line":69,"column":1,"offset":5883},"end":{"line":80,"column":4,"offset":6474},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It's good to note that some external libraries can increase the ","position":{"start":{"line":82,"column":1,"offset":6476},"end":{"line":82,"column":65,"offset":6540},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"processingDuration","position":{"start":{"line":82,"column":67,"offset":6542},"end":{"line":82,"column":85,"offset":6560},"indent":[]}}],"position":{"start":{"line":82,"column":65,"offset":6540},"end":{"line":82,"column":87,"offset":6562},"indent":[]}},{"type":"text","value":". This is especially true with ","position":{"start":{"line":82,"column":87,"offset":6562},"end":{"line":82,"column":118,"offset":6593},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Google Adsense","position":{"start":{"line":82,"column":119,"offset":6594},"end":{"line":82,"column":133,"offset":6608},"indent":[]}}],"position":{"start":{"line":82,"column":118,"offset":6593},"end":{"line":82,"column":134,"offset":6609},"indent":[]}},{"type":"text","value":" or third party that download CSS/Font/Script and execute them on your page.","position":{"start":{"line":82,"column":134,"offset":6609},"end":{"line":82,"column":210,"offset":6685},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":6476},"end":{"line":82,"column":210,"offset":6685},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Application Insights ","position":{"start":{"line":84,"column":1,"offset":6687},"end":{"line":84,"column":22,"offset":6708},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"BrowserTimings","position":{"start":{"line":84,"column":24,"offset":6710},"end":{"line":84,"column":38,"offset":6724},"indent":[]}}],"position":{"start":{"line":84,"column":22,"offset":6708},"end":{"line":84,"column":40,"offset":6726},"indent":[]}},{"type":"text","value":" is very useful to get insight of what is going on on your webpage in term of performance and figure out where to optimize your code. To conclude, here is a recapitulative of the 4 mains property of the Application Insights BrowserTimings.","position":{"start":{"line":84,"column":40,"offset":6726},"end":{"line":84,"column":279,"offset":6965},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":6687},"end":{"line":84,"column":279,"offset":6965},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"networkDuration = Contact the server, can be slow if you just deployed (on the first hit).","position":{"start":{"line":86,"column":3,"offset":6969},"end":{"line":86,"column":93,"offset":7059},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":6969},"end":{"line":86,"column":93,"offset":7059},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":6967},"end":{"line":86,"column":93,"offset":7059},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"sendDuration = Time on the server (Asp.Net Controller code).","position":{"start":{"line":87,"column":3,"offset":7062},"end":{"line":87,"column":63,"offset":7122},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":7062},"end":{"line":87,"column":63,"offset":7122},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":7060},"end":{"line":87,"column":63,"offset":7122},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"receiveDuration = Time for the browser to download the data from the server.","position":{"start":{"line":88,"column":3,"offset":7125},"end":{"line":88,"column":79,"offset":7201},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":7125},"end":{"line":88,"column":79,"offset":7201},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":7123},"end":{"line":88,"column":79,"offset":7201},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"processingDuration = Time for the browser to draw the downloaded data to the UI for the user to see it.","position":{"start":{"line":89,"column":3,"offset":7204},"end":{"line":89,"column":106,"offset":7307},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":7204},"end":{"line":89,"column":106,"offset":7307},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":7202},"end":{"line":89,"column":106,"offset":7307},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":6967},"end":{"line":89,"column":106,"offset":7307},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Navigation Performance Understanding with Application Insights\",\"date\":\"2017-02-01\",\"categories\":[\"azure\"]}","position":{"start":{"line":92,"column":1,"offset":7310},"end":{"line":92,"column":157,"offset":7466},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":92,"column":157,"offset":7466}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Navigation Performance Understanding with Application Insights\",\n  \"date\": \"2017-02-01\",\n  \"categories\": [\"azure\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Application Insights has a table with performance details. It's called \\\"browser timings\\\". You can have a glimpse of what it contains by executing\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" browserTimings | where timestamp >= ago(1d) | where totalDuration > 10000 | order by totalDuration desc nulls last\\n\")), mdx(\"p\", null, \"The most interesting columns are these following four:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"networkDuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sendDuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"receiveDuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"processingDuration\")), mdx(\"p\", null, \"To understand what it means, you can look at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-javascript#page-load-performance\"\n  }, \"Azure Application Insights documentation\"), \". It has a good image (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/azure/application-insights/media/app-insights-javascript/08-client-split.png\"\n  }, \"https://docs.microsoft.com/en-us/azure/application-insights/media/app-insights-javascript/08-client-split.png\"), \"), in short, Application Insights is categorizing the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.w3.org/TR/navigation-timing/#processing-model\"\n  }, \"official processing model from the navigation timing\"), \". Nine steps is heavy and some steps are not directly the cause of the code. The segregation in 4 categories help to focus of where you should spend your time to fix your performance issue.\"), mdx(\"p\", null, \"Reading the navigation timing can be confusing in term of what needs to be improved. Most of the time, you do not need to understand every step to improve the overall performance.\"), mdx(\"p\", null, \"The first interesting column of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"browsertiming\"), \" table is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"networkDuration\"), \". This column includes 4 of the navigation timing processing step that include mostly the network call. It includes redirection, if the fetched resource result is an HTTP redirect (3xx). It also has DNS and TCP delays. What it means is that it contains all the time before users reach the Asp.Net code. It's the time to translate the domain into an IP address, the time between different hops that separate the user and the machine that host the HTTP server and the time the http request move from the machine to the HTTP server (IIS, Apache, etc). This time tend to be huge if the HTTP server is sleeping. For example, if you release a new version on Azure Website and do not warm the server, the first hit will be slow. This will translate in Application Insights by having the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"networkDuration\"), \" higher than usual. That is why, it's always good to remove from the statistic very high time, let say 1 minute. That said, I currently experience very long query above 5 minutes from GoogleBot that need to be investigated.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" browserTimings\\n | where timestamp >= ago(12d)\\n | where totalDuration < 300000\\n | where networkDuration < 10000\\n | order by totalDuration desc nulls last\\n\")), mdx(\"p\", null, \"The second column is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sendDuration\"), \". The starting point is when the browser starts sending the first byte, the ending point the server sent the first byte back to the browser. In other word, it is when the browser receives the whole response from the HTTP server. In other words, it's the time spent in your Asp.Net MVC controller. If you want to isolate long request to identifier Asp.Net MVC Controller's action problem, you can change the Application Insight query to order by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sendDuration\"), \" and find all every duration above 2 seconds (or what ever is your desired maximum time on the server).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" browserTimings\\n | where timestamp >= ago(12d)\\n | where totalDuration < 300000\\n | where networkDuration < 10000\\n | where sendDuration > 2000\\n | where url !startswith \\\"http://localhost\\\"\\n | where url !contains \\\"azurewebsites.net\\\"\\n | order by sendDuration desc nulls last | project timestamp , url, sendDuration\\n\")), mdx(\"p\", null, \"While exploring the data, I realized that I was sending development localhost into Application Insights. Only on for the client side since the code was injected and didn't take in consideration the C# flag \\\"TelemetryConfiguration.Active.DisableTelemetry\\\". That is why you can a new clause that get rid of any development requests. Also, I am using multiple Azure's slots which mean I want to remove the experimental slot too by removing \\\"azurewebsites.net\\\" from the data.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" browserTimings\\n | where timestamp >= ago(12d)\\n | where totalDuration < 300000\\n | where networkDuration < 10000\\n | where sendDuration > 2000\\n | where url !startswith \\\"http://localhost\\\"\\n | where url !contains \\\"azurewebsites.net\\\"\\n | order by sendDuration desc nulls last\\n | extend urlWithoutNumber = replace(@\\\"([^?]+).*\\\", @\\\"\\\\\\\\1\\\", replace(@\\\"([a-z0-9]{8})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]){12}\\\", @\\\"x\\\", replace(@\\\"(\\\\\\\\d)\\\", @\\\"x\\\", url)))\\n | project timestamp , urlWithoutNumber, sendDuration\\n\")), mdx(\"p\", null, \"The third column is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"receiveDuration\"), \" which is the time it tooks to download the data from the server. This can be long if you send a big HTML back for example. You can lower this metric by having a single page application where most request download only the data and not UI details. This metric is important to keep low especially on mobile where the connection is slow and users have limited data plan.\"), mdx(\"p\", null, \"The last and forth column is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"processingDuration\"), \". This is the time it takes for the browser to render the received data. It contains several JavaScript events. domLoading, domInteractive, domContentLoaded (JQuery DocumentReady), domComplete, loadEventStart and loadEventEnd. Quick recaps of these rendering events.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"domLoading: The document has been downloaded from the server, the browser is ready to work on it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"domInteractive: The browser parsed the HTML and built the DOM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"domContentLoaded: The CSSOM is built (browser analyzed CSS). Browsers is not blocked by any JavaScript.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"domComplete: The browser doesn't have anymore images or any resource to download.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loadEventStart and loadEventEnd: Browser rendered the DOM to the user.\")), mdx(\"p\", null, \"It means that you can reduce the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"processingDuration\"), \" by having simpler CSS and faster JavaScript code. You can get this information in Application Insights by showing the percentiles of the processingDuration. I added some filtering to reduce the amount of result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" browserTimings\\n | where timestamp >= ago(7d)\\n | where networkDuration < 5000\\n | where totalDuration > 5000\\n | where url !startswith(\\\"http://localhost\\\")\\n | where url !contains(\\\"azurewebsites.net\\\")\\n | extend urlClean = replace(@\\\"([^?]+).*\\\", @\\\"\\\\\\\\1\\\", replace(@\\\"([a-z0-9]{8})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]){12}\\\", @\\\"x\\\", replace(@\\\"(\\\\\\\\d)\\\", @\\\"x\\\", url)))\\n | summarize percentiles(processingDuration, 50, 95) , percentiles(totalDuration, 50, 95) by urlClean\\n | where percentile_processingDuration_50 > 2000\\n | order by percentile_processingDuration_50 desc nulls last\\n\")), mdx(\"p\", null, \"It's good to note that some external libraries can increase the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"processingDuration\"), \". This is especially true with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Google Adsense\"), \" or third party that download CSS/Font/Script and execute them on your page.\"), mdx(\"p\", null, \"Application Insights \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BrowserTimings\"), \" is very useful to get insight of what is going on on your webpage in term of performance and figure out where to optimize your code. To conclude, here is a recapitulative of the 4 mains property of the Application Insights BrowserTimings.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"networkDuration = Contact the server, can be slow if you just deployed (on the first hit).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sendDuration = Time on the server (Asp.Net Controller code).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"receiveDuration = Time for the browser to download the data from the server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"processingDuration = Time for the browser to draw the downloaded data to the UI for the user to see it.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Navigation Performance Understanding with Application Insights\",\n  \"date\": \"2017-02-01\",\n  \"categories\": [\"azure\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Application Insights has a table with performance details. It's called \"browser timings\". You can have a glimpse of what it contains by executing`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` browserTimings | where timestamp >= ago(1d) | where totalDuration > 10000 | order by totalDuration desc nulls last\n`}</code></pre>\n    <p>{`The most interesting columns are these following four:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`networkDuration`}</li>\n      <li parentName=\"ul\">{`sendDuration`}</li>\n      <li parentName=\"ul\">{`receiveDuration`}</li>\n      <li parentName=\"ul\">{`processingDuration`}</li>\n    </ul>\n    <p>{`To understand what it means, you can look at `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-javascript#page-load-performance\"\n      }}>{`Azure Application Insights documentation`}</a>{`. It has a good image (`}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/azure/application-insights/media/app-insights-javascript/08-client-split.png\"\n      }}>{`https://docs.microsoft.com/en-us/azure/application-insights/media/app-insights-javascript/08-client-split.png`}</a>{`), in short, Application Insights is categorizing the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/navigation-timing/#processing-model\"\n      }}>{`official processing model from the navigation timing`}</a>{`. Nine steps is heavy and some steps are not directly the cause of the code. The segregation in 4 categories help to focus of where you should spend your time to fix your performance issue.`}</p>\n    <p>{`Reading the navigation timing can be confusing in term of what needs to be improved. Most of the time, you do not need to understand every step to improve the overall performance.`}</p>\n    <p>{`The first interesting column of the `}<strong parentName=\"p\">{`browsertiming`}</strong>{` table is `}<strong parentName=\"p\">{`networkDuration`}</strong>{`. This column includes 4 of the navigation timing processing step that include mostly the network call. It includes redirection, if the fetched resource result is an HTTP redirect (3xx). It also has DNS and TCP delays. What it means is that it contains all the time before users reach the Asp.Net code. It's the time to translate the domain into an IP address, the time between different hops that separate the user and the machine that host the HTTP server and the time the http request move from the machine to the HTTP server (IIS, Apache, etc). This time tend to be huge if the HTTP server is sleeping. For example, if you release a new version on Azure Website and do not warm the server, the first hit will be slow. This will translate in Application Insights by having the `}<strong parentName=\"p\">{`networkDuration`}</strong>{` higher than usual. That is why, it's always good to remove from the statistic very high time, let say 1 minute. That said, I currently experience very long query above 5 minutes from GoogleBot that need to be investigated.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` browserTimings\n | where timestamp >= ago(12d)\n | where totalDuration < 300000\n | where networkDuration < 10000\n | order by totalDuration desc nulls last\n`}</code></pre>\n    <p>{`The second column is `}<strong parentName=\"p\">{`sendDuration`}</strong>{`. The starting point is when the browser starts sending the first byte, the ending point the server sent the first byte back to the browser. In other word, it is when the browser receives the whole response from the HTTP server. In other words, it's the time spent in your Asp.Net MVC controller. If you want to isolate long request to identifier Asp.Net MVC Controller's action problem, you can change the Application Insight query to order by the `}<strong parentName=\"p\">{`sendDuration`}</strong>{` and find all every duration above 2 seconds (or what ever is your desired maximum time on the server).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` browserTimings\n | where timestamp >= ago(12d)\n | where totalDuration < 300000\n | where networkDuration < 10000\n | where sendDuration > 2000\n | where url !startswith \"http://localhost\"\n | where url !contains \"azurewebsites.net\"\n | order by sendDuration desc nulls last | project timestamp , url, sendDuration\n`}</code></pre>\n    <p>{`While exploring the data, I realized that I was sending development localhost into Application Insights. Only on for the client side since the code was injected and didn't take in consideration the C# flag \"TelemetryConfiguration.Active.DisableTelemetry\". That is why you can a new clause that get rid of any development requests. Also, I am using multiple Azure's slots which mean I want to remove the experimental slot too by removing \"azurewebsites.net\" from the data.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` browserTimings\n | where timestamp >= ago(12d)\n | where totalDuration < 300000\n | where networkDuration < 10000\n | where sendDuration > 2000\n | where url !startswith \"http://localhost\"\n | where url !contains \"azurewebsites.net\"\n | order by sendDuration desc nulls last\n | extend urlWithoutNumber = replace(@\"([^?]+).*\", @\"\\\\\\\\1\", replace(@\"([a-z0-9]{8})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]){12}\", @\"x\", replace(@\"(\\\\\\\\d)\", @\"x\", url)))\n | project timestamp , urlWithoutNumber, sendDuration\n`}</code></pre>\n    <p>{`The third column is the `}<strong parentName=\"p\">{`receiveDuration`}</strong>{` which is the time it tooks to download the data from the server. This can be long if you send a big HTML back for example. You can lower this metric by having a single page application where most request download only the data and not UI details. This metric is important to keep low especially on mobile where the connection is slow and users have limited data plan.`}</p>\n    <p>{`The last and forth column is the `}<strong parentName=\"p\">{`processingDuration`}</strong>{`. This is the time it takes for the browser to render the received data. It contains several JavaScript events. domLoading, domInteractive, domContentLoaded (JQuery DocumentReady), domComplete, loadEventStart and loadEventEnd. Quick recaps of these rendering events.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`domLoading: The document has been downloaded from the server, the browser is ready to work on it.`}</li>\n      <li parentName=\"ul\">{`domInteractive: The browser parsed the HTML and built the DOM.`}</li>\n      <li parentName=\"ul\">{`domContentLoaded: The CSSOM is built (browser analyzed CSS). Browsers is not blocked by any JavaScript.`}</li>\n      <li parentName=\"ul\">{`domComplete: The browser doesn't have anymore images or any resource to download.`}</li>\n      <li parentName=\"ul\">{`loadEventStart and loadEventEnd: Browser rendered the DOM to the user.`}</li>\n    </ul>\n    <p>{`It means that you can reduce the `}<strong parentName=\"p\">{`processingDuration`}</strong>{` by having simpler CSS and faster JavaScript code. You can get this information in Application Insights by showing the percentiles of the processingDuration. I added some filtering to reduce the amount of result.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` browserTimings\n | where timestamp >= ago(7d)\n | where networkDuration < 5000\n | where totalDuration > 5000\n | where url !startswith(\"http://localhost\")\n | where url !contains(\"azurewebsites.net\")\n | extend urlClean = replace(@\"([^?]+).*\", @\"\\\\\\\\1\", replace(@\"([a-z0-9]{8})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]{4})\\\\-([a-z0-9]){12}\", @\"x\", replace(@\"(\\\\\\\\d)\", @\"x\", url)))\n | summarize percentiles(processingDuration, 50, 95) , percentiles(totalDuration, 50, 95) by urlClean\n | where percentile_processingDuration_50 > 2000\n | order by percentile_processingDuration_50 desc nulls last\n`}</code></pre>\n    <p>{`It's good to note that some external libraries can increase the `}<strong parentName=\"p\">{`processingDuration`}</strong>{`. This is especially true with `}<em parentName=\"p\">{`Google Adsense`}</em>{` or third party that download CSS/Font/Script and execute them on your page.`}</p>\n    <p>{`Application Insights `}<strong parentName=\"p\">{`BrowserTimings`}</strong>{` is very useful to get insight of what is going on on your webpage in term of performance and figure out where to optimize your code. To conclude, here is a recapitulative of the 4 mains property of the Application Insights BrowserTimings.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`networkDuration = Contact the server, can be slow if you just deployed (on the first hit).`}</li>\n      <li parentName=\"ul\">{`sendDuration = Time on the server (Asp.Net Controller code).`}</li>\n      <li parentName=\"ul\">{`receiveDuration = Time for the browser to download the data from the server.`}</li>\n      <li parentName=\"ul\">{`processingDuration = Time for the browser to draw the downloaded data to the UI for the user to see it.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}