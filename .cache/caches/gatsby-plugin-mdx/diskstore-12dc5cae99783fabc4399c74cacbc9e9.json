{"expireTime":9007200886478392000,"key":"gatsby-plugin-mdx-entire-payload-66974210ef40a4e815a524924ab7b8b0--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I have several ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"link","title":null,"url":"./asnotracking-to-force-your-data-context-to-get-everything-from-the-database","children":[{"type":"text","value":"example","position":{"start":{"line":2,"column":17,"offset":17},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":16,"offset":16},"end":{"line":2,"column":104,"offset":104},"indent":[]}},{"type":"text","value":" in this website that include with a string the property when it's a property inside a collection of my main entity. Here is one example:","position":{"start":{"line":2,"column":104,"offset":104},"end":{"line":2,"column":241,"offset":241},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":241,"offset":241},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\"Sessions.WorkoutSessionExercises\") .Include(\"Sessions.WorkoutSessionExercises.Exercise\") .Single(c => c.Id == id); \n``` At least, this example use the property for the Sessions. But why I wrote with a string for the two others includes? Because Sessions is a collection which doesn't let me link to one of its property. Instead, it links me to a list of property of the collection. This is quite logic if we think about it. However, I remain with the problem of using string which will lead in the maintenance phase to some possible problem when refactoring. Renaming a property won't change the string. This is why it would be better to specify the property of the collection.\n\nThis can be done by using the Linq method \"**Select**\". \n```csharp\n return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises)) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises.Select(g=>g.Exercise))) .Single(c => c.Id == id); ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":12,"column":4,"offset":1334},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, we load the collection Sessions, then we load the collection WorkoutSessionExercise which is inside every Session. Finally, we load every Exercise that is a property without being a collection.","position":{"start":{"line":14,"column":1,"offset":1336},"end":{"line":14,"column":210,"offset":1545},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1336},"end":{"line":14,"column":210,"offset":1545},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example show you that even with multiple collection deep you can still avoid using string to specify that to include and what not.","position":{"start":{"line":16,"column":1,"offset":1547},"end":{"line":16,"column":136,"offset":1682},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1547},"end":{"line":16,"column":136,"offset":1682},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to include correctly property within a collection when using Entity Framework code first\",\"date\":\"2013-05-10\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":19,"column":1,"offset":1685},"end":{"line":19,"column":187,"offset":1871},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":187,"offset":1871}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to include correctly property within a collection when using Entity Framework code first\",\n  \"date\": \"2013-05-10\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have several \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./asnotracking-to-force-your-data-context-to-get-everything-from-the-database\"\n  }, \"example\"), \" in this website that include with a string the property when it's a property inside a collection of my main entity. Here is one example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\\\"Sessions.WorkoutSessionExercises\\\") .Include(\\\"Sessions.WorkoutSessionExercises.Exercise\\\") .Single(c => c.Id == id); \\n``` At least, this example use the property for the Sessions. But why I wrote with a string for the two others includes? Because Sessions is a collection which doesn't let me link to one of its property. Instead, it links me to a list of property of the collection. This is quite logic if we think about it. However, I remain with the problem of using string which will lead in the maintenance phase to some possible problem when refactoring. Renaming a property won't change the string. This is why it would be better to specify the property of the collection.\\n\\nThis can be done by using the Linq method \\\"**Select**\\\". \\n```csharp\\n return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises)) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises.Select(g=>g.Exercise))) .Single(c => c.Id == id); \\n\")), mdx(\"p\", null, \"As you can see, we load the collection Sessions, then we load the collection WorkoutSessionExercise which is inside every Session. Finally, we load every Exercise that is a property without being a collection.\"), mdx(\"p\", null, \"This example show you that even with multiple collection deep you can still avoid using string to specify that to include and what not.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to include correctly property within a collection when using Entity Framework code first\",\n  \"date\": \"2013-05-10\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`I have several `}<a parentName=\"p\" {...{\n        \"href\": \"./asnotracking-to-force-your-data-context-to-get-everything-from-the-database\"\n      }}>{`example`}</a>{` in this website that include with a string the property when it's a property inside a collection of my main entity. Here is one example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\"Sessions.WorkoutSessionExercises\") .Include(\"Sessions.WorkoutSessionExercises.Exercise\") .Single(c => c.Id == id); \n\\`\\`\\` At least, this example use the property for the Sessions. But why I wrote with a string for the two others includes? Because Sessions is a collection which doesn't let me link to one of its property. Instead, it links me to a list of property of the collection. This is quite logic if we think about it. However, I remain with the problem of using string which will lead in the maintenance phase to some possible problem when refactoring. Renaming a property won't change the string. This is why it would be better to specify the property of the collection.\n\nThis can be done by using the Linq method \"**Select**\". \n\\`\\`\\`csharp\n return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises)) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises.Select(g=>g.Exercise))) .Single(c => c.Id == id); \n`}</code></pre>\n    <p>{`As you can see, we load the collection Sessions, then we load the collection WorkoutSessionExercise which is inside every Session. Finally, we load every Exercise that is a property without being a collection.`}</p>\n    <p>{`This example show you that even with multiple collection deep you can still avoid using string to specify that to include and what not.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}