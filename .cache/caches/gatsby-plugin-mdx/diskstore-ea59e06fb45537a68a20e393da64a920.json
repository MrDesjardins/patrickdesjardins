{"expireTime":9007200886478394000,"key":"gatsby-plugin-mdx-entire-payload-fe23b2b4df3170f995dc6cf7cd79960d--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You can define association 1 to many and defining the relationship with both code snippet below. One is defined with a string, the other one with a property.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":158,"offset":158},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":158,"offset":158},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"HasRequired with association defined by string: ","position":{"start":{"line":4,"column":1,"offset":160},"end":{"line":4,"column":49,"offset":208},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":160},"end":{"line":4,"column":49,"offset":208},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" this.HasRequired(a => a.Property1) .WithMany() .Map(a => a.MapKey(\"MyFK\")); ","position":{"start":{"line":5,"column":1,"offset":209},"end":{"line":7,"column":4,"offset":300},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"HasRequired with association defined by property: ","position":{"start":{"line":9,"column":1,"offset":302},"end":{"line":9,"column":51,"offset":352},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":302},"end":{"line":9,"column":51,"offset":352},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" this.HasRequired(a => a.Property1) .WithMany() .HasForeignKey(a => a.MyFK); ","position":{"start":{"line":10,"column":1,"offset":353},"end":{"line":12,"column":4,"offset":444},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Both mappings will create exactly the same database schema with a non nullable foreign key.","position":{"start":{"line":14,"column":1,"offset":446},"end":{"line":14,"column":92,"offset":537},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":446},"end":{"line":14,"column":92,"offset":537},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The mapping with ","position":{"start":{"line":16,"column":1,"offset":539},"end":{"line":16,"column":18,"offset":556},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"MapKey","position":{"start":{"line":16,"column":20,"offset":558},"end":{"line":16,"column":26,"offset":564},"indent":[]}}],"position":{"start":{"line":16,"column":18,"offset":556},"end":{"line":16,"column":28,"offset":566},"indent":[]}},{"type":"text","value":" is used when you don't want to have the foreign key as a property in your model context class. This is called ","position":{"start":{"line":16,"column":28,"offset":566},"end":{"line":16,"column":139,"offset":677},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Independent Association","position":{"start":{"line":16,"column":140,"offset":678},"end":{"line":16,"column":163,"offset":701},"indent":[]}}],"position":{"start":{"line":16,"column":139,"offset":677},"end":{"line":16,"column":164,"offset":702},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":16,"column":164,"offset":702},"end":{"line":16,"column":165,"offset":703},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":539},"end":{"line":16,"column":165,"offset":703},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The mapping with ","position":{"start":{"line":18,"column":1,"offset":705},"end":{"line":18,"column":18,"offset":722},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"HasForeignKey","position":{"start":{"line":18,"column":20,"offset":724},"end":{"line":18,"column":33,"offset":737},"indent":[]}}],"position":{"start":{"line":18,"column":18,"offset":722},"end":{"line":18,"column":35,"offset":739},"indent":[]}},{"type":"text","value":" when the foreign key is a property in the model. This type is called ","position":{"start":{"line":18,"column":35,"offset":739},"end":{"line":18,"column":105,"offset":809},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Foreign Key Association","position":{"start":{"line":18,"column":106,"offset":810},"end":{"line":18,"column":129,"offset":833},"indent":[]}}],"position":{"start":{"line":18,"column":105,"offset":809},"end":{"line":18,"column":130,"offset":834},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":18,"column":130,"offset":834},"end":{"line":18,"column":131,"offset":835},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":705},"end":{"line":18,"column":131,"offset":835},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can use the one you want. Personally, I prefer to use the HasForeignKey because it's strongly mapped and if the property name is refactored that I am sure that the property will follow.","position":{"start":{"line":20,"column":1,"offset":837},"end":{"line":20,"column":190,"offset":1026},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":837},"end":{"line":20,"column":190,"offset":1026},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"What is the difference between MapKey vs HasForeignKey?\",\"date\":\"2013-09-18\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":23,"column":1,"offset":1029},"end":{"line":23,"column":150,"offset":1178},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":150,"offset":1178}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What is the difference between MapKey vs HasForeignKey?\",\n  \"date\": \"2013-09-18\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can define association 1 to many and defining the relationship with both code snippet below. One is defined with a string, the other one with a property.\"), mdx(\"p\", null, \"HasRequired with association defined by string: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" this.HasRequired(a => a.Property1) .WithMany() .Map(a => a.MapKey(\\\"MyFK\\\")); \\n\")), mdx(\"p\", null, \"HasRequired with association defined by property: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" this.HasRequired(a => a.Property1) .WithMany() .HasForeignKey(a => a.MyFK); \\n\")), mdx(\"p\", null, \"Both mappings will create exactly the same database schema with a non nullable foreign key.\"), mdx(\"p\", null, \"The mapping with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MapKey\"), \" is used when you don't want to have the foreign key as a property in your model context class. This is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Independent Association\"), \".\"), mdx(\"p\", null, \"The mapping with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HasForeignKey\"), \" when the foreign key is a property in the model. This type is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Foreign Key Association\"), \".\"), mdx(\"p\", null, \"You can use the one you want. Personally, I prefer to use the HasForeignKey because it's strongly mapped and if the property name is refactored that I am sure that the property will follow.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"What is the difference between MapKey vs HasForeignKey?\",\n  \"date\": \"2013-09-18\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You can define association 1 to many and defining the relationship with both code snippet below. One is defined with a string, the other one with a property.`}</p>\n    <p>{`HasRequired with association defined by string: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` this.HasRequired(a => a.Property1) .WithMany() .Map(a => a.MapKey(\"MyFK\")); \n`}</code></pre>\n    <p>{`HasRequired with association defined by property: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` this.HasRequired(a => a.Property1) .WithMany() .HasForeignKey(a => a.MyFK); \n`}</code></pre>\n    <p>{`Both mappings will create exactly the same database schema with a non nullable foreign key.`}</p>\n    <p>{`The mapping with `}<strong parentName=\"p\">{`MapKey`}</strong>{` is used when you don't want to have the foreign key as a property in your model context class. This is called `}<em parentName=\"p\">{`Independent Association`}</em>{`.`}</p>\n    <p>{`The mapping with `}<strong parentName=\"p\">{`HasForeignKey`}</strong>{` when the foreign key is a property in the model. This type is called `}<em parentName=\"p\">{`Foreign Key Association`}</em>{`.`}</p>\n    <p>{`You can use the one you want. Personally, I prefer to use the HasForeignKey because it's strongly mapped and if the property name is refactored that I am sure that the property will follow.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}