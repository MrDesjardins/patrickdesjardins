{"expireTime":9007200886478387000,"key":"gatsby-plugin-mdx-entire-payload-10dfd6ed0b7c53f3ff2ccb78993997c2--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I have been using Redis since few weeks now and I stumble into a weird problem after few days. At first, my serialization was fine. I was able to serialize, cache and deserialize without problem. After few times, I wasn't able to unserialize my serialize.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":256,"offset":256},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":256,"offset":256},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First of all, I am using ","position":{"start":{"line":4,"column":1,"offset":258},"end":{"line":4,"column":26,"offset":283},"indent":[]}},{"type":"link","title":null,"url":"http://www.newtonsoft.com/json","children":[{"type":"text","value":"JSON.Net","position":{"start":{"line":4,"column":27,"offset":284},"end":{"line":4,"column":35,"offset":292},"indent":[]}}],"position":{"start":{"line":4,"column":26,"offset":283},"end":{"line":4,"column":68,"offset":325},"indent":[]}},{"type":"text","value":" for serialization and deserialization. It is the common serializer library for a long time, it's even the one Microsoft is using now for all its new projects. Second, I was already using some configurations to handle references. The problem was that one of the object had a collection of an interface which it was not deserialized correctly because JSON.Net did not know to which concrete type to instanciate.","position":{"start":{"line":4,"column":68,"offset":325},"end":{"line":4,"column":478,"offset":735},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":258},"end":{"line":4,"column":478,"offset":735},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To fix this issue and have during serialization the concrete type added to the serialization, you need to use ","position":{"start":{"line":6,"column":1,"offset":737},"end":{"line":6,"column":111,"offset":847},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"JsonSerializerSettings","position":{"start":{"line":6,"column":113,"offset":849},"end":{"line":6,"column":135,"offset":871},"indent":[]}}],"position":{"start":{"line":6,"column":111,"offset":847},"end":{"line":6,"column":137,"offset":873},"indent":[]}},{"type":"text","value":" with the ","position":{"start":{"line":6,"column":137,"offset":873},"end":{"line":6,"column":147,"offset":883},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TypeNameHandling","position":{"start":{"line":6,"column":149,"offset":885},"end":{"line":6,"column":165,"offset":901},"indent":[]}}],"position":{"start":{"line":6,"column":147,"offset":883},"end":{"line":6,"column":167,"offset":903},"indent":[]}},{"type":"text","value":" property to ","position":{"start":{"line":6,"column":167,"offset":903},"end":{"line":6,"column":180,"offset":916},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"All","position":{"start":{"line":6,"column":182,"offset":918},"end":{"line":6,"column":185,"offset":921},"indent":[]}}],"position":{"start":{"line":6,"column":180,"offset":916},"end":{"line":6,"column":187,"offset":923},"indent":[]}},{"type":"text","value":". The result look like the following code: ","position":{"start":{"line":6,"column":187,"offset":923},"end":{"line":6,"column":230,"offset":966},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":737},"end":{"line":6,"column":230,"offset":966},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var serializedObjectToCache = JsonConvert.SerializeObject(objectToCache , Formatting.Indented , new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.Objects, TypeNameHandling = TypeNameHandling.All }); ","position":{"start":{"line":7,"column":1,"offset":967},"end":{"line":9,"column":4,"offset":1273},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The result of the serialization is a JSON attribute named ","position":{"start":{"line":11,"column":1,"offset":1275},"end":{"line":11,"column":59,"offset":1333},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"\"$type\"","position":{"start":{"line":11,"column":61,"offset":1335},"end":{"line":11,"column":68,"offset":1342},"indent":[]}}],"position":{"start":{"line":11,"column":59,"offset":1333},"end":{"line":11,"column":70,"offset":1344},"indent":[]}},{"type":"text","value":" which has the complete namespace and class name. You can find more detail on ","position":{"start":{"line":11,"column":70,"offset":1344},"end":{"line":11,"column":148,"offset":1422},"indent":[]}},{"type":"link","title":null,"url":"http://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm","children":[{"type":"text","value":"JSON.Net documentation about TypeNameHandling","position":{"start":{"line":11,"column":149,"offset":1423},"end":{"line":11,"column":194,"offset":1468},"indent":[]}}],"position":{"start":{"line":11,"column":148,"offset":1422},"end":{"line":11,"column":267,"offset":1541},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":267,"offset":1541},"end":{"line":11,"column":268,"offset":1542},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1275},"end":{"line":11,"column":268,"offset":1542},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The deserialization contains also the same ","position":{"start":{"line":13,"column":1,"offset":1544},"end":{"line":13,"column":44,"offset":1587},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"JsonSerializerSettings","position":{"start":{"line":13,"column":46,"offset":1589},"end":{"line":13,"column":68,"offset":1611},"indent":[]}}],"position":{"start":{"line":13,"column":44,"offset":1587},"end":{"line":13,"column":70,"offset":1613},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":13,"column":70,"offset":1613},"end":{"line":13,"column":71,"offset":1614},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1544},"end":{"line":13,"column":71,"offset":1614},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var obj = JsonConvert.DeserializeObject<T>(serializedObject , new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.Objects, TypeNameHandling = TypeNameHandling.All }); ","position":{"start":{"line":16,"column":1,"offset":1617},"end":{"line":18,"column":4,"offset":1889},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With the three settings used in this article, you can serialize complex object with recursive references, with abstract type or interface type and not have to worry about serializing an Entity Framework object. So, why this is not the default configuration? Because this add a lot of information in the JSON. This shouldn't be a huge problem if you are using it with Redis, more a problem is you transfer the information through an Ajax call.","position":{"start":{"line":20,"column":1,"offset":1891},"end":{"line":20,"column":443,"offset":2333},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1891},"end":{"line":20,"column":443,"offset":2333},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Serializing Complex Object for Redis\",\"date\":\"2015-09-22\",\"categories\":[\"c-sharp\",\"redis\"]}","position":{"start":{"line":23,"column":1,"offset":2336},"end":{"line":23,"column":130,"offset":2465},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":130,"offset":2465}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Serializing Complex Object for Redis\",\n  \"date\": \"2015-09-22\",\n  \"categories\": [\"c-sharp\", \"redis\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have been using Redis since few weeks now and I stumble into a weird problem after few days. At first, my serialization was fine. I was able to serialize, cache and deserialize without problem. After few times, I wasn't able to unserialize my serialize.\"), mdx(\"p\", null, \"First of all, I am using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.newtonsoft.com/json\"\n  }, \"JSON.Net\"), \" for serialization and deserialization. It is the common serializer library for a long time, it's even the one Microsoft is using now for all its new projects. Second, I was already using some configurations to handle references. The problem was that one of the object had a collection of an interface which it was not deserialized correctly because JSON.Net did not know to which concrete type to instanciate.\"), mdx(\"p\", null, \"To fix this issue and have during serialization the concrete type added to the serialization, you need to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JsonSerializerSettings\"), \" with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TypeNameHandling\"), \" property to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"All\"), \". The result look like the following code: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var serializedObjectToCache = JsonConvert.SerializeObject(objectToCache , Formatting.Indented , new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.Objects, TypeNameHandling = TypeNameHandling.All }); \\n\")), mdx(\"p\", null, \"The result of the serialization is a JSON attribute named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"$type\\\"\"), \" which has the complete namespace and class name. You can find more detail on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm\"\n  }, \"JSON.Net documentation about TypeNameHandling\"), \".\"), mdx(\"p\", null, \"The deserialization contains also the same \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JsonSerializerSettings\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var obj = JsonConvert.DeserializeObject<T>(serializedObject , new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.Objects, TypeNameHandling = TypeNameHandling.All }); \\n\")), mdx(\"p\", null, \"With the three settings used in this article, you can serialize complex object with recursive references, with abstract type or interface type and not have to worry about serializing an Entity Framework object. So, why this is not the default configuration? Because this add a lot of information in the JSON. This shouldn't be a huge problem if you are using it with Redis, more a problem is you transfer the information through an Ajax call.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Serializing Complex Object for Redis\",\n  \"date\": \"2015-09-22\",\n  \"categories\": [\"c-sharp\", \"redis\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`I have been using Redis since few weeks now and I stumble into a weird problem after few days. At first, my serialization was fine. I was able to serialize, cache and deserialize without problem. After few times, I wasn't able to unserialize my serialize.`}</p>\n    <p>{`First of all, I am using `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.newtonsoft.com/json\"\n      }}>{`JSON.Net`}</a>{` for serialization and deserialization. It is the common serializer library for a long time, it's even the one Microsoft is using now for all its new projects. Second, I was already using some configurations to handle references. The problem was that one of the object had a collection of an interface which it was not deserialized correctly because JSON.Net did not know to which concrete type to instanciate.`}</p>\n    <p>{`To fix this issue and have during serialization the concrete type added to the serialization, you need to use `}<strong parentName=\"p\">{`JsonSerializerSettings`}</strong>{` with the `}<strong parentName=\"p\">{`TypeNameHandling`}</strong>{` property to `}<strong parentName=\"p\">{`All`}</strong>{`. The result look like the following code: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var serializedObjectToCache = JsonConvert.SerializeObject(objectToCache , Formatting.Indented , new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.Objects, TypeNameHandling = TypeNameHandling.All }); \n`}</code></pre>\n    <p>{`The result of the serialization is a JSON attribute named `}<strong parentName=\"p\">{`\"$type\"`}</strong>{` which has the complete namespace and class name. You can find more detail on `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm\"\n      }}>{`JSON.Net documentation about TypeNameHandling`}</a>{`.`}</p>\n    <p>{`The deserialization contains also the same `}<strong parentName=\"p\">{`JsonSerializerSettings`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var obj = JsonConvert.DeserializeObject<T>(serializedObject , new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.Objects, TypeNameHandling = TypeNameHandling.All }); \n`}</code></pre>\n    <p>{`With the three settings used in this article, you can serialize complex object with recursive references, with abstract type or interface type and not have to worry about serializing an Entity Framework object. So, why this is not the default configuration? Because this add a lot of information in the JSON. This shouldn't be a huge problem if you are using it with Redis, more a problem is you transfer the information through an Ajax call.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}