{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-6400de4b1f455246aa743a7a33fe7ee2--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In many scenarios the ViewModel will need to provide to the View some additional information could be useful. The case of having an UIHint attribut with the conjunction of this additional information is probably the situation where most people will face at some point.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":269,"offset":269},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":269,"offset":269},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [DoSomething] public MyClass MyProperty { get; set; } ","position":{"start":{"line":5,"column":1,"offset":272},"end":{"line":7,"column":4,"offset":341},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let say you have a template that display multiple information from your view model (in the example above \"MyClass\"). If this one require to display something more (or less) depending of who use it, and that the view model know this information, the only way to pass this information is by data annotation.","position":{"start":{"line":9,"column":1,"offset":343},"end":{"line":9,"column":306,"offset":648},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":343},"end":{"line":9,"column":306,"offset":648},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's base the theory on the following example. ","position":{"start":{"line":11,"column":1,"offset":650},"end":{"line":11,"column":49,"offset":698},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":650},"end":{"line":11,"column":49,"offset":698},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [DisableShape(\"Heavy\")] [UIHint(\"ShapeSelector\")] public Shape TopShape { get; set; } [UIHint(\"ShapeSelector\")] public Shape BottomShape { get; set; } ","position":{"start":{"line":12,"column":1,"offset":699},"end":{"line":14,"column":4,"offset":865},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The view model class has two properties which define 2 shapes. One must be selected from a list of shape but only accept light shape while the other require to have strong shape. We could create two templates but we could also create a simple template and allow to disable some shape. This is the case of the property \"TopShape\" where we will disable all heavy shape but keep everything selectable for the \"BottomShape\".","position":{"start":{"line":16,"column":1,"offset":867},"end":{"line":16,"column":421,"offset":1287},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":867},"end":{"line":16,"column":421,"offset":1287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing to keep in mind is that we will change \"ModelMetadataProviders\" of MVC to use a custom one when we will be able to add multiple attribute for the whole application. Since we do not want to bind a single attribute we will create a custom meta data provider.","position":{"start":{"line":18,"column":1,"offset":1289},"end":{"line":18,"column":273,"offset":1561},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1289},"end":{"line":18,"column":273,"offset":1561},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class CustomModelMetadataProvider : DataAnnotationsModelMetadataProvider { protected override ModelMetadata CreateMetadata( IEnumerable<Attribute> attributes, Type containerType, Func<object> modelAccessor, Type modelType, string propertyName) { var modelMetadata = base.CreateMetadata(attributes, containerType, modelAccessor, modelType, propertyName); attributes.OfType<MetadataAttribute>().ToList().ForEach(x => x.Process(modelMetadata)); return modelMetadata; } } ","position":{"start":{"line":21,"column":1,"offset":1564},"end":{"line":23,"column":4,"offset":2054},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This code lets you have multiple attributes of type \"MetadataAttribute\".","position":{"start":{"line":25,"column":1,"offset":2056},"end":{"line":25,"column":73,"offset":2128},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2056},"end":{"line":25,"column":73,"offset":2128},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public abstract class MetadataAttribute : Attribute { public abstract void Process(ModelMetadata modelMetaData); } } ","position":{"start":{"line":28,"column":1,"offset":2131},"end":{"line":30,"column":4,"offset":2263},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, it's simply an abstract class that lets you define a Process method which is executed in the CreateMetadata method.","position":{"start":{"line":32,"column":1,"offset":2265},"end":{"line":32,"column":132,"offset":2396},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2265},"end":{"line":32,"column":132,"offset":2396},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From there, you can define what parameter you want for your custom attribute.","position":{"start":{"line":34,"column":1,"offset":2398},"end":{"line":34,"column":78,"offset":2475},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2398},"end":{"line":34,"column":78,"offset":2475},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class DisableShapeAttribute : MetadataAttribute { public bool TypeShape { get; set; } public DisableShapeAttribute(string type) { TypeShape = type; }\n\npublic DisableShapeAttribute() { TypeShape = \"\"; }\n\npublic override void Process(ModelMetadata modelMetaData) { modelMetaData.AdditionalValues.Add(\"DisableShape\", TypeShape); } } ","position":{"start":{"line":37,"column":1,"offset":2478},"end":{"line":43,"column":4,"offset":2830},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The last step is to register the CustomModelMetadataProvider that loop every MetadataAttribute. This is done via the Global.asax.cs, inside the Application_Start method.","position":{"start":{"line":45,"column":1,"offset":2832},"end":{"line":45,"column":170,"offset":3001},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2832},"end":{"line":45,"column":170,"offset":3001},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" ModelMetadataProviders.Current = new CustomModelMetadataProvider(); ","position":{"start":{"line":48,"column":1,"offset":3004},"end":{"line":50,"column":4,"offset":3087},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"From here you can read the attribute from your view or template.","position":{"start":{"line":52,"column":1,"offset":3089},"end":{"line":52,"column":65,"offset":3153},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":3089},"end":{"line":52,"column":65,"offset":3153},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var attr = ViewData.ModelMetadata.AdditionalValues.SingleOrDefault(x => x.Key == \"DisableShape\").Value; var attrValue = attr != null && (string)attr; ","position":{"start":{"line":55,"column":1,"offset":3156},"end":{"line":57,"column":4,"offset":3321},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to add custom Data Annotation attribute to your property in Asp.Net MVC\",\"date\":\"2013-02-22\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":60,"column":1,"offset":3324},"end":{"line":60,"column":161,"offset":3484},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":60,"column":161,"offset":3484}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to add custom Data Annotation attribute to your property in Asp.Net MVC\",\n  \"date\": \"2013-02-22\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In many scenarios the ViewModel will need to provide to the View some additional information could be useful. The case of having an UIHint attribut with the conjunction of this additional information is probably the situation where most people will face at some point.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [DoSomething] public MyClass MyProperty { get; set; } \\n\")), mdx(\"p\", null, \"Let say you have a template that display multiple information from your view model (in the example above \\\"MyClass\\\"). If this one require to display something more (or less) depending of who use it, and that the view model know this information, the only way to pass this information is by data annotation.\"), mdx(\"p\", null, \"Let's base the theory on the following example. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [DisableShape(\\\"Heavy\\\")] [UIHint(\\\"ShapeSelector\\\")] public Shape TopShape { get; set; } [UIHint(\\\"ShapeSelector\\\")] public Shape BottomShape { get; set; } \\n\")), mdx(\"p\", null, \"The view model class has two properties which define 2 shapes. One must be selected from a list of shape but only accept light shape while the other require to have strong shape. We could create two templates but we could also create a simple template and allow to disable some shape. This is the case of the property \\\"TopShape\\\" where we will disable all heavy shape but keep everything selectable for the \\\"BottomShape\\\".\"), mdx(\"p\", null, \"The first thing to keep in mind is that we will change \\\"ModelMetadataProviders\\\" of MVC to use a custom one when we will be able to add multiple attribute for the whole application. Since we do not want to bind a single attribute we will create a custom meta data provider.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class CustomModelMetadataProvider : DataAnnotationsModelMetadataProvider { protected override ModelMetadata CreateMetadata( IEnumerable<Attribute> attributes, Type containerType, Func<object> modelAccessor, Type modelType, string propertyName) { var modelMetadata = base.CreateMetadata(attributes, containerType, modelAccessor, modelType, propertyName); attributes.OfType<MetadataAttribute>().ToList().ForEach(x => x.Process(modelMetadata)); return modelMetadata; } } \\n\")), mdx(\"p\", null, \"This code lets you have multiple attributes of type \\\"MetadataAttribute\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public abstract class MetadataAttribute : Attribute { public abstract void Process(ModelMetadata modelMetaData); } } \\n\")), mdx(\"p\", null, \"As you can see, it's simply an abstract class that lets you define a Process method which is executed in the CreateMetadata method.\"), mdx(\"p\", null, \"From there, you can define what parameter you want for your custom attribute.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class DisableShapeAttribute : MetadataAttribute { public bool TypeShape { get; set; } public DisableShapeAttribute(string type) { TypeShape = type; }\\n\\npublic DisableShapeAttribute() { TypeShape = \\\"\\\"; }\\n\\npublic override void Process(ModelMetadata modelMetaData) { modelMetaData.AdditionalValues.Add(\\\"DisableShape\\\", TypeShape); } } \\n\")), mdx(\"p\", null, \"The last step is to register the CustomModelMetadataProvider that loop every MetadataAttribute. This is done via the Global.asax.cs, inside the Application_Start method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" ModelMetadataProviders.Current = new CustomModelMetadataProvider(); \\n\")), mdx(\"p\", null, \"From here you can read the attribute from your view or template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var attr = ViewData.ModelMetadata.AdditionalValues.SingleOrDefault(x => x.Key == \\\"DisableShape\\\").Value; var attrValue = attr != null && (string)attr; \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to add custom Data Annotation attribute to your property in Asp.Net MVC\",\n  \"date\": \"2013-02-22\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In many scenarios the ViewModel will need to provide to the View some additional information could be useful. The case of having an UIHint attribut with the conjunction of this additional information is probably the situation where most people will face at some point.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [DoSomething] public MyClass MyProperty { get; set; } \n`}</code></pre>\n    <p>{`Let say you have a template that display multiple information from your view model (in the example above \"MyClass\"). If this one require to display something more (or less) depending of who use it, and that the view model know this information, the only way to pass this information is by data annotation.`}</p>\n    <p>{`Let's base the theory on the following example. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [DisableShape(\"Heavy\")] [UIHint(\"ShapeSelector\")] public Shape TopShape { get; set; } [UIHint(\"ShapeSelector\")] public Shape BottomShape { get; set; } \n`}</code></pre>\n    <p>{`The view model class has two properties which define 2 shapes. One must be selected from a list of shape but only accept light shape while the other require to have strong shape. We could create two templates but we could also create a simple template and allow to disable some shape. This is the case of the property \"TopShape\" where we will disable all heavy shape but keep everything selectable for the \"BottomShape\".`}</p>\n    <p>{`The first thing to keep in mind is that we will change \"ModelMetadataProviders\" of MVC to use a custom one when we will be able to add multiple attribute for the whole application. Since we do not want to bind a single attribute we will create a custom meta data provider.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class CustomModelMetadataProvider : DataAnnotationsModelMetadataProvider { protected override ModelMetadata CreateMetadata( IEnumerable<Attribute> attributes, Type containerType, Func<object> modelAccessor, Type modelType, string propertyName) { var modelMetadata = base.CreateMetadata(attributes, containerType, modelAccessor, modelType, propertyName); attributes.OfType<MetadataAttribute>().ToList().ForEach(x => x.Process(modelMetadata)); return modelMetadata; } } \n`}</code></pre>\n    <p>{`This code lets you have multiple attributes of type \"MetadataAttribute\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public abstract class MetadataAttribute : Attribute { public abstract void Process(ModelMetadata modelMetaData); } } \n`}</code></pre>\n    <p>{`As you can see, it's simply an abstract class that lets you define a Process method which is executed in the CreateMetadata method.`}</p>\n    <p>{`From there, you can define what parameter you want for your custom attribute.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class DisableShapeAttribute : MetadataAttribute { public bool TypeShape { get; set; } public DisableShapeAttribute(string type) { TypeShape = type; }\n\npublic DisableShapeAttribute() { TypeShape = \"\"; }\n\npublic override void Process(ModelMetadata modelMetaData) { modelMetaData.AdditionalValues.Add(\"DisableShape\", TypeShape); } } \n`}</code></pre>\n    <p>{`The last step is to register the CustomModelMetadataProvider that loop every MetadataAttribute. This is done via the Global.asax.cs, inside the Application_Start method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` ModelMetadataProviders.Current = new CustomModelMetadataProvider(); \n`}</code></pre>\n    <p>{`From here you can read the attribute from your view or template.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var attr = ViewData.ModelMetadata.AdditionalValues.SingleOrDefault(x => x.Key == \"DisableShape\").Value; var attrValue = attr != null && (string)attr; \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}