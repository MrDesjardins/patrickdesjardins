{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-586551f8fa6e6e83c40b2607c19ff5cb--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When you are using Entity Framework and want to pass a query string manually, you have to use SELECT VALUE XXX FROM ... why? This is a good question and often we see SELECT VALUE Q FROM, why Q? In fact, it can be anything but a single word. ESQL allow to do a select with a row wrapper or without. When using VALUE, it adds a wrapper which create a return of a materialized data record. Entity Framework handle this materialized data record to bind the result into a context object. Without the VALUE, you do not have any wrapper and you get back a set of rows.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":562,"offset":562},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":562,"offset":562},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example with SELECT VALUE. We receive a strongly typed set of object. ","position":{"start":{"line":4,"column":1,"offset":564},"end":{"line":4,"column":82,"offset":645},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":564},"end":{"line":4,"column":82,"offset":645},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string queryString = \"SELECT VALUE q from table1.attr1 as q\"; ObjectQuery<T> query = context.CreateQuery<T>(queryString); ","position":{"start":{"line":5,"column":1,"offset":646},"end":{"line":7,"column":4,"offset":783},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also specify which field you return if you do not want every fields. ","position":{"start":{"line":9,"column":1,"offset":785},"end":{"line":9,"column":78,"offset":862},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":785},"end":{"line":9,"column":78,"offset":862},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string queryString = \"SELECT VALUE row (q.Field1 as Field1, q.Field2 as Field2) from table1.attr1 as q)\"; ObjectQuery<T> query = context.CreateQuery<T>(queryString); \n``` This time, the keyword \"row\" is required because it's a reserved keyword by ESQL. ROW constructs an anonymous value.\n\nAnd an example that return a set of rows. As you can see, we have a DbDataRecord.\n\n\n```csharp\n string queryString = \"SELECT q table1.attr1 as q\"; ObjectQuery<DbDataRecord> query = context.CreateQuery<DbDataRecord>(queryString); ","position":{"start":{"line":10,"column":1,"offset":863},"end":{"line":19,"column":4,"offset":1395},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Most of the time, you will use the SELECT VALUE q FROM ... The use of ESQL must be as low as you can because it opens a door to have SQL Query inside your code, which the ORM is there to abstract. Nevertheless, sometime, for optimization, ESQL is perfect.","position":{"start":{"line":21,"column":1,"offset":1397},"end":{"line":21,"column":256,"offset":1652},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1397},"end":{"line":21,"column":256,"offset":1652},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework SELECT VALUE Q with ESQL, why?\",\"date\":\"2013-11-18\",\"categories\":[\"entity-framework\",\"linq\"]}","position":{"start":{"line":24,"column":1,"offset":1655},"end":{"line":24,"column":149,"offset":1803},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":24,"column":149,"offset":1803}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework SELECT VALUE Q with ESQL, why?\",\n  \"date\": \"2013-11-18\",\n  \"categories\": [\"entity-framework\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you are using Entity Framework and want to pass a query string manually, you have to use SELECT VALUE XXX FROM ... why? This is a good question and often we see SELECT VALUE Q FROM, why Q? In fact, it can be anything but a single word. ESQL allow to do a select with a row wrapper or without. When using VALUE, it adds a wrapper which create a return of a materialized data record. Entity Framework handle this materialized data record to bind the result into a context object. Without the VALUE, you do not have any wrapper and you get back a set of rows.\"), mdx(\"p\", null, \"Here is an example with SELECT VALUE. We receive a strongly typed set of object. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string queryString = \\\"SELECT VALUE q from table1.attr1 as q\\\"; ObjectQuery<T> query = context.CreateQuery<T>(queryString); \\n\")), mdx(\"p\", null, \"You can also specify which field you return if you do not want every fields. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string queryString = \\\"SELECT VALUE row (q.Field1 as Field1, q.Field2 as Field2) from table1.attr1 as q)\\\"; ObjectQuery<T> query = context.CreateQuery<T>(queryString); \\n``` This time, the keyword \\\"row\\\" is required because it's a reserved keyword by ESQL. ROW constructs an anonymous value.\\n\\nAnd an example that return a set of rows. As you can see, we have a DbDataRecord.\\n\\n\\n```csharp\\n string queryString = \\\"SELECT q table1.attr1 as q\\\"; ObjectQuery<DbDataRecord> query = context.CreateQuery<DbDataRecord>(queryString); \\n\")), mdx(\"p\", null, \"Most of the time, you will use the SELECT VALUE q FROM ... The use of ESQL must be as low as you can because it opens a door to have SQL Query inside your code, which the ORM is there to abstract. Nevertheless, sometime, for optimization, ESQL is perfect.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework SELECT VALUE Q with ESQL, why?\",\n  \"date\": \"2013-11-18\",\n  \"categories\": [\"entity-framework\", \"linq\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When you are using Entity Framework and want to pass a query string manually, you have to use SELECT VALUE XXX FROM ... why? This is a good question and often we see SELECT VALUE Q FROM, why Q? In fact, it can be anything but a single word. ESQL allow to do a select with a row wrapper or without. When using VALUE, it adds a wrapper which create a return of a materialized data record. Entity Framework handle this materialized data record to bind the result into a context object. Without the VALUE, you do not have any wrapper and you get back a set of rows.`}</p>\n    <p>{`Here is an example with SELECT VALUE. We receive a strongly typed set of object. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string queryString = \"SELECT VALUE q from table1.attr1 as q\"; ObjectQuery<T> query = context.CreateQuery<T>(queryString); \n`}</code></pre>\n    <p>{`You can also specify which field you return if you do not want every fields. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string queryString = \"SELECT VALUE row (q.Field1 as Field1, q.Field2 as Field2) from table1.attr1 as q)\"; ObjectQuery<T> query = context.CreateQuery<T>(queryString); \n\\`\\`\\` This time, the keyword \"row\" is required because it's a reserved keyword by ESQL. ROW constructs an anonymous value.\n\nAnd an example that return a set of rows. As you can see, we have a DbDataRecord.\n\n\n\\`\\`\\`csharp\n string queryString = \"SELECT q table1.attr1 as q\"; ObjectQuery<DbDataRecord> query = context.CreateQuery<DbDataRecord>(queryString); \n`}</code></pre>\n    <p>{`Most of the time, you will use the SELECT VALUE q FROM ... The use of ESQL must be as low as you can because it opens a door to have SQL Query inside your code, which the ORM is there to abstract. Nevertheless, sometime, for optimization, ESQL is perfect.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}