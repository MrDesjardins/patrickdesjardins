{"expireTime":9007200886478396000,"key":"gatsby-plugin-mdx-entire-payload-d3c1845029e072d542712daaf4efeea0--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you are using the Data Annotation with Asp.Net MVC you might need to localize the message from these annotation.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":116,"offset":116},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":116,"offset":116},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example:","position":{"start":{"line":4,"column":1,"offset":118},"end":{"line":4,"column":20,"offset":137},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":118},"end":{"line":4,"column":20,"offset":137},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Person { [Required(ErrorMessage=\"FirstName is required\")] public string FirstName { get; set; } //... } ","position":{"start":{"line":7,"column":1,"offset":140},"end":{"line":9,"column":4,"offset":272},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to have the Data Annotation translated in many languages, you should use two others properties that are : ","position":{"start":{"line":11,"column":1,"offset":274},"end":{"line":11,"column":119,"offset":392},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ErrorMessageResourceType","position":{"start":{"line":11,"column":121,"offset":394},"end":{"line":11,"column":145,"offset":418},"indent":[]}}],"position":{"start":{"line":11,"column":119,"offset":392},"end":{"line":11,"column":147,"offset":420},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":11,"column":147,"offset":420},"end":{"line":11,"column":152,"offset":425},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ErrorMessageResourceName","position":{"start":{"line":11,"column":154,"offset":427},"end":{"line":11,"column":178,"offset":451},"indent":[]}}],"position":{"start":{"line":11,"column":152,"offset":425},"end":{"line":11,"column":180,"offset":453},"indent":[]}},{"type":"text","value":". This will let you specify the resource type and the resouce name which is the key of inside the resource file.","position":{"start":{"line":11,"column":180,"offset":453},"end":{"line":11,"column":292,"offset":565},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":274},"end":{"line":11,"column":292,"offset":565},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class Person { [Required(ErrorMessageResourceType=typeof(MyResourcesNameSpace.ResourcesFile), ErrorMessageResourceName=\"FirstNameRequiredKey\")] public string FirstName { get; set; } //... } ","position":{"start":{"line":14,"column":1,"offset":568},"end":{"line":16,"column":4,"offset":780},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This way, you will have your application localized from the Model to the View without any problem.","position":{"start":{"line":18,"column":1,"offset":782},"end":{"line":18,"column":99,"offset":880},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":782},"end":{"line":18,"column":99,"offset":880},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to localize data attribute in MVC3?\",\"date\":\"2012-04-29\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":21,"column":1,"offset":883},"end":{"line":21,"column":125,"offset":1007},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":125,"offset":1007}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to localize data attribute in MVC3?\",\n  \"date\": \"2012-04-29\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using the Data Annotation with Asp.Net MVC you might need to localize the message from these annotation.\"), mdx(\"p\", null, \"Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Person { [Required(ErrorMessage=\\\"FirstName is required\\\")] public string FirstName { get; set; } //... } \\n\")), mdx(\"p\", null, \"If you want to have the Data Annotation translated in many languages, you should use two others properties that are : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ErrorMessageResourceType\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ErrorMessageResourceName\"), \". This will let you specify the resource type and the resouce name which is the key of inside the resource file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class Person { [Required(ErrorMessageResourceType=typeof(MyResourcesNameSpace.ResourcesFile), ErrorMessageResourceName=\\\"FirstNameRequiredKey\\\")] public string FirstName { get; set; } //... } \\n\")), mdx(\"p\", null, \"This way, you will have your application localized from the Model to the View without any problem.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to localize data attribute in MVC3?\",\n  \"date\": \"2012-04-29\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you are using the Data Annotation with Asp.Net MVC you might need to localize the message from these annotation.`}</p>\n    <p>{`Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Person { [Required(ErrorMessage=\"FirstName is required\")] public string FirstName { get; set; } //... } \n`}</code></pre>\n    <p>{`If you want to have the Data Annotation translated in many languages, you should use two others properties that are : `}<strong parentName=\"p\">{`ErrorMessageResourceType`}</strong>{` and `}<strong parentName=\"p\">{`ErrorMessageResourceName`}</strong>{`. This will let you specify the resource type and the resouce name which is the key of inside the resource file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class Person { [Required(ErrorMessageResourceType=typeof(MyResourcesNameSpace.ResourcesFile), ErrorMessageResourceName=\"FirstNameRequiredKey\")] public string FirstName { get; set; } //... } \n`}</code></pre>\n    <p>{`This way, you will have your application localized from the Model to the View without any problem.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}