{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-b0f96d0caea9b0ad532d5bc4d8e1f7f7--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Redux is a simple data flow that many React developers are using. Recently, Redux introduced the option to be able to shim a callback function when the Redux store send the notification that its state has changed. This is great because it allows us to perform logic between the store and to connected components. This possibility is so much more important if you are not keeping calculated values in the store and only normalized value as well. A good pattern is to denormalized the value into rich objects in the mapping, as well as performing logic on the data just before rending the object. However, this comes at a cost that can be saved if we knew that the information is not complete or that some crucial pieces are not fully loaded yet. A common scenario is that you are waiting for several Ajax call to finish and once all the data in the store to perform a visual update.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":882,"offset":882},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":882,"offset":882},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To be able to use the following code, you must have Redux version 5 and above. The ","position":{"start":{"line":4,"column":1,"offset":884},"end":{"line":4,"column":84,"offset":967},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/reactjs/react-redux/blob/HEAD/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options","children":[{"type":"text","value":"Redux Connect API","position":{"start":{"line":4,"column":85,"offset":968},"end":{"line":4,"column":102,"offset":985},"indent":[]}}],"position":{"start":{"line":4,"column":84,"offset":967},"end":{"line":4,"column":226,"offset":1109},"indent":[]}},{"type":"text","value":" contains multiple options and the one we need is ","position":{"start":{"line":4,"column":226,"offset":1109},"end":{"line":4,"column":276,"offset":1159},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"areStatesEqual","position":{"start":{"line":4,"column":278,"offset":1161},"end":{"line":4,"column":292,"offset":1175},"indent":[]}}],"position":{"start":{"line":4,"column":276,"offset":1159},"end":{"line":4,"column":294,"offset":1177},"indent":[]}},{"type":"text","value":". The method is hidden under the forth parameters of ","position":{"start":{"line":4,"column":294,"offset":1177},"end":{"line":4,"column":347,"offset":1230},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"connect","position":{"start":{"line":4,"column":349,"offset":1232},"end":{"line":4,"column":356,"offset":1239},"indent":[]}}],"position":{"start":{"line":4,"column":347,"offset":1230},"end":{"line":4,"column":358,"offset":1241},"indent":[]}},{"type":"text","value":" as a member of an option object.","position":{"start":{"line":4,"column":358,"offset":1241},"end":{"line":4,"column":391,"offset":1274},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":884},"end":{"line":4,"column":391,"offset":1274},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Usually, you may have used connect the following way, but you can now use the latter one to have a custom function to evaluate the equality of the data.","position":{"start":{"line":6,"column":1,"offset":1276},"end":{"line":6,"column":153,"offset":1428},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1276},"end":{"line":6,"column":153,"offset":1428},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"// Before:\nexport default connect(mapStateToProps, mapDispatchToProps)(YourControl);\n// After:\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  (stateProps, dispatchProps, ownProps) =>\n    Object.assign({}, ownProps, stateProps, dispatchProps),\n  { pure: true, areStatesEqual: shouldMappingBeSkipped }\n)(YourControl);","position":{"start":{"line":8,"column":1,"offset":1430},"end":{"line":19,"column":4,"offset":1783},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The third parameter is marked as optional in the documentation, but at this day, the newest definition file of Redux for TypeScript, make it required, hence here is the default merging code which merges the own props with the state and dispatch props. The fourth parameter is where you can insert your own logic. The first step is that you need to specify that the store is pure. The second is to define a function. The function has two parameters which are the previous Redux store and the next store. This lets you do a comparison to determine if you should or not allow the notification to re-render. You can also only rely on the next store to see if the data desired is present. As you see, the function is named \"areStatesEqual\" and not \"shouldUpdate\". So, if your function returns true, it means that the two states are equal, hence do not need to send the notification to update. It means that you must return true if you need to not send a signal to render and false if you want to send a signal to re-render.","position":{"start":{"line":21,"column":1,"offset":1785},"end":{"line":21,"column":1019,"offset":2803},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1785},"end":{"line":21,"column":1019,"offset":2803},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You may draw a parallel between React and its \"shouldComponentUpdate\" method that allow skipping rendering depending on the previous and current properties. That is very similar. The major difference is that you can intercept it earlier in the data flow. The main advantage is performance improvement by not computing data from the store to the component if this one doesn't need it.","position":{"start":{"line":23,"column":1,"offset":2805},"end":{"line":23,"column":384,"offset":3188},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2805},"end":{"line":23,"column":384,"offset":3188},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"// Won't notify a change from the store to React if no active id, or no entity loaded, or that the one we would display is not present.\nexport function shouldMappingBeSkipped(\n  nextState: AppReduxState,\n  previous: AppReduxState\n): boolean {\n  return (\n    nextState.entitiesX.activeId === undefined ||\n    Object.keys(nextState.entitiesX.all).length === 0 ||\n    nextState.entitiesX.all[nextState.entitiesX.activeId] === undefined\n  );\n}","position":{"start":{"line":25,"column":1,"offset":3190},"end":{"line":37,"column":4,"offset":3647},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Recently, I have incorporated the ","position":{"start":{"line":39,"column":1,"offset":3649},"end":{"line":39,"column":35,"offset":3683},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"areStateEqual","position":{"start":{"line":39,"column":37,"offset":3685},"end":{"line":39,"column":50,"offset":3698},"indent":[]}}],"position":{"start":{"line":39,"column":35,"offset":3683},"end":{"line":39,"column":52,"offset":3700},"indent":[]}},{"type":"text","value":" and I have seen a reduction of mapping between 30% to 75%. You can see a big gain if you have deep normalized objects or advanced filtering and sorting capabilities on grids. By avoiding to recompute for no reason, the application is more responsive.","position":{"start":{"line":39,"column":52,"offset":3700},"end":{"line":39,"column":303,"offset":3951},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":3649},"end":{"line":39,"column":303,"offset":3951},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Optimizing Redux Store Mapping\",\"date\":\"2017-12-05\",\"categories\":[\"react\",\"redux\",\"typescript\"]}","position":{"start":{"line":42,"column":1,"offset":3954},"end":{"line":42,"column":135,"offset":4088},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":42,"column":135,"offset":4088}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Optimizing Redux Store Mapping\",\n  \"date\": \"2017-12-05\",\n  \"categories\": [\"react\", \"redux\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Redux is a simple data flow that many React developers are using. Recently, Redux introduced the option to be able to shim a callback function when the Redux store send the notification that its state has changed. This is great because it allows us to perform logic between the store and to connected components. This possibility is so much more important if you are not keeping calculated values in the store and only normalized value as well. A good pattern is to denormalized the value into rich objects in the mapping, as well as performing logic on the data just before rending the object. However, this comes at a cost that can be saved if we knew that the information is not complete or that some crucial pieces are not fully loaded yet. A common scenario is that you are waiting for several Ajax call to finish and once all the data in the store to perform a visual update.\"), mdx(\"p\", null, \"To be able to use the following code, you must have Redux version 5 and above. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/reactjs/react-redux/blob/HEAD/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\"\n  }, \"Redux Connect API\"), \" contains multiple options and the one we need is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"areStatesEqual\"), \". The method is hidden under the forth parameters of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"connect\"), \" as a member of an option object.\"), mdx(\"p\", null, \"Usually, you may have used connect the following way, but you can now use the latter one to have a custom function to evaluate the equality of the data.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// Before:\\nexport default connect(mapStateToProps, mapDispatchToProps)(YourControl);\\n// After:\\nexport default connect(\\n  mapStateToProps,\\n  mapDispatchToProps,\\n  (stateProps, dispatchProps, ownProps) =>\\n    Object.assign({}, ownProps, stateProps, dispatchProps),\\n  { pure: true, areStatesEqual: shouldMappingBeSkipped }\\n)(YourControl);\\n\")), mdx(\"p\", null, \"The third parameter is marked as optional in the documentation, but at this day, the newest definition file of Redux for TypeScript, make it required, hence here is the default merging code which merges the own props with the state and dispatch props. The fourth parameter is where you can insert your own logic. The first step is that you need to specify that the store is pure. The second is to define a function. The function has two parameters which are the previous Redux store and the next store. This lets you do a comparison to determine if you should or not allow the notification to re-render. You can also only rely on the next store to see if the data desired is present. As you see, the function is named \\\"areStatesEqual\\\" and not \\\"shouldUpdate\\\". So, if your function returns true, it means that the two states are equal, hence do not need to send the notification to update. It means that you must return true if you need to not send a signal to render and false if you want to send a signal to re-render.\"), mdx(\"p\", null, \"You may draw a parallel between React and its \\\"shouldComponentUpdate\\\" method that allow skipping rendering depending on the previous and current properties. That is very similar. The major difference is that you can intercept it earlier in the data flow. The main advantage is performance improvement by not computing data from the store to the component if this one doesn't need it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// Won't notify a change from the store to React if no active id, or no entity loaded, or that the one we would display is not present.\\nexport function shouldMappingBeSkipped(\\n  nextState: AppReduxState,\\n  previous: AppReduxState\\n): boolean {\\n  return (\\n    nextState.entitiesX.activeId === undefined ||\\n    Object.keys(nextState.entitiesX.all).length === 0 ||\\n    nextState.entitiesX.all[nextState.entitiesX.activeId] === undefined\\n  );\\n}\\n\")), mdx(\"p\", null, \"Recently, I have incorporated the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"areStateEqual\"), \" and I have seen a reduction of mapping between 30% to 75%. You can see a big gain if you have deep normalized objects or advanced filtering and sorting capabilities on grids. By avoiding to recompute for no reason, the application is more responsive.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Optimizing Redux Store Mapping\",\n  \"date\": \"2017-12-05\",\n  \"categories\": [\"react\", \"redux\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Redux is a simple data flow that many React developers are using. Recently, Redux introduced the option to be able to shim a callback function when the Redux store send the notification that its state has changed. This is great because it allows us to perform logic between the store and to connected components. This possibility is so much more important if you are not keeping calculated values in the store and only normalized value as well. A good pattern is to denormalized the value into rich objects in the mapping, as well as performing logic on the data just before rending the object. However, this comes at a cost that can be saved if we knew that the information is not complete or that some crucial pieces are not fully loaded yet. A common scenario is that you are waiting for several Ajax call to finish and once all the data in the store to perform a visual update.`}</p>\n    <p>{`To be able to use the following code, you must have Redux version 5 and above. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reactjs/react-redux/blob/HEAD/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\"\n      }}>{`Redux Connect API`}</a>{` contains multiple options and the one we need is `}<strong parentName=\"p\">{`areStatesEqual`}</strong>{`. The method is hidden under the forth parameters of `}<strong parentName=\"p\">{`connect`}</strong>{` as a member of an option object.`}</p>\n    <p>{`Usually, you may have used connect the following way, but you can now use the latter one to have a custom function to evaluate the equality of the data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Before:\nexport default connect(mapStateToProps, mapDispatchToProps)(YourControl);\n// After:\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  (stateProps, dispatchProps, ownProps) =>\n    Object.assign({}, ownProps, stateProps, dispatchProps),\n  { pure: true, areStatesEqual: shouldMappingBeSkipped }\n)(YourControl);\n`}</code></pre>\n    <p>{`The third parameter is marked as optional in the documentation, but at this day, the newest definition file of Redux for TypeScript, make it required, hence here is the default merging code which merges the own props with the state and dispatch props. The fourth parameter is where you can insert your own logic. The first step is that you need to specify that the store is pure. The second is to define a function. The function has two parameters which are the previous Redux store and the next store. This lets you do a comparison to determine if you should or not allow the notification to re-render. You can also only rely on the next store to see if the data desired is present. As you see, the function is named \"areStatesEqual\" and not \"shouldUpdate\". So, if your function returns true, it means that the two states are equal, hence do not need to send the notification to update. It means that you must return true if you need to not send a signal to render and false if you want to send a signal to re-render.`}</p>\n    <p>{`You may draw a parallel between React and its \"shouldComponentUpdate\" method that allow skipping rendering depending on the previous and current properties. That is very similar. The major difference is that you can intercept it earlier in the data flow. The main advantage is performance improvement by not computing data from the store to the component if this one doesn't need it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Won't notify a change from the store to React if no active id, or no entity loaded, or that the one we would display is not present.\nexport function shouldMappingBeSkipped(\n  nextState: AppReduxState,\n  previous: AppReduxState\n): boolean {\n  return (\n    nextState.entitiesX.activeId === undefined ||\n    Object.keys(nextState.entitiesX.all).length === 0 ||\n    nextState.entitiesX.all[nextState.entitiesX.activeId] === undefined\n  );\n}\n`}</code></pre>\n    <p>{`Recently, I have incorporated the `}<strong parentName=\"p\">{`areStateEqual`}</strong>{` and I have seen a reduction of mapping between 30% to 75%. You can see a big gain if you have deep normalized objects or advanced filtering and sorting capabilities on grids. By avoiding to recompute for no reason, the application is more responsive.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}