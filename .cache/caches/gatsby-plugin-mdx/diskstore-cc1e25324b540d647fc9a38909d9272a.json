{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-e6ad8accc8ae82eb773d924a2e147881--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"TypeScript allows you to use EcmaScript import syntax to bring code from another file, or multiple files. This is very useful if you do not want to have all your code into a single file, or if you want to reuse code in different files.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":236,"offset":236},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":236,"offset":236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, let's have 2 files. app.ts and fileToInclude.ts which will contain a class that we want to use in App.ts.","position":{"start":{"line":4,"column":1,"offset":238},"end":{"line":4,"column":119,"offset":356},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":238},"end":{"line":4,"column":119,"offset":356},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"//app.ts content: \nimport { ClassA } from \"fileToInclude\"\n\nconst a = new ClassA(); a.method1();\n\n//fileToInclude.ts content: \nexport class ClassA { \n  public method1(): void { \n    console.log(\"ClassA>method1\"); \n  } \n} ","position":{"start":{"line":6,"column":1,"offset":358},"end":{"line":18,"column":5,"offset":597},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, the way to import a class is to specify the class name and from which file to import it. On the other side, the class that you want to import must be marked as export to be imported. The export and import are not TypeScript specific, but something EcmaScript version 6 allows you to use instead of using a custom AMD loader library like Require.js.","position":{"start":{"line":20,"column":1,"offset":599},"end":{"line":20,"column":365,"offset":963},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":599},"end":{"line":20,"column":365,"offset":963},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So while this is supported since EcmaScript 6, some browser doesn't support this feature. However, with TypeScript, you can style use EcmaScript, except for module loading. So, if you compile using EcmaScript and go to Chrome you will end up with an unexpected error if you do not.","position":{"start":{"line":22,"column":1,"offset":965},"end":{"line":22,"column":282,"offset":1246},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":965},"end":{"line":22,"column":282,"offset":1246},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Uncaught SyntaxError: Unexpected token import","position":{"start":{"line":24,"column":3,"offset":1250},"end":{"line":24,"column":48,"offset":1295},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1250},"end":{"line":24,"column":48,"offset":1295},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1248},"end":{"line":24,"column":48,"offset":1295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By changing the target of the tsconfig.json to use a module loader the generated code will be using the module loader syntax instead of the EcmaScript syntax. A popular one is Require.js. to do so, the tsconfig.json file needs to have a module entry.","position":{"start":{"line":26,"column":1,"offset":1297},"end":{"line":26,"column":251,"offset":1547},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1297},"end":{"line":26,"column":251,"offset":1547},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"{ \n  \"compilerOptions\": { \n    \"sourceMap\": true, \n    \"target\": \"es6\", \n    \"module\": \"amd\", \n    \"outDir\": \"./Scripts/App\" \n    }, \n    \"include\": [ \"src/**/*\" ] } ","position":{"start":{"line":28,"column":1,"offset":1549},"end":{"line":37,"column":5,"offset":1734},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Without specifyin the module, the code generated was: ","position":{"start":{"line":39,"column":1,"offset":1736},"end":{"line":39,"column":55,"offset":1790},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1736},"end":{"line":39,"column":55,"offset":1790},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { ClassA } from \"./fileToInclude\"; \nconst a = new ClassA(); \na.method1(); ","position":{"start":{"line":41,"column":1,"offset":1792},"end":{"line":45,"column":5,"offset":1892},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With the module to AMD, this will output a JavaScript that will wrap the module with require. For example: ","position":{"start":{"line":47,"column":1,"offset":1894},"end":{"line":47,"column":108,"offset":2001},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1894},"end":{"line":47,"column":108,"offset":2001},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"define([\"require\", \"exports\", \"./fileToInclude\"], function (require, exports, fileToInclude_1) { \n  \"use strict\"; \n  var a = new fileToInclude_1.ClassA(); \n  a.method1(); \n}); ","position":{"start":{"line":49,"column":1,"offset":2003},"end":{"line":55,"column":5,"offset":2198},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, you cannot call directly the .js file in the .cshtml. Instead, we need to use the script tag with a src to requirejs and call a specific method to indicate which module to load (which file).","position":{"start":{"line":57,"column":1,"offset":2200},"end":{"line":57,"column":200,"offset":2399},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2200},"end":{"line":57,"column":200,"offset":2399},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"<script src=\"~/Scripts/require.js\"></script> \n<script> requirejs.config({ baseUrl: '/Scripts/App/' }); \nrequirejs(['app']); </script> ","position":{"start":{"line":59,"column":1,"offset":2401},"end":{"line":63,"column":5,"offset":2554},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In our case, we want to execute app.js, so we write \"app\" without the extension \".js\". However, before doing so, we need to setup require requirejs to know that the root of all JavaScript file are located into the Script folder.","position":{"start":{"line":65,"column":1,"offset":2556},"end":{"line":65,"column":229,"offset":2784},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2556},"end":{"line":65,"column":229,"offset":2784},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to use multiple TypeScript files\",\"date\":\"2017-02-07\",\"categories\":[\"asp-mvc\",\"typescript\"]}","position":{"start":{"line":68,"column":1,"offset":2787},"end":{"line":68,"column":135,"offset":2921},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":68,"column":135,"offset":2921}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use multiple TypeScript files\",\n  \"date\": \"2017-02-07\",\n  \"categories\": [\"asp-mvc\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TypeScript allows you to use EcmaScript import syntax to bring code from another file, or multiple files. This is very useful if you do not want to have all your code into a single file, or if you want to reuse code in different files.\"), mdx(\"p\", null, \"For example, let's have 2 files. app.ts and fileToInclude.ts which will contain a class that we want to use in App.ts.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"//app.ts content: \\nimport { ClassA } from \\\"fileToInclude\\\"\\n\\nconst a = new ClassA(); a.method1();\\n\\n//fileToInclude.ts content: \\nexport class ClassA { \\n  public method1(): void { \\n    console.log(\\\"ClassA>method1\\\"); \\n  } \\n} \\n\")), mdx(\"p\", null, \"As you can see, the way to import a class is to specify the class name and from which file to import it. On the other side, the class that you want to import must be marked as export to be imported. The export and import are not TypeScript specific, but something EcmaScript version 6 allows you to use instead of using a custom AMD loader library like Require.js.\"), mdx(\"p\", null, \"So while this is supported since EcmaScript 6, some browser doesn't support this feature. However, with TypeScript, you can style use EcmaScript, except for module loading. So, if you compile using EcmaScript and go to Chrome you will end up with an unexpected error if you do not.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Uncaught SyntaxError: Unexpected token import\")), mdx(\"p\", null, \"By changing the target of the tsconfig.json to use a module loader the generated code will be using the module loader syntax instead of the EcmaScript syntax. A popular one is Require.js. to do so, the tsconfig.json file needs to have a module entry.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{ \\n  \\\"compilerOptions\\\": { \\n    \\\"sourceMap\\\": true, \\n    \\\"target\\\": \\\"es6\\\", \\n    \\\"module\\\": \\\"amd\\\", \\n    \\\"outDir\\\": \\\"./Scripts/App\\\" \\n    }, \\n    \\\"include\\\": [ \\\"src/**/*\\\" ] } \\n\")), mdx(\"p\", null, \"Without specifyin the module, the code generated was: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { ClassA } from \\\"./fileToInclude\\\"; \\nconst a = new ClassA(); \\na.method1(); \\n\")), mdx(\"p\", null, \"With the module to AMD, this will output a JavaScript that will wrap the module with require. For example: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"define([\\\"require\\\", \\\"exports\\\", \\\"./fileToInclude\\\"], function (require, exports, fileToInclude_1) { \\n  \\\"use strict\\\"; \\n  var a = new fileToInclude_1.ClassA(); \\n  a.method1(); \\n}); \\n\")), mdx(\"p\", null, \"Finally, you cannot call directly the .js file in the .cshtml. Instead, we need to use the script tag with a src to requirejs and call a specific method to indicate which module to load (which file).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"<script src=\\\"~/Scripts/require.js\\\"></script> \\n<script> requirejs.config({ baseUrl: '/Scripts/App/' }); \\nrequirejs(['app']); </script> \\n\")), mdx(\"p\", null, \"In our case, we want to execute app.js, so we write \\\"app\\\" without the extension \\\".js\\\". However, before doing so, we need to setup require requirejs to know that the root of all JavaScript file are located into the Script folder.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to use multiple TypeScript files\",\n  \"date\": \"2017-02-07\",\n  \"categories\": [\"asp-mvc\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`TypeScript allows you to use EcmaScript import syntax to bring code from another file, or multiple files. This is very useful if you do not want to have all your code into a single file, or if you want to reuse code in different files.`}</p>\n    <p>{`For example, let's have 2 files. app.ts and fileToInclude.ts which will contain a class that we want to use in App.ts.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`//app.ts content: \nimport { ClassA } from \"fileToInclude\"\n\nconst a = new ClassA(); a.method1();\n\n//fileToInclude.ts content: \nexport class ClassA { \n  public method1(): void { \n    console.log(\"ClassA>method1\"); \n  } \n} \n`}</code></pre>\n    <p>{`As you can see, the way to import a class is to specify the class name and from which file to import it. On the other side, the class that you want to import must be marked as export to be imported. The export and import are not TypeScript specific, but something EcmaScript version 6 allows you to use instead of using a custom AMD loader library like Require.js.`}</p>\n    <p>{`So while this is supported since EcmaScript 6, some browser doesn't support this feature. However, with TypeScript, you can style use EcmaScript, except for module loading. So, if you compile using EcmaScript and go to Chrome you will end up with an unexpected error if you do not.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Uncaught SyntaxError: Unexpected token import`}</p>\n    </blockquote>\n    <p>{`By changing the target of the tsconfig.json to use a module loader the generated code will be using the module loader syntax instead of the EcmaScript syntax. A popular one is Require.js. to do so, the tsconfig.json file needs to have a module entry.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{ \n  \"compilerOptions\": { \n    \"sourceMap\": true, \n    \"target\": \"es6\", \n    \"module\": \"amd\", \n    \"outDir\": \"./Scripts/App\" \n    }, \n    \"include\": [ \"src/**/*\" ] } \n`}</code></pre>\n    <p>{`Without specifyin the module, the code generated was: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { ClassA } from \"./fileToInclude\"; \nconst a = new ClassA(); \na.method1(); \n`}</code></pre>\n    <p>{`With the module to AMD, this will output a JavaScript that will wrap the module with require. For example: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`define([\"require\", \"exports\", \"./fileToInclude\"], function (require, exports, fileToInclude_1) { \n  \"use strict\"; \n  var a = new fileToInclude_1.ClassA(); \n  a.method1(); \n}); \n`}</code></pre>\n    <p>{`Finally, you cannot call directly the .js file in the .cshtml. Instead, we need to use the script tag with a src to requirejs and call a specific method to indicate which module to load (which file).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`<script src=\"~/Scripts/require.js\"></script> \n<script> requirejs.config({ baseUrl: '/Scripts/App/' }); \nrequirejs(['app']); </script> \n`}</code></pre>\n    <p>{`In our case, we want to execute app.js, so we write \"app\" without the extension \".js\". However, before doing so, we need to setup require requirejs to know that the root of all JavaScript file are located into the Script folder.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}