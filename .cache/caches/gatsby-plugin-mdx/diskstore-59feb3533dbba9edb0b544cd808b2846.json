{"expireTime":9007200886478391000,"key":"gatsby-plugin-mdx-entire-payload-e72dd747bd4085b5d8087bfdd84d29a3--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When manipulating data with Entity Framework and the context, you are changing the state of the entity. For example, if you insert a new entity, the state will be to \"Added\". This article will show you all context operation that change the entity state and will show you that you can do what most of the operation do by simply changing manually the state of the entity.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":370,"offset":370},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":370,"offset":370},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before going deeper with the operation, let see all states. You can get the list of states by going into ","position":{"start":{"line":4,"column":1,"offset":372},"end":{"line":4,"column":106,"offset":477},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"EntityState","position":{"start":{"line":4,"column":108,"offset":479},"end":{"line":4,"column":119,"offset":490},"indent":[]}}],"position":{"start":{"line":4,"column":106,"offset":477},"end":{"line":4,"column":121,"offset":492},"indent":[]}},{"type":"text","value":" class of System.Data.","position":{"start":{"line":4,"column":121,"offset":492},"end":{"line":4,"column":143,"offset":514},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":372},"end":{"line":4,"column":143,"offset":514},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" namespace System.Data { [BindableType(IsBindable = false)] [Flags] public enum EntityState { Detached = 1, Unchanged = 2, Added = 4, Deleted = 8, Modified = 16, } } ","position":{"start":{"line":7,"column":1,"offset":517},"end":{"line":9,"column":4,"offset":697},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":11,"column":1,"offset":699},"end":{"line":11,"column":5,"offset":703},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Detached","position":{"start":{"line":11,"column":7,"offset":705},"end":{"line":11,"column":15,"offset":713},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":703},"end":{"line":11,"column":17,"offset":715},"indent":[]}},{"type":"text","value":" state is when an object is not yet attached to Entity Framework's context. By default, if you create a new instance of a class, this one is not attached. Another way to be detached is when you delete an entity. This one will be deleted from the database by Entity Framework but the object reference remains in your code. This one will be back to detached. Having said that, moving back to detached won't delete the entity but won't make Entity Framework knows about it. We could also manually set the entry to detached to have this one not tracked.","position":{"start":{"line":11,"column":17,"offset":715},"end":{"line":11,"column":566,"offset":1264},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":699},"end":{"line":11,"column":566,"offset":1264},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = context.Categories.Find(id); context.Categories.Remove(category); context.SaveChanges(); // Will delete and set category as detached //Is the same as var category = context.Categories.Find(id); context.Entry(category).State = EntityState.Detached; context.SaveChanges(); // Will do nothing in the database because it's detached and it would required to be \"Deleted\" to be deleted. ","position":{"start":{"line":14,"column":1,"offset":1267},"end":{"line":16,"column":4,"offset":1678},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example above call ","position":{"start":{"line":18,"column":1,"offset":1680},"end":{"line":18,"column":24,"offset":1703},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Remove","position":{"start":{"line":18,"column":26,"offset":1705},"end":{"line":18,"column":32,"offset":1711},"indent":[]}}],"position":{"start":{"line":18,"column":24,"offset":1703},"end":{"line":18,"column":34,"offset":1713},"indent":[]}},{"type":"text","value":" to delete the entity. When deleting the state goes from ","position":{"start":{"line":18,"column":34,"offset":1713},"end":{"line":18,"column":91,"offset":1770},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Added","position":{"start":{"line":18,"column":93,"offset":1772},"end":{"line":18,"column":98,"offset":1777},"indent":[]}}],"position":{"start":{"line":18,"column":91,"offset":1770},"end":{"line":18,"column":100,"offset":1779},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":18,"column":100,"offset":1779},"end":{"line":18,"column":104,"offset":1783},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Delete","position":{"start":{"line":18,"column":106,"offset":1785},"end":{"line":18,"column":112,"offset":1791},"indent":[]}}],"position":{"start":{"line":18,"column":104,"offset":1783},"end":{"line":18,"column":114,"offset":1793},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":18,"column":114,"offset":1793},"end":{"line":18,"column":118,"offset":1797},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Detached","position":{"start":{"line":18,"column":120,"offset":1799},"end":{"line":18,"column":128,"offset":1807},"indent":[]}}],"position":{"start":{"line":18,"column":118,"offset":1797},"end":{"line":18,"column":130,"offset":1809},"indent":[]}},{"type":"text","value":". So both code below are doing the same thing : delete the entity from the database. ","position":{"start":{"line":18,"column":130,"offset":1809},"end":{"line":18,"column":215,"offset":1894},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1680},"end":{"line":18,"column":215,"offset":1894},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = context.Categories.Find(id); context.Categories.Remove(category); context.SaveChanges(); //Is the same as var category = context.Categories.Find(id); context.Entry(category).State = EntityState.Deleted; context.SaveChanges(); ","position":{"start":{"line":19,"column":1,"offset":1895},"end":{"line":21,"column":4,"offset":2151},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":23,"column":1,"offset":2153},"end":{"line":23,"column":5,"offset":2157},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Unchanged","position":{"start":{"line":23,"column":7,"offset":2159},"end":{"line":23,"column":16,"offset":2168},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":2157},"end":{"line":23,"column":18,"offset":2170},"indent":[]}},{"type":"text","value":" state occur when the entity is tracked by Entity Framework's context but has not changed yet. You can have this state if you use the method Attach() or if you change the state with Entry(). ","position":{"start":{"line":23,"column":18,"offset":2170},"end":{"line":23,"column":209,"offset":2361},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2153},"end":{"line":23,"column":209,"offset":2361},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = new Category{Id=123}; context.Categories.Attach(category); context.SaveChanges(); //Is the same as var category = new Category{Id=123}; context.Entry(category).State = EntityState.Unchanged; context.SaveChanges(); ","position":{"start":{"line":24,"column":1,"offset":2362},"end":{"line":26,"column":4,"offset":2606},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":28,"column":1,"offset":2608},"end":{"line":28,"column":5,"offset":2612},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Added","position":{"start":{"line":28,"column":7,"offset":2614},"end":{"line":28,"column":12,"offset":2619},"indent":[]}}],"position":{"start":{"line":28,"column":5,"offset":2612},"end":{"line":28,"column":14,"offset":2621},"indent":[]}},{"type":"text","value":" state is synonym of insertion. When a new entity is added to the context, this one will be inserted into the database. In Entity Framework words, it's called Added. This can be done by using the ","position":{"start":{"line":28,"column":14,"offset":2621},"end":{"line":28,"column":210,"offset":2817},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Add","position":{"start":{"line":28,"column":212,"offset":2819},"end":{"line":28,"column":215,"offset":2822},"indent":[]}}],"position":{"start":{"line":28,"column":210,"offset":2817},"end":{"line":28,"column":217,"offset":2824},"indent":[]}},{"type":"text","value":" method or by changing the state to ","position":{"start":{"line":28,"column":217,"offset":2824},"end":{"line":28,"column":253,"offset":2860},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"EntityState.Added","position":{"start":{"line":28,"column":255,"offset":2862},"end":{"line":28,"column":272,"offset":2879},"indent":[]}}],"position":{"start":{"line":28,"column":253,"offset":2860},"end":{"line":28,"column":274,"offset":2881},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":28,"column":274,"offset":2881},"end":{"line":28,"column":276,"offset":2883},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2608},"end":{"line":28,"column":276,"offset":2883},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = new Category{Id=123}; context.Categories.Add(category); context.SaveChanges(); //Is the same as var category = new Category{Id=123}; context.Entry(category).State = EntityState.Added; context.SaveChanges(); ","position":{"start":{"line":29,"column":1,"offset":2884},"end":{"line":31,"column":4,"offset":3121},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, you can be ","position":{"start":{"line":33,"column":1,"offset":3123},"end":{"line":33,"column":21,"offset":3143},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Modified","position":{"start":{"line":33,"column":23,"offset":3145},"end":{"line":33,"column":31,"offset":3153},"indent":[]}}],"position":{"start":{"line":33,"column":21,"offset":3143},"end":{"line":33,"column":33,"offset":3155},"indent":[]}},{"type":"text","value":". This state will do an update to the property that has been changed. Once the update has been done by calling ","position":{"start":{"line":33,"column":33,"offset":3155},"end":{"line":33,"column":144,"offset":3266},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"SaveChanges","position":{"start":{"line":33,"column":146,"offset":3268},"end":{"line":33,"column":157,"offset":3279},"indent":[]}}],"position":{"start":{"line":33,"column":144,"offset":3266},"end":{"line":33,"column":159,"offset":3281},"indent":[]}},{"type":"text","value":", the state come back to attached ","position":{"start":{"line":33,"column":159,"offset":3281},"end":{"line":33,"column":193,"offset":3315},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3123},"end":{"line":33,"column":193,"offset":3315},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = context.Categories.Find(id); //State is to attached context.Categories.Update(category); //State is now updated context.SaveChanges(); //State is now attached //Is the same as var category = context.Categories.Find(id); //State is to attached context.Entry(category).State = EntityState.Modified; //State is now updated context.SaveChanges(); //State is now attached ","position":{"start":{"line":34,"column":1,"offset":3316},"end":{"line":36,"column":4,"offset":3713},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Without going in to much details you can handle modified state by using \"","position":{"start":{"line":38,"column":1,"offset":3715},"end":{"line":38,"column":74,"offset":3788},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ApplyCurrentValues","position":{"start":{"line":38,"column":76,"offset":3790},"end":{"line":38,"column":94,"offset":3808},"indent":[]}}],"position":{"start":{"line":38,"column":74,"offset":3788},"end":{"line":38,"column":96,"offset":3810},"indent":[]}},{"type":"text","value":"\". This will check the object passed by parameter and if changes are found will mark those properties with the new value and with the ","position":{"start":{"line":38,"column":96,"offset":3810},"end":{"line":38,"column":230,"offset":3944},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Modified","position":{"start":{"line":38,"column":232,"offset":3946},"end":{"line":38,"column":240,"offset":3954},"indent":[]}}],"position":{"start":{"line":38,"column":230,"offset":3944},"end":{"line":38,"column":242,"offset":3956},"indent":[]}},{"type":"text","value":" state.","position":{"start":{"line":38,"column":242,"offset":3956},"end":{"line":38,"column":249,"offset":3963},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":3715},"end":{"line":38,"column":249,"offset":3963},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = context.Categories.Attach(new Category { ID = categoryThatCameFromUserForm.ID }); context.Categories.ApplyCurrentValues(categoryThatCameFromUserForm); context.SaveChanges(); //State is now attached ","position":{"start":{"line":41,"column":1,"offset":3966},"end":{"line":43,"column":4,"offset":4194},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We could also specify manually which property that could have been changed with Entry method. ","position":{"start":{"line":45,"column":1,"offset":4196},"end":{"line":45,"column":95,"offset":4290},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":4196},"end":{"line":45,"column":95,"offset":4290},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var category = context.Categories.Attach(new Category { ID = categoryThatCameFromUserForm.ID }); context.Entry(category).Property(d=>d.Name).IsModified = true; context.SaveChanges(); //State is now attached ","position":{"start":{"line":46,"column":1,"offset":4291},"end":{"line":48,"column":4,"offset":4513},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To conclude, it's possible to handle Entity Framework's entities with several approaches. The method one, with operation, is perfect for simple case when the method two, with state, is better to have further control over what is modified and to create abstract level over Entity Framework if requires. For example, you could easily add some code that check if the Id is Null or not, if it's null to change the state to Added, otherwise to set the state to Modified.","position":{"start":{"line":50,"column":1,"offset":4515},"end":{"line":50,"column":466,"offset":4980},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":4515},"end":{"line":50,"column":466,"offset":4980},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Entity Framework context operations in perspective with their entry states\",\"date\":\"2013-05-27\",\"categories\":[\"entity-framework\"]}","position":{"start":{"line":53,"column":1,"offset":4983},"end":{"line":53,"column":169,"offset":5151},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":53,"column":169,"offset":5151}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework context operations in perspective with their entry states\",\n  \"date\": \"2013-05-27\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When manipulating data with Entity Framework and the context, you are changing the state of the entity. For example, if you insert a new entity, the state will be to \\\"Added\\\". This article will show you all context operation that change the entity state and will show you that you can do what most of the operation do by simply changing manually the state of the entity.\"), mdx(\"p\", null, \"Before going deeper with the operation, let see all states. You can get the list of states by going into \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"EntityState\"), \" class of System.Data.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" namespace System.Data { [BindableType(IsBindable = false)] [Flags] public enum EntityState { Detached = 1, Unchanged = 2, Added = 4, Deleted = 8, Modified = 16, } } \\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Detached\"), \" state is when an object is not yet attached to Entity Framework's context. By default, if you create a new instance of a class, this one is not attached. Another way to be detached is when you delete an entity. This one will be deleted from the database by Entity Framework but the object reference remains in your code. This one will be back to detached. Having said that, moving back to detached won't delete the entity but won't make Entity Framework knows about it. We could also manually set the entry to detached to have this one not tracked.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = context.Categories.Find(id); context.Categories.Remove(category); context.SaveChanges(); // Will delete and set category as detached //Is the same as var category = context.Categories.Find(id); context.Entry(category).State = EntityState.Detached; context.SaveChanges(); // Will do nothing in the database because it's detached and it would required to be \\\"Deleted\\\" to be deleted. \\n\")), mdx(\"p\", null, \"The example above call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Remove\"), \" to delete the entity. When deleting the state goes from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Added\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Delete\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Detached\"), \". So both code below are doing the same thing : delete the entity from the database. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = context.Categories.Find(id); context.Categories.Remove(category); context.SaveChanges(); //Is the same as var category = context.Categories.Find(id); context.Entry(category).State = EntityState.Deleted; context.SaveChanges(); \\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Unchanged\"), \" state occur when the entity is tracked by Entity Framework's context but has not changed yet. You can have this state if you use the method Attach() or if you change the state with Entry(). \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = new Category{Id=123}; context.Categories.Attach(category); context.SaveChanges(); //Is the same as var category = new Category{Id=123}; context.Entry(category).State = EntityState.Unchanged; context.SaveChanges(); \\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Added\"), \" state is synonym of insertion. When a new entity is added to the context, this one will be inserted into the database. In Entity Framework words, it's called Added. This can be done by using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add\"), \" method or by changing the state to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"EntityState.Added\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = new Category{Id=123}; context.Categories.Add(category); context.SaveChanges(); //Is the same as var category = new Category{Id=123}; context.Entry(category).State = EntityState.Added; context.SaveChanges(); \\n\")), mdx(\"p\", null, \"Finally, you can be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Modified\"), \". This state will do an update to the property that has been changed. Once the update has been done by calling \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SaveChanges\"), \", the state come back to attached \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = context.Categories.Find(id); //State is to attached context.Categories.Update(category); //State is now updated context.SaveChanges(); //State is now attached //Is the same as var category = context.Categories.Find(id); //State is to attached context.Entry(category).State = EntityState.Modified; //State is now updated context.SaveChanges(); //State is now attached \\n\")), mdx(\"p\", null, \"Without going in to much details you can handle modified state by using \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ApplyCurrentValues\"), \"\\\". This will check the object passed by parameter and if changes are found will mark those properties with the new value and with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Modified\"), \" state.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = context.Categories.Attach(new Category { ID = categoryThatCameFromUserForm.ID }); context.Categories.ApplyCurrentValues(categoryThatCameFromUserForm); context.SaveChanges(); //State is now attached \\n\")), mdx(\"p\", null, \"We could also specify manually which property that could have been changed with Entry method. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var category = context.Categories.Attach(new Category { ID = categoryThatCameFromUserForm.ID }); context.Entry(category).Property(d=>d.Name).IsModified = true; context.SaveChanges(); //State is now attached \\n\")), mdx(\"p\", null, \"To conclude, it's possible to handle Entity Framework's entities with several approaches. The method one, with operation, is perfect for simple case when the method two, with state, is better to have further control over what is modified and to create abstract level over Entity Framework if requires. For example, you could easily add some code that check if the Id is Null or not, if it's null to change the state to Added, otherwise to set the state to Modified.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Entity Framework context operations in perspective with their entry states\",\n  \"date\": \"2013-05-27\",\n  \"categories\": [\"entity-framework\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When manipulating data with Entity Framework and the context, you are changing the state of the entity. For example, if you insert a new entity, the state will be to \"Added\". This article will show you all context operation that change the entity state and will show you that you can do what most of the operation do by simply changing manually the state of the entity.`}</p>\n    <p>{`Before going deeper with the operation, let see all states. You can get the list of states by going into `}<strong parentName=\"p\">{`EntityState`}</strong>{` class of System.Data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` namespace System.Data { [BindableType(IsBindable = false)] [Flags] public enum EntityState { Detached = 1, Unchanged = 2, Added = 4, Deleted = 8, Modified = 16, } } \n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`Detached`}</strong>{` state is when an object is not yet attached to Entity Framework's context. By default, if you create a new instance of a class, this one is not attached. Another way to be detached is when you delete an entity. This one will be deleted from the database by Entity Framework but the object reference remains in your code. This one will be back to detached. Having said that, moving back to detached won't delete the entity but won't make Entity Framework knows about it. We could also manually set the entry to detached to have this one not tracked.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = context.Categories.Find(id); context.Categories.Remove(category); context.SaveChanges(); // Will delete and set category as detached //Is the same as var category = context.Categories.Find(id); context.Entry(category).State = EntityState.Detached; context.SaveChanges(); // Will do nothing in the database because it's detached and it would required to be \"Deleted\" to be deleted. \n`}</code></pre>\n    <p>{`The example above call `}<strong parentName=\"p\">{`Remove`}</strong>{` to delete the entity. When deleting the state goes from `}<strong parentName=\"p\">{`Added`}</strong>{` to `}<strong parentName=\"p\">{`Delete`}</strong>{` to `}<strong parentName=\"p\">{`Detached`}</strong>{`. So both code below are doing the same thing : delete the entity from the database. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = context.Categories.Find(id); context.Categories.Remove(category); context.SaveChanges(); //Is the same as var category = context.Categories.Find(id); context.Entry(category).State = EntityState.Deleted; context.SaveChanges(); \n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`Unchanged`}</strong>{` state occur when the entity is tracked by Entity Framework's context but has not changed yet. You can have this state if you use the method Attach() or if you change the state with Entry(). `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = new Category{Id=123}; context.Categories.Attach(category); context.SaveChanges(); //Is the same as var category = new Category{Id=123}; context.Entry(category).State = EntityState.Unchanged; context.SaveChanges(); \n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`Added`}</strong>{` state is synonym of insertion. When a new entity is added to the context, this one will be inserted into the database. In Entity Framework words, it's called Added. This can be done by using the `}<strong parentName=\"p\">{`Add`}</strong>{` method or by changing the state to `}<strong parentName=\"p\">{`EntityState.Added`}</strong>{`. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = new Category{Id=123}; context.Categories.Add(category); context.SaveChanges(); //Is the same as var category = new Category{Id=123}; context.Entry(category).State = EntityState.Added; context.SaveChanges(); \n`}</code></pre>\n    <p>{`Finally, you can be `}<strong parentName=\"p\">{`Modified`}</strong>{`. This state will do an update to the property that has been changed. Once the update has been done by calling `}<strong parentName=\"p\">{`SaveChanges`}</strong>{`, the state come back to attached `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = context.Categories.Find(id); //State is to attached context.Categories.Update(category); //State is now updated context.SaveChanges(); //State is now attached //Is the same as var category = context.Categories.Find(id); //State is to attached context.Entry(category).State = EntityState.Modified; //State is now updated context.SaveChanges(); //State is now attached \n`}</code></pre>\n    <p>{`Without going in to much details you can handle modified state by using \"`}<strong parentName=\"p\">{`ApplyCurrentValues`}</strong>{`\". This will check the object passed by parameter and if changes are found will mark those properties with the new value and with the `}<strong parentName=\"p\">{`Modified`}</strong>{` state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = context.Categories.Attach(new Category { ID = categoryThatCameFromUserForm.ID }); context.Categories.ApplyCurrentValues(categoryThatCameFromUserForm); context.SaveChanges(); //State is now attached \n`}</code></pre>\n    <p>{`We could also specify manually which property that could have been changed with Entry method. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var category = context.Categories.Attach(new Category { ID = categoryThatCameFromUserForm.ID }); context.Entry(category).Property(d=>d.Name).IsModified = true; context.SaveChanges(); //State is now attached \n`}</code></pre>\n    <p>{`To conclude, it's possible to handle Entity Framework's entities with several approaches. The method one, with operation, is perfect for simple case when the method two, with state, is better to have further control over what is modified and to create abstract level over Entity Framework if requires. For example, you could easily add some code that check if the Id is Null or not, if it's null to change the state to Added, otherwise to set the state to Modified.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}