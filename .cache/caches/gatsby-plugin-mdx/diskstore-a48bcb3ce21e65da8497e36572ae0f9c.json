{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-79b0ad66e5bb6225a3a8bf4b906d9e92--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Defining a private variable is a matter of using ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":50,"offset":50},"indent":[]}},{"type":"inlineCode","value":"var","position":{"start":{"line":2,"column":50,"offset":50},"end":{"line":2,"column":55,"offset":55},"indent":[]}},{"type":"text","value":" instead of ","position":{"start":{"line":2,"column":55,"offset":55},"end":{"line":2,"column":67,"offset":67},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":2,"column":67,"offset":67},"end":{"line":2,"column":73,"offset":73},"indent":[]}},{"type":"text","value":". This is true with every kind of members: variables or functions.","position":{"start":{"line":2,"column":73,"offset":73},"end":{"line":2,"column":139,"offset":139},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":139,"offset":139},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var MyClass = function (param1, param2) {\n  this.member1 = param1 || \"\"; // Public\n  var member2 = param2 || \"\"; // Private\n\n  // Private\n  var function1 = function () {\n    this.member1 = \"[\" + this.member1 + \"]\";\n    console.log(this.member1);\n  };\n\n  // Public\n  this.function2 = function () {\n    console.log(member2);\n  };\n};\n\nvar x = new MyClass(\"m1\", \"m2\");\nconsole.log(\"Access public member: \" + x.member1);\nx.function2();","position":{"start":{"line":4,"column":1,"offset":141},"end":{"line":24,"column":4,"offset":589},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above works, but if you try to access ","position":{"start":{"line":26,"column":1,"offset":591},"end":{"line":26,"column":48,"offset":638},"indent":[]}},{"type":"inlineCode","value":"member2","position":{"start":{"line":26,"column":48,"offset":638},"end":{"line":26,"column":57,"offset":647},"indent":[]}},{"type":"text","value":" you will get ","position":{"start":{"line":26,"column":57,"offset":647},"end":{"line":26,"column":71,"offset":661},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"undefined","position":{"start":{"line":26,"column":72,"offset":662},"end":{"line":26,"column":81,"offset":671},"indent":[]}}],"position":{"start":{"line":26,"column":71,"offset":661},"end":{"line":26,"column":82,"offset":672},"indent":[]}},{"type":"text","value":". If you try to access ","position":{"start":{"line":26,"column":82,"offset":672},"end":{"line":26,"column":105,"offset":695},"indent":[]}},{"type":"inlineCode","value":"function1","position":{"start":{"line":26,"column":105,"offset":695},"end":{"line":26,"column":116,"offset":706},"indent":[]}},{"type":"text","value":", you will get an exception that the function doesn't exist.","position":{"start":{"line":26,"column":116,"offset":706},"end":{"line":26,"column":176,"offset":766},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":591},"end":{"line":26,"column":176,"offset":766},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the following, code we introduce prototype function. While there is many advantages like that the function will be shared in memory across all instances. However, one drawback is that you cannot access private members of the class. In the example below, the function4 doesn't work because it tries to access a member initialized with ","position":{"start":{"line":28,"column":1,"offset":768},"end":{"line":28,"column":338,"offset":1105},"indent":[]}},{"type":"inlineCode","value":"var","position":{"start":{"line":28,"column":338,"offset":1105},"end":{"line":28,"column":343,"offset":1110},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":28,"column":343,"offset":1110},"end":{"line":28,"column":344,"offset":1111},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":768},"end":{"line":28,"column":344,"offset":1111},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var MyClass = function (param1, param2) {\n  this.member1 = param1 || \"\"; // Public\n  var member2 = param2 || \"\"; // Private\n\n  // Private\n  var function1 = function () {\n    this.member1 = \"[\" + this.member1 + \"]\";\n    console.log(this.member1);\n  };\n\n  // Public\n  this.function2 = function () {\n    console.log(member2);\n  };\n};\nMyClass.prototype.function3 = function () {\n  console.log(\"Function 3 Proto : \" + this.member1);\n};\nMyClass.prototype.function4 = function () {\n  console.log(\"Function 4 Proto : \" + this.member2);\n};\n\nvar x = new MyClass(\"m1\", \"m2\");\nx.function3(); // \"Function 3 Proto : m1\"\nx.function4(); // \"Function 4 Proto : undefined\"","position":{"start":{"line":30,"column":1,"offset":1113},"end":{"line":56,"column":4,"offset":1786},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Private Variable\",\"date\":\"2017-05-31\",\"categories\":[\"javascript\"]}","position":{"start":{"line":59,"column":1,"offset":1789},"end":{"line":59,"column":116,"offset":1904},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":116,"offset":1904}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Private Variable\",\n  \"date\": \"2017-05-31\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Defining a private variable is a matter of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \". This is true with every kind of members: variables or functions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var MyClass = function (param1, param2) {\\n  this.member1 = param1 || \\\"\\\"; // Public\\n  var member2 = param2 || \\\"\\\"; // Private\\n\\n  // Private\\n  var function1 = function () {\\n    this.member1 = \\\"[\\\" + this.member1 + \\\"]\\\";\\n    console.log(this.member1);\\n  };\\n\\n  // Public\\n  this.function2 = function () {\\n    console.log(member2);\\n  };\\n};\\n\\nvar x = new MyClass(\\\"m1\\\", \\\"m2\\\");\\nconsole.log(\\\"Access public member: \\\" + x.member1);\\nx.function2();\\n\")), mdx(\"p\", null, \"The code above works, but if you try to access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"member2\"), \" you will get \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"undefined\"), \". If you try to access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"function1\"), \", you will get an exception that the function doesn't exist.\"), mdx(\"p\", null, \"In the following, code we introduce prototype function. While there is many advantages like that the function will be shared in memory across all instances. However, one drawback is that you cannot access private members of the class. In the example below, the function4 doesn't work because it tries to access a member initialized with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var MyClass = function (param1, param2) {\\n  this.member1 = param1 || \\\"\\\"; // Public\\n  var member2 = param2 || \\\"\\\"; // Private\\n\\n  // Private\\n  var function1 = function () {\\n    this.member1 = \\\"[\\\" + this.member1 + \\\"]\\\";\\n    console.log(this.member1);\\n  };\\n\\n  // Public\\n  this.function2 = function () {\\n    console.log(member2);\\n  };\\n};\\nMyClass.prototype.function3 = function () {\\n  console.log(\\\"Function 3 Proto : \\\" + this.member1);\\n};\\nMyClass.prototype.function4 = function () {\\n  console.log(\\\"Function 4 Proto : \\\" + this.member2);\\n};\\n\\nvar x = new MyClass(\\\"m1\\\", \\\"m2\\\");\\nx.function3(); // \\\"Function 3 Proto : m1\\\"\\nx.function4(); // \\\"Function 4 Proto : undefined\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Private Variable\",\n  \"date\": \"2017-05-31\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Defining a private variable is a matter of using `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`. This is true with every kind of members: variables or functions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var MyClass = function (param1, param2) {\n  this.member1 = param1 || \"\"; // Public\n  var member2 = param2 || \"\"; // Private\n\n  // Private\n  var function1 = function () {\n    this.member1 = \"[\" + this.member1 + \"]\";\n    console.log(this.member1);\n  };\n\n  // Public\n  this.function2 = function () {\n    console.log(member2);\n  };\n};\n\nvar x = new MyClass(\"m1\", \"m2\");\nconsole.log(\"Access public member: \" + x.member1);\nx.function2();\n`}</code></pre>\n    <p>{`The code above works, but if you try to access `}<inlineCode parentName=\"p\">{`member2`}</inlineCode>{` you will get `}<em parentName=\"p\">{`undefined`}</em>{`. If you try to access `}<inlineCode parentName=\"p\">{`function1`}</inlineCode>{`, you will get an exception that the function doesn't exist.`}</p>\n    <p>{`In the following, code we introduce prototype function. While there is many advantages like that the function will be shared in memory across all instances. However, one drawback is that you cannot access private members of the class. In the example below, the function4 doesn't work because it tries to access a member initialized with `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var MyClass = function (param1, param2) {\n  this.member1 = param1 || \"\"; // Public\n  var member2 = param2 || \"\"; // Private\n\n  // Private\n  var function1 = function () {\n    this.member1 = \"[\" + this.member1 + \"]\";\n    console.log(this.member1);\n  };\n\n  // Public\n  this.function2 = function () {\n    console.log(member2);\n  };\n};\nMyClass.prototype.function3 = function () {\n  console.log(\"Function 3 Proto : \" + this.member1);\n};\nMyClass.prototype.function4 = function () {\n  console.log(\"Function 4 Proto : \" + this.member2);\n};\n\nvar x = new MyClass(\"m1\", \"m2\");\nx.function3(); // \"Function 3 Proto : m1\"\nx.function4(); // \"Function 4 Proto : undefined\"\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}