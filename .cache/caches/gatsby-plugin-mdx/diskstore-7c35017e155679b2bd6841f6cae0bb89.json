{"expireTime":9007200886478379000,"key":"gatsby-plugin-mdx-entire-payload-a3ee59fa3412c424d867808d85609ff7--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Most applications require using some form to collect user inputs. So far, I’ve avoided relying on a third-party library when using React and Redux. When we think about it, it’s not hard to send the data to the Redux store, performing some validation and rendering again to React. This loop is executed hundreds of times while the user type values, select values, or move focus out of a field. In the end, another action is sent to submit the data. However, every form of your website needs to repeat this process.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":514,"offset":514},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":514,"offset":514},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Redux-Form is a library that allows handling the burden of having to repeat similar tasks for each of your forms. Redux-Form creates a reducer which is a sibling to your own reducers. This one is dynamically created at creation. The creation occurs in your React container component, during the connect (with React-Redux) phase where this time will be connected to Redux-Form that wraps your component instead of directly wrapping your component. It sounds harder than it is but the documentation is well written. However, one pitfall is that if you are using Redux-Router and push the history object with ","position":{"start":{"line":4,"column":1,"offset":516},"end":{"line":4,"column":607,"offset":1122},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"withRouter","position":{"start":{"line":4,"column":608,"offset":1123},"end":{"line":4,"column":618,"offset":1133},"indent":[]}}],"position":{"start":{"line":4,"column":607,"offset":1122},"end":{"line":4,"column":619,"offset":1134},"indent":[]}},{"type":"text","value":" at your routing level, you will have to set it again (with ","position":{"start":{"line":4,"column":619,"offset":1134},"end":{"line":4,"column":679,"offset":1194},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"withRouter","position":{"start":{"line":4,"column":680,"offset":1195},"end":{"line":4,"column":690,"offset":1205},"indent":[]}}],"position":{"start":{"line":4,"column":679,"offset":1194},"end":{"line":4,"column":691,"offset":1206},"indent":[]}},{"type":"text","value":") before exporting manually. For some reason, using the ","position":{"start":{"line":4,"column":691,"offset":1206},"end":{"line":4,"column":747,"offset":1262},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"reduxForm","position":{"start":{"line":4,"column":748,"offset":1263},"end":{"line":4,"column":757,"offset":1272},"indent":[]}}],"position":{"start":{"line":4,"column":747,"offset":1262},"end":{"line":4,"column":758,"offset":1273},"indent":[]}},{"type":"text","value":" functions removes the propagation of this historic property downward.","position":{"start":{"line":4,"column":758,"offset":1273},"end":{"line":4,"column":828,"offset":1343},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":516},"end":{"line":4,"column":828,"offset":1343},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The library works as advertised. It has some nice features, e.g. to know which field changed, got touched, which error to which field, as well as the possibility to reset back to the initial values. Errors are handled in two different ways, letting you choose if you want to set the validation at each input field or at the form level. In both cases, you can cross-validate values between input fields.","position":{"start":{"line":6,"column":1,"offset":1345},"end":{"line":6,"column":403,"offset":1747},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1345},"end":{"line":6,"column":403,"offset":1747},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are using TypeScript, you will soon realize that the type passed to the creation of the Redux-Form will probably be different from the type you pass to the component that will hold your form. The reason is that you want to have Redux-Form to handle only the writable properties. This is not an issue; the property type of your component can contain the form fields as well as other fields. In my case, when the Redux store calls the component, I found it useful to map the data into two types: one readable and one writable.","position":{"start":{"line":8,"column":1,"offset":1749},"end":{"line":8,"column":532,"offset":2280},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":1749},"end":{"line":8,"column":532,"offset":2280},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"export interface MyComponentProps extends InjectedFormProps<MyComponentWritableModel, MyComponentDispatch> {    \n  readableValues: MyComponentReadableModel;    \n  formState: MyComponentWritableModel;\n}","position":{"start":{"line":10,"column":1,"offset":2282},"end":{"line":15,"column":4,"offset":2501},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The property of the component inherits ","position":{"start":{"line":17,"column":1,"offset":2503},"end":{"line":17,"column":40,"offset":2542},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"InjectedFormProps","position":{"start":{"line":17,"column":41,"offset":2543},"end":{"line":17,"column":58,"offset":2560},"indent":[]}}],"position":{"start":{"line":17,"column":40,"offset":2542},"end":{"line":17,"column":59,"offset":2561},"indent":[]}},{"type":"text","value":" which is the type used by the form. It’s generic to the type you pass in the Redux-Form method as well. Some minor details: I also inherit from a dispatch type where I can add additional actions to be invoked. I also have two properties, which are ","position":{"start":{"line":17,"column":59,"offset":2561},"end":{"line":17,"column":308,"offset":2810},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"readableValue","position":{"start":{"line":17,"column":309,"offset":2811},"end":{"line":17,"column":322,"offset":2824},"indent":[]}}],"position":{"start":{"line":17,"column":308,"offset":2810},"end":{"line":17,"column":323,"offset":2825},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":17,"column":323,"offset":2825},"end":{"line":17,"column":328,"offset":2830},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"formState","position":{"start":{"line":17,"column":329,"offset":2831},"end":{"line":17,"column":338,"offset":2840},"indent":[]}}],"position":{"start":{"line":17,"column":328,"offset":2830},"end":{"line":17,"column":339,"offset":2841},"indent":[]}},{"type":"text","value":". The first one is used to display information from the Redux state to the form in a read-only fashion. It can also be used for validation of specific values that are not editable. The second property is a copy of the form state that is a strongly typed accessible data of the form. The property allows usage of the data in your component for comparison or for validation.","position":{"start":{"line":17,"column":339,"offset":2841},"end":{"line":17,"column":711,"offset":3213},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2503},"end":{"line":17,"column":711,"offset":3213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TypeScript is great because it enforces type. Redux-Form works with TypeScript and has a definition type. However, most of its core concepts rely on strings which make it not as great. For example, to connect a field, you need to specify the name of the property you want to bind. You can go deep into the object by specifying the sub-property with a dot.","position":{"start":{"line":19,"column":1,"offset":3215},"end":{"line":19,"column":356,"offset":3570},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":3215},"end":{"line":19,"column":356,"offset":3570},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"Field name=\"myPropertyInsideWritableObject.CanGoDeep\"","position":{"start":{"line":21,"column":1,"offset":3572},"end":{"line":23,"column":4,"offset":3643},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second drawback is that every value entered in fields are pushed back by action in Redux as a string. It means that when you receive the information back and it’s time to map the state to the property to connect the information back to the user interface, you will receive an object, but not with the value specified by TypeScript. It’s worth mentioning that the initial values that are passed to Redux-Form can be from any type (number, boolean) and Redux-Form will store them like it is, with the same type. The issue is around persisting when a user changes a value. There is no mechanism to convert automatically to the desired type.","position":{"start":{"line":24,"column":1,"offset":3644},"end":{"line":24,"column":642,"offset":4285},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":3644},"end":{"line":24,"column":642,"offset":4285},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"const formInputsValues = state.form[FORM_NAME] as ReduxFormState<MyComponentWritableModel>; // The problem is that form[x] contains only data from the inputs which are string\n","position":{"start":{"line":26,"column":1,"offset":4287},"end":{"line":29,"column":4,"offset":4480},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Redux-Form is built around the concept that errors will be handled with promise, and failure of the promise will cause the form to fail. I’d rather not have the component tightly coupled with the logic and send my information by action and my middleware performs the action. This is unfortunate, and the cleanest way I found was to provide functions that are decoupled from the component, in their files, and attached to the form (or components). However, for a component called “Redux-Form”, I would prefer an option that would let me handle the validation in a middleware through a specific action that could be listened to and then sending another action with the validations.","position":{"start":{"line":30,"column":1,"offset":4481},"end":{"line":30,"column":680,"offset":5160},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":4481},"end":{"line":30,"column":680,"offset":5160},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The validation, when handled at the form level, is also not pretty. For example, returning an empty object means no error, and returning an object with the same structure of the form, but instead of the actual value the error message, is how to pass error message. This is messy with TypeScript. Imagine you have an object with one property that is number. To set an error message, you need to use the same property name but set a string. The structure changing type brings lots of weakness in a code, and since it’s a crucial part of the system, it’s unacceptable. There is a ","position":{"start":{"line":32,"column":1,"offset":5162},"end":{"line":32,"column":578,"offset":5739},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"FormErrors","position":{"start":{"line":32,"column":579,"offset":5740},"end":{"line":32,"column":589,"offset":5750},"indent":[]}}],"position":{"start":{"line":32,"column":578,"offset":5739},"end":{"line":32,"column":590,"offset":5751},"indent":[]}},{"type":"text","value":" that could be used which takes a generic type that seems to be the type of the form’s state. However, the definition doesn’t work well with sub-object.","position":{"start":{"line":32,"column":590,"offset":5751},"end":{"line":32,"column":742,"offset":5903},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":5162},"end":{"line":32,"column":742,"offset":5903},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"export type FormErrors<FormData = {}, T = void> = {    \n  [P in keyof FormData]?: ReactElement<any> | string | ErrorOther<T>;\n};","position":{"start":{"line":34,"column":1,"offset":5905},"end":{"line":38,"column":4,"offset":6051},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In my current project, we are using Semantic for inputs. The library Redux-Form works with something called ","position":{"start":{"line":40,"column":1,"offset":6053},"end":{"line":40,"column":109,"offset":6161},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Field","position":{"start":{"line":40,"column":110,"offset":6162},"end":{"line":40,"column":115,"offset":6167},"indent":[]}}],"position":{"start":{"line":40,"column":109,"offset":6161},"end":{"line":40,"column":116,"offset":6168},"indent":[]}},{"type":"text","value":". It’s well done and allows you to inject your own React stateless component. I was able to build a generic one that mixes custom properties and Redux-Form properties, allowing me to have an error in a popup next to the field, etc.","position":{"start":{"line":40,"column":116,"offset":6168},"end":{"line":40,"column":347,"offset":6399},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":6053},"end":{"line":40,"column":347,"offset":6399},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, I found a bug in using ","position":{"start":{"line":42,"column":1,"offset":6401},"end":{"line":42,"column":33,"offset":6433},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"CSSTransition","position":{"start":{"line":42,"column":34,"offset":6434},"end":{"line":42,"column":47,"offset":6447},"indent":[]}}],"position":{"start":{"line":42,"column":33,"offset":6433},"end":{"line":42,"column":48,"offset":6448},"indent":[]}},{"type":"text","value":". The form was available twice during the fade animation (this is how ","position":{"start":{"line":42,"column":48,"offset":6448},"end":{"line":42,"column":118,"offset":6518},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"CSSTransition","position":{"start":{"line":42,"column":119,"offset":6519},"end":{"line":42,"column":132,"offset":6532},"indent":[]}}],"position":{"start":{"line":42,"column":118,"offset":6518},"end":{"line":42,"column":133,"offset":6533},"indent":[]}},{"type":"text","value":" works). The issue is that when the form was completely faded out, it destroyed the Redux-Form state causing the fade-in form to have no more state. I used the property ","position":{"start":{"line":42,"column":133,"offset":6533},"end":{"line":42,"column":302,"offset":6702},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"destroyOnUnmount","position":{"start":{"line":42,"column":303,"offset":6703},"end":{"line":42,"column":319,"offset":6719},"indent":[]}}],"position":{"start":{"line":42,"column":302,"offset":6702},"end":{"line":42,"column":320,"offset":6720},"indent":[]}},{"type":"text","value":" to false, and the issue got fixed. The notion of a unique identifier for each form should be there instead of sharing the same form. That being said, the name is configurable, and you can work out a unique name that changes on each mount.","position":{"start":{"line":42,"column":320,"offset":6720},"end":{"line":42,"column":559,"offset":6959},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":6401},"end":{"line":42,"column":559,"offset":6959},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Overall, it’s a good library with some benefits. The main one is that it’s quick to set up. It also has many features, like state in each field (touched, error, warning, value changed, etc.). However, the weakness of the types, the fact that the validation is strongly bound to the React component (functions or promises), and that manual casting is required, make the library not awesome.","position":{"start":{"line":44,"column":1,"offset":6961},"end":{"line":44,"column":390,"offset":7350},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":6961},"end":{"line":44,"column":390,"offset":7350},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Handling React form with Redux-Form and TypeScript\",\"date\":\"2018-03-07\",\"categories\":[\"react\",\"redux\"]}","position":{"start":{"line":47,"column":1,"offset":7353},"end":{"line":47,"column":142,"offset":7494},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":142,"offset":7494}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Handling React form with Redux-Form and TypeScript\",\n  \"date\": \"2018-03-07\",\n  \"categories\": [\"react\", \"redux\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Most applications require using some form to collect user inputs. So far, I\\u2019ve avoided relying on a third-party library when using React and Redux. When we think about it, it\\u2019s not hard to send the data to the Redux store, performing some validation and rendering again to React. This loop is executed hundreds of times while the user type values, select values, or move focus out of a field. In the end, another action is sent to submit the data. However, every form of your website needs to repeat this process.\"), mdx(\"p\", null, \"Redux-Form is a library that allows handling the burden of having to repeat similar tasks for each of your forms. Redux-Form creates a reducer which is a sibling to your own reducers. This one is dynamically created at creation. The creation occurs in your React container component, during the connect (with\\xA0React-Redux) phase where this time will be connected to Redux-Form that wraps your component instead of directly wrapping your component. It sounds harder than it is but the documentation is well written. However, one pitfall is that if you are using\\xA0Redux-Router\\xA0and push the\\xA0history\\xA0object with\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"withRouter\"), \"\\xA0at your routing level, you will have to set it again (with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"withRouter\"), \") before exporting manually. For some reason, using the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reduxForm\"), \" functions removes the propagation of this historic property downward.\"), mdx(\"p\", null, \"The library works as advertised. It has some nice features, e.g. to know which field changed, got touched, which error to which field, as well as the possibility to reset back to the initial values. Errors are handled in two different ways, letting you choose if you want to set the validation at each input field or at the form level. In both cases, you can cross-validate values between input fields.\"), mdx(\"p\", null, \"If you are using TypeScript, you will soon realize that the type passed to the creation of the Redux-Form will probably be different from the type you pass to the component that will hold your form. The reason is that you want to have Redux-Form to handle only the writable properties. This is not an issue; the property type of your component can contain the form fields as well as other fields. In my case, when the Redux store calls the component, I found it useful to map the data into two types: one readable and one writable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export interface MyComponentProps extends InjectedFormProps<MyComponentWritableModel, MyComponentDispatch> {    \\n  readableValues: MyComponentReadableModel;    \\n  formState: MyComponentWritableModel;\\n}\\n\")), mdx(\"p\", null, \"The property of the component inherits\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"InjectedFormProps\"), \"\\xA0which is the type used by the form. It\\u2019s generic to the type you pass in the\\xA0Redux-Form\\xA0method as well. Some minor details: I also inherit from a dispatch type where I can add additional actions to be invoked. I also have two properties, which are\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"readableValue\"), \"\\xA0and\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"formState\"), \". The first one is used to display information from the Redux state to the form in a read-only fashion. It can also be used for validation of specific values that are not editable. The second property is a copy of the form state that is a strongly typed accessible data of the form. The property allows usage of the data in your component for comparison or for validation.\"), mdx(\"p\", null, \"TypeScript is great because it enforces type. Redux-Form works with TypeScript and has a definition type. However, most of its core concepts rely on strings which make it not as great. For example, to connect a field, you need to specify the name of the property you want to bind. You can go deep into the object by specifying the sub-property with a dot.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"Field name=\\\"myPropertyInsideWritableObject.CanGoDeep\\\"\\n\")), mdx(\"p\", null, \"The second drawback is that every value entered in fields are pushed back by action in Redux as a string. It means that when you receive the information back and it\\u2019s time to map the state to the property to connect the information back to the user interface, you will receive an object, but not with the value specified by TypeScript. It\\u2019s worth mentioning that the initial values that are passed to Redux-Form can be from any type (number, boolean) and Redux-Form will store them like it is, with the same type. The issue is around persisting when a user changes a value. There is no mechanism to convert automatically to the desired type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const formInputsValues = state.form[FORM_NAME] as ReduxFormState<MyComponentWritableModel>; // The problem is that form[x] contains only data from the inputs which are string\\n\\n\")), mdx(\"p\", null, \"Redux-Form is built around the concept that errors will be handled with promise, and failure of the promise will cause the form to fail. I\\u2019d rather not have the component tightly coupled with the logic and send my information by action and my middleware performs the action. This is unfortunate, and the cleanest way I found was to provide functions that are decoupled from the component, in their files, and attached to the form (or components). However, for a component called \\u201CRedux-Form\\u201D, I would prefer an option that would let me handle the validation in a middleware through a specific action that could be listened to and then sending another action with the validations.\"), mdx(\"p\", null, \"The validation, when handled at the form level, is also not pretty. For example, returning an empty object means no error, and returning an object with the same structure of the form, but instead of the actual value the error message, is how to pass error message. This is messy with TypeScript. Imagine you have an object with one property that is number. To set an error message, you need to use the same property name but set a string. The structure changing type brings lots of weakness in a code, and since it\\u2019s a crucial part of the system, it\\u2019s unacceptable. There is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"FormErrors\"), \"\\xA0that could be used which takes a generic type that seems to be the type of the form\\u2019s state. However, the definition doesn\\u2019t work well with sub-object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export type FormErrors<FormData = {}, T = void> = {    \\n  [P in keyof FormData]?: ReactElement<any> | string | ErrorOther<T>;\\n};\\n\")), mdx(\"p\", null, \"In my current project, we are using Semantic for inputs. The library Redux-Form works with something called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Field\"), \". It\\u2019s well done and allows you to inject your own React stateless component. I was able to build a generic one that mixes custom properties and Redux-Form properties, allowing me to have an error in a popup next to the field, etc.\"), mdx(\"p\", null, \"Finally, I found a bug in using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSSTransition\"), \". The form was available twice during the fade animation (this is how \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSSTransition\"), \" works). The issue is that when the form was completely faded out, it destroyed the Redux-Form state causing the fade-in form to have no more state. I used the property\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"destroyOnUnmount\"), \"\\xA0to false, and the issue got fixed. The notion of a unique identifier for each form should be there instead of sharing the same form. That being said, the name is configurable, and you can work out a unique name that changes on each mount.\"), mdx(\"p\", null, \"Overall, it\\u2019s a good library with some benefits. The main one is that it\\u2019s quick to set up. It also has many features, like state in each field (touched, error, warning, value changed, etc.). However, the weakness of the types, the fact that the validation is strongly bound to the React component (functions or promises), and that manual casting is required, make the library not awesome.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Handling React form with Redux-Form and TypeScript\",\n  \"date\": \"2018-03-07\",\n  \"categories\": [\"react\", \"redux\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Most applications require using some form to collect user inputs. So far, I’ve avoided relying on a third-party library when using React and Redux. When we think about it, it’s not hard to send the data to the Redux store, performing some validation and rendering again to React. This loop is executed hundreds of times while the user type values, select values, or move focus out of a field. In the end, another action is sent to submit the data. However, every form of your website needs to repeat this process.`}</p>\n    <p>{`Redux-Form is a library that allows handling the burden of having to repeat similar tasks for each of your forms. Redux-Form creates a reducer which is a sibling to your own reducers. This one is dynamically created at creation. The creation occurs in your React container component, during the connect (with React-Redux) phase where this time will be connected to Redux-Form that wraps your component instead of directly wrapping your component. It sounds harder than it is but the documentation is well written. However, one pitfall is that if you are using Redux-Router and push the history object with `}<em parentName=\"p\">{`withRouter`}</em>{` at your routing level, you will have to set it again (with `}<em parentName=\"p\">{`withRouter`}</em>{`) before exporting manually. For some reason, using the `}<em parentName=\"p\">{`reduxForm`}</em>{` functions removes the propagation of this historic property downward.`}</p>\n    <p>{`The library works as advertised. It has some nice features, e.g. to know which field changed, got touched, which error to which field, as well as the possibility to reset back to the initial values. Errors are handled in two different ways, letting you choose if you want to set the validation at each input field or at the form level. In both cases, you can cross-validate values between input fields.`}</p>\n    <p>{`If you are using TypeScript, you will soon realize that the type passed to the creation of the Redux-Form will probably be different from the type you pass to the component that will hold your form. The reason is that you want to have Redux-Form to handle only the writable properties. This is not an issue; the property type of your component can contain the form fields as well as other fields. In my case, when the Redux store calls the component, I found it useful to map the data into two types: one readable and one writable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface MyComponentProps extends InjectedFormProps<MyComponentWritableModel, MyComponentDispatch> {    \n  readableValues: MyComponentReadableModel;    \n  formState: MyComponentWritableModel;\n}\n`}</code></pre>\n    <p>{`The property of the component inherits `}<em parentName=\"p\">{`InjectedFormProps`}</em>{` which is the type used by the form. It’s generic to the type you pass in the Redux-Form method as well. Some minor details: I also inherit from a dispatch type where I can add additional actions to be invoked. I also have two properties, which are `}<em parentName=\"p\">{`readableValue`}</em>{` and `}<em parentName=\"p\">{`formState`}</em>{`. The first one is used to display information from the Redux state to the form in a read-only fashion. It can also be used for validation of specific values that are not editable. The second property is a copy of the form state that is a strongly typed accessible data of the form. The property allows usage of the data in your component for comparison or for validation.`}</p>\n    <p>{`TypeScript is great because it enforces type. Redux-Form works with TypeScript and has a definition type. However, most of its core concepts rely on strings which make it not as great. For example, to connect a field, you need to specify the name of the property you want to bind. You can go deep into the object by specifying the sub-property with a dot.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`Field name=\"myPropertyInsideWritableObject.CanGoDeep\"\n`}</code></pre>\n    <p>{`The second drawback is that every value entered in fields are pushed back by action in Redux as a string. It means that when you receive the information back and it’s time to map the state to the property to connect the information back to the user interface, you will receive an object, but not with the value specified by TypeScript. It’s worth mentioning that the initial values that are passed to Redux-Form can be from any type (number, boolean) and Redux-Form will store them like it is, with the same type. The issue is around persisting when a user changes a value. There is no mechanism to convert automatically to the desired type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const formInputsValues = state.form[FORM_NAME] as ReduxFormState<MyComponentWritableModel>; // The problem is that form[x] contains only data from the inputs which are string\n\n`}</code></pre>\n    <p>{`Redux-Form is built around the concept that errors will be handled with promise, and failure of the promise will cause the form to fail. I’d rather not have the component tightly coupled with the logic and send my information by action and my middleware performs the action. This is unfortunate, and the cleanest way I found was to provide functions that are decoupled from the component, in their files, and attached to the form (or components). However, for a component called “Redux-Form”, I would prefer an option that would let me handle the validation in a middleware through a specific action that could be listened to and then sending another action with the validations.`}</p>\n    <p>{`The validation, when handled at the form level, is also not pretty. For example, returning an empty object means no error, and returning an object with the same structure of the form, but instead of the actual value the error message, is how to pass error message. This is messy with TypeScript. Imagine you have an object with one property that is number. To set an error message, you need to use the same property name but set a string. The structure changing type brings lots of weakness in a code, and since it’s a crucial part of the system, it’s unacceptable. There is a `}<em parentName=\"p\">{`FormErrors`}</em>{` that could be used which takes a generic type that seems to be the type of the form’s state. However, the definition doesn’t work well with sub-object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export type FormErrors<FormData = {}, T = void> = {    \n  [P in keyof FormData]?: ReactElement<any> | string | ErrorOther<T>;\n};\n`}</code></pre>\n    <p>{`In my current project, we are using Semantic for inputs. The library Redux-Form works with something called `}<em parentName=\"p\">{`Field`}</em>{`. It’s well done and allows you to inject your own React stateless component. I was able to build a generic one that mixes custom properties and Redux-Form properties, allowing me to have an error in a popup next to the field, etc.`}</p>\n    <p>{`Finally, I found a bug in using `}<em parentName=\"p\">{`CSSTransition`}</em>{`. The form was available twice during the fade animation (this is how `}<em parentName=\"p\">{`CSSTransition`}</em>{` works). The issue is that when the form was completely faded out, it destroyed the Redux-Form state causing the fade-in form to have no more state. I used the property `}<em parentName=\"p\">{`destroyOnUnmount`}</em>{` to false, and the issue got fixed. The notion of a unique identifier for each form should be there instead of sharing the same form. That being said, the name is configurable, and you can work out a unique name that changes on each mount.`}</p>\n    <p>{`Overall, it’s a good library with some benefits. The main one is that it’s quick to set up. It also has many features, like state in each field (touched, error, warning, value changed, etc.). However, the weakness of the types, the fact that the validation is strongly bound to the React component (functions or promises), and that manual casting is required, make the library not awesome.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}