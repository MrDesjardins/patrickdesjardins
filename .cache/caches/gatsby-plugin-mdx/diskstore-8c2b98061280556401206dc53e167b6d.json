{"expireTime":9007200886478381000,"key":"gatsby-plugin-mdx-entire-payload-bdccff3e9cc5093dfdda7f0971e0efc4--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I already posted about ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"link","title":null,"url":"./unit-testing-with-typescript-3-tricks-to-help-you-with-private-method","children":[{"type":"text","value":"how to write unit tests for private method with TypeScript","position":{"start":{"line":2,"column":25,"offset":25},"end":{"line":2,"column":83,"offset":83},"indent":[]}}],"position":{"start":{"line":2,"column":24,"offset":24},"end":{"line":2,"column":157,"offset":157},"indent":[]}},{"type":"text","value":" about one year ago. Few days ago, I had the same discussion that I had in my previous team concerning private method. The situation is similar. Developers don't test private method and rely on public method to reach those private methods. At first, it may sound that we are going inside those private methods, therefore we are doing proper unit testing.","position":{"start":{"line":2,"column":157,"offset":157},"end":{"line":2,"column":511,"offset":511},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":511,"offset":511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The problem by going through intermediate methods to access the one we want to test is that any change on intermediate methods will make multiple test to fail. When a unit tests fail, the goal is to know which unit of your code is failing. Imagine the situation where you have class ","position":{"start":{"line":4,"column":1,"offset":513},"end":{"line":4,"column":284,"offset":796},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"A","position":{"start":{"line":4,"column":286,"offset":798},"end":{"line":4,"column":287,"offset":799},"indent":[]}}],"position":{"start":{"line":4,"column":284,"offset":796},"end":{"line":4,"column":289,"offset":801},"indent":[]}},{"type":"text","value":" that has method ","position":{"start":{"line":4,"column":289,"offset":801},"end":{"line":4,"column":306,"offset":818},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a1","position":{"start":{"line":4,"column":308,"offset":820},"end":{"line":4,"column":310,"offset":822},"indent":[]}}],"position":{"start":{"line":4,"column":306,"offset":818},"end":{"line":4,"column":312,"offset":824},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":4,"column":312,"offset":824},"end":{"line":4,"column":314,"offset":826},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a2","position":{"start":{"line":4,"column":316,"offset":828},"end":{"line":4,"column":318,"offset":830},"indent":[]}}],"position":{"start":{"line":4,"column":314,"offset":826},"end":{"line":4,"column":320,"offset":832},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":4,"column":320,"offset":832},"end":{"line":4,"column":322,"offset":834},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":4,"column":324,"offset":836},"end":{"line":4,"column":326,"offset":838},"indent":[]}}],"position":{"start":{"line":4,"column":322,"offset":834},"end":{"line":4,"column":328,"offset":840},"indent":[]}},{"type":"text","value":". You want to to unit test ","position":{"start":{"line":4,"column":328,"offset":840},"end":{"line":4,"column":355,"offset":867},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":4,"column":357,"offset":869},"end":{"line":4,"column":359,"offset":871},"indent":[]}}],"position":{"start":{"line":4,"column":355,"offset":867},"end":{"line":4,"column":361,"offset":873},"indent":[]}},{"type":"text","value":", but the only entry point is ","position":{"start":{"line":4,"column":361,"offset":873},"end":{"line":4,"column":391,"offset":903},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a1","position":{"start":{"line":4,"column":393,"offset":905},"end":{"line":4,"column":395,"offset":907},"indent":[]}}],"position":{"start":{"line":4,"column":391,"offset":903},"end":{"line":4,"column":397,"offset":909},"indent":[]}},{"type":"text","value":" which is the only method public. This one call ","position":{"start":{"line":4,"column":397,"offset":909},"end":{"line":4,"column":445,"offset":957},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a2","position":{"start":{"line":4,"column":447,"offset":959},"end":{"line":4,"column":449,"offset":961},"indent":[]}}],"position":{"start":{"line":4,"column":445,"offset":957},"end":{"line":4,"column":451,"offset":963},"indent":[]}},{"type":"text","value":", who call in some particular situation ","position":{"start":{"line":4,"column":451,"offset":963},"end":{"line":4,"column":491,"offset":1003},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":4,"column":493,"offset":1005},"end":{"line":4,"column":495,"offset":1007},"indent":[]}}],"position":{"start":{"line":4,"column":491,"offset":1003},"end":{"line":4,"column":497,"offset":1009},"indent":[]}},{"type":"text","value":". You have multiple conditions in ","position":{"start":{"line":4,"column":497,"offset":1009},"end":{"line":4,"column":531,"offset":1043},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":4,"column":533,"offset":1045},"end":{"line":4,"column":535,"offset":1047},"indent":[]}}],"position":{"start":{"line":4,"column":531,"offset":1043},"end":{"line":4,"column":537,"offset":1049},"indent":[]}},{"type":"text","value":" and you evaluate that you need 5 unit tests. The problem is that if ","position":{"start":{"line":4,"column":537,"offset":1049},"end":{"line":4,"column":606,"offset":1118},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a1","position":{"start":{"line":4,"column":608,"offset":1120},"end":{"line":4,"column":610,"offset":1122},"indent":[]}}],"position":{"start":{"line":4,"column":606,"offset":1118},"end":{"line":4,"column":612,"offset":1124},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":4,"column":612,"offset":1124},"end":{"line":4,"column":616,"offset":1128},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a2","position":{"start":{"line":4,"column":618,"offset":1130},"end":{"line":4,"column":620,"offset":1132},"indent":[]}}],"position":{"start":{"line":4,"column":616,"offset":1128},"end":{"line":4,"column":622,"offset":1134},"indent":[]}},{"type":"text","value":" change in the future that all these 5 tests may fail, when they should not.","position":{"start":{"line":4,"column":622,"offset":1134},"end":{"line":4,"column":698,"offset":1210},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":513},"end":{"line":4,"column":698,"offset":1210},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At that point, most people understand the situation and agree to test the private methods. However, there is some good ways to do it and some bad ways. The worst way to do it to cast the class ","position":{"start":{"line":6,"column":1,"offset":1212},"end":{"line":6,"column":194,"offset":1405},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"A","position":{"start":{"line":6,"column":196,"offset":1407},"end":{"line":6,"column":197,"offset":1408},"indent":[]}}],"position":{"start":{"line":6,"column":194,"offset":1405},"end":{"line":6,"column":199,"offset":1410},"indent":[]}},{"type":"text","value":" to be of type any and call ","position":{"start":{"line":6,"column":199,"offset":1410},"end":{"line":6,"column":227,"offset":1438},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":6,"column":229,"offset":1440},"end":{"line":6,"column":231,"offset":1442},"indent":[]}}],"position":{"start":{"line":6,"column":227,"offset":1438},"end":{"line":6,"column":233,"offset":1444},"indent":[]}},{"type":"text","value":" directly. Something like :","position":{"start":{"line":6,"column":233,"offset":1444},"end":{"line":6,"column":260,"offset":1471},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1212},"end":{"line":6,"column":260,"offset":1471},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"// Bad way: \nvar a = new A(); (a as any).a3(); ","position":{"start":{"line":8,"column":1,"offset":1473},"end":{"line":11,"column":5,"offset":1539},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The problem with the above code is that when you will refactor ","position":{"start":{"line":14,"column":1,"offset":1542},"end":{"line":14,"column":64,"offset":1605},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":14,"column":66,"offset":1607},"end":{"line":14,"column":68,"offset":1609},"indent":[]}}],"position":{"start":{"line":14,"column":64,"offset":1605},"end":{"line":14,"column":70,"offset":1611},"indent":[]}},{"type":"text","value":" to have a better name that no tool will find out this instance. More, this open the door to access private fields or inject new functions and fields to the class. At the end, it become a nightmare to maintain. We are using TypeScript to be strongly typed, our tests should continue to be as strong.","position":{"start":{"line":14,"column":70,"offset":1611},"end":{"line":14,"column":369,"offset":1910},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1542},"end":{"line":14,"column":369,"offset":1910},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the previous article I wrote, I talked about 2 patterns. The first one is about working around encapsulation with an interface. The second had two variations.","position":{"start":{"line":16,"column":1,"offset":1912},"end":{"line":16,"column":162,"offset":2073},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1912},"end":{"line":16,"column":162,"offset":2073},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's remember the first pattern. The first pattern is that class A should have an interface IA that is used everywhere. IA would only expose the method ","position":{"start":{"line":18,"column":1,"offset":2075},"end":{"line":18,"column":154,"offset":2228},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a1","position":{"start":{"line":18,"column":156,"offset":2230},"end":{"line":18,"column":158,"offset":2232},"indent":[]}}],"position":{"start":{"line":18,"column":154,"offset":2228},"end":{"line":18,"column":160,"offset":2234},"indent":[]}},{"type":"text","value":". Everywhere you use the interface and the only place where it doesn't it's when it's getting injected by the inversion of control container. However, we can leverage this abstraction to keep a strong encapsulation for the application and use the implementation that has every method public. This way, developers still have only access to a1 in our example, but in our test we have access to everything else. This might not sound a proper solution at first since we open the encapsulation on the implemented class, but it's the cheapest way to be able to test unit tests. That said, I am all with you that there is other solution like the pattern #2 presented in the previous article.","position":{"start":{"line":18,"column":160,"offset":2234},"end":{"line":18,"column":844,"offset":2918},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":2075},"end":{"line":18,"column":844,"offset":2918},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second pattern presented was about moving code around. In our example, ","position":{"start":{"line":20,"column":1,"offset":2920},"end":{"line":20,"column":76,"offset":2995},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a2","position":{"start":{"line":20,"column":78,"offset":2997},"end":{"line":20,"column":80,"offset":2999},"indent":[]}}],"position":{"start":{"line":20,"column":76,"offset":2995},"end":{"line":20,"column":82,"offset":3001},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":20,"column":82,"offset":3001},"end":{"line":20,"column":87,"offset":3006},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":20,"column":89,"offset":3008},"end":{"line":20,"column":91,"offset":3010},"indent":[]}}],"position":{"start":{"line":20,"column":87,"offset":3006},"end":{"line":20,"column":93,"offset":3012},"indent":[]}},{"type":"text","value":" are private and could be moved outside an other class. For example, let's say that A was a user class, ","position":{"start":{"line":20,"column":93,"offset":3012},"end":{"line":20,"column":197,"offset":3116},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a1","position":{"start":{"line":20,"column":199,"offset":3118},"end":{"line":20,"column":201,"offset":3120},"indent":[]}}],"position":{"start":{"line":20,"column":197,"offset":3116},"end":{"line":20,"column":203,"offset":3122},"indent":[]}},{"type":"text","value":" was a method to get the user information to display to the screen, ","position":{"start":{"line":20,"column":203,"offset":3122},"end":{"line":20,"column":271,"offset":3190},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a2","position":{"start":{"line":20,"column":273,"offset":3192},"end":{"line":20,"column":275,"offset":3194},"indent":[]}}],"position":{"start":{"line":20,"column":271,"offset":3190},"end":{"line":20,"column":277,"offset":3196},"indent":[]}},{"type":"text","value":" a method to get the address information and ","position":{"start":{"line":20,"column":277,"offset":3196},"end":{"line":20,"column":322,"offset":3241},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a3","position":{"start":{"line":20,"column":324,"offset":3243},"end":{"line":20,"column":326,"offset":3245},"indent":[]}}],"position":{"start":{"line":20,"column":322,"offset":3241},"end":{"line":20,"column":328,"offset":3247},"indent":[]}},{"type":"text","value":" a method to format the street address. This could be refactored from :","position":{"start":{"line":20,"column":328,"offset":3247},"end":{"line":20,"column":399,"offset":3318},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2920},"end":{"line":20,"column":399,"offset":3318},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"class User{ public getUserInformationToDisplay(){ \n  //... \n  this.getUserAddress(); \n  //... }\n\n  private getUserAddress(){ \n    //... \n    this.formatStreet(); \n    //... \n  } \n  private formatStreet(){ \n    //... \n  } \n} ","position":{"start":{"line":22,"column":1,"offset":3320},"end":{"line":37,"column":5,"offset":3563},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"to: ","position":{"start":{"line":39,"column":1,"offset":3565},"end":{"line":39,"column":5,"offset":3569},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":3565},"end":{"line":39,"column":5,"offset":3569},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"class User{ \n  private address:Address; \n  public getUserInformationToDisplay(){ \n    //... \n    address.getUserAddress(); \n    //... \n  } \n} \n\nclass Address{ \n  private format: StreetFormatter; \n  public format(){ \n    //... \n    format.ToString(); \n    //... \n    } \n} \n\nclass StreetFormatter{ \n  public toString(){ \n    // ... \n  } \n} ","position":{"start":{"line":41,"column":1,"offset":3571},"end":{"line":65,"column":5,"offset":3928},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Originally, we wanted to test the private method formatStreet (a3), and now it's very easy because I do not even need to care about all the classes or function that call it, just to unit test the StreetFormatter class (which was the original a3). this is the best way to unit test private method : to divide it correctly into specific class. This is also costly in term of time.","position":{"start":{"line":67,"column":1,"offset":3930},"end":{"line":67,"column":379,"offset":4308},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":3930},"end":{"line":67,"column":379,"offset":4308},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I always prefer the second approach, but time constraints and the high velocity of shipping features is always that is a higher priority -- even in software shop where the message is quality first. That said, I prefer using the first approach than not having any unit tests at all. It's a good compromise that work well what ever your framework. I used both approach in TypeScript code that was using proprietary framework, as well with React and now with Angular. At the end, the important is to have the best coverage while being sure that everything tested are solid to help the software and not slow down the whole development.","position":{"start":{"line":69,"column":1,"offset":4310},"end":{"line":69,"column":632,"offset":4941},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4310},"end":{"line":69,"column":632,"offset":4941},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to unit test private method in TypeScript (part 2)\",\"date\":\"2017-04-13\",\"categories\":[\"test\",\"typescript\"]}","position":{"start":{"line":72,"column":1,"offset":4944},"end":{"line":72,"column":150,"offset":5093},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":150,"offset":5093}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to unit test private method in TypeScript (part 2)\",\n  \"date\": \"2017-04-13\",\n  \"categories\": [\"test\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I already posted about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./unit-testing-with-typescript-3-tricks-to-help-you-with-private-method\"\n  }, \"how to write unit tests for private method with TypeScript\"), \" about one year ago. Few days ago, I had the same discussion that I had in my previous team concerning private method. The situation is similar. Developers don't test private method and rely on public method to reach those private methods. At first, it may sound that we are going inside those private methods, therefore we are doing proper unit testing.\"), mdx(\"p\", null, \"The problem by going through intermediate methods to access the one we want to test is that any change on intermediate methods will make multiple test to fail. When a unit tests fail, the goal is to know which unit of your code is failing. Imagine the situation where you have class \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A\"), \" that has method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a1\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a2\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \". You want to to unit test \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \", but the only entry point is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a1\"), \" which is the only method public. This one call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a2\"), \", who call in some particular situation \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \". You have multiple conditions in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \" and you evaluate that you need 5 unit tests. The problem is that if \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a1\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a2\"), \" change in the future that all these 5 tests may fail, when they should not.\"), mdx(\"p\", null, \"At that point, most people understand the situation and agree to test the private methods. However, there is some good ways to do it and some bad ways. The worst way to do it to cast the class \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A\"), \" to be of type any and call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \" directly. Something like :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// Bad way: \\nvar a = new A(); (a as any).a3(); \\n\")), mdx(\"p\", null, \"The problem with the above code is that when you will refactor \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \" to have a better name that no tool will find out this instance. More, this open the door to access private fields or inject new functions and fields to the class. At the end, it become a nightmare to maintain. We are using TypeScript to be strongly typed, our tests should continue to be as strong.\"), mdx(\"p\", null, \"In the previous article I wrote, I talked about 2 patterns. The first one is about working around encapsulation with an interface. The second had two variations.\"), mdx(\"p\", null, \"Let's remember the first pattern. The first pattern is that class A should have an interface IA that is used everywhere. IA would only expose the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a1\"), \". Everywhere you use the interface and the only place where it doesn't it's when it's getting injected by the inversion of control container. However, we can leverage this abstraction to keep a strong encapsulation for the application and use the implementation that has every method public. This way, developers still have only access to a1 in our example, but in our test we have access to everything else. This might not sound a proper solution at first since we open the encapsulation on the implemented class, but it's the cheapest way to be able to test unit tests. That said, I am all with you that there is other solution like the pattern #2 presented in the previous article.\"), mdx(\"p\", null, \"The second pattern presented was about moving code around. In our example, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a2\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \" are private and could be moved outside an other class. For example, let's say that A was a user class, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a1\"), \" was a method to get the user information to display to the screen, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a2\"), \" a method to get the address information and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a3\"), \" a method to format the street address. This could be refactored from :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class User{ public getUserInformationToDisplay(){ \\n  //... \\n  this.getUserAddress(); \\n  //... }\\n\\n  private getUserAddress(){ \\n    //... \\n    this.formatStreet(); \\n    //... \\n  } \\n  private formatStreet(){ \\n    //... \\n  } \\n} \\n\")), mdx(\"p\", null, \"to: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class User{ \\n  private address:Address; \\n  public getUserInformationToDisplay(){ \\n    //... \\n    address.getUserAddress(); \\n    //... \\n  } \\n} \\n\\nclass Address{ \\n  private format: StreetFormatter; \\n  public format(){ \\n    //... \\n    format.ToString(); \\n    //... \\n    } \\n} \\n\\nclass StreetFormatter{ \\n  public toString(){ \\n    // ... \\n  } \\n} \\n\")), mdx(\"p\", null, \"Originally, we wanted to test the private method formatStreet (a3), and now it's very easy because I do not even need to care about all the classes or function that call it, just to unit test the StreetFormatter class (which was the original a3). this is the best way to unit test private method : to divide it correctly into specific class. This is also costly in term of time.\"), mdx(\"p\", null, \"I always prefer the second approach, but time constraints and the high velocity of shipping features is always that is a higher priority -- even in software shop where the message is quality first. That said, I prefer using the first approach than not having any unit tests at all. It's a good compromise that work well what ever your framework. I used both approach in TypeScript code that was using proprietary framework, as well with React and now with Angular. At the end, the important is to have the best coverage while being sure that everything tested are solid to help the software and not slow down the whole development.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to unit test private method in TypeScript (part 2)\",\n  \"date\": \"2017-04-13\",\n  \"categories\": [\"test\", \"typescript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`I already posted about `}<a parentName=\"p\" {...{\n        \"href\": \"./unit-testing-with-typescript-3-tricks-to-help-you-with-private-method\"\n      }}>{`how to write unit tests for private method with TypeScript`}</a>{` about one year ago. Few days ago, I had the same discussion that I had in my previous team concerning private method. The situation is similar. Developers don't test private method and rely on public method to reach those private methods. At first, it may sound that we are going inside those private methods, therefore we are doing proper unit testing.`}</p>\n    <p>{`The problem by going through intermediate methods to access the one we want to test is that any change on intermediate methods will make multiple test to fail. When a unit tests fail, the goal is to know which unit of your code is failing. Imagine the situation where you have class `}<strong parentName=\"p\">{`A`}</strong>{` that has method `}<strong parentName=\"p\">{`a1`}</strong>{`, `}<strong parentName=\"p\">{`a2`}</strong>{`, `}<strong parentName=\"p\">{`a3`}</strong>{`. You want to to unit test `}<strong parentName=\"p\">{`a3`}</strong>{`, but the only entry point is `}<strong parentName=\"p\">{`a1`}</strong>{` which is the only method public. This one call `}<strong parentName=\"p\">{`a2`}</strong>{`, who call in some particular situation `}<strong parentName=\"p\">{`a3`}</strong>{`. You have multiple conditions in `}<strong parentName=\"p\">{`a3`}</strong>{` and you evaluate that you need 5 unit tests. The problem is that if `}<strong parentName=\"p\">{`a1`}</strong>{` or `}<strong parentName=\"p\">{`a2`}</strong>{` change in the future that all these 5 tests may fail, when they should not.`}</p>\n    <p>{`At that point, most people understand the situation and agree to test the private methods. However, there is some good ways to do it and some bad ways. The worst way to do it to cast the class `}<strong parentName=\"p\">{`A`}</strong>{` to be of type any and call `}<strong parentName=\"p\">{`a3`}</strong>{` directly. Something like :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Bad way: \nvar a = new A(); (a as any).a3(); \n`}</code></pre>\n    <p>{`The problem with the above code is that when you will refactor `}<strong parentName=\"p\">{`a3`}</strong>{` to have a better name that no tool will find out this instance. More, this open the door to access private fields or inject new functions and fields to the class. At the end, it become a nightmare to maintain. We are using TypeScript to be strongly typed, our tests should continue to be as strong.`}</p>\n    <p>{`In the previous article I wrote, I talked about 2 patterns. The first one is about working around encapsulation with an interface. The second had two variations.`}</p>\n    <p>{`Let's remember the first pattern. The first pattern is that class A should have an interface IA that is used everywhere. IA would only expose the method `}<strong parentName=\"p\">{`a1`}</strong>{`. Everywhere you use the interface and the only place where it doesn't it's when it's getting injected by the inversion of control container. However, we can leverage this abstraction to keep a strong encapsulation for the application and use the implementation that has every method public. This way, developers still have only access to a1 in our example, but in our test we have access to everything else. This might not sound a proper solution at first since we open the encapsulation on the implemented class, but it's the cheapest way to be able to test unit tests. That said, I am all with you that there is other solution like the pattern #2 presented in the previous article.`}</p>\n    <p>{`The second pattern presented was about moving code around. In our example, `}<strong parentName=\"p\">{`a2`}</strong>{` and `}<strong parentName=\"p\">{`a3`}</strong>{` are private and could be moved outside an other class. For example, let's say that A was a user class, `}<strong parentName=\"p\">{`a1`}</strong>{` was a method to get the user information to display to the screen, `}<strong parentName=\"p\">{`a2`}</strong>{` a method to get the address information and `}<strong parentName=\"p\">{`a3`}</strong>{` a method to format the street address. This could be refactored from :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class User{ public getUserInformationToDisplay(){ \n  //... \n  this.getUserAddress(); \n  //... }\n\n  private getUserAddress(){ \n    //... \n    this.formatStreet(); \n    //... \n  } \n  private formatStreet(){ \n    //... \n  } \n} \n`}</code></pre>\n    <p>{`to: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class User{ \n  private address:Address; \n  public getUserInformationToDisplay(){ \n    //... \n    address.getUserAddress(); \n    //... \n  } \n} \n\nclass Address{ \n  private format: StreetFormatter; \n  public format(){ \n    //... \n    format.ToString(); \n    //... \n    } \n} \n\nclass StreetFormatter{ \n  public toString(){ \n    // ... \n  } \n} \n`}</code></pre>\n    <p>{`Originally, we wanted to test the private method formatStreet (a3), and now it's very easy because I do not even need to care about all the classes or function that call it, just to unit test the StreetFormatter class (which was the original a3). this is the best way to unit test private method : to divide it correctly into specific class. This is also costly in term of time.`}</p>\n    <p>{`I always prefer the second approach, but time constraints and the high velocity of shipping features is always that is a higher priority -- even in software shop where the message is quality first. That said, I prefer using the first approach than not having any unit tests at all. It's a good compromise that work well what ever your framework. I used both approach in TypeScript code that was using proprietary framework, as well with React and now with Angular. At the end, the important is to have the best coverage while being sure that everything tested are solid to help the software and not slow down the whole development.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}