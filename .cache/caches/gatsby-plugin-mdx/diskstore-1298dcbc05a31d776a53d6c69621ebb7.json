{"expireTime":9007200886478389000,"key":"gatsby-plugin-mdx-entire-payload-8d957d390adec012c6e3809f4163152f--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"You are working on your computer, did several commit and you are ready to push. However, you may not want to push all the commit but only one that combine all your commit. Multiple cases exist like that you want all the code but not some of the comment related to commits. Another case could be that you the commit was not significant and you want to get ride of it. This is often the case of a commit without message. The change are required, but an empty commit is not.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":472,"offset":472},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":472,"offset":472},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To combine commit you need to use the rebase method inside your own branch. This is done by using ","position":{"start":{"line":4,"column":1,"offset":474},"end":{"line":4,"column":99,"offset":572},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"rebase interactive","position":{"start":{"line":4,"column":101,"offset":574},"end":{"line":4,"column":119,"offset":592},"indent":[]}}],"position":{"start":{"line":4,"column":99,"offset":572},"end":{"line":4,"column":121,"offset":594},"indent":[]}},{"type":"text","value":" command.","position":{"start":{"line":4,"column":121,"offset":594},"end":{"line":4,"column":130,"offset":603},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":474},"end":{"line":4,"column":130,"offset":603},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" git rebase -i #All since the last commit git rebase -i HEAD~5 #Last 5 commits ","position":{"start":{"line":6,"column":1,"offset":605},"end":{"line":8,"column":5,"offset":694},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I wrote two commands that are doing almost the same. the first one does not specify the commit to takes. By default, it will takes all commit not pushed. The second command take the last 5 commits. This will redirect you to the interactive rebase screen. From that screen, it is possible to squash, edit or pick a command. You will also notice that the screen display all commit from the more old to the newest commit. You will see one line per commit. This allow you to edit every line by choosing if you want to keep the commit, with ","position":{"start":{"line":10,"column":1,"offset":696},"end":{"line":10,"column":537,"offset":1232},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"pick","position":{"start":{"line":10,"column":539,"offset":1234},"end":{"line":10,"column":543,"offset":1238},"indent":[]}}],"position":{"start":{"line":10,"column":537,"offset":1232},"end":{"line":10,"column":545,"offset":1240},"indent":[]}},{"type":"text","value":", to get the code but not the message with ","position":{"start":{"line":10,"column":545,"offset":1240},"end":{"line":10,"column":588,"offset":1283},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"squash","position":{"start":{"line":10,"column":590,"offset":1285},"end":{"line":10,"column":596,"offset":1291},"indent":[]}}],"position":{"start":{"line":10,"column":588,"offset":1283},"end":{"line":10,"column":598,"offset":1293},"indent":[]}},{"type":"text","value":" or to edit the commit with ","position":{"start":{"line":10,"column":598,"offset":1293},"end":{"line":10,"column":626,"offset":1321},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"edit","position":{"start":{"line":10,"column":628,"offset":1323},"end":{"line":10,"column":632,"offset":1327},"indent":[]}}],"position":{"start":{"line":10,"column":626,"offset":1321},"end":{"line":10,"column":634,"offset":1329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":634,"offset":1329},"end":{"line":10,"column":635,"offset":1330},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":696},"end":{"line":10,"column":635,"offset":1330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's take the scenario that we want to combine everything in one commit. In that case, you ","position":{"start":{"line":12,"column":1,"offset":1332},"end":{"line":12,"column":93,"offset":1424},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"pick","position":{"start":{"line":12,"column":95,"offset":1426},"end":{"line":12,"column":99,"offset":1430},"indent":[]}}],"position":{"start":{"line":12,"column":93,"offset":1424},"end":{"line":12,"column":101,"offset":1432},"indent":[]}},{"type":"text","value":" the first commit ans ","position":{"start":{"line":12,"column":101,"offset":1432},"end":{"line":12,"column":123,"offset":1454},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"squash","position":{"start":{"line":12,"column":125,"offset":1456},"end":{"line":12,"column":131,"offset":1462},"indent":[]}}],"position":{"start":{"line":12,"column":123,"offset":1454},"end":{"line":12,"column":133,"offset":1464},"indent":[]}},{"type":"text","value":" all the other ones. You save and Git will open your default editor to allow you to edit the final message. Save and you are all set. At any time, if conflict occur you can abort. You just need to do the abort method of the git rebase command. ``` \n git rebase --abort ","position":{"start":{"line":12,"column":133,"offset":1464},"end":{"line":13,"column":21,"offset":1733},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1332},"end":{"line":13,"column":21,"offset":1733},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"\n\nexport const _frontmatter = {\"title\":\"Git Combining Commit Not Pushed Yet\",\"date\":\"2014-12-22\",\"categories\":[\"git\"]}","position":{"start":{"line":14,"column":1,"offset":1734},"end":{"line":17,"column":117,"offset":1857},"indent":[1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":17,"column":117,"offset":1857}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You are working on your computer, did several commit and you are ready to push. However, you may not want to push all the commit but only one that combine all your commit. Multiple cases exist like that you want all the code but not some of the comment related to commits. Another case could be that you the commit was not significant and you want to get ride of it. This is often the case of a commit without message. The change are required, but an empty commit is not.\"), mdx(\"p\", null, \"To combine commit you need to use the rebase method inside your own branch. This is done by using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rebase interactive\"), \" command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" git rebase -i #All since the last commit git rebase -i HEAD~5 #Last 5 commits \\n\")), mdx(\"p\", null, \"I wrote two commands that are doing almost the same. the first one does not specify the commit to takes. By default, it will takes all commit not pushed. The second command take the last 5 commits. This will redirect you to the interactive rebase screen. From that screen, it is possible to squash, edit or pick a command. You will also notice that the screen display all commit from the more old to the newest commit. You will see one line per commit. This allow you to edit every line by choosing if you want to keep the commit, with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pick\"), \", to get the code but not the message with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"squash\"), \" or to edit the commit with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"edit\"), \".\"), mdx(\"p\", null, \"Let's take the scenario that we want to combine everything in one commit. In that case, you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pick\"), \" the first commit ans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"squash\"), \" all the other ones. You save and Git will open your default editor to allow you to edit the final message. Save and you are all set. At any time, if conflict occur you can abort. You just need to do the abort method of the git rebase command. ```\\ngit rebase --abort \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"Git Combining Commit Not Pushed Yet\\\",\\\"date\\\":\\\"2014-12-22\\\",\\\"categories\\\":[\\\"git\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You are working on your computer, did several commit and you are ready to push. However, you may not want to push all the commit but only one that combine all your commit. Multiple cases exist like that you want all the code but not some of the comment related to commits. Another case could be that you the commit was not significant and you want to get ride of it. This is often the case of a commit without message. The change are required, but an empty commit is not.`}</p>\n    <p>{`To combine commit you need to use the rebase method inside your own branch. This is done by using `}<strong parentName=\"p\">{`rebase interactive`}</strong>{` command.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` git rebase -i #All since the last commit git rebase -i HEAD~5 #Last 5 commits \n`}</code></pre>\n    <p>{`I wrote two commands that are doing almost the same. the first one does not specify the commit to takes. By default, it will takes all commit not pushed. The second command take the last 5 commits. This will redirect you to the interactive rebase screen. From that screen, it is possible to squash, edit or pick a command. You will also notice that the screen display all commit from the more old to the newest commit. You will see one line per commit. This allow you to edit every line by choosing if you want to keep the commit, with `}<strong parentName=\"p\">{`pick`}</strong>{`, to get the code but not the message with `}<strong parentName=\"p\">{`squash`}</strong>{` or to edit the commit with `}<strong parentName=\"p\">{`edit`}</strong>{`.`}</p>\n    <p>{`Let's take the scenario that we want to combine everything in one commit. In that case, you `}<strong parentName=\"p\">{`pick`}</strong>{` the first commit ans `}<strong parentName=\"p\">{`squash`}</strong>{` all the other ones. You save and Git will open your default editor to allow you to edit the final message. Save and you are all set. At any time, if conflict occur you can abort. You just need to do the abort method of the git rebase command. \\`\\`\\`\ngit rebase --abort `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n\nexport const _frontmatter = {\"title\":\"Git Combining Commit Not Pushed Yet\",\"date\":\"2014-12-22\",\"categories\":[\"git\"]}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}