{"expireTime":9007200886478401000,"key":"gatsby-plugin-mdx-entire-payload-930eb8509380c052727ec0f9b84f46d8--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":5,"offset":5},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"SqlConnection","position":{"start":{"line":2,"column":6,"offset":6},"end":{"line":2,"column":19,"offset":19},"indent":[]}}],"position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"text","value":" object is an object that derive of ","position":{"start":{"line":2,"column":20,"offset":20},"end":{"line":2,"column":56,"offset":56},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"DbConnection","position":{"start":{"line":2,"column":57,"offset":57},"end":{"line":2,"column":69,"offset":69},"indent":[]}}],"position":{"start":{"line":2,"column":56,"offset":56},"end":{"line":2,"column":70,"offset":70},"indent":[]}},{"type":"text","value":". It opens the connection between the application and the database. It's also inherit of ","position":{"start":{"line":2,"column":70,"offset":70},"end":{"line":2,"column":159,"offset":159},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"IDisposable","position":{"start":{"line":2,"column":160,"offset":160},"end":{"line":2,"column":171,"offset":171},"indent":[]}}],"position":{"start":{"line":2,"column":159,"offset":159},"end":{"line":2,"column":172,"offset":172},"indent":[]}},{"type":"text","value":" because of ","position":{"start":{"line":2,"column":172,"offset":172},"end":{"line":2,"column":184,"offset":184},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"DbConnection","position":{"start":{"line":2,"column":185,"offset":185},"end":{"line":2,"column":197,"offset":197},"indent":[]}}],"position":{"start":{"line":2,"column":184,"offset":184},"end":{"line":2,"column":198,"offset":198},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":198,"offset":198},"end":{"line":2,"column":199,"offset":199},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":199,"offset":199},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var connection = new SqlConnection(); connection.ConnectionString = @\"Data Source=PATRICK-PC\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\"; connection.Open(); connection.Close(); ","position":{"start":{"line":5,"column":1,"offset":202},"end":{"line":7,"column":4,"offset":414},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"or","position":{"start":{"line":9,"column":1,"offset":416},"end":{"line":9,"column":3,"offset":418},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":416},"end":{"line":9,"column":3,"offset":418},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" using (var connection = new SqlConnection()) { connection.ConnectionString = @\"Data Source=PATRICK-PC\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\"; connection.Open(); connection.Close(); } ","position":{"start":{"line":12,"column":1,"offset":421},"end":{"line":14,"column":4,"offset":644},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These two snippets of code illustrate the creation of a connection. Both of them were using connection string from a string but the value can be directly loaded from the app.config or web.config.","position":{"start":{"line":16,"column":1,"offset":646},"end":{"line":16,"column":196,"offset":841},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":646},"end":{"line":16,"column":196,"offset":841},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"ApplicationServices\"]; using (var connection = new SqlConnection(connectionStringSettings.ConnectionString)) { connection.Open(); connection.Close(); } ","position":{"start":{"line":19,"column":1,"offset":844},"end":{"line":21,"column":5,"offset":1104},"indent":[1,1]}},{"type":"code","lang":"xml","meta":null,"value":" <configuration> <connectionStrings> <add name=\"ApplicationServices\" connectionString=\"Data Source=PATRICK-PC\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\" providerName=\"System.Data.SqlClient\" /> </connectionStrings> ... ... ","position":{"start":{"line":22,"column":1,"offset":1105},"end":{"line":24,"column":4,"offset":1359},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Mastering SqlConnection\",\"date\":\"2011-09-26\",\"categories\":[\"ado-net\"]}","position":{"start":{"line":28,"column":1,"offset":1363},"end":{"line":28,"column":109,"offset":1471},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":109,"offset":1471}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Mastering SqlConnection\",\n  \"date\": \"2011-09-26\",\n  \"categories\": [\"ado-net\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SqlConnection\"), \" object is an object that derive of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DbConnection\"), \". It opens the connection between the application and the database. It's also inherit of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IDisposable\"), \" because of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DbConnection\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var connection = new SqlConnection(); connection.ConnectionString = @\\\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\\\"; connection.Open(); connection.Close(); \\n\")), mdx(\"p\", null, \"or\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" using (var connection = new SqlConnection()) { connection.ConnectionString = @\\\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\\\"; connection.Open(); connection.Close(); } \\n\")), mdx(\"p\", null, \"These two snippets of code illustrate the creation of a connection. Both of them were using connection string from a string but the value can be directly loaded from the app.config or web.config.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\\\"ApplicationServices\\\"]; using (var connection = new SqlConnection(connectionStringSettings.ConnectionString)) { connection.Open(); connection.Close(); } \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <configuration> <connectionStrings> <add name=\\\"ApplicationServices\\\" connectionString=\\\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\\\" providerName=\\\"System.Data.SqlClient\\\" /> </connectionStrings> ... ... \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Mastering SqlConnection\",\n  \"date\": \"2011-09-26\",\n  \"categories\": [\"ado-net\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`The `}<em parentName=\"p\">{`SqlConnection`}</em>{` object is an object that derive of `}<em parentName=\"p\">{`DbConnection`}</em>{`. It opens the connection between the application and the database. It's also inherit of `}<em parentName=\"p\">{`IDisposable`}</em>{` because of `}<em parentName=\"p\">{`DbConnection`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var connection = new SqlConnection(); connection.ConnectionString = @\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\"; connection.Open(); connection.Close(); \n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` using (var connection = new SqlConnection()) { connection.ConnectionString = @\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\"; connection.Open(); connection.Close(); } \n`}</code></pre>\n    <p>{`These two snippets of code illustrate the creation of a connection. Both of them were using connection string from a string but the value can be directly loaded from the app.config or web.config.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\"ApplicationServices\"]; using (var connection = new SqlConnection(connectionStringSettings.ConnectionString)) { connection.Open(); connection.Close(); } \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` <configuration> <connectionStrings> <add name=\"ApplicationServices\" connectionString=\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\" providerName=\"System.Data.SqlClient\" /> </connectionStrings> ... ... \n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}