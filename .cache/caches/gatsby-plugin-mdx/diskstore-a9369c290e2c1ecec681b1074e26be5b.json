{"expireTime":9007200886478386000,"key":"gatsby-plugin-mdx-entire-payload-fbc74c3527d9c8a87d934740712f6043--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to quickly works on a new feature without affecting the team's branch or the master branch, you may want to create a specific branch for your work. This is also known as a topic branch. Here are the commands that I use.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":232,"offset":232},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":232,"offset":232},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" mkdir MyNewFeature cd MyNewFeature git init git clone -b teamBranch https://yourgit.git git checkout -b users/mrdesjardins/MyNewFeature git branch -u origin/teamBranch git push origin users/mrdesjardins/MyNewFeature ","position":{"start":{"line":4,"column":1,"offset":234},"end":{"line":6,"column":5,"offset":461},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first two lines create a new folder and move your position into it. This has nothing to do with Git. The next one ","position":{"start":{"line":8,"column":1,"offset":463},"end":{"line":8,"column":119,"offset":581},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"create a new local branch","position":{"start":{"line":8,"column":121,"offset":583},"end":{"line":8,"column":146,"offset":608},"indent":[]}}],"position":{"start":{"line":8,"column":119,"offset":581},"end":{"line":8,"column":148,"offset":610},"indent":[]}},{"type":"text","value":" with the specified existing remote branch of the remote server. At that moment, you have the same branch. You need to create a new local branch from that branch. This is done with checkout. Something interesting but not required is to ","position":{"start":{"line":8,"column":148,"offset":610},"end":{"line":8,"column":384,"offset":846},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"set the upstream","position":{"start":{"line":8,"column":386,"offset":848},"end":{"line":8,"column":402,"offset":864},"indent":[]}}],"position":{"start":{"line":8,"column":384,"offset":846},"end":{"line":8,"column":404,"offset":866},"indent":[]}},{"type":"text","value":". Setting the upstream allow to know if the branch you branched from has changed. This way you can synchronize (pull). The last line is ","position":{"start":{"line":8,"column":404,"offset":866},"end":{"line":8,"column":540,"offset":1002},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"pushing your new local branch to the server","position":{"start":{"line":8,"column":542,"offset":1004},"end":{"line":8,"column":585,"offset":1047},"indent":[]}}],"position":{"start":{"line":8,"column":540,"offset":1002},"end":{"line":8,"column":587,"offset":1049},"indent":[]}},{"type":"text","value":". In that example, the same name so I do not need semi-colon. Otherwise you need to specify local:remove. For example, I could create the local without having the users/mrdesjardins/ and just using MyNewFeature local branch into the remote location users/mrdesjardins/MyNewFeature.","position":{"start":{"line":8,"column":587,"offset":1049},"end":{"line":8,"column":868,"offset":1330},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":463},"end":{"line":8,"column":868,"offset":1330},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Create a new branch from an existing remote branch\",\"date\":\"2015-07-03\",\"categories\":[\"git\"]}","position":{"start":{"line":11,"column":1,"offset":1333},"end":{"line":11,"column":132,"offset":1464},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":132,"offset":1464}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create a new branch from an existing remote branch\",\n  \"date\": \"2015-07-03\",\n  \"categories\": [\"git\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you want to quickly works on a new feature without affecting the team's branch or the master branch, you may want to create a specific branch for your work. This is also known as a topic branch. Here are the commands that I use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" mkdir MyNewFeature cd MyNewFeature git init git clone -b teamBranch https://yourgit.git git checkout -b users/mrdesjardins/MyNewFeature git branch -u origin/teamBranch git push origin users/mrdesjardins/MyNewFeature \\n\")), mdx(\"p\", null, \"The first two lines create a new folder and move your position into it. This has nothing to do with Git. The next one \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"create a new local branch\"), \" with the specified existing remote branch of the remote server. At that moment, you have the same branch. You need to create a new local branch from that branch. This is done with checkout. Something interesting but not required is to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"set the upstream\"), \". Setting the upstream allow to know if the branch you branched from has changed. This way you can synchronize (pull). The last line is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pushing your new local branch to the server\"), \". In that example, the same name so I do not need semi-colon. Otherwise you need to specify local:remove. For example, I could create the local without having the users/mrdesjardins/ and just using MyNewFeature local branch into the remote location users/mrdesjardins/MyNewFeature.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Create a new branch from an existing remote branch\",\n  \"date\": \"2015-07-03\",\n  \"categories\": [\"git\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you want to quickly works on a new feature without affecting the team's branch or the master branch, you may want to create a specific branch for your work. This is also known as a topic branch. Here are the commands that I use.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` mkdir MyNewFeature cd MyNewFeature git init git clone -b teamBranch https://yourgit.git git checkout -b users/mrdesjardins/MyNewFeature git branch -u origin/teamBranch git push origin users/mrdesjardins/MyNewFeature \n`}</code></pre>\n    <p>{`The first two lines create a new folder and move your position into it. This has nothing to do with Git. The next one `}<strong parentName=\"p\">{`create a new local branch`}</strong>{` with the specified existing remote branch of the remote server. At that moment, you have the same branch. You need to create a new local branch from that branch. This is done with checkout. Something interesting but not required is to `}<strong parentName=\"p\">{`set the upstream`}</strong>{`. Setting the upstream allow to know if the branch you branched from has changed. This way you can synchronize (pull). The last line is `}<strong parentName=\"p\">{`pushing your new local branch to the server`}</strong>{`. In that example, the same name so I do not need semi-colon. Otherwise you need to specify local:remove. For example, I could create the local without having the users/mrdesjardins/ and just using MyNewFeature local branch into the remote location users/mrdesjardins/MyNewFeature.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}