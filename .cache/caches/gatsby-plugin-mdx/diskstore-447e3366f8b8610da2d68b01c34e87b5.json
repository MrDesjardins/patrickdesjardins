{"expireTime":9007200886478388000,"key":"gatsby-plugin-mdx-entire-payload-e06f20c1b21ecdb6a270252e3a7f3ff6--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"If you started doing some code modification but you realize that you should have done these modifications in a branch instead of directly into the branch you did the modification, you can move all files into a new branch. The command is checkout with the parameter ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":266,"offset":266},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"-b","position":{"start":{"line":2,"column":268,"offset":268},"end":{"line":2,"column":270,"offset":270},"indent":[]}}],"position":{"start":{"line":2,"column":266,"offset":266},"end":{"line":2,"column":272,"offset":272},"indent":[]}},{"type":"text","value":" which create the branch if this one does not exist.","position":{"start":{"line":2,"column":272,"offset":272},"end":{"line":2,"column":324,"offset":324},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":324,"offset":324},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" git checkout -b NewBranch git add . ","position":{"start":{"line":4,"column":1,"offset":326},"end":{"line":6,"column":5,"offset":373},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The git ","position":{"start":{"line":8,"column":1,"offset":375},"end":{"line":8,"column":9,"offset":383},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"add .","position":{"start":{"line":8,"column":11,"offset":385},"end":{"line":8,"column":16,"offset":390},"indent":[]}}],"position":{"start":{"line":8,"column":9,"offset":383},"end":{"line":8,"column":18,"offset":392},"indent":[]}},{"type":"text","value":" simply add all uncommited file into the staged area.","position":{"start":{"line":8,"column":18,"offset":392},"end":{"line":8,"column":71,"offset":445},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":375},"end":{"line":8,"column":71,"offset":445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Other possibility exist like using ","position":{"start":{"line":10,"column":1,"offset":447},"end":{"line":10,"column":36,"offset":482},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"git stash","position":{"start":{"line":10,"column":38,"offset":484},"end":{"line":10,"column":47,"offset":493},"indent":[]}}],"position":{"start":{"line":10,"column":36,"offset":482},"end":{"line":10,"column":49,"offset":495},"indent":[]}},{"type":"text","value":" to move uncommited code into a temporary place and unstash into another branch. ``` \n git stash git checkout NewBranch git stash apply ","position":{"start":{"line":10,"column":49,"offset":495},"end":{"line":11,"column":51,"offset":631},"indent":[1]}}],"position":{"start":{"line":10,"column":1,"offset":447},"end":{"line":11,"column":51,"offset":631},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"\n\nexport const _frontmatter = {\"title\":\"Create a New Git Branch with Uncommited Code\",\"date\":\"2014-12-08\",\"categories\":[\"git\"]}","position":{"start":{"line":12,"column":1,"offset":632},"end":{"line":15,"column":126,"offset":764},"indent":[1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":126,"offset":764}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you started doing some code modification but you realize that you should have done these modifications in a branch instead of directly into the branch you did the modification, you can move all files into a new branch. The command is checkout with the parameter \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"-b\"), \" which create the branch if this one does not exist.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" git checkout -b NewBranch git add . \\n\")), mdx(\"p\", null, \"The git \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"add .\"), \" simply add all uncommited file into the staged area.\"), mdx(\"p\", null, \"Other possibility exist like using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"git stash\"), \" to move uncommited code into a temporary place and unstash into another branch. ```\\ngit stash git checkout NewBranch git stash apply \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"Create a New Git Branch with Uncommited Code\\\",\\\"date\\\":\\\"2014-12-08\\\",\\\"categories\\\":[\\\"git\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`If you started doing some code modification but you realize that you should have done these modifications in a branch instead of directly into the branch you did the modification, you can move all files into a new branch. The command is checkout with the parameter `}<strong parentName=\"p\">{`-b`}</strong>{` which create the branch if this one does not exist.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` git checkout -b NewBranch git add . \n`}</code></pre>\n    <p>{`The git `}<strong parentName=\"p\">{`add .`}</strong>{` simply add all uncommited file into the staged area.`}</p>\n    <p>{`Other possibility exist like using `}<strong parentName=\"p\">{`git stash`}</strong>{` to move uncommited code into a temporary place and unstash into another branch. \\`\\`\\`\ngit stash git checkout NewBranch git stash apply `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n\nexport const _frontmatter = {\"title\":\"Create a New Git Branch with Uncommited Code\",\"date\":\"2014-12-08\",\"categories\":[\"git\"]}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}