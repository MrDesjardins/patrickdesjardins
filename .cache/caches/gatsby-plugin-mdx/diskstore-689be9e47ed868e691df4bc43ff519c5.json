{"expireTime":9007200886478393000,"key":"gatsby-plugin-mdx-entire-payload-d454af31de4d6d30cbe4a38cd408e4af--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"With JQuery you can use Parent, Parents and Closest to search element at a higher level of the one selected. What are the differences?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":135,"offset":135},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":135,"offset":135},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"JQuery Parent selector","position":{"start":{"line":4,"column":4,"offset":140},"end":{"line":4,"column":26,"offset":162},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":137},"end":{"line":4,"column":26,"offset":162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parent() will search one level up only. For example here is the html code of a situation where you can see two level deep of div and a paragraph. ","position":{"start":{"line":6,"column":1,"offset":164},"end":{"line":6,"column":147,"offset":310},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":164},"end":{"line":6,"column":147,"offset":310},"indent":[]}},{"type":"code","lang":"html","meta":"<div class=\"parent1\">; <div class=\"parent2\">; <p>;Hello Again</p>; </div>; </div>;","value":"","position":{"start":{"line":7,"column":1,"offset":311},"end":{"line":8,"column":5,"offset":408},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If we use the Parent selector on the paragraph it will select parent2 division.","position":{"start":{"line":10,"column":1,"offset":410},"end":{"line":10,"column":80,"offset":489},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":410},"end":{"line":10,"column":80,"offset":489},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$(\"p\").parent().css(\"background\", \"yellow\"); ","position":{"start":{"line":12,"column":1,"offset":491},"end":{"line":14,"column":5,"offset":555},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can see this example in action here : ","position":{"start":{"line":17,"column":1,"offset":558},"end":{"line":17,"column":43,"offset":600},"indent":[]}},{"type":"link","title":null,"url":"http://jsfiddle.net/C5Shz/","children":[{"type":"text","value":"http://jsfiddle.net/C5Shz/","position":{"start":{"line":17,"column":44,"offset":601},"end":{"line":17,"column":70,"offset":627},"indent":[]}}],"position":{"start":{"line":17,"column":43,"offset":600},"end":{"line":17,"column":99,"offset":656},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":558},"end":{"line":17,"column":99,"offset":656},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Even by specifying the class of the second level, nothing will be selected.","position":{"start":{"line":19,"column":1,"offset":658},"end":{"line":19,"column":76,"offset":733},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":658},"end":{"line":19,"column":76,"offset":733},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$(\"p\").parent('parent1').css(\"background\", \"yellow\"); ","position":{"start":{"line":21,"column":1,"offset":735},"end":{"line":23,"column":5,"offset":808},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can see the result : ","position":{"start":{"line":26,"column":1,"offset":811},"end":{"line":26,"column":26,"offset":836},"indent":[]}},{"type":"link","title":null,"url":"http://jsfiddle.net/L953U/","children":[{"type":"text","value":"http://jsfiddle.net/L953U/","position":{"start":{"line":26,"column":27,"offset":837},"end":{"line":26,"column":53,"offset":863},"indent":[]}}],"position":{"start":{"line":26,"column":26,"offset":836},"end":{"line":26,"column":82,"offset":892},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":811},"end":{"line":26,"column":82,"offset":892},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The reason is that parent go only one level up.","position":{"start":{"line":28,"column":1,"offset":894},"end":{"line":28,"column":48,"offset":941},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":894},"end":{"line":28,"column":48,"offset":941},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"JQuery Parents selector","position":{"start":{"line":30,"column":4,"offset":946},"end":{"line":30,"column":27,"offset":969},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":943},"end":{"line":30,"column":27,"offset":969},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parents will return an array of elements. It returns all element from root to the selected element.","position":{"start":{"line":32,"column":1,"offset":971},"end":{"line":32,"column":100,"offset":1070},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":971},"end":{"line":32,"column":100,"offset":1070},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$(\"p\").parents('div').css(\"background\", \"yellow\"); ","position":{"start":{"line":34,"column":1,"offset":1072},"end":{"line":36,"column":5,"offset":1142},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":" This return 2 divisions, the parent1 and the parent2. The reason is that the parent1 is the root parent and parent2 is the parent between the selected one (p) and the searched element.","position":{"start":{"line":37,"column":1,"offset":1143},"end":{"line":37,"column":186,"offset":1328},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1143},"end":{"line":37,"column":186,"offset":1328},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can see the example in action here : ","position":{"start":{"line":39,"column":1,"offset":1330},"end":{"line":39,"column":42,"offset":1371},"indent":[]}},{"type":"link","title":null,"url":"http://jsfiddle.net/u7SaF/","children":[{"type":"text","value":"http://jsfiddle.net/u7SaF/","position":{"start":{"line":39,"column":43,"offset":1372},"end":{"line":39,"column":69,"offset":1398},"indent":[]}}],"position":{"start":{"line":39,"column":42,"offset":1371},"end":{"line":39,"column":98,"offset":1427},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1330},"end":{"line":39,"column":98,"offset":1427},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"JQuery Closest selector","position":{"start":{"line":41,"column":4,"offset":1432},"end":{"line":41,"column":27,"offset":1455},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1429},"end":{"line":41,"column":27,"offset":1455},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"closest() looks up the tree like .parent() but stop when the search is found. It return a single element or nothing is nothing is found.","position":{"start":{"line":43,"column":1,"offset":1457},"end":{"line":43,"column":137,"offset":1593},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1457},"end":{"line":43,"column":137,"offset":1593},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"$(\"p\").closest(\"div\").css(\"background\", \"blue\"); ","position":{"start":{"line":45,"column":1,"offset":1595},"end":{"line":47,"column":5,"offset":1663},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will color in blue the closest division from the p.","position":{"start":{"line":50,"column":1,"offset":1666},"end":{"line":50,"column":57,"offset":1722},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1666},"end":{"line":50,"column":57,"offset":1722},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the example in action. ","position":{"start":{"line":52,"column":1,"offset":1724},"end":{"line":52,"column":32,"offset":1755},"indent":[]}},{"type":"link","title":null,"url":"http://jsfiddle.net/ZNQ5Q/","children":[{"type":"text","value":"http://jsfiddle.net/ZNQ5Q/","position":{"start":{"line":52,"column":33,"offset":1756},"end":{"line":52,"column":59,"offset":1782},"indent":[]}}],"position":{"start":{"line":52,"column":32,"offset":1755},"end":{"line":52,"column":88,"offset":1811},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1724},"end":{"line":52,"column":88,"offset":1811},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we summarize everything in bullet point:","position":{"start":{"line":54,"column":1,"offset":1813},"end":{"line":54,"column":44,"offset":1856},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1813},"end":{"line":54,"column":44,"offset":1856},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Parent","position":{"start":{"line":56,"column":3,"offset":1860},"end":{"line":56,"column":9,"offset":1866},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1858},"end":{"line":56,"column":11,"offset":1868},"indent":[]}},{"type":"text","value":": - Begins with the current element and go only one level up - The returned jQuery object contains zero or one element - The returned jQuery object contains zero or one element ","position":{"start":{"line":56,"column":11,"offset":1868},"end":{"line":56,"column":188,"offset":2045},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Parents","position":{"start":{"line":56,"column":190,"offset":2047},"end":{"line":56,"column":197,"offset":2054},"indent":[]}}],"position":{"start":{"line":56,"column":188,"offset":2045},"end":{"line":56,"column":199,"offset":2056},"indent":[]}},{"type":"text","value":": - Begins with the parent element - Travels up the DOM tree but return element in reverse - The returned jQuery object contains zero, one, or multiple elements ","position":{"start":{"line":56,"column":199,"offset":2056},"end":{"line":56,"column":360,"offset":2217},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Closest","position":{"start":{"line":56,"column":362,"offset":2219},"end":{"line":56,"column":369,"offset":2226},"indent":[]}}],"position":{"start":{"line":56,"column":360,"offset":2217},"end":{"line":56,"column":371,"offset":2228},"indent":[]}},{"type":"text","value":": - Begins with the current element - Travels up the DOM tree until it finds a match for the supplied selector - The returned jQuery object contains zero or one element","position":{"start":{"line":56,"column":371,"offset":2228},"end":{"line":56,"column":539,"offset":2396},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1858},"end":{"line":56,"column":539,"offset":2396},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, I often see code with multiple parent() called. For example, $(\"p\").parent().parent()..css(\"background\", \"blue\"). Instead, you can use ","position":{"start":{"line":58,"column":1,"offset":2398},"end":{"line":58,"column":145,"offset":2542},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"eq","position":{"start":{"line":58,"column":146,"offset":2543},"end":{"line":58,"column":148,"offset":2545},"indent":[]}}],"position":{"start":{"line":58,"column":145,"offset":2542},"end":{"line":58,"column":149,"offset":2546},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":58,"column":149,"offset":2546},"end":{"line":58,"column":155,"offset":2552},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"parents","position":{"start":{"line":58,"column":156,"offset":2553},"end":{"line":58,"column":163,"offset":2560},"indent":[]}}],"position":{"start":{"line":58,"column":155,"offset":2552},"end":{"line":58,"column":164,"offset":2561},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":58,"column":164,"offset":2561},"end":{"line":58,"column":165,"offset":2562},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2398},"end":{"line":58,"column":165,"offset":2562},"indent":[]}},{"type":"code","lang":"html","meta":"<div>; <div>; <div>; <p>;Hello Again</p>; </div>; </div>; </div>;","value":"```  ```typescript\n$(\"p\").parents().eq(2).css(\"background\", \"blue\"); ","position":{"start":{"line":61,"column":1,"offset":2565},"end":{"line":64,"column":5,"offset":2715},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will get all parents and since the order are from the parent selection the list will return the level up. Do not forget that the index your provide start with 0 which is the immediate parent element. In the example above, only the first div will have a background blue while the two inner divisions will remain white.","position":{"start":{"line":67,"column":1,"offset":2718},"end":{"line":67,"column":323,"offset":3040},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2718},"end":{"line":67,"column":323,"offset":3040},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the ","position":{"start":{"line":69,"column":1,"offset":3042},"end":{"line":69,"column":13,"offset":3054},"indent":[]}},{"type":"link","title":null,"url":"http://jsfiddle.net/U4msb/1/","children":[{"type":"text","value":"example in action","position":{"start":{"line":69,"column":14,"offset":3055},"end":{"line":69,"column":31,"offset":3072},"indent":[]}}],"position":{"start":{"line":69,"column":13,"offset":3054},"end":{"line":69,"column":62,"offset":3103},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":69,"column":62,"offset":3103},"end":{"line":69,"column":63,"offset":3104},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3042},"end":{"line":69,"column":63,"offset":3104},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Jquery selector Parent vs Closest to search element through upper levels of hierarchical structure\",\"date\":\"2013-01-23\",\"categories\":[\"javascript\"]}","position":{"start":{"line":72,"column":1,"offset":3107},"end":{"line":72,"column":187,"offset":3293},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":187,"offset":3293}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jquery selector Parent vs Closest to search element through upper levels of hierarchical structure\",\n  \"date\": \"2013-01-23\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"With JQuery you can use Parent, Parents and Closest to search element at a higher level of the one selected. What are the differences?\"), mdx(\"h2\", null, \"JQuery Parent selector\"), mdx(\"p\", null, \"Parent() will search one level up only. For example here is the html code of a situation where you can see two level deep of div and a paragraph. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html \\\"parent2\\\">;\",\n    \"metastring\": \"<div class=\\\"parent1\\\">; <div class=\\\"parent2\\\">; <p>;Hello Again</p>; </div>; </div>;\",\n    \"<div\": true,\n    \"<p>;Hello\": true,\n    \"Again</p>;\": true,\n    \"</div>;\": true\n  }, \"\")), mdx(\"p\", null, \"If we use the Parent selector on the paragraph it will select parent2 division.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"p\\\").parent().css(\\\"background\\\", \\\"yellow\\\"); \\n\")), mdx(\"p\", null, \"You can see this example in action here : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/C5Shz/\"\n  }, \"http://jsfiddle.net/C5Shz/\")), mdx(\"p\", null, \"Even by specifying the class of the second level, nothing will be selected.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"p\\\").parent('parent1').css(\\\"background\\\", \\\"yellow\\\"); \\n\")), mdx(\"p\", null, \"You can see the result : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/L953U/\"\n  }, \"http://jsfiddle.net/L953U/\")), mdx(\"p\", null, \"The reason is that parent go only one level up.\"), mdx(\"h2\", null, \"JQuery Parents selector\"), mdx(\"p\", null, \"Parents will return an array of elements. It returns all element from root to the selected element.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"p\\\").parents('div').css(\\\"background\\\", \\\"yellow\\\"); \\n\")), mdx(\"p\", null, \" This return 2 divisions, the parent1 and the parent2. The reason is that the parent1 is the root parent and parent2 is the parent between the selected one (p) and the searched element.\"), mdx(\"p\", null, \"You can see the example in action here : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/u7SaF/\"\n  }, \"http://jsfiddle.net/u7SaF/\")), mdx(\"h2\", null, \"JQuery Closest selector\"), mdx(\"p\", null, \"closest() looks up the tree like .parent() but stop when the search is found. It return a single element or nothing is nothing is found.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"p\\\").closest(\\\"div\\\").css(\\\"background\\\", \\\"blue\\\"); \\n\")), mdx(\"p\", null, \"This will color in blue the closest division from the p.\"), mdx(\"p\", null, \"Here is the example in action. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/ZNQ5Q/\"\n  }, \"http://jsfiddle.net/ZNQ5Q/\")), mdx(\"p\", null, \"If we summarize everything in bullet point:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parent\"), \": - Begins with the current element and go only one level up - The returned jQuery object contains zero or one element - The returned jQuery object contains zero or one element \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parents\"), \": - Begins with the parent element - Travels up the DOM tree but return element in reverse - The returned jQuery object contains zero, one, or multiple elements \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Closest\"), \": - Begins with the current element - Travels up the DOM tree until it finds a match for the supplied selector - The returned jQuery object contains zero or one element\"), mdx(\"p\", null, \"Finally, I often see code with multiple parent() called. For example, $(\\\"p\\\").parent().parent()..css(\\\"background\\\", \\\"blue\\\"). Instead, you can use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"eq\"), \" with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parents\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"<div>; <div>; <div>; <p>;Hello Again</p>; </div>; </div>; </div>;\",\n    \"<div>;\": true,\n    \"<p>;Hello\": true,\n    \"Again</p>;\": true,\n    \"</div>;\": true\n  }, \"```  ```typescript\\n$(\\\"p\\\").parents().eq(2).css(\\\"background\\\", \\\"blue\\\"); \\n\")), mdx(\"p\", null, \"This will get all parents and since the order are from the parent selection the list will return the level up. Do not forget that the index your provide start with 0 which is the immediate parent element. In the example above, only the first div will have a background blue while the two inner divisions will remain white.\"), mdx(\"p\", null, \"Here is the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/U4msb/1/\"\n  }, \"example in action\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Jquery selector Parent vs Closest to search element through upper levels of hierarchical structure\",\n  \"date\": \"2013-01-23\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`With JQuery you can use Parent, Parents and Closest to search element at a higher level of the one selected. What are the differences?`}</p>\n    <h2>{`JQuery Parent selector`}</h2>\n    <p>{`Parent() will search one level up only. For example here is the html code of a situation where you can see two level deep of div and a paragraph. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html \\\"parent2\\\">;\",\n        \"metastring\": \"<div class=\\\"parent1\\\">; <div class=\\\"parent2\\\">; <p>;Hello Again</p>; </div>; </div>;\",\n        \"<div\": true,\n        \"<p>;Hello\": true,\n        \"Again</p>;\": true,\n        \"</div>;\": true\n      }}>{``}</code></pre>\n    <p>{`If we use the Parent selector on the paragraph it will select parent2 division.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$(\"p\").parent().css(\"background\", \"yellow\"); \n`}</code></pre>\n    <p>{`You can see this example in action here : `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsfiddle.net/C5Shz/\"\n      }}>{`http://jsfiddle.net/C5Shz/`}</a></p>\n    <p>{`Even by specifying the class of the second level, nothing will be selected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$(\"p\").parent('parent1').css(\"background\", \"yellow\"); \n`}</code></pre>\n    <p>{`You can see the result : `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsfiddle.net/L953U/\"\n      }}>{`http://jsfiddle.net/L953U/`}</a></p>\n    <p>{`The reason is that parent go only one level up.`}</p>\n    <h2>{`JQuery Parents selector`}</h2>\n    <p>{`Parents will return an array of elements. It returns all element from root to the selected element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$(\"p\").parents('div').css(\"background\", \"yellow\"); \n`}</code></pre>\n    <p>{` This return 2 divisions, the parent1 and the parent2. The reason is that the parent1 is the root parent and parent2 is the parent between the selected one (p) and the searched element.`}</p>\n    <p>{`You can see the example in action here : `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsfiddle.net/u7SaF/\"\n      }}>{`http://jsfiddle.net/u7SaF/`}</a></p>\n    <h2>{`JQuery Closest selector`}</h2>\n    <p>{`closest() looks up the tree like .parent() but stop when the search is found. It return a single element or nothing is nothing is found.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`$(\"p\").closest(\"div\").css(\"background\", \"blue\"); \n`}</code></pre>\n    <p>{`This will color in blue the closest division from the p.`}</p>\n    <p>{`Here is the example in action. `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsfiddle.net/ZNQ5Q/\"\n      }}>{`http://jsfiddle.net/ZNQ5Q/`}</a></p>\n    <p>{`If we summarize everything in bullet point:`}</p>\n    <p><strong parentName=\"p\">{`Parent`}</strong>{`: - Begins with the current element and go only one level up - The returned jQuery object contains zero or one element - The returned jQuery object contains zero or one element `}<strong parentName=\"p\">{`Parents`}</strong>{`: - Begins with the parent element - Travels up the DOM tree but return element in reverse - The returned jQuery object contains zero, one, or multiple elements `}<strong parentName=\"p\">{`Closest`}</strong>{`: - Begins with the current element - Travels up the DOM tree until it finds a match for the supplied selector - The returned jQuery object contains zero or one element`}</p>\n    <p>{`Finally, I often see code with multiple parent() called. For example, $(\"p\").parent().parent()..css(\"background\", \"blue\"). Instead, you can use `}<em parentName=\"p\">{`eq`}</em>{` with `}<em parentName=\"p\">{`parents`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\",\n        \"metastring\": \"<div>; <div>; <div>; <p>;Hello Again</p>; </div>; </div>; </div>;\",\n        \"<div>;\": true,\n        \"<p>;Hello\": true,\n        \"Again</p>;\": true,\n        \"</div>;\": true\n      }}>{`\\`\\`\\`  \\`\\`\\`typescript\n$(\"p\").parents().eq(2).css(\"background\", \"blue\"); \n`}</code></pre>\n    <p>{`This will get all parents and since the order are from the parent selection the list will return the level up. Do not forget that the index your provide start with 0 which is the immediate parent element. In the example above, only the first div will have a background blue while the two inner divisions will remain white.`}</p>\n    <p>{`Here is the `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsfiddle.net/U4msb/1/\"\n      }}>{`example in action`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}