{"expireTime":9007200886478384000,"key":"gatsby-plugin-mdx-entire-payload-7b11ceef859608fe2007be9926066a04--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Working with multiple languages requires to test in multiple languages too. A simple use case is if you have custom Asp.Net routing that you might want to test where an English route goes and the same for a French one. This goes beyond just text, but also how to handle numbers and datetime. The traditional way to do unit test in multiple localisations is to set the current thread at the beginning of the test, do the logic, assert and set the thread back to the original value.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":481,"offset":481},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":481,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The problem is that in all your code you need to set the thread manually. It would be better to have an attribute on the top of the test method and have this one handling the thread culture. Unfortunately, MSTest \"TestMethod\" attributes is sealed which mean you cannot inherit of this one. The work around is to create a custom attribute. However, this come with the challenge to hook into MsTest pipeline to have MsTest reads the attribute and act accordingly. This is what we will discuss in this article, how to use ","position":{"start":{"line":4,"column":1,"offset":483},"end":{"line":4,"column":520,"offset":1002},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ContextAttribute","position":{"start":{"line":4,"column":522,"offset":1004},"end":{"line":4,"column":538,"offset":1020},"indent":[]}}],"position":{"start":{"line":4,"column":520,"offset":1002},"end":{"line":4,"column":540,"offset":1022},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":4,"column":540,"offset":1022},"end":{"line":4,"column":542,"offset":1024},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IMessageSink","position":{"start":{"line":4,"column":544,"offset":1026},"end":{"line":4,"column":556,"offset":1038},"indent":[]}}],"position":{"start":{"line":4,"column":542,"offset":1024},"end":{"line":4,"column":558,"offset":1040},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":4,"column":558,"offset":1040},"end":{"line":4,"column":560,"offset":1042},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IContributeObjectSink","position":{"start":{"line":4,"column":562,"offset":1044},"end":{"line":4,"column":583,"offset":1065},"indent":[]}}],"position":{"start":{"line":4,"column":560,"offset":1042},"end":{"line":4,"column":585,"offset":1067},"indent":[]}},{"type":"text","value":" and so on.","position":{"start":{"line":4,"column":585,"offset":1067},"end":{"line":4,"column":596,"offset":1078},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":483},"end":{"line":4,"column":596,"offset":1078},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, let's create a standard attribute that we will use on top of our test that need localization. We will use this one in combination of the TestMethod. The use will looks like this:","position":{"start":{"line":6,"column":1,"offset":1080},"end":{"line":6,"column":186,"offset":1265},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":1080},"end":{"line":6,"column":186,"offset":1265},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" [TestMethod] [LocalizedTest(LocalizedSection.EN_NAME)] public void MyTest() { //... Your test } ","position":{"start":{"line":9,"column":1,"offset":1268},"end":{"line":11,"column":4,"offset":1379},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The attribute has a parameter which is the ","position":{"start":{"line":13,"column":1,"offset":1381},"end":{"line":13,"column":44,"offset":1424},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Culture Name","position":{"start":{"line":13,"column":46,"offset":1426},"end":{"line":13,"column":58,"offset":1438},"indent":[]}}],"position":{"start":{"line":13,"column":44,"offset":1424},"end":{"line":13,"column":60,"offset":1440},"indent":[]}},{"type":"text","value":" that we want to have the thread. The culture name is \"en-us\" for USA English or \"fr-ca\" Canadian French.","position":{"start":{"line":13,"column":60,"offset":1440},"end":{"line":13,"column":165,"offset":1545},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1381},"end":{"line":13,"column":165,"offset":1545},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class LocalizedTestAttribute:Attribute { public string CultureName {get; set;} public LocalizedTestAttribute(string cultureName) { this.CultureName = cultureName; } } ","position":{"start":{"line":16,"column":1,"offset":1548},"end":{"line":18,"column":4,"offset":1737},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A second attribute is required to be at the top of the class tested. This is the way to notify the Microsoft test framework that we want to hook inside the pipeline of tasks that the testing framework is going while executing tests. This attribute inherit from ","position":{"start":{"line":20,"column":1,"offset":1739},"end":{"line":20,"column":262,"offset":2000},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ContextAttribute","position":{"start":{"line":20,"column":264,"offset":2002},"end":{"line":20,"column":280,"offset":2018},"indent":[]}}],"position":{"start":{"line":20,"column":262,"offset":2000},"end":{"line":20,"column":282,"offset":2020},"indent":[]}},{"type":"text","value":", from ","position":{"start":{"line":20,"column":282,"offset":2020},"end":{"line":20,"column":289,"offset":2027},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"System.Runtime.Remoting.Contexts","position":{"start":{"line":20,"column":291,"offset":2029},"end":{"line":20,"column":323,"offset":2061},"indent":[]}}],"position":{"start":{"line":20,"column":289,"offset":2027},"end":{"line":20,"column":325,"offset":2063},"indent":[]}},{"type":"text","value":" namespace. The role of that class is to define a collection of possible hooks. In that case, we have only one hook that we call ","position":{"start":{"line":20,"column":325,"offset":2063},"end":{"line":20,"column":454,"offset":2192},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"LocalizedTestMessage","position":{"start":{"line":20,"column":456,"offset":2194},"end":{"line":20,"column":476,"offset":2214},"indent":[]}}],"position":{"start":{"line":20,"column":454,"offset":2192},"end":{"line":20,"column":478,"offset":2216},"indent":[]}},{"type":"text","value":". Those hooks are called \"messages\". I am using a helper named TestProperty which handle generic code for every message. This generic class is inspired by the ","position":{"start":{"line":20,"column":478,"offset":2216},"end":{"line":20,"column":637,"offset":2375},"indent":[]}},{"type":"link","title":null,"url":"http://mstestextensions.codeplex.com/SourceControl/latest#Trunk/Source/MSTestExtensions/TestAspect.cs","children":[{"type":"text","value":"MsTestExtension","position":{"start":{"line":20,"column":638,"offset":2376},"end":{"line":20,"column":653,"offset":2391},"indent":[]}}],"position":{"start":{"line":20,"column":637,"offset":2375},"end":{"line":20,"column":757,"offset":2495},"indent":[]}},{"type":"text","value":" source code.","position":{"start":{"line":20,"column":757,"offset":2495},"end":{"line":20,"column":770,"offset":2508},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1739},"end":{"line":20,"column":770,"offset":2508},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class LocalizedTestContextAttribute: ContextAttribute { public LocalizedTestContextAttribute():base(\"LocalizedTest\") {\n\n}\n\npublic override void GetPropertiesForNewContext(IConstructionCallMessage msg) { if (msg == null) throw new ArgumentNullException(\"msg\"); msg.ContextProperties.Add(new TestProperty<LocalizedTestMessage>()); //We add 1 new message into the test pipeline } }\n\npublic class TestProperty<T> : IContextProperty, IContributeObjectSink where T : IMessageSink, ITestMessage, new() {\n\nprivate readonly string_name = typeof(T).AssemblyQualifiedName;\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public bool IsNewContextOK(Context newCtx) { return true; }\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public void Freeze(Context newContext) { }\n\npublic string Name { [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] get { return_name; } }\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink) { T testAspect = new T(); testAspect.AddMessageSink(nextSink); return testAspect; } }\n\npublic interface ITestMessage { void AddMessageSink(IMessageSink messageSink); } ","position":{"start":{"line":23,"column":1,"offset":2511},"end":{"line":43,"column":4,"offset":3875},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, we need to have our LocalizedTest message hook (message) defined. This class defines what is done before and after the execution of the test. This class is able to access the tested method to check if ","position":{"start":{"line":45,"column":1,"offset":3877},"end":{"line":45,"column":211,"offset":4087},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"LocalizedTest","position":{"start":{"line":45,"column":213,"offset":4089},"end":{"line":45,"column":226,"offset":4102},"indent":[]}}],"position":{"start":{"line":45,"column":211,"offset":4087},"end":{"line":45,"column":228,"offset":4104},"indent":[]}},{"type":"text","value":" attribute is defined on the class. If yes, it proceeds, otherwise it executes the method without changing anything. When the attribute is present, it backup the current thread culture, get the culture name from the attribute and set it to the test thread. It executes the test, and set back the original thread.","position":{"start":{"line":45,"column":228,"offset":4104},"end":{"line":45,"column":540,"offset":4416},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":3877},"end":{"line":45,"column":540,"offset":4416},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class LocalizedTestMessage : BaseTestMessage<LocalizedTestAttribute>, IMessageSink, ITestMessage { private IMessageSink nextSink;\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessage SyncProcessMessage(IMessage msg) { if (msg == null) throw new ArgumentNullException(\"msg\"); CultureInfo currentCultureInfo = null; CultureInfo currentUICultureInfo = null;\n\n//Before test get value to set back after test LocalizedTestAttribute localizationAttribute = base.GetAttribute(msg); if (localizationAttribute != null) { currentCultureInfo = System.Threading.Thread.CurrentThread.CurrentCulture; currentUICultureInfo = System.Threading.Thread.CurrentThread.CurrentUICulture; System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo(localizationAttribute.CultureName); System.Threading.Thread.CurrentThread.CurrentUICulture = System.Threading.Thread.CurrentThread.CurrentCulture; }\n\n//Execute test IMessage returnMessage = nextSink.SyncProcessMessage(msg);\n\n//After test set back value if (localizationAttribute != null && currentCultureInfo!= null && currentUICultureInfo!=null) { System.Threading.Thread.CurrentThread.CurrentCulture = currentCultureInfo; System.Threading.Thread.CurrentThread.CurrentUICulture = currentUICultureInfo; } return returnMessage; }\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { throw new InvalidOperationException(); }\n\npublic IMessageSink NextSink { [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] get { return nextSink; } }\n\npublic void AddMessageSink(IMessageSink messageSink) { nextSink = messageSink; } }\n\npublic abstract class BaseTestMessage<TAttribute> where TAttribute : Attribute {\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] protected TAttribute GetAttribute(IMessage message) { string typeName = (string)message.Properties[\"__TypeName\"]; string methodName = (string)message.Properties[\"__MethodName\"]; Type callingType = Type.GetType(typeName); MethodInfo methodInfo = callingType.GetMethod(methodName); object[] attributes = methodInfo.GetCustomAttributes(typeof(TAttribute), true); TAttribute attribute = null; if (attributes.Length > 0) { attribute = attributes[0] as TAttribute; } return attribute; } } ","position":{"start":{"line":48,"column":1,"offset":4419},"end":{"line":68,"column":4,"offset":6902},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It would be even better if we could avoid having two different attributes on each test but this is a solution that still let us avoid having to handle thread on every test. It's also important to notice that this is only good for MsTest. If you are using other testing framework like nUnit or xUnit that this will not work. However, these frameworks have other mechanism to handle pre and post tests too. The documentation is very slim on Microsoft about there infrastructure classes. It comes from a pre-era where Microsoft where less open that it is now.","position":{"start":{"line":70,"column":1,"offset":6904},"end":{"line":70,"column":557,"offset":7460},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":6904},"end":{"line":70,"column":557,"offset":7460},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to have MsTest localized by Attribute?\",\"date\":\"2016-01-12\",\"categories\":[\"test\"]}","position":{"start":{"line":73,"column":1,"offset":7463},"end":{"line":73,"column":125,"offset":7587},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":73,"column":125,"offset":7587}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to have MsTest localized by Attribute?\",\n  \"date\": \"2016-01-12\",\n  \"categories\": [\"test\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Working with multiple languages requires to test in multiple languages too. A simple use case is if you have custom Asp.Net routing that you might want to test where an English route goes and the same for a French one. This goes beyond just text, but also how to handle numbers and datetime. The traditional way to do unit test in multiple localisations is to set the current thread at the beginning of the test, do the logic, assert and set the thread back to the original value.\"), mdx(\"p\", null, \"The problem is that in all your code you need to set the thread manually. It would be better to have an attribute on the top of the test method and have this one handling the thread culture. Unfortunately, MSTest \\\"TestMethod\\\" attributes is sealed which mean you cannot inherit of this one. The work around is to create a custom attribute. However, this come with the challenge to hook into MsTest pipeline to have MsTest reads the attribute and act accordingly. This is what we will discuss in this article, how to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContextAttribute\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IMessageSink\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IContributeObjectSink\"), \" and so on.\"), mdx(\"p\", null, \"First, let's create a standard attribute that we will use on top of our test that need localization. We will use this one in combination of the TestMethod. The use will looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [TestMethod] [LocalizedTest(LocalizedSection.EN_NAME)] public void MyTest() { //... Your test } \\n\")), mdx(\"p\", null, \"The attribute has a parameter which is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Culture Name\"), \" that we want to have the thread. The culture name is \\\"en-us\\\" for USA English or \\\"fr-ca\\\" Canadian French.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class LocalizedTestAttribute:Attribute { public string CultureName {get; set;} public LocalizedTestAttribute(string cultureName) { this.CultureName = cultureName; } } \\n\")), mdx(\"p\", null, \"A second attribute is required to be at the top of the class tested. This is the way to notify the Microsoft test framework that we want to hook inside the pipeline of tasks that the testing framework is going while executing tests. This attribute inherit from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContextAttribute\"), \", from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Runtime.Remoting.Contexts\"), \" namespace. The role of that class is to define a collection of possible hooks. In that case, we have only one hook that we call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LocalizedTestMessage\"), \". Those hooks are called \\\"messages\\\". I am using a helper named TestProperty which handle generic code for every message. This generic class is inspired by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://mstestextensions.codeplex.com/SourceControl/latest#Trunk/Source/MSTestExtensions/TestAspect.cs\"\n  }, \"MsTestExtension\"), \" source code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class LocalizedTestContextAttribute: ContextAttribute { public LocalizedTestContextAttribute():base(\\\"LocalizedTest\\\") {\\n\\n}\\n\\npublic override void GetPropertiesForNewContext(IConstructionCallMessage msg) { if (msg == null) throw new ArgumentNullException(\\\"msg\\\"); msg.ContextProperties.Add(new TestProperty<LocalizedTestMessage>()); //We add 1 new message into the test pipeline } }\\n\\npublic class TestProperty<T> : IContextProperty, IContributeObjectSink where T : IMessageSink, ITestMessage, new() {\\n\\nprivate readonly string_name = typeof(T).AssemblyQualifiedName;\\n\\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public bool IsNewContextOK(Context newCtx) { return true; }\\n\\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public void Freeze(Context newContext) { }\\n\\npublic string Name { [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] get { return_name; } }\\n\\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink) { T testAspect = new T(); testAspect.AddMessageSink(nextSink); return testAspect; } }\\n\\npublic interface ITestMessage { void AddMessageSink(IMessageSink messageSink); } \\n\")), mdx(\"p\", null, \"Finally, we need to have our LocalizedTest message hook (message) defined. This class defines what is done before and after the execution of the test. This class is able to access the tested method to check if \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LocalizedTest\"), \" attribute is defined on the class. If yes, it proceeds, otherwise it executes the method without changing anything. When the attribute is present, it backup the current thread culture, get the culture name from the attribute and set it to the test thread. It executes the test, and set back the original thread.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class LocalizedTestMessage : BaseTestMessage<LocalizedTestAttribute>, IMessageSink, ITestMessage { private IMessageSink nextSink;\\n\\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessage SyncProcessMessage(IMessage msg) { if (msg == null) throw new ArgumentNullException(\\\"msg\\\"); CultureInfo currentCultureInfo = null; CultureInfo currentUICultureInfo = null;\\n\\n//Before test get value to set back after test LocalizedTestAttribute localizationAttribute = base.GetAttribute(msg); if (localizationAttribute != null) { currentCultureInfo = System.Threading.Thread.CurrentThread.CurrentCulture; currentUICultureInfo = System.Threading.Thread.CurrentThread.CurrentUICulture; System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo(localizationAttribute.CultureName); System.Threading.Thread.CurrentThread.CurrentUICulture = System.Threading.Thread.CurrentThread.CurrentCulture; }\\n\\n//Execute test IMessage returnMessage = nextSink.SyncProcessMessage(msg);\\n\\n//After test set back value if (localizationAttribute != null && currentCultureInfo!= null && currentUICultureInfo!=null) { System.Threading.Thread.CurrentThread.CurrentCulture = currentCultureInfo; System.Threading.Thread.CurrentThread.CurrentUICulture = currentUICultureInfo; } return returnMessage; }\\n\\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { throw new InvalidOperationException(); }\\n\\npublic IMessageSink NextSink { [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] get { return nextSink; } }\\n\\npublic void AddMessageSink(IMessageSink messageSink) { nextSink = messageSink; } }\\n\\npublic abstract class BaseTestMessage<TAttribute> where TAttribute : Attribute {\\n\\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] protected TAttribute GetAttribute(IMessage message) { string typeName = (string)message.Properties[\\\"__TypeName\\\"]; string methodName = (string)message.Properties[\\\"__MethodName\\\"]; Type callingType = Type.GetType(typeName); MethodInfo methodInfo = callingType.GetMethod(methodName); object[] attributes = methodInfo.GetCustomAttributes(typeof(TAttribute), true); TAttribute attribute = null; if (attributes.Length > 0) { attribute = attributes[0] as TAttribute; } return attribute; } } \\n\")), mdx(\"p\", null, \"It would be even better if we could avoid having two different attributes on each test but this is a solution that still let us avoid having to handle thread on every test. It's also important to notice that this is only good for MsTest. If you are using other testing framework like nUnit or xUnit that this will not work. However, these frameworks have other mechanism to handle pre and post tests too. The documentation is very slim on Microsoft about there infrastructure classes. It comes from a pre-era where Microsoft where less open that it is now.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to have MsTest localized by Attribute?\",\n  \"date\": \"2016-01-12\",\n  \"categories\": [\"test\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Working with multiple languages requires to test in multiple languages too. A simple use case is if you have custom Asp.Net routing that you might want to test where an English route goes and the same for a French one. This goes beyond just text, but also how to handle numbers and datetime. The traditional way to do unit test in multiple localisations is to set the current thread at the beginning of the test, do the logic, assert and set the thread back to the original value.`}</p>\n    <p>{`The problem is that in all your code you need to set the thread manually. It would be better to have an attribute on the top of the test method and have this one handling the thread culture. Unfortunately, MSTest \"TestMethod\" attributes is sealed which mean you cannot inherit of this one. The work around is to create a custom attribute. However, this come with the challenge to hook into MsTest pipeline to have MsTest reads the attribute and act accordingly. This is what we will discuss in this article, how to use `}<strong parentName=\"p\">{`ContextAttribute`}</strong>{`, `}<strong parentName=\"p\">{`IMessageSink`}</strong>{`, `}<strong parentName=\"p\">{`IContributeObjectSink`}</strong>{` and so on.`}</p>\n    <p>{`First, let's create a standard attribute that we will use on top of our test that need localization. We will use this one in combination of the TestMethod. The use will looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` [TestMethod] [LocalizedTest(LocalizedSection.EN_NAME)] public void MyTest() { //... Your test } \n`}</code></pre>\n    <p>{`The attribute has a parameter which is the `}<strong parentName=\"p\">{`Culture Name`}</strong>{` that we want to have the thread. The culture name is \"en-us\" for USA English or \"fr-ca\" Canadian French.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class LocalizedTestAttribute:Attribute { public string CultureName {get; set;} public LocalizedTestAttribute(string cultureName) { this.CultureName = cultureName; } } \n`}</code></pre>\n    <p>{`A second attribute is required to be at the top of the class tested. This is the way to notify the Microsoft test framework that we want to hook inside the pipeline of tasks that the testing framework is going while executing tests. This attribute inherit from `}<strong parentName=\"p\">{`ContextAttribute`}</strong>{`, from `}<strong parentName=\"p\">{`System.Runtime.Remoting.Contexts`}</strong>{` namespace. The role of that class is to define a collection of possible hooks. In that case, we have only one hook that we call `}<strong parentName=\"p\">{`LocalizedTestMessage`}</strong>{`. Those hooks are called \"messages\". I am using a helper named TestProperty which handle generic code for every message. This generic class is inspired by the `}<a parentName=\"p\" {...{\n        \"href\": \"http://mstestextensions.codeplex.com/SourceControl/latest#Trunk/Source/MSTestExtensions/TestAspect.cs\"\n      }}>{`MsTestExtension`}</a>{` source code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class LocalizedTestContextAttribute: ContextAttribute { public LocalizedTestContextAttribute():base(\"LocalizedTest\") {\n\n}\n\npublic override void GetPropertiesForNewContext(IConstructionCallMessage msg) { if (msg == null) throw new ArgumentNullException(\"msg\"); msg.ContextProperties.Add(new TestProperty<LocalizedTestMessage>()); //We add 1 new message into the test pipeline } }\n\npublic class TestProperty<T> : IContextProperty, IContributeObjectSink where T : IMessageSink, ITestMessage, new() {\n\nprivate readonly string_name = typeof(T).AssemblyQualifiedName;\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public bool IsNewContextOK(Context newCtx) { return true; }\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public void Freeze(Context newContext) { }\n\npublic string Name { [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] get { return_name; } }\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink) { T testAspect = new T(); testAspect.AddMessageSink(nextSink); return testAspect; } }\n\npublic interface ITestMessage { void AddMessageSink(IMessageSink messageSink); } \n`}</code></pre>\n    <p>{`Finally, we need to have our LocalizedTest message hook (message) defined. This class defines what is done before and after the execution of the test. This class is able to access the tested method to check if `}<strong parentName=\"p\">{`LocalizedTest`}</strong>{` attribute is defined on the class. If yes, it proceeds, otherwise it executes the method without changing anything. When the attribute is present, it backup the current thread culture, get the culture name from the attribute and set it to the test thread. It executes the test, and set back the original thread.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class LocalizedTestMessage : BaseTestMessage<LocalizedTestAttribute>, IMessageSink, ITestMessage { private IMessageSink nextSink;\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessage SyncProcessMessage(IMessage msg) { if (msg == null) throw new ArgumentNullException(\"msg\"); CultureInfo currentCultureInfo = null; CultureInfo currentUICultureInfo = null;\n\n//Before test get value to set back after test LocalizedTestAttribute localizationAttribute = base.GetAttribute(msg); if (localizationAttribute != null) { currentCultureInfo = System.Threading.Thread.CurrentThread.CurrentCulture; currentUICultureInfo = System.Threading.Thread.CurrentThread.CurrentUICulture; System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo(localizationAttribute.CultureName); System.Threading.Thread.CurrentThread.CurrentUICulture = System.Threading.Thread.CurrentThread.CurrentCulture; }\n\n//Execute test IMessage returnMessage = nextSink.SyncProcessMessage(msg);\n\n//After test set back value if (localizationAttribute != null && currentCultureInfo!= null && currentUICultureInfo!=null) { System.Threading.Thread.CurrentThread.CurrentCulture = currentCultureInfo; System.Threading.Thread.CurrentThread.CurrentUICulture = currentUICultureInfo; } return returnMessage; }\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { throw new InvalidOperationException(); }\n\npublic IMessageSink NextSink { [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] get { return nextSink; } }\n\npublic void AddMessageSink(IMessageSink messageSink) { nextSink = messageSink; } }\n\npublic abstract class BaseTestMessage<TAttribute> where TAttribute : Attribute {\n\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)] protected TAttribute GetAttribute(IMessage message) { string typeName = (string)message.Properties[\"__TypeName\"]; string methodName = (string)message.Properties[\"__MethodName\"]; Type callingType = Type.GetType(typeName); MethodInfo methodInfo = callingType.GetMethod(methodName); object[] attributes = methodInfo.GetCustomAttributes(typeof(TAttribute), true); TAttribute attribute = null; if (attributes.Length > 0) { attribute = attributes[0] as TAttribute; } return attribute; } } \n`}</code></pre>\n    <p>{`It would be even better if we could avoid having two different attributes on each test but this is a solution that still let us avoid having to handle thread on every test. It's also important to notice that this is only good for MsTest. If you are using other testing framework like nUnit or xUnit that this will not work. However, these frameworks have other mechanism to handle pre and post tests too. The documentation is very slim on Microsoft about there infrastructure classes. It comes from a pre-era where Microsoft where less open that it is now.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}