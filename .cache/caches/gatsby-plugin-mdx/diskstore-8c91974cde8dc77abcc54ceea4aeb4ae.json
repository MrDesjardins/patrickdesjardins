{"expireTime":9007200886478384000,"key":"gatsby-plugin-mdx-entire-payload-180420503e79e709a40d19fb6921d948--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"They are many ways to run scheduled jobs on Windows Azure. You can have a console application uploaded and configured directly on the portal. This first solution isn't perfect because the schedule is done directly on the website, would be better to have it on code repository.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":277,"offset":277},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":277,"offset":277},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can use the Azure Scheduler to setup trigger to manual job, but this is more expense and still require configurations that are not in a great format (as Cronjob).","position":{"start":{"line":4,"column":1,"offset":279},"end":{"line":4,"column":167,"offset":445},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":279},"end":{"line":4,"column":167,"offset":445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can create a file per Azure WebJob named ","position":{"start":{"line":6,"column":1,"offset":447},"end":{"line":6,"column":46,"offset":492},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"settings.job","position":{"start":{"line":6,"column":47,"offset":493},"end":{"line":6,"column":59,"offset":505},"indent":[]}}],"position":{"start":{"line":6,"column":46,"offset":492},"end":{"line":6,"column":60,"offset":506},"indent":[]}},{"type":"text","value":" and setup a ","position":{"start":{"line":6,"column":60,"offset":506},"end":{"line":6,"column":73,"offset":519},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Cronjob","position":{"start":{"line":6,"column":75,"offset":521},"end":{"line":6,"column":82,"offset":528},"indent":[]}}],"position":{"start":{"line":6,"column":73,"offset":519},"end":{"line":6,"column":84,"offset":530},"indent":[]}},{"type":"text","value":" schedule. This is good but still need one project per Azure Webjob. The latest solution works fine. In the ","position":{"start":{"line":6,"column":84,"offset":530},"end":{"line":6,"column":192,"offset":638},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Properties/webjobs-list.json","position":{"start":{"line":6,"column":194,"offset":640},"end":{"line":6,"column":222,"offset":668},"indent":[]}}],"position":{"start":{"line":6,"column":192,"offset":638},"end":{"line":6,"column":224,"offset":670},"indent":[]}},{"type":"text","value":" of your website, you define a single entry for each webjobs. When you publish your website, the Webjobs get updated. Here is an example of the ","position":{"start":{"line":6,"column":224,"offset":670},"end":{"line":6,"column":368,"offset":814},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"webjobs-list.json","position":{"start":{"line":6,"column":370,"offset":816},"end":{"line":6,"column":387,"offset":833},"indent":[]}}],"position":{"start":{"line":6,"column":368,"offset":814},"end":{"line":6,"column":389,"offset":835},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":389,"offset":835},"end":{"line":6,"column":390,"offset":836},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":447},"end":{"line":6,"column":390,"offset":836},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjobs-list.json&quot;, &quot;WebJobs&quot;: [ { &quot;filePath&quot;: &quot;../Jobs/webjob1.csproj&quot; }, { &quot;filePath&quot;: &quot;../Jobs/webjob2.csproj&quot; }, { &quot;filePath&quot;: &quot;../Jobs/webjob3.csproj&quot; }, ... ... ] } ","position":{"start":{"line":8,"column":1,"offset":838},"end":{"line":10,"column":5,"offset":1168},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is an example of one settings.job (in the previous example, we would have 1 per webjob, thus 3). ```typescript\n{ ","position":{"start":{"line":13,"column":1,"offset":1171},"end":{"line":14,"column":3,"offset":1289},"indent":[1]}},{"type":"text","value":"\"","position":{"start":{"line":14,"column":3,"offset":1289},"end":{"line":14,"column":9,"offset":1295},"indent":[]}},{"type":"text","value":"schedule","position":{"start":{"line":14,"column":9,"offset":1295},"end":{"line":14,"column":17,"offset":1303},"indent":[]}},{"type":"text","value":"\"","position":{"start":{"line":14,"column":17,"offset":1303},"end":{"line":14,"column":23,"offset":1309},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":14,"column":23,"offset":1309},"end":{"line":14,"column":25,"offset":1311},"indent":[]}},{"type":"text","value":"\"","position":{"start":{"line":14,"column":25,"offset":1311},"end":{"line":14,"column":31,"offset":1317},"indent":[]}},{"type":"text","value":"0 0 ","position":{"start":{"line":14,"column":31,"offset":1317},"end":{"line":14,"column":35,"offset":1321},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"/1 ","position":{"start":{"line":14,"column":36,"offset":1322},"end":{"line":14,"column":39,"offset":1325},"indent":[]}}],"position":{"start":{"line":14,"column":35,"offset":1321},"end":{"line":14,"column":40,"offset":1326},"indent":[]}},{"type":"text","value":" * 1-5","position":{"start":{"line":14,"column":40,"offset":1326},"end":{"line":14,"column":46,"offset":1332},"indent":[]}},{"type":"text","value":"\"","position":{"start":{"line":14,"column":46,"offset":1332},"end":{"line":14,"column":52,"offset":1338},"indent":[]}},{"type":"text","value":" } ","position":{"start":{"line":14,"column":52,"offset":1338},"end":{"line":14,"column":55,"offset":1341},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1171},"end":{"line":14,"column":55,"offset":1341},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":" You will also need a third file, also 1 per Webjobs called **webjob-publish-settings.json**. This one is next to the Properties/webjobs-list.json. This one define the Webjobs properties. It needs to be set to run **OnDemand**. Here is an example:\n\n```typescript\n{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjob-publish-settings.json&quot;, &quot;webJobName&quot;: &quot;ScriptBotBuyContest&quot;, &quot;startTime&quot;: null, &quot;endTime&quot;: null, &quot;jobRecurrenceFrequency&quot;: null, &quot;interval&quot;: null, &quot;runMode&quot;: &quot;OnDemand&quot; } ","position":{"start":{"line":15,"column":1,"offset":1342},"end":{"line":20,"column":5,"offset":1943},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Still, the problem is that we need to have a lot of work to do on each of you WebJobs since you need to have 2 .json file per WebJobs, a project per WebJobs and defined all of them in the website.","position":{"start":{"line":23,"column":1,"offset":1946},"end":{"line":23,"column":197,"offset":2142},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1946},"end":{"line":23,"column":197,"offset":2142},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/Azure/azure-webjobs-sdk-extensions#timertrigger","children":[{"type":"text","value":"Microsoft Azure WebJobs Sdk Extensions","position":{"start":{"line":25,"column":2,"offset":2145},"end":{"line":25,"column":40,"offset":2183},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2144},"end":{"line":25,"column":109,"offset":2252},"indent":[]}},{"type":"text","value":" provides an answer to that problem : 1 project that can run multiple scheduled WebJobs with the feature named ","position":{"start":{"line":25,"column":109,"offset":2252},"end":{"line":25,"column":220,"offset":2363},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Timer Trigger","position":{"start":{"line":25,"column":222,"offset":2365},"end":{"line":25,"column":235,"offset":2378},"indent":[]}}],"position":{"start":{"line":25,"column":220,"offset":2363},"end":{"line":25,"column":237,"offset":2380},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":25,"column":237,"offset":2380},"end":{"line":25,"column":238,"offset":2381},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2144},"end":{"line":25,"column":238,"offset":2381},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step, is to create a new Console Project and few Nuget package. The default one for WebJobs \"Microsoft.Azure.WebJobs\" is needed as well as \"Microsoft.Web.WebJobs.Publish\" that will let you public the WebJobs project with you website. Th third library needed is the Extensions on named \"Microsoft.Azure.WebJobs.Extensions\". This one depend on the package called \"ncrontab\". You will also needs \"WindowsAzure.Storage\" because some information needs to be stored on Azure Storage.","position":{"start":{"line":27,"column":1,"offset":2383},"end":{"line":27,"column":488,"offset":2870},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2383},"end":{"line":27,"column":488,"offset":2870},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second step, is to add 2 entries in Connection Strings. ","position":{"start":{"line":29,"column":1,"offset":2872},"end":{"line":29,"column":61,"offset":2932},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2872},"end":{"line":29,"column":61,"offset":2932},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":" &lt;add name=&quot;AzureWebJobsDashboard&quot; connectionString=&quot;DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...&quot; /&gt; &lt;add name=&quot;AzureWebJobsStorage&quot; connectionString=&quot;DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...&quot; /&gt; ","position":{"start":{"line":30,"column":1,"offset":2933},"end":{"line":32,"column":4,"offset":3231},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can create an Azure Storage for Dev and for Production if you do not want to mix up your local test. I haven't mentioned it but this solution will let you run it locally just by running from Visual Studio, with the normal \"F5\" debug this console.","position":{"start":{"line":35,"column":1,"offset":3234},"end":{"line":35,"column":251,"offset":3484},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3234},"end":{"line":35,"column":251,"offset":3484},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The third step is to create a file named ","position":{"start":{"line":37,"column":1,"offset":3486},"end":{"line":37,"column":42,"offset":3527},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"webjob-publish-settings.json","position":{"start":{"line":37,"column":44,"offset":3529},"end":{"line":37,"column":72,"offset":3557},"indent":[]}}],"position":{"start":{"line":37,"column":42,"offset":3527},"end":{"line":37,"column":74,"offset":3559},"indent":[]}},{"type":"text","value":" under the Properties folder of your console solution. The important detail is to set the ","position":{"start":{"line":37,"column":74,"offset":3559},"end":{"line":37,"column":164,"offset":3649},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"runMode","position":{"start":{"line":37,"column":166,"offset":3651},"end":{"line":37,"column":173,"offset":3658},"indent":[]}}],"position":{"start":{"line":37,"column":164,"offset":3649},"end":{"line":37,"column":175,"offset":3660},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":37,"column":175,"offset":3660},"end":{"line":37,"column":179,"offset":3664},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Continuous","position":{"start":{"line":37,"column":181,"offset":3666},"end":{"line":37,"column":191,"offset":3676},"indent":[]}}],"position":{"start":{"line":37,"column":179,"offset":3664},"end":{"line":37,"column":193,"offset":3678},"indent":[]}},{"type":"text","value":". The content should look like the following:","position":{"start":{"line":37,"column":193,"offset":3678},"end":{"line":37,"column":238,"offset":3723},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3486},"end":{"line":37,"column":238,"offset":3723},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjob-publish-settings.json&quot;, &quot;webJobName&quot;: &quot;ScriptJobs&quot;, &quot;startTime&quot;: null, &quot;endTime&quot;: null, &quot;jobRecurrenceFrequency&quot;: null, &quot;interval&quot;: null, &quot;runMode&quot;: &quot;Continuous&quot; } ","position":{"start":{"line":39,"column":1,"offset":3725},"end":{"line":41,"column":5,"offset":4065},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Forth and finally, you need to have your startup class having a specific initialization and 1 static method per job you have. If you have 50 jobs, than this class would have 50 static methods.","position":{"start":{"line":44,"column":1,"offset":4068},"end":{"line":44,"column":193,"offset":4260},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":4068},"end":{"line":44,"column":193,"offset":4260},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" static void Main() { var config = new JobHostConfiguration(); config.UseTimers(); //Allow to use scheduler JobHost host = new JobHost(config); host.RunAndBlock(); } ","position":{"start":{"line":47,"column":1,"offset":4263},"end":{"line":49,"column":4,"offset":4443},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example of a signature of a job. ","position":{"start":{"line":51,"column":1,"offset":4445},"end":{"line":51,"column":45,"offset":4489},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":4445},"end":{"line":51,"column":45,"offset":4489},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static void WebJob1([TimerTrigger(&quot;0 */12 * * * 1-5&quot;)] TimerInfo timerInfo, TextWriter log) { //Your job here } ","position":{"start":{"line":52,"column":1,"offset":4490},"end":{"line":54,"column":4,"offset":4634},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This solution doesn't need to have settings.job because the Cronjob is directly in the signature, with the attribute ","position":{"start":{"line":56,"column":1,"offset":4636},"end":{"line":56,"column":118,"offset":4753},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TimerTrigger.","position":{"start":{"line":56,"column":120,"offset":4755},"end":{"line":56,"column":133,"offset":4768},"indent":[]}}],"position":{"start":{"line":56,"column":118,"offset":4753},"end":{"line":56,"column":135,"offset":4770},"indent":[]}},{"type":"text","value":" However, this method still need with your website to have the webjobs-list.json to link to the single project that hold all your jobs.","position":{"start":{"line":56,"column":135,"offset":4770},"end":{"line":56,"column":270,"offset":4905},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":4636},"end":{"line":56,"column":270,"offset":4905},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjobs-list.json&quot;, &quot;WebJobs&quot;: [ { &quot;filePath&quot;: &quot;../Job/webjobprojectthatcontainsallyourjobs.csproj&quot; } ] } ","position":{"start":{"line":58,"column":1,"offset":4907},"end":{"line":60,"column":5,"offset":5132},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This method is very powerful. It reduces the amount of project, whence create a overall build solution speed faster. Having a single project remove the amount of configuration files required with a single one for the job, and a single one for the website (webjobs-list.json to specify that single WebJob). It is also very powerful because you can see read the log from Azure portal, you do not loss feature. You can find some documentation on ","position":{"start":{"line":63,"column":1,"offset":5135},"end":{"line":63,"column":444,"offset":5578},"indent":[]}},{"type":"link","title":null,"url":"https://azure.microsoft.com/en-us/blog/extensible-triggers-and-binders-with-azure-webjobs-sdk-1-1-0-alpha1/","children":[{"type":"text","value":"Microsoft Azure Extensible blog","position":{"start":{"line":63,"column":445,"offset":5579},"end":{"line":63,"column":476,"offset":5610},"indent":[]}}],"position":{"start":{"line":63,"column":444,"offset":5578},"end":{"line":63,"column":586,"offset":5720},"indent":[]}},{"type":"text","value":" and on ","position":{"start":{"line":63,"column":586,"offset":5720},"end":{"line":63,"column":594,"offset":5728},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Azure/azure-webjobs-sdk-extensions#timertrigger","children":[{"type":"text","value":"GitHub","position":{"start":{"line":63,"column":595,"offset":5729},"end":{"line":63,"column":601,"offset":5735},"indent":[]}}],"position":{"start":{"line":63,"column":594,"offset":5728},"end":{"line":63,"column":670,"offset":5804},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":63,"column":670,"offset":5804},"end":{"line":63,"column":671,"offset":5805},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":5135},"end":{"line":63,"column":671,"offset":5805},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to have a single project to hold multiple scheduled Azure Webjobs\",\"date\":\"2016-04-25\",\"categories\":[\"azure\"]}","position":{"start":{"line":66,"column":1,"offset":5808},"end":{"line":66,"column":153,"offset":5960},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":66,"column":153,"offset":5960}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to have a single project to hold multiple scheduled Azure Webjobs\",\n  \"date\": \"2016-04-25\",\n  \"categories\": [\"azure\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"They are many ways to run scheduled jobs on Windows Azure. You can have a console application uploaded and configured directly on the portal. This first solution isn't perfect because the schedule is done directly on the website, would be better to have it on code repository.\"), mdx(\"p\", null, \"You can use the Azure Scheduler to setup trigger to manual job, but this is more expense and still require configurations that are not in a great format (as Cronjob).\"), mdx(\"p\", null, \"You can create a file per Azure WebJob named \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"settings.job\"), \" and setup a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cronjob\"), \" schedule. This is good but still need one project per Azure Webjob. The latest solution works fine. In the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Properties/webjobs-list.json\"), \" of your website, you define a single entry for each webjobs. When you publish your website, the Webjobs get updated. Here is an example of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"webjobs-list.json\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjobs-list.json&quot;, &quot;WebJobs&quot;: [ { &quot;filePath&quot;: &quot;../Jobs/webjob1.csproj&quot; }, { &quot;filePath&quot;: &quot;../Jobs/webjob2.csproj&quot; }, { &quot;filePath&quot;: &quot;../Jobs/webjob3.csproj&quot; }, ... ... ] } \\n\")), mdx(\"p\", null, \"This is an example of one settings.job (in the previous example, we would have 1 per webjob, thus 3). ```typescript\\n{ \", \"\\\"\", \"schedule\", \"\\\"\", \": \", \"\\\"\", \"0 0 \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/1 \"), \" * 1-5\", \"\\\"\", \" } \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" You will also need a third file, also 1 per Webjobs called **webjob-publish-settings.json**. This one is next to the Properties/webjobs-list.json. This one define the Webjobs properties. It needs to be set to run **OnDemand**. Here is an example:\\n\\n```typescript\\n{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjob-publish-settings.json&quot;, &quot;webJobName&quot;: &quot;ScriptBotBuyContest&quot;, &quot;startTime&quot;: null, &quot;endTime&quot;: null, &quot;jobRecurrenceFrequency&quot;: null, &quot;interval&quot;: null, &quot;runMode&quot;: &quot;OnDemand&quot; } \\n\")), mdx(\"p\", null, \"Still, the problem is that we need to have a lot of work to do on each of you WebJobs since you need to have 2 .json file per WebJobs, a project per WebJobs and defined all of them in the website.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Azure/azure-webjobs-sdk-extensions#timertrigger\"\n  }, \"Microsoft Azure WebJobs Sdk Extensions\"), \" provides an answer to that problem : 1 project that can run multiple scheduled WebJobs with the feature named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Timer Trigger\"), \".\"), mdx(\"p\", null, \"The first step, is to create a new Console Project and few Nuget package. The default one for WebJobs \\\"Microsoft.Azure.WebJobs\\\" is needed as well as \\\"Microsoft.Web.WebJobs.Publish\\\" that will let you public the WebJobs project with you website. Th third library needed is the Extensions on named \\\"Microsoft.Azure.WebJobs.Extensions\\\". This one depend on the package called \\\"ncrontab\\\". You will also needs \\\"WindowsAzure.Storage\\\" because some information needs to be stored on Azure Storage.\"), mdx(\"p\", null, \"The second step, is to add 2 entries in Connection Strings. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" &lt;add name=&quot;AzureWebJobsDashboard&quot; connectionString=&quot;DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...&quot; /&gt; &lt;add name=&quot;AzureWebJobsStorage&quot; connectionString=&quot;DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...&quot; /&gt; \\n\")), mdx(\"p\", null, \"You can create an Azure Storage for Dev and for Production if you do not want to mix up your local test. I haven't mentioned it but this solution will let you run it locally just by running from Visual Studio, with the normal \\\"F5\\\" debug this console.\"), mdx(\"p\", null, \"The third step is to create a file named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"webjob-publish-settings.json\"), \" under the Properties folder of your console solution. The important detail is to set the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"runMode\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Continuous\"), \". The content should look like the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjob-publish-settings.json&quot;, &quot;webJobName&quot;: &quot;ScriptJobs&quot;, &quot;startTime&quot;: null, &quot;endTime&quot;: null, &quot;jobRecurrenceFrequency&quot;: null, &quot;interval&quot;: null, &quot;runMode&quot;: &quot;Continuous&quot; } \\n\")), mdx(\"p\", null, \"Forth and finally, you need to have your startup class having a specific initialization and 1 static method per job you have. If you have 50 jobs, than this class would have 50 static methods.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" static void Main() { var config = new JobHostConfiguration(); config.UseTimers(); //Allow to use scheduler JobHost host = new JobHost(config); host.RunAndBlock(); } \\n\")), mdx(\"p\", null, \"Here is an example of a signature of a job. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static void WebJob1([TimerTrigger(&quot;0 */12 * * * 1-5&quot;)] TimerInfo timerInfo, TextWriter log) { //Your job here } \\n\")), mdx(\"p\", null, \"This solution doesn't need to have settings.job because the Cronjob is directly in the signature, with the attribute \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TimerTrigger.\"), \" However, this method still need with your website to have the webjobs-list.json to link to the single project that hold all your jobs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjobs-list.json&quot;, &quot;WebJobs&quot;: [ { &quot;filePath&quot;: &quot;../Job/webjobprojectthatcontainsallyourjobs.csproj&quot; } ] } \\n\")), mdx(\"p\", null, \"This method is very powerful. It reduces the amount of project, whence create a overall build solution speed faster. Having a single project remove the amount of configuration files required with a single one for the job, and a single one for the website (webjobs-list.json to specify that single WebJob). It is also very powerful because you can see read the log from Azure portal, you do not loss feature. You can find some documentation on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://azure.microsoft.com/en-us/blog/extensible-triggers-and-binders-with-azure-webjobs-sdk-1-1-0-alpha1/\"\n  }, \"Microsoft Azure Extensible blog\"), \" and on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Azure/azure-webjobs-sdk-extensions#timertrigger\"\n  }, \"GitHub\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"How to have a single project to hold multiple scheduled Azure Webjobs\",\n  \"date\": \"2016-04-25\",\n  \"categories\": [\"azure\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`They are many ways to run scheduled jobs on Windows Azure. You can have a console application uploaded and configured directly on the portal. This first solution isn't perfect because the schedule is done directly on the website, would be better to have it on code repository.`}</p>\n    <p>{`You can use the Azure Scheduler to setup trigger to manual job, but this is more expense and still require configurations that are not in a great format (as Cronjob).`}</p>\n    <p>{`You can create a file per Azure WebJob named `}<em parentName=\"p\">{`settings.job`}</em>{` and setup a `}<strong parentName=\"p\">{`Cronjob`}</strong>{` schedule. This is good but still need one project per Azure Webjob. The latest solution works fine. In the `}<strong parentName=\"p\">{`Properties/webjobs-list.json`}</strong>{` of your website, you define a single entry for each webjobs. When you publish your website, the Webjobs get updated. Here is an example of the `}<strong parentName=\"p\">{`webjobs-list.json`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjobs-list.json&quot;, &quot;WebJobs&quot;: [ { &quot;filePath&quot;: &quot;../Jobs/webjob1.csproj&quot; }, { &quot;filePath&quot;: &quot;../Jobs/webjob2.csproj&quot; }, { &quot;filePath&quot;: &quot;../Jobs/webjob3.csproj&quot; }, ... ... ] } \n`}</code></pre>\n    <p>{`This is an example of one settings.job (in the previous example, we would have 1 per webjob, thus 3). \\`\\`\\`typescript\n{ `}{`\"`}{`schedule`}{`\"`}{`: `}{`\"`}{`0 0 `}<em parentName=\"p\">{`/1 `}</em>{` * 1-5`}{`\"`}{` } `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` You will also need a third file, also 1 per Webjobs called **webjob-publish-settings.json**. This one is next to the Properties/webjobs-list.json. This one define the Webjobs properties. It needs to be set to run **OnDemand**. Here is an example:\n\n\\`\\`\\`typescript\n{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjob-publish-settings.json&quot;, &quot;webJobName&quot;: &quot;ScriptBotBuyContest&quot;, &quot;startTime&quot;: null, &quot;endTime&quot;: null, &quot;jobRecurrenceFrequency&quot;: null, &quot;interval&quot;: null, &quot;runMode&quot;: &quot;OnDemand&quot; } \n`}</code></pre>\n    <p>{`Still, the problem is that we need to have a lot of work to do on each of you WebJobs since you need to have 2 .json file per WebJobs, a project per WebJobs and defined all of them in the website.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Azure/azure-webjobs-sdk-extensions#timertrigger\"\n      }}>{`Microsoft Azure WebJobs Sdk Extensions`}</a>{` provides an answer to that problem : 1 project that can run multiple scheduled WebJobs with the feature named `}<strong parentName=\"p\">{`Timer Trigger`}</strong>{`.`}</p>\n    <p>{`The first step, is to create a new Console Project and few Nuget package. The default one for WebJobs \"Microsoft.Azure.WebJobs\" is needed as well as \"Microsoft.Web.WebJobs.Publish\" that will let you public the WebJobs project with you website. Th third library needed is the Extensions on named \"Microsoft.Azure.WebJobs.Extensions\". This one depend on the package called \"ncrontab\". You will also needs \"WindowsAzure.Storage\" because some information needs to be stored on Azure Storage.`}</p>\n    <p>{`The second step, is to add 2 entries in Connection Strings. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{` &lt;add name=&quot;AzureWebJobsDashboard&quot; connectionString=&quot;DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...&quot; /&gt; &lt;add name=&quot;AzureWebJobsStorage&quot; connectionString=&quot;DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...&quot; /&gt; \n`}</code></pre>\n    <p>{`You can create an Azure Storage for Dev and for Production if you do not want to mix up your local test. I haven't mentioned it but this solution will let you run it locally just by running from Visual Studio, with the normal \"F5\" debug this console.`}</p>\n    <p>{`The third step is to create a file named `}<strong parentName=\"p\">{`webjob-publish-settings.json`}</strong>{` under the Properties folder of your console solution. The important detail is to set the `}<strong parentName=\"p\">{`runMode`}</strong>{` to `}<strong parentName=\"p\">{`Continuous`}</strong>{`. The content should look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjob-publish-settings.json&quot;, &quot;webJobName&quot;: &quot;ScriptJobs&quot;, &quot;startTime&quot;: null, &quot;endTime&quot;: null, &quot;jobRecurrenceFrequency&quot;: null, &quot;interval&quot;: null, &quot;runMode&quot;: &quot;Continuous&quot; } \n`}</code></pre>\n    <p>{`Forth and finally, you need to have your startup class having a specific initialization and 1 static method per job you have. If you have 50 jobs, than this class would have 50 static methods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` static void Main() { var config = new JobHostConfiguration(); config.UseTimers(); //Allow to use scheduler JobHost host = new JobHost(config); host.RunAndBlock(); } \n`}</code></pre>\n    <p>{`Here is an example of a signature of a job. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static void WebJob1([TimerTrigger(&quot;0 */12 * * * 1-5&quot;)] TimerInfo timerInfo, TextWriter log) { //Your job here } \n`}</code></pre>\n    <p>{`This solution doesn't need to have settings.job because the Cronjob is directly in the signature, with the attribute `}<strong parentName=\"p\">{`TimerTrigger.`}</strong>{` However, this method still need with your website to have the webjobs-list.json to link to the single project that hold all your jobs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{ &quot;$schema&quot;: &quot;http://schemastore.org/schemas/json/webjobs-list.json&quot;, &quot;WebJobs&quot;: [ { &quot;filePath&quot;: &quot;../Job/webjobprojectthatcontainsallyourjobs.csproj&quot; } ] } \n`}</code></pre>\n    <p>{`This method is very powerful. It reduces the amount of project, whence create a overall build solution speed faster. Having a single project remove the amount of configuration files required with a single one for the job, and a single one for the website (webjobs-list.json to specify that single WebJob). It is also very powerful because you can see read the log from Azure portal, you do not loss feature. You can find some documentation on `}<a parentName=\"p\" {...{\n        \"href\": \"https://azure.microsoft.com/en-us/blog/extensible-triggers-and-binders-with-azure-webjobs-sdk-1-1-0-alpha1/\"\n      }}>{`Microsoft Azure Extensible blog`}</a>{` and on `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Azure/azure-webjobs-sdk-extensions#timertrigger\"\n      }}>{`GitHub`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}