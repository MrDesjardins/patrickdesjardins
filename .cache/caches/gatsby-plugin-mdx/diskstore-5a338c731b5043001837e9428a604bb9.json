{"expireTime":9007200886478400000,"key":"gatsby-plugin-mdx-entire-payload-44b994ec35772aa44330fac85cff6568--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I never really used the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":25,"offset":25},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dynamic","position":{"start":{"line":2,"column":27,"offset":27},"end":{"line":2,"column":34,"offset":34},"indent":[]}}],"position":{"start":{"line":2,"column":25,"offset":25},"end":{"line":2,"column":36,"offset":36},"indent":[]}},{"type":"text","value":" keyword in a real application. I did some tutorials but not much.","position":{"start":{"line":2,"column":36,"offset":36},"end":{"line":2,"column":102,"offset":102},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":102,"offset":102},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This week, I got a situation where I was getting from Silverlight a Json object that I did not want to create an object for.","position":{"start":{"line":4,"column":1,"offset":104},"end":{"line":4,"column":125,"offset":228},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":104},"end":{"line":4,"column":125,"offset":228},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string response = HtmlPage.Window.Invoke(\"GetMyJson\").ToString(); MyObject data = (MyObject)JsonConvert.DeserializeObject(response); ","position":{"start":{"line":7,"column":1,"offset":231},"end":{"line":9,"column":4,"offset":379},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But, I did not wanted to create the MyObject because it was just for transferring data; a simple DTO object. Instead, I used the ","position":{"start":{"line":11,"column":1,"offset":381},"end":{"line":11,"column":130,"offset":510},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dynamic","position":{"start":{"line":11,"column":132,"offset":512},"end":{"line":11,"column":139,"offset":519},"indent":[]}}],"position":{"start":{"line":11,"column":130,"offset":510},"end":{"line":11,"column":141,"offset":521},"indent":[]}},{"type":"text","value":" keyword provided by .Net framework 4.0.","position":{"start":{"line":11,"column":141,"offset":521},"end":{"line":11,"column":181,"offset":561},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":381},"end":{"line":11,"column":181,"offset":561},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":13,"column":1,"offset":563},"end":{"line":13,"column":5,"offset":567},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dynamic","position":{"start":{"line":13,"column":7,"offset":569},"end":{"line":13,"column":14,"offset":576},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":567},"end":{"line":13,"column":16,"offset":578},"indent":[]}},{"type":"text","value":" keyword will be resolved in runtime and this give us the leverage to access property that might not exist. For example, \"GetMyJson\" function was returning a simple object with 2 properties \"Abc\" and \"Def\".","position":{"start":{"line":13,"column":16,"offset":578},"end":{"line":13,"column":222,"offset":784},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":563},"end":{"line":13,"column":222,"offset":784},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"{'Abc':'123','Def':'456'} ","position":{"start":{"line":15,"column":1,"offset":786},"end":{"line":17,"column":5,"offset":831},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, in the C# code, I simply called those properties from the ","position":{"start":{"line":20,"column":1,"offset":834},"end":{"line":20,"column":63,"offset":896},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dynamic","position":{"start":{"line":20,"column":65,"offset":898},"end":{"line":20,"column":72,"offset":905},"indent":[]}}],"position":{"start":{"line":20,"column":63,"offset":896},"end":{"line":20,"column":74,"offset":907},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":20,"column":74,"offset":907},"end":{"line":20,"column":82,"offset":915},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":834},"end":{"line":20,"column":82,"offset":915},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" string response = HtmlPage.Window.Invoke(\"GetMyJson\").ToString(); dynamic data = JsonConvert.DeserializeObject(response); string s1 = data.Abc; string s2 = data.Def; ","position":{"start":{"line":23,"column":1,"offset":918},"end":{"line":25,"column":4,"offset":1099},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is pretty useful for accessing quickly some data from Json object.","position":{"start":{"line":27,"column":1,"offset":1101},"end":{"line":27,"column":72,"offset":1172},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1101},"end":{"line":27,"column":72,"offset":1172},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Import Json object from Javascript into C# with Dynamic keyword\",\"date\":\"2011-10-23\",\"categories\":[\"dynamic\"]}","position":{"start":{"line":30,"column":1,"offset":1175},"end":{"line":30,"column":149,"offset":1323},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":30,"column":149,"offset":1323}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Import Json object from Javascript into C# with Dynamic keyword\",\n  \"date\": \"2011-10-23\",\n  \"categories\": [\"dynamic\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I never really used the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword in a real application. I did some tutorials but not much.\"), mdx(\"p\", null, \"This week, I got a situation where I was getting from Silverlight a Json object that I did not want to create an object for.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string response = HtmlPage.Window.Invoke(\\\"GetMyJson\\\").ToString(); MyObject data = (MyObject)JsonConvert.DeserializeObject(response); \\n\")), mdx(\"p\", null, \"But, I did not wanted to create the MyObject because it was just for transferring data; a simple DTO object. Instead, I used the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword provided by .Net framework 4.0.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword will be resolved in runtime and this give us the leverage to access property that might not exist. For example, \\\"GetMyJson\\\" function was returning a simple object with 2 properties \\\"Abc\\\" and \\\"Def\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{'Abc':'123','Def':'456'} \\n\")), mdx(\"p\", null, \"So, in the C# code, I simply called those properties from the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string response = HtmlPage.Window.Invoke(\\\"GetMyJson\\\").ToString(); dynamic data = JsonConvert.DeserializeObject(response); string s1 = data.Abc; string s2 = data.Def; \\n\")), mdx(\"p\", null, \"This is pretty useful for accessing quickly some data from Json object.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Import Json object from Javascript into C# with Dynamic keyword\",\n  \"date\": \"2011-10-23\",\n  \"categories\": [\"dynamic\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`I never really used the `}<strong parentName=\"p\">{`dynamic`}</strong>{` keyword in a real application. I did some tutorials but not much.`}</p>\n    <p>{`This week, I got a situation where I was getting from Silverlight a Json object that I did not want to create an object for.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string response = HtmlPage.Window.Invoke(\"GetMyJson\").ToString(); MyObject data = (MyObject)JsonConvert.DeserializeObject(response); \n`}</code></pre>\n    <p>{`But, I did not wanted to create the MyObject because it was just for transferring data; a simple DTO object. Instead, I used the `}<strong parentName=\"p\">{`dynamic`}</strong>{` keyword provided by .Net framework 4.0.`}</p>\n    <p>{`The `}<strong parentName=\"p\">{`dynamic`}</strong>{` keyword will be resolved in runtime and this give us the leverage to access property that might not exist. For example, \"GetMyJson\" function was returning a simple object with 2 properties \"Abc\" and \"Def\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{'Abc':'123','Def':'456'} \n`}</code></pre>\n    <p>{`So, in the C# code, I simply called those properties from the `}<strong parentName=\"p\">{`dynamic`}</strong>{` object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` string response = HtmlPage.Window.Invoke(\"GetMyJson\").ToString(); dynamic data = JsonConvert.DeserializeObject(response); string s1 = data.Abc; string s2 = data.Def; \n`}</code></pre>\n    <p>{`This is pretty useful for accessing quickly some data from Json object.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}