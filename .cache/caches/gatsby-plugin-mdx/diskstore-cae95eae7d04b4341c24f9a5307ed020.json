{"expireTime":9007200886478382000,"key":"gatsby-plugin-mdx-entire-payload-b02cb0064a8bcdf57fa6f4b5718031b7--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"We saw in a previous article how to create a new object with \"new\", and also without \"new\". Both of them were using the prototype chain for inheritance. Here is a way to avoid using the prototype chain and be able to use object literal with function only to create instance.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":275,"offset":275},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":275,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's start without any inheritance with a first object that we will create from \"myFactory\" function. This one take parameters like a normal constructor. It could be a single string like in this example, or a more complex object. What is important is that factory create a new literal object which is private until we return this one. Within this factory, every \"var\" will be private, hence having a good advantage against the classical approach where every variable attache to \"this\" are public. On this functional approach, we hook all public method to the returned value, in that case the container.","position":{"start":{"line":4,"column":1,"offset":277},"end":{"line":4,"column":604,"offset":880},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":277},"end":{"line":4,"column":604,"offset":880},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var myFactory = function (p1) {\n  var privateContainer = {};\n  var private = \"Private\";\n  privateContainer.publicMethod = function () {\n    console.log(\n      \"Can access private variable like : \" + private1 + \" or the param \" + p1\n    );\n  };\n  return privateContainer;\n};\n\nvar instance1 = myFactory(\"i1\");\nvar instance2 = myFactory(\"i2\");\n\ninstance1.publicMethod();\ninstance2.publicMethod();","position":{"start":{"line":6,"column":1,"offset":882},"end":{"line":23,"column":4,"offset":1293},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we want to inherit, we need to assign members to the object literal by using the base class factory. There is many ways to do it. The way presented is that every public members of the base class will be exposed through the child class. This is done by adding the children members to the base instance instead of adding the, to an empty object. However, we could have kept the empty literal object and create public method that proxied the base class if we wanted to manually decide which public property of the base class to expose.","position":{"start":{"line":25,"column":1,"offset":1295},"end":{"line":25,"column":536,"offset":1830},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1295},"end":{"line":25,"column":536,"offset":1830},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"var myBaseFactory = function (p2) {\n  var privateContainer = {};\n  var private = \"PrivateBase\";\n  privateContainer.publicMethodInBase = function () {\n    console.log(\n      \"[BASE] Can access private variable like : \" +\n        private +\n        \" or the param \" +\n        p2\n    );\n  };\n  return privateContainer;\n};\n\nvar myFactory = function (p1) {\n  var privateContainer = myBaseFactory(\"Base!\" + p1);\n  var private = \"Private\";\n  privateContainer.publicMethod = function () {\n    console.log(\n      \"Can access private variable like : \" + private + \" or the param \" + p1\n    );\n  };\n  return privateContainer;\n};\n\nvar instance1 = myFactory(\"i1\");\nvar instance2 = myFactory(\"i2\");\n\ninstance1.publicMethod();\ninstance1.publicMethodInBase();\ninstance2.publicMethod();\ninstance2.publicMethodInBase();","position":{"start":{"line":27,"column":1,"offset":1832},"end":{"line":60,"column":4,"offset":2650},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the output:","position":{"start":{"line":62,"column":1,"offset":2652},"end":{"line":62,"column":20,"offset":2671},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2652},"end":{"line":62,"column":20,"offset":2671},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"\"Can access private variable like : Private or the param i1\" \n\"[BASE] Can access private variable like : PrivateBase or the param Base!i1\" \n\"Can access private variable like : Private or the param i2\" \n\"[BASE] Can access private variable like : PrivateBase or the param Base!i2\"","position":{"start":{"line":64,"column":1,"offset":2673},"end":{"line":69,"column":4,"offset":2959},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This way offer a clean and simple way to create instances without the complexity of the prototype chain. It has the disadvantage of not sharing with the prototype, hence will be more heavy in term of memory. It has the advantage to encapsulate functions and variables inside the factory and to not expose them.","position":{"start":{"line":71,"column":1,"offset":2961},"end":{"line":71,"column":311,"offset":3271},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2961},"end":{"line":71,"column":311,"offset":3271},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript Part 6 : Create Instance without new or object.create (Functional Approach)\",\"date\":\"2017-06-08\",\"categories\":[\"javascript\"]}","position":{"start":{"line":75,"column":1,"offset":3275},"end":{"line":75,"column":175,"offset":3449},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":175,"offset":3449}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Part 6 : Create Instance without new or object.create (Functional Approach)\",\n  \"date\": \"2017-06-08\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We saw in a previous article how to create a new object with \\\"new\\\", and also without \\\"new\\\". Both of them were using the prototype chain for inheritance. Here is a way to avoid using the prototype chain and be able to use object literal with function only to create instance.\"), mdx(\"p\", null, \"Let's start without any inheritance with a first object that we will create from \\\"myFactory\\\" function. This one take parameters like a normal constructor. It could be a single string like in this example, or a more complex object. What is important is that factory create a new literal object which is private until we return this one. Within this factory, every \\\"var\\\" will be private, hence having a good advantage against the classical approach where every variable attache to \\\"this\\\" are public. On this functional approach, we hook all public method to the returned value, in that case the container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var myFactory = function (p1) {\\n  var privateContainer = {};\\n  var private = \\\"Private\\\";\\n  privateContainer.publicMethod = function () {\\n    console.log(\\n      \\\"Can access private variable like : \\\" + private1 + \\\" or the param \\\" + p1\\n    );\\n  };\\n  return privateContainer;\\n};\\n\\nvar instance1 = myFactory(\\\"i1\\\");\\nvar instance2 = myFactory(\\\"i2\\\");\\n\\ninstance1.publicMethod();\\ninstance2.publicMethod();\\n\")), mdx(\"p\", null, \"If we want to inherit, we need to assign members to the object literal by using the base class factory. There is many ways to do it. The way presented is that every public members of the base class will be exposed through the child class. This is done by adding the children members to the base instance instead of adding the, to an empty object. However, we could have kept the empty literal object and create public method that proxied the base class if we wanted to manually decide which public property of the base class to expose.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var myBaseFactory = function (p2) {\\n  var privateContainer = {};\\n  var private = \\\"PrivateBase\\\";\\n  privateContainer.publicMethodInBase = function () {\\n    console.log(\\n      \\\"[BASE] Can access private variable like : \\\" +\\n        private +\\n        \\\" or the param \\\" +\\n        p2\\n    );\\n  };\\n  return privateContainer;\\n};\\n\\nvar myFactory = function (p1) {\\n  var privateContainer = myBaseFactory(\\\"Base!\\\" + p1);\\n  var private = \\\"Private\\\";\\n  privateContainer.publicMethod = function () {\\n    console.log(\\n      \\\"Can access private variable like : \\\" + private + \\\" or the param \\\" + p1\\n    );\\n  };\\n  return privateContainer;\\n};\\n\\nvar instance1 = myFactory(\\\"i1\\\");\\nvar instance2 = myFactory(\\\"i2\\\");\\n\\ninstance1.publicMethod();\\ninstance1.publicMethodInBase();\\ninstance2.publicMethod();\\ninstance2.publicMethodInBase();\\n\")), mdx(\"p\", null, \"Here is the output:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"Can access private variable like : Private or the param i1\\\" \\n\\\"[BASE] Can access private variable like : PrivateBase or the param Base!i1\\\" \\n\\\"Can access private variable like : Private or the param i2\\\" \\n\\\"[BASE] Can access private variable like : PrivateBase or the param Base!i2\\\"\\n\")), mdx(\"p\", null, \"This way offer a clean and simple way to create instances without the complexity of the prototype chain. It has the disadvantage of not sharing with the prototype, hence will be more heavy in term of memory. It has the advantage to encapsulate functions and variables inside the factory and to not expose them.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript Part 6 : Create Instance without new or object.create (Functional Approach)\",\n  \"date\": \"2017-06-08\",\n  \"categories\": [\"javascript\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`We saw in a previous article how to create a new object with \"new\", and also without \"new\". Both of them were using the prototype chain for inheritance. Here is a way to avoid using the prototype chain and be able to use object literal with function only to create instance.`}</p>\n    <p>{`Let's start without any inheritance with a first object that we will create from \"myFactory\" function. This one take parameters like a normal constructor. It could be a single string like in this example, or a more complex object. What is important is that factory create a new literal object which is private until we return this one. Within this factory, every \"var\" will be private, hence having a good advantage against the classical approach where every variable attache to \"this\" are public. On this functional approach, we hook all public method to the returned value, in that case the container.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var myFactory = function (p1) {\n  var privateContainer = {};\n  var private = \"Private\";\n  privateContainer.publicMethod = function () {\n    console.log(\n      \"Can access private variable like : \" + private1 + \" or the param \" + p1\n    );\n  };\n  return privateContainer;\n};\n\nvar instance1 = myFactory(\"i1\");\nvar instance2 = myFactory(\"i2\");\n\ninstance1.publicMethod();\ninstance2.publicMethod();\n`}</code></pre>\n    <p>{`If we want to inherit, we need to assign members to the object literal by using the base class factory. There is many ways to do it. The way presented is that every public members of the base class will be exposed through the child class. This is done by adding the children members to the base instance instead of adding the, to an empty object. However, we could have kept the empty literal object and create public method that proxied the base class if we wanted to manually decide which public property of the base class to expose.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`var myBaseFactory = function (p2) {\n  var privateContainer = {};\n  var private = \"PrivateBase\";\n  privateContainer.publicMethodInBase = function () {\n    console.log(\n      \"[BASE] Can access private variable like : \" +\n        private +\n        \" or the param \" +\n        p2\n    );\n  };\n  return privateContainer;\n};\n\nvar myFactory = function (p1) {\n  var privateContainer = myBaseFactory(\"Base!\" + p1);\n  var private = \"Private\";\n  privateContainer.publicMethod = function () {\n    console.log(\n      \"Can access private variable like : \" + private + \" or the param \" + p1\n    );\n  };\n  return privateContainer;\n};\n\nvar instance1 = myFactory(\"i1\");\nvar instance2 = myFactory(\"i2\");\n\ninstance1.publicMethod();\ninstance1.publicMethodInBase();\ninstance2.publicMethod();\ninstance2.publicMethodInBase();\n`}</code></pre>\n    <p>{`Here is the output:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"Can access private variable like : Private or the param i1\" \n\"[BASE] Can access private variable like : PrivateBase or the param Base!i1\" \n\"Can access private variable like : Private or the param i2\" \n\"[BASE] Can access private variable like : PrivateBase or the param Base!i2\"\n`}</code></pre>\n    <p>{`This way offer a clean and simple way to create instances without the complexity of the prototype chain. It has the disadvantage of not sharing with the prototype, hence will be more heavy in term of memory. It has the advantage to encapsulate functions and variables inside the factory and to not expose them.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}