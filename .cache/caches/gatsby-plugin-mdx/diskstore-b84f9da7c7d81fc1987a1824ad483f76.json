{"expireTime":9007200886478384000,"key":"gatsby-plugin-mdx-entire-payload-e47766d1dc6ae5abb53db67627edad1c--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Fluent API is a pattern that wrap existing code to create you some helper to build a complex object. This is used by Entity Framework when configuring entities or used by a lot of Mocking framework. It's more verbose, more explicit about what we can do or not. You can recognize Fluent API because they have a form of almost sentence like : yourObject.WhenStock(typeA).IsHigher().Than(100).Then(doThis);","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":404,"offset":404},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":404,"offset":404},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this article, we will add a Fluent API on top of ","position":{"start":{"line":4,"column":1,"offset":406},"end":{"line":4,"column":53,"offset":458},"indent":[]}},{"type":"link","title":null,"url":"./improve-the-custom-localized-mvc-routing-with-fluent-api","children":[{"type":"text","value":"the custom localized code","position":{"start":{"line":4,"column":54,"offset":459},"end":{"line":4,"column":79,"offset":484},"indent":[]}}],"position":{"start":{"line":4,"column":53,"offset":458},"end":{"line":4,"column":140,"offset":545},"indent":[]}},{"type":"text","value":". Why I am saying \"on top\"? Because the ","position":{"start":{"line":4,"column":140,"offset":545},"end":{"line":4,"column":180,"offset":585},"indent":[]}},{"type":"link","title":null,"url":"./improve-the-custom-localized-mvc-routing-with-fluent-api","children":[{"type":"text","value":"code previous","position":{"start":{"line":4,"column":181,"offset":586},"end":{"line":4,"column":194,"offset":599},"indent":[]}}],"position":{"start":{"line":4,"column":180,"offset":585},"end":{"line":4,"column":255,"offset":660},"indent":[]}},{"type":"text","value":" coded will still work and because it will not interfere at all with the existing code, we will work with this one without touching this one. But first, let's see what we had and what we will have after. Let's use this complex route that can look like this in English and like that in French:","position":{"start":{"line":4,"column":255,"offset":660},"end":{"line":4,"column":547,"offset":952},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":406},"end":{"line":4,"column":547,"offset":952},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/Administrator/investigate/reject/1","position":{"start":{"line":6,"column":3,"offset":956},"end":{"line":6,"column":38,"offset":991},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":956},"end":{"line":6,"column":38,"offset":991},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":954},"end":{"line":6,"column":38,"offset":991},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/Administrat","position":{"start":{"line":7,"column":3,"offset":994},"end":{"line":7,"column":15,"offset":1006},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"eur","position":{"start":{"line":7,"column":17,"offset":1008},"end":{"line":7,"column":20,"offset":1011},"indent":[]}}],"position":{"start":{"line":7,"column":15,"offset":1006},"end":{"line":7,"column":22,"offset":1013},"indent":[]}},{"type":"text","value":"/investigat","position":{"start":{"line":7,"column":22,"offset":1013},"end":{"line":7,"column":33,"offset":1024},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ion","position":{"start":{"line":7,"column":35,"offset":1026},"end":{"line":7,"column":38,"offset":1029},"indent":[]}}],"position":{"start":{"line":7,"column":33,"offset":1024},"end":{"line":7,"column":40,"offset":1031},"indent":[]}},{"type":"text","value":"/reje","position":{"start":{"line":7,"column":40,"offset":1031},"end":{"line":7,"column":45,"offset":1036},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ter","position":{"start":{"line":7,"column":47,"offset":1038},"end":{"line":7,"column":50,"offset":1041},"indent":[]}}],"position":{"start":{"line":7,"column":45,"offset":1036},"end":{"line":7,"column":52,"offset":1043},"indent":[]}},{"type":"text","value":"/1","position":{"start":{"line":7,"column":52,"offset":1043},"end":{"line":7,"column":54,"offset":1045},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":994},"end":{"line":7,"column":54,"offset":1045},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":992},"end":{"line":7,"column":54,"offset":1045},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":954},"end":{"line":7,"column":54,"offset":1045},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the standard ASP.Net MVC route in English only. To have it in French, you would have to repeat that with French string but it wouldn't have handled the culture thread problem. ","position":{"start":{"line":9,"column":1,"offset":1047},"end":{"line":9,"column":185,"offset":1231},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":1047},"end":{"line":9,"column":185,"offset":1231},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"\n\ncontext.MapRoute( Constants.Areas.ADMINISTRATOR + \"_OrdersController_Reject\" , \"Administrator/Investigate/Reject/{\" + Constants.RoutePortionName.ID + \"}\" , new RouteValueDictionary {{ Constants.RoutePortionName.ACTION, \"Reject\" }, { Constants.RoutePortionName.CONTROLLER, \"Orders\" }} , new RouteValueDictionary {{ Constants.RoutePortionName.ID,@\"\\\\d+\"}, }); ","position":{"start":{"line":10,"column":1,"offset":1232},"end":{"line":14,"column":4,"offset":1606},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the previous article, we described a way to defined constraints, values, localized tokens and Area-Controller-Action. For our example here, this would look like the following code. ","position":{"start":{"line":16,"column":1,"offset":1608},"end":{"line":16,"column":185,"offset":1792},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1608},"end":{"line":16,"column":185,"offset":1792},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var areaRoutes = new List<AreaTranslation> { new AreaTranslation(Constants.Areas.ADMINISTRATION ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"administrator\") ,new LocalizedSection(LocalizedSection.FR, \"administrateur\") } , new List<ControllerSectionLocalized> { new ControllerSectionLocalized(\"Orders\" ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"Orders\") ,new LocalizedSection(LocalizedSection.FR, \"Ordres\") } ,new List<ActionSectionLocalized> { new ActionSectionLocalized(\"Reject\" ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"Reject\") ,new LocalizedSection(LocalizedSection.FR, \"rejeter\") } , null , new RouteValueDictionary { { Constants.RoutePortionName.ID, @\"\\\\d+\" } } , Constants.Areas.ADMINISTRATION + \"/{investi}/{action}/{\" + Constants.RoutePortionName.ID + \"}\" , new Dictionary<string, List<LocalizedSection>> {{\"investi\" , new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"investigate\") , new LocalizedSection(LocalizedSection.EN, \"investigation\")} } }; ) } ) }) }; ","position":{"start":{"line":17,"column":1,"offset":1793},"end":{"line":19,"column":4,"offset":2886},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the final form with the Fluent API that we will discuss. ","position":{"start":{"line":21,"column":1,"offset":2888},"end":{"line":21,"column":66,"offset":2953},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2888},"end":{"line":21,"column":66,"offset":2953},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var areaRoutes = FluentLocalizedRoute .BuildRoute() .ForBilingualArea(Constants.Areas.ADMINISTRATION, \"administrator\", \"administrateur\") .WithBilingualController(\"Orders\", \"Orders\", \"Ordres\") .WithBilingualAction(\"Reject\", \"Reject\", \"rejeter\") .WithConstraints(Constants.RoutePortionName.ID, @\"\\\\d+\") .WithUrl(Constants.Areas.ADMINISTRATION + \"/{investi}/{action}/{\" + Constants.RoutePortionName.ID + \"}\") .WithTranslatedTokens(\"investi\", \"investigate\", \"investigation\") .ToAreaList(); ","position":{"start":{"line":22,"column":1,"offset":2954},"end":{"line":24,"column":4,"offset":3455},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I think it's pretty clear the benefit of using Fluent API in that particular case. However, do not get me wrong, Fluent API is not ideal in a lot of situation. First, as you will see, it add a lot of code if you want to have your Fluent API to restrict what operation you can do depending of which action you use. Second, it also creates additional codes to unit test, to support and to improve in the future.","position":{"start":{"line":26,"column":1,"offset":3457},"end":{"line":26,"column":410,"offset":3866},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":3457},"end":{"line":26,"column":410,"offset":3866},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is many different ways to use the \"starting point\" with a Fluent API. You could create an extension method that let you use an existing object to be enhance. Or, you can use a static object like a builder. I am using the second idea because I am not enhancing an existing object but create a new collection of objects. However, I could have extend the RouteCollection for example to do the same. The first class is the entry point, could have been simply flatten out directly inside the RouteBuilder. I built it this way to allow me to add later more route builder.","position":{"start":{"line":28,"column":1,"offset":3868},"end":{"line":28,"column":572,"offset":4439},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":3868},"end":{"line":28,"column":572,"offset":4439},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public static class FluentLocalizedRoute { public static RouteBuilder BuildRoute() { return new RouteBuilder(); } } \n``` The second one is the builder itself. I have two possibilities. One to create a list of route that doesn't have areas and one that has area support.\n\n\n```csharp\n public class RouteBuilder: IRouteBuilder { public List<ControllerSectionLocalized> ControllerList { get; } public List<AreaSectionLocalized> AreaList { get; }\n\npublic RouteBuilder() { this.ControllerList = new List<ControllerSectionLocalized>(); this.AreaList = new List<AreaSectionLocalized>(); }\n\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { var controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) } ,null); this.ControllerList.Add(controllerSectionLocalized); if (this.AreaList.Any()) { this.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } var rbc = new RouteBuilderController(controllerSectionLocalized, this); return rbc; }\n\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { var areaLocalized = new AreaSectionLocalized(areaName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,areaEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, areaFrenchLocalizedString) } , null); this.AreaList.Add(areaLocalized); var rbc = new RouteBuilderArea(areaLocalized, this); return rbc; } } ","position":{"start":{"line":31,"column":1,"offset":4442},"end":{"line":44,"column":4,"offset":6180},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So far, we can do : ","position":{"start":{"line":46,"column":1,"offset":6182},"end":{"line":46,"column":21,"offset":6202},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":6182},"end":{"line":46,"column":21,"offset":6202},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" var areaRoutes = FluentLocalizedRoute.BuildRoute() .ForBilingualArea(Constants.Areas.CONTEST, Constants.Areas.CONTEST, Constants.Areas.CONTEST)... ","position":{"start":{"line":47,"column":1,"offset":6203},"end":{"line":49,"column":4,"offset":6365},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You will notice that every methods return an Interface from that point of this article. This is how you define what will appears when you cascade the instruction. It also filters what you can do or not. For example, in the previous code, the ","position":{"start":{"line":51,"column":1,"offset":6367},"end":{"line":51,"column":243,"offset":6609},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ForBilingualController","position":{"start":{"line":51,"column":244,"offset":6610},"end":{"line":51,"column":266,"offset":6632},"indent":[]}}],"position":{"start":{"line":51,"column":243,"offset":6609},"end":{"line":51,"column":267,"offset":6633},"indent":[]}},{"type":"text","value":" returns a ","position":{"start":{"line":51,"column":267,"offset":6633},"end":{"line":51,"column":278,"offset":6644},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IRouteBuilderController","position":{"start":{"line":51,"column":280,"offset":6646},"end":{"line":51,"column":303,"offset":6669},"indent":[]}}],"position":{"start":{"line":51,"column":278,"offset":6644},"end":{"line":51,"column":305,"offset":6671},"indent":[]}},{"type":"text","value":", and the ","position":{"start":{"line":51,"column":305,"offset":6671},"end":{"line":51,"column":315,"offset":6681},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ForBilingualArea","position":{"start":{"line":51,"column":316,"offset":6682},"end":{"line":51,"column":332,"offset":6698},"indent":[]}}],"position":{"start":{"line":51,"column":315,"offset":6681},"end":{"line":51,"column":333,"offset":6699},"indent":[]}},{"type":"text","value":" returns ","position":{"start":{"line":51,"column":333,"offset":6699},"end":{"line":51,"column":342,"offset":6708},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IRouteBuilderArea","position":{"start":{"line":51,"column":344,"offset":6710},"end":{"line":51,"column":361,"offset":6727},"indent":[]}}],"position":{"start":{"line":51,"column":342,"offset":6708},"end":{"line":51,"column":363,"offset":6729},"indent":[]}},{"type":"text","value":" . Hence, you cannot do the same actions. Here is what you can do in both case.","position":{"start":{"line":51,"column":363,"offset":6729},"end":{"line":51,"column":442,"offset":6808},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":6367},"end":{"line":51,"column":442,"offset":6808},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public interface IRouteBuilderController { IRouteBuilderAction WithBilingualAction(string actionName, string actionEnglishLocalizedString, string actionFrenchLocalizedString); } public interface IRouteBuilderArea { IRouteBuilderController WithBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString); } ","position":{"start":{"line":54,"column":1,"offset":6811},"end":{"line":56,"column":4,"offset":7196},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It's similar but not the same. The controller lets you create an action, while the area let you create a controller. As you can see, the return is IRouteBuilderController which converge both path to the controller. That make sense since Area > Controller > Action. This is interesting because it will help us limiting the number of interface. However, keep it mind that a rich API will probably have 1 interface per underlying method. The reason is that each method you have or property you want to set may have some restriction. For example, we will see that once you have setup an action, you can create an Url, a constraint or a value but not in the controller, neither in the area.","position":{"start":{"line":58,"column":1,"offset":7198},"end":{"line":58,"column":686,"offset":7883},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7198},"end":{"line":58,"column":686,"offset":7883},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Both Area and Controller builder takes care of defining the interface contract. It's pretty limited what they can do. They can only localize their name and define the collection of child (one will be controllers and the other one actions). ","position":{"start":{"line":60,"column":1,"offset":7885},"end":{"line":60,"column":241,"offset":8125},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7885},"end":{"line":60,"column":241,"offset":8125},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class RouteBuilder: IRouteBuilder { public List<ControllerSectionLocalized> ControllerList { get; } public List<AreaSectionLocalized> AreaList { get; }\n\npublic RouteBuilder() { this.ControllerList = new List<ControllerSectionLocalized>(); this.AreaList = new List<AreaSectionLocalized>(); }\n\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { var controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) } ,null); this.ControllerList.Add(controllerSectionLocalized); if (this.AreaList.Any()) { this.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } var rbc = new RouteBuilderController(controllerSectionLocalized, this); return rbc; }\n\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { var areaLocalized = new AreaSectionLocalized(areaName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,areaEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, areaFrenchLocalizedString) } , null); this.AreaList.Add(areaLocalized); var rbc = new RouteBuilderArea(areaLocalized, this); return rbc; } }\n\npublic class RouteBuilderArea : IRouteBuilderArea {\n\nprivate readonly AreaSectionLocalized currentControllerSection; private readonly RouteBuilder routeBuilder;\n\npublic RouteBuilderArea(AreaSectionLocalized controllerSection, RouteBuilder routeBuilder) { this.currentControllerSection = controllerSection; this.routeBuilder = routeBuilder; }\n\npublic IRouteBuilderController WithBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { if (this.currentControllerSection.ControllerTranslations == null) { this.currentControllerSection.ControllerTranslations = new List<ControllerSectionLocalized>(); }\n\nvar controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) }, null);\n\nif (this.routeBuilder.AreaList.Any()) { this.routeBuilder.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } this.currentControllerSection.ControllerTranslations.Add(controllerSectionLocalized); return new RouteBuilderController(controllerSectionLocalized, routeBuilder); } } ","position":{"start":{"line":61,"column":1,"offset":8126},"end":{"line":81,"column":4,"offset":10821},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The action interface is getting interesting because of the number of possible action. When the controller is defined, you can do several actions for an action. You can define default value, constraints, url, defines token, create a new action or create a new controller and of course outputting the whole list.","position":{"start":{"line":83,"column":1,"offset":10823},"end":{"line":83,"column":311,"offset":11133},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":10823},"end":{"line":83,"column":311,"offset":11133},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public interface IRouteBuilderAction : IRouteBuilderAction_Defaults, IRouteBuilderAction_Constraints, IRouteBuilderAction_Url, ITranslatedTokens, IRouteBuilderAction_ToList {\n\n}\n\npublic interface IRouteBuilderAction_Defaults: IRouteBuilderAction_Constraints, IRouteBuilderAction_Url, IRouteBuilderAction_ToList { IRouteBuilderAction_Defaults WithDefaultValues(object values); }\n\npublic interface IRouteBuilderAction_Constraints: IRouteBuilderAction_Url, IRouteBuilderAction_ToList { IRouteBuilderAction_Constraints WithConstraints(object constraints); IRouteBuilderAction_Constraints WithConstraints(string constraintName, object constraint); }\n\npublic interface IRouteBuilderAction_Url: IRouteBuilderAction_ToList, IRouteBuilder {\n\nIRouteBuilderAction_ToList WithUrl(string url); IRouteBuilderAction_ToList UseEmptyUrl(); IRouteBuilderAction_ToList UseDefaulUrl(); }\n\npublic interface IRouteBuilderAction_ToList: IRouteBuilder, IAndAction, ITranslatedTokens { List<ControllerSectionLocalized> ToList(); List<AreaSectionLocalized> ToListArea(); }\n\npublic interface IAndAction { IRouteBuilderController And(); } public interface ITranslatedTokens { IRouteBuilderAction_ToList WithTranslatedTokens(string tokenKey, string english, string french); } ","position":{"start":{"line":86,"column":1,"offset":11136},"end":{"line":102,"column":4,"offset":12398},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So for each scenario, you end up with interfaces, and also it's implementation. Most of these implementation return an interface that the Action class will inherit, thus we can return the same class. This is the reason that in the implementation, ","position":{"start":{"line":104,"column":1,"offset":12400},"end":{"line":104,"column":248,"offset":12647},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"RouteBuilderAction","position":{"start":{"line":104,"column":250,"offset":12649},"end":{"line":104,"column":268,"offset":12667},"indent":[]}}],"position":{"start":{"line":104,"column":248,"offset":12647},"end":{"line":104,"column":270,"offset":12669},"indent":[]}},{"type":"text","value":" , you will see that a lot of methods return this. This allows to chain actions on the same object. ","position":{"start":{"line":104,"column":270,"offset":12669},"end":{"line":104,"column":370,"offset":12769},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":12400},"end":{"line":104,"column":370,"offset":12769},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":" public class RouteBuilderAction : IRouteBuilderAction , IRouteBuilderAction_Defaults , IRouteBuilderAction_Constraints , IRouteBuilderAction_Url , IRouteBuilderAction_ToList { private List<ActionSectionLocalized> listActions = new List<ActionSectionLocalized>(); private ControllerSectionLocalized currentControllerSection; private readonly ActionSectionLocalized currentAction; private RouteBuilderController routeBuilderController; private RouteBuilder routeBuilder;\n\npublic RouteBuilderAction(ControllerSectionLocalized controllerSection , ActionSectionLocalized currentAction , RouteBuilder routeBuilder , RouteBuilderController routeBuilderController) { currentControllerSection = controllerSection; this.currentAction = currentAction; this.routeBuilder = routeBuilder; this.routeBuilderController = routeBuilderController; }\n\npublic List<ControllerSectionLocalized> ToList() { return routeBuilder.ControllerList; }\n\npublic List<AreaSectionLocalized> ToListArea() { return routeBuilder.AreaList; }\n\npublic IRouteBuilderAction_ToList UseEmptyUrl() { currentAction.Url = string.Empty; return this; }\n\npublic IRouteBuilderAction_ToList UseDefaulUrl() { currentAction.Url = \"{area}/{controller}/{action}\"; return this; }\n\npublic IRouteBuilderAction_Constraints WithConstraints(object constraints) { if (currentAction.Constraints == null) { currentAction.Constraints = new RouteValueDictionary(); } var rvd = currentAction.Constraints as RouteValueDictionary; if (rvd != null) { var c = constraints as RouteValueDictionary; if (c == null) { c = new RouteValueDictionary(constraints); } c.ToList().ForEach(x => rvd.Add(x.Key, x.Value)); } this.currentAction.Constraints = rvd; return this; }\n\npublic IRouteBuilderAction_Constraints WithConstraints(string constraintName, object constraint) { if (currentAction.Constraints == null) { currentAction.Constraints = new RouteValueDictionary(); } var rvd = currentAction.Constraints as RouteValueDictionary; if (rvd != null) { rvd.Add(constraintName, constraint); } return this; }\n\npublic IRouteBuilderAction_Defaults WithDefaultValues(object values) { currentAction.Values = values; return this; }\n\npublic IRouteBuilderAction_ToList WithUrl(string url) { currentAction.Url = url; return this; }\n\npublic IRouteBuilderController And() { AddInActionList(); return this.routeBuilderController; }\n\nprivate void AddInActionList() { if (currentAction != null) { listActions.Add(currentAction); } }\n\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { AddInActionList(); return routeBuilder.ForBilingualController(controllerName, controllerEnglishLocalizedString, controllerFrenchLocalizedString); }\n\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { AddInActionList(); return routeBuilder.ForBilingualArea(areaName, areaEnglishLocalizedString, areaFrenchLocalizedString); }\n\npublic IRouteBuilderAction WithBilingualAction(string actionName, string actionEnglishLocalizedString, string actionFrenchLocalizedString) { AddInActionList(); return routeBuilderController.WithBilingualAction(actionName, actionEnglishLocalizedString, actionFrenchLocalizedString); }\n\npublic IRouteBuilderAction_ToList WithTranslatedTokens(string tokenKey, string english, string french) {\n\nif (currentAction != null) { if (this.currentAction.Tokens == null) { this.currentAction.Tokens = new Dictionary<string, List<LocalizedSection>>(); } var tokenToAdd = new Dictionary<string, List<LocalizedSection>>(); if (this.currentAction.Tokens.Keys.Any(g => g == tokenKey)) { //Already exist, tbd what we do here, for now nothing } else { this.currentAction.Tokens.Add(tokenKey, new List<LocalizedSection>() { new LocalizedSection(LocalizedSection.EN,english) ,new LocalizedSection(LocalizedSection.FR, french) }); } } return this; } } ","position":{"start":{"line":105,"column":1,"offset":12770},"end":{"line":139,"column":4,"offset":16715},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Fluent API is not cheap to create, neither something to do on everything. However, in that particular scenario the benefices are tremendous. Not only the code is way shorter to write but it is also limit the duplication by having every collections and properties instantiated in a single place.","position":{"start":{"line":141,"column":1,"offset":16717},"end":{"line":141,"column":299,"offset":17015},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":16717},"end":{"line":141,"column":299,"offset":17015},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Improve the Custom Localized MVC Routing with Fluent API\",\"date\":\"2016-01-04\",\"categories\":[\"asp-mvc\"]}","position":{"start":{"line":144,"column":1,"offset":17018},"end":{"line":144,"column":142,"offset":17159},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":142,"offset":17159}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Improve the Custom Localized MVC Routing with Fluent API\",\n  \"date\": \"2016-01-04\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Fluent API is a pattern that wrap existing code to create you some helper to build a complex object. This is used by Entity Framework when configuring entities or used by a lot of Mocking framework. It's more verbose, more explicit about what we can do or not. You can recognize Fluent API because they have a form of almost sentence like : yourObject.WhenStock(typeA).IsHigher().Than(100).Then(doThis);\"), mdx(\"p\", null, \"In this article, we will add a Fluent API on top of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./improve-the-custom-localized-mvc-routing-with-fluent-api\"\n  }, \"the custom localized code\"), \". Why I am saying \\\"on top\\\"? Because the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./improve-the-custom-localized-mvc-routing-with-fluent-api\"\n  }, \"code previous\"), \" coded will still work and because it will not interfere at all with the existing code, we will work with this one without touching this one. But first, let's see what we had and what we will have after. Let's use this complex route that can look like this in English and like that in French:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/Administrator/investigate/reject/1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/Administrat\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"eur\"), \"/investigat\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ion\"), \"/reje\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ter\"), \"/1\")), mdx(\"p\", null, \"This is the standard ASP.Net MVC route in English only. To have it in French, you would have to repeat that with French string but it wouldn't have handled the culture thread problem. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"\\n\\ncontext.MapRoute( Constants.Areas.ADMINISTRATOR + \\\"_OrdersController_Reject\\\" , \\\"Administrator/Investigate/Reject/{\\\" + Constants.RoutePortionName.ID + \\\"}\\\" , new RouteValueDictionary {{ Constants.RoutePortionName.ACTION, \\\"Reject\\\" }, { Constants.RoutePortionName.CONTROLLER, \\\"Orders\\\" }} , new RouteValueDictionary {{ Constants.RoutePortionName.ID,@\\\"\\\\\\\\d+\\\"}, }); \\n\")), mdx(\"p\", null, \"In the previous article, we described a way to defined constraints, values, localized tokens and Area-Controller-Action. For our example here, this would look like the following code. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var areaRoutes = new List<AreaTranslation> { new AreaTranslation(Constants.Areas.ADMINISTRATION ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"administrator\\\") ,new LocalizedSection(LocalizedSection.FR, \\\"administrateur\\\") } , new List<ControllerSectionLocalized> { new ControllerSectionLocalized(\\\"Orders\\\" ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"Orders\\\") ,new LocalizedSection(LocalizedSection.FR, \\\"Ordres\\\") } ,new List<ActionSectionLocalized> { new ActionSectionLocalized(\\\"Reject\\\" ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"Reject\\\") ,new LocalizedSection(LocalizedSection.FR, \\\"rejeter\\\") } , null , new RouteValueDictionary { { Constants.RoutePortionName.ID, @\\\"\\\\\\\\d+\\\" } } , Constants.Areas.ADMINISTRATION + \\\"/{investi}/{action}/{\\\" + Constants.RoutePortionName.ID + \\\"}\\\" , new Dictionary<string, List<LocalizedSection>> {{\\\"investi\\\" , new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"investigate\\\") , new LocalizedSection(LocalizedSection.EN, \\\"investigation\\\")} } }; ) } ) }) }; \\n\")), mdx(\"p\", null, \"This is the final form with the Fluent API that we will discuss. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var areaRoutes = FluentLocalizedRoute .BuildRoute() .ForBilingualArea(Constants.Areas.ADMINISTRATION, \\\"administrator\\\", \\\"administrateur\\\") .WithBilingualController(\\\"Orders\\\", \\\"Orders\\\", \\\"Ordres\\\") .WithBilingualAction(\\\"Reject\\\", \\\"Reject\\\", \\\"rejeter\\\") .WithConstraints(Constants.RoutePortionName.ID, @\\\"\\\\\\\\d+\\\") .WithUrl(Constants.Areas.ADMINISTRATION + \\\"/{investi}/{action}/{\\\" + Constants.RoutePortionName.ID + \\\"}\\\") .WithTranslatedTokens(\\\"investi\\\", \\\"investigate\\\", \\\"investigation\\\") .ToAreaList(); \\n\")), mdx(\"p\", null, \"I think it's pretty clear the benefit of using Fluent API in that particular case. However, do not get me wrong, Fluent API is not ideal in a lot of situation. First, as you will see, it add a lot of code if you want to have your Fluent API to restrict what operation you can do depending of which action you use. Second, it also creates additional codes to unit test, to support and to improve in the future.\"), mdx(\"p\", null, \"There is many different ways to use the \\\"starting point\\\" with a Fluent API. You could create an extension method that let you use an existing object to be enhance. Or, you can use a static object like a builder. I am using the second idea because I am not enhancing an existing object but create a new collection of objects. However, I could have extend the RouteCollection for example to do the same. The first class is the entry point, could have been simply flatten out directly inside the RouteBuilder. I built it this way to allow me to add later more route builder.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static class FluentLocalizedRoute { public static RouteBuilder BuildRoute() { return new RouteBuilder(); } } \\n``` The second one is the builder itself. I have two possibilities. One to create a list of route that doesn't have areas and one that has area support.\\n\\n\\n```csharp\\n public class RouteBuilder: IRouteBuilder { public List<ControllerSectionLocalized> ControllerList { get; } public List<AreaSectionLocalized> AreaList { get; }\\n\\npublic RouteBuilder() { this.ControllerList = new List<ControllerSectionLocalized>(); this.AreaList = new List<AreaSectionLocalized>(); }\\n\\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { var controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) } ,null); this.ControllerList.Add(controllerSectionLocalized); if (this.AreaList.Any()) { this.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } var rbc = new RouteBuilderController(controllerSectionLocalized, this); return rbc; }\\n\\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { var areaLocalized = new AreaSectionLocalized(areaName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,areaEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, areaFrenchLocalizedString) } , null); this.AreaList.Add(areaLocalized); var rbc = new RouteBuilderArea(areaLocalized, this); return rbc; } } \\n\")), mdx(\"p\", null, \"So far, we can do : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var areaRoutes = FluentLocalizedRoute.BuildRoute() .ForBilingualArea(Constants.Areas.CONTEST, Constants.Areas.CONTEST, Constants.Areas.CONTEST)... \\n\")), mdx(\"p\", null, \"You will notice that every methods return an Interface from that point of this article. This is how you define what will appears when you cascade the instruction. It also filters what you can do or not. For example, in the previous code, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ForBilingualController\"), \" returns a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IRouteBuilderController\"), \", and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ForBilingualArea\"), \" returns \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IRouteBuilderArea\"), \" . Hence, you cannot do the same actions. Here is what you can do in both case.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public interface IRouteBuilderController { IRouteBuilderAction WithBilingualAction(string actionName, string actionEnglishLocalizedString, string actionFrenchLocalizedString); } public interface IRouteBuilderArea { IRouteBuilderController WithBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString); } \\n\")), mdx(\"p\", null, \"It's similar but not the same. The controller lets you create an action, while the area let you create a controller. As you can see, the return is IRouteBuilderController which converge both path to the controller. That make sense since Area > Controller > Action. This is interesting because it will help us limiting the number of interface. However, keep it mind that a rich API will probably have 1 interface per underlying method. The reason is that each method you have or property you want to set may have some restriction. For example, we will see that once you have setup an action, you can create an Url, a constraint or a value but not in the controller, neither in the area.\"), mdx(\"p\", null, \"Both Area and Controller builder takes care of defining the interface contract. It's pretty limited what they can do. They can only localize their name and define the collection of child (one will be controllers and the other one actions). \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class RouteBuilder: IRouteBuilder { public List<ControllerSectionLocalized> ControllerList { get; } public List<AreaSectionLocalized> AreaList { get; }\\n\\npublic RouteBuilder() { this.ControllerList = new List<ControllerSectionLocalized>(); this.AreaList = new List<AreaSectionLocalized>(); }\\n\\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { var controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) } ,null); this.ControllerList.Add(controllerSectionLocalized); if (this.AreaList.Any()) { this.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } var rbc = new RouteBuilderController(controllerSectionLocalized, this); return rbc; }\\n\\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { var areaLocalized = new AreaSectionLocalized(areaName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,areaEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, areaFrenchLocalizedString) } , null); this.AreaList.Add(areaLocalized); var rbc = new RouteBuilderArea(areaLocalized, this); return rbc; } }\\n\\npublic class RouteBuilderArea : IRouteBuilderArea {\\n\\nprivate readonly AreaSectionLocalized currentControllerSection; private readonly RouteBuilder routeBuilder;\\n\\npublic RouteBuilderArea(AreaSectionLocalized controllerSection, RouteBuilder routeBuilder) { this.currentControllerSection = controllerSection; this.routeBuilder = routeBuilder; }\\n\\npublic IRouteBuilderController WithBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { if (this.currentControllerSection.ControllerTranslations == null) { this.currentControllerSection.ControllerTranslations = new List<ControllerSectionLocalized>(); }\\n\\nvar controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) }, null);\\n\\nif (this.routeBuilder.AreaList.Any()) { this.routeBuilder.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } this.currentControllerSection.ControllerTranslations.Add(controllerSectionLocalized); return new RouteBuilderController(controllerSectionLocalized, routeBuilder); } } \\n\")), mdx(\"p\", null, \"The action interface is getting interesting because of the number of possible action. When the controller is defined, you can do several actions for an action. You can define default value, constraints, url, defines token, create a new action or create a new controller and of course outputting the whole list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public interface IRouteBuilderAction : IRouteBuilderAction_Defaults, IRouteBuilderAction_Constraints, IRouteBuilderAction_Url, ITranslatedTokens, IRouteBuilderAction_ToList {\\n\\n}\\n\\npublic interface IRouteBuilderAction_Defaults: IRouteBuilderAction_Constraints, IRouteBuilderAction_Url, IRouteBuilderAction_ToList { IRouteBuilderAction_Defaults WithDefaultValues(object values); }\\n\\npublic interface IRouteBuilderAction_Constraints: IRouteBuilderAction_Url, IRouteBuilderAction_ToList { IRouteBuilderAction_Constraints WithConstraints(object constraints); IRouteBuilderAction_Constraints WithConstraints(string constraintName, object constraint); }\\n\\npublic interface IRouteBuilderAction_Url: IRouteBuilderAction_ToList, IRouteBuilder {\\n\\nIRouteBuilderAction_ToList WithUrl(string url); IRouteBuilderAction_ToList UseEmptyUrl(); IRouteBuilderAction_ToList UseDefaulUrl(); }\\n\\npublic interface IRouteBuilderAction_ToList: IRouteBuilder, IAndAction, ITranslatedTokens { List<ControllerSectionLocalized> ToList(); List<AreaSectionLocalized> ToListArea(); }\\n\\npublic interface IAndAction { IRouteBuilderController And(); } public interface ITranslatedTokens { IRouteBuilderAction_ToList WithTranslatedTokens(string tokenKey, string english, string french); } \\n\")), mdx(\"p\", null, \"So for each scenario, you end up with interfaces, and also it's implementation. Most of these implementation return an interface that the Action class will inherit, thus we can return the same class. This is the reason that in the implementation, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RouteBuilderAction\"), \" , you will see that a lot of methods return this. This allows to chain actions on the same object. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class RouteBuilderAction : IRouteBuilderAction , IRouteBuilderAction_Defaults , IRouteBuilderAction_Constraints , IRouteBuilderAction_Url , IRouteBuilderAction_ToList { private List<ActionSectionLocalized> listActions = new List<ActionSectionLocalized>(); private ControllerSectionLocalized currentControllerSection; private readonly ActionSectionLocalized currentAction; private RouteBuilderController routeBuilderController; private RouteBuilder routeBuilder;\\n\\npublic RouteBuilderAction(ControllerSectionLocalized controllerSection , ActionSectionLocalized currentAction , RouteBuilder routeBuilder , RouteBuilderController routeBuilderController) { currentControllerSection = controllerSection; this.currentAction = currentAction; this.routeBuilder = routeBuilder; this.routeBuilderController = routeBuilderController; }\\n\\npublic List<ControllerSectionLocalized> ToList() { return routeBuilder.ControllerList; }\\n\\npublic List<AreaSectionLocalized> ToListArea() { return routeBuilder.AreaList; }\\n\\npublic IRouteBuilderAction_ToList UseEmptyUrl() { currentAction.Url = string.Empty; return this; }\\n\\npublic IRouteBuilderAction_ToList UseDefaulUrl() { currentAction.Url = \\\"{area}/{controller}/{action}\\\"; return this; }\\n\\npublic IRouteBuilderAction_Constraints WithConstraints(object constraints) { if (currentAction.Constraints == null) { currentAction.Constraints = new RouteValueDictionary(); } var rvd = currentAction.Constraints as RouteValueDictionary; if (rvd != null) { var c = constraints as RouteValueDictionary; if (c == null) { c = new RouteValueDictionary(constraints); } c.ToList().ForEach(x => rvd.Add(x.Key, x.Value)); } this.currentAction.Constraints = rvd; return this; }\\n\\npublic IRouteBuilderAction_Constraints WithConstraints(string constraintName, object constraint) { if (currentAction.Constraints == null) { currentAction.Constraints = new RouteValueDictionary(); } var rvd = currentAction.Constraints as RouteValueDictionary; if (rvd != null) { rvd.Add(constraintName, constraint); } return this; }\\n\\npublic IRouteBuilderAction_Defaults WithDefaultValues(object values) { currentAction.Values = values; return this; }\\n\\npublic IRouteBuilderAction_ToList WithUrl(string url) { currentAction.Url = url; return this; }\\n\\npublic IRouteBuilderController And() { AddInActionList(); return this.routeBuilderController; }\\n\\nprivate void AddInActionList() { if (currentAction != null) { listActions.Add(currentAction); } }\\n\\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { AddInActionList(); return routeBuilder.ForBilingualController(controllerName, controllerEnglishLocalizedString, controllerFrenchLocalizedString); }\\n\\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { AddInActionList(); return routeBuilder.ForBilingualArea(areaName, areaEnglishLocalizedString, areaFrenchLocalizedString); }\\n\\npublic IRouteBuilderAction WithBilingualAction(string actionName, string actionEnglishLocalizedString, string actionFrenchLocalizedString) { AddInActionList(); return routeBuilderController.WithBilingualAction(actionName, actionEnglishLocalizedString, actionFrenchLocalizedString); }\\n\\npublic IRouteBuilderAction_ToList WithTranslatedTokens(string tokenKey, string english, string french) {\\n\\nif (currentAction != null) { if (this.currentAction.Tokens == null) { this.currentAction.Tokens = new Dictionary<string, List<LocalizedSection>>(); } var tokenToAdd = new Dictionary<string, List<LocalizedSection>>(); if (this.currentAction.Tokens.Keys.Any(g => g == tokenKey)) { //Already exist, tbd what we do here, for now nothing } else { this.currentAction.Tokens.Add(tokenKey, new List<LocalizedSection>() { new LocalizedSection(LocalizedSection.EN,english) ,new LocalizedSection(LocalizedSection.FR, french) }); } } return this; } } \\n\")), mdx(\"p\", null, \"The Fluent API is not cheap to create, neither something to do on everything. However, in that particular scenario the benefices are tremendous. Not only the code is way shorter to write but it is also limit the duplication by having every collections and properties instantiated in a single place.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Improve the Custom Localized MVC Routing with Fluent API\",\n  \"date\": \"2016-01-04\",\n  \"categories\": [\"asp-mvc\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Fluent API is a pattern that wrap existing code to create you some helper to build a complex object. This is used by Entity Framework when configuring entities or used by a lot of Mocking framework. It's more verbose, more explicit about what we can do or not. You can recognize Fluent API because they have a form of almost sentence like : yourObject.WhenStock(typeA).IsHigher().Than(100).Then(doThis);`}</p>\n    <p>{`In this article, we will add a Fluent API on top of `}<a parentName=\"p\" {...{\n        \"href\": \"./improve-the-custom-localized-mvc-routing-with-fluent-api\"\n      }}>{`the custom localized code`}</a>{`. Why I am saying \"on top\"? Because the `}<a parentName=\"p\" {...{\n        \"href\": \"./improve-the-custom-localized-mvc-routing-with-fluent-api\"\n      }}>{`code previous`}</a>{` coded will still work and because it will not interfere at all with the existing code, we will work with this one without touching this one. But first, let's see what we had and what we will have after. Let's use this complex route that can look like this in English and like that in French:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`/Administrator/investigate/reject/1`}</li>\n      <li parentName=\"ul\">{`/Administrat`}<strong parentName=\"li\">{`eur`}</strong>{`/investigat`}<strong parentName=\"li\">{`ion`}</strong>{`/reje`}<strong parentName=\"li\">{`ter`}</strong>{`/1`}</li>\n    </ul>\n    <p>{`This is the standard ASP.Net MVC route in English only. To have it in French, you would have to repeat that with French string but it wouldn't have handled the culture thread problem. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`\n\ncontext.MapRoute( Constants.Areas.ADMINISTRATOR + \"_OrdersController_Reject\" , \"Administrator/Investigate/Reject/{\" + Constants.RoutePortionName.ID + \"}\" , new RouteValueDictionary {{ Constants.RoutePortionName.ACTION, \"Reject\" }, { Constants.RoutePortionName.CONTROLLER, \"Orders\" }} , new RouteValueDictionary {{ Constants.RoutePortionName.ID,@\"\\\\\\\\d+\"}, }); \n`}</code></pre>\n    <p>{`In the previous article, we described a way to defined constraints, values, localized tokens and Area-Controller-Action. For our example here, this would look like the following code. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var areaRoutes = new List<AreaTranslation> { new AreaTranslation(Constants.Areas.ADMINISTRATION ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"administrator\") ,new LocalizedSection(LocalizedSection.FR, \"administrateur\") } , new List<ControllerSectionLocalized> { new ControllerSectionLocalized(\"Orders\" ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"Orders\") ,new LocalizedSection(LocalizedSection.FR, \"Ordres\") } ,new List<ActionSectionLocalized> { new ActionSectionLocalized(\"Reject\" ,new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"Reject\") ,new LocalizedSection(LocalizedSection.FR, \"rejeter\") } , null , new RouteValueDictionary { { Constants.RoutePortionName.ID, @\"\\\\\\\\d+\" } } , Constants.Areas.ADMINISTRATION + \"/{investi}/{action}/{\" + Constants.RoutePortionName.ID + \"}\" , new Dictionary<string, List<LocalizedSection>> {{\"investi\" , new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \"investigate\") , new LocalizedSection(LocalizedSection.EN, \"investigation\")} } }; ) } ) }) }; \n`}</code></pre>\n    <p>{`This is the final form with the Fluent API that we will discuss. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var areaRoutes = FluentLocalizedRoute .BuildRoute() .ForBilingualArea(Constants.Areas.ADMINISTRATION, \"administrator\", \"administrateur\") .WithBilingualController(\"Orders\", \"Orders\", \"Ordres\") .WithBilingualAction(\"Reject\", \"Reject\", \"rejeter\") .WithConstraints(Constants.RoutePortionName.ID, @\"\\\\\\\\d+\") .WithUrl(Constants.Areas.ADMINISTRATION + \"/{investi}/{action}/{\" + Constants.RoutePortionName.ID + \"}\") .WithTranslatedTokens(\"investi\", \"investigate\", \"investigation\") .ToAreaList(); \n`}</code></pre>\n    <p>{`I think it's pretty clear the benefit of using Fluent API in that particular case. However, do not get me wrong, Fluent API is not ideal in a lot of situation. First, as you will see, it add a lot of code if you want to have your Fluent API to restrict what operation you can do depending of which action you use. Second, it also creates additional codes to unit test, to support and to improve in the future.`}</p>\n    <p>{`There is many different ways to use the \"starting point\" with a Fluent API. You could create an extension method that let you use an existing object to be enhance. Or, you can use a static object like a builder. I am using the second idea because I am not enhancing an existing object but create a new collection of objects. However, I could have extend the RouteCollection for example to do the same. The first class is the entry point, could have been simply flatten out directly inside the RouteBuilder. I built it this way to allow me to add later more route builder.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public static class FluentLocalizedRoute { public static RouteBuilder BuildRoute() { return new RouteBuilder(); } } \n\\`\\`\\` The second one is the builder itself. I have two possibilities. One to create a list of route that doesn't have areas and one that has area support.\n\n\n\\`\\`\\`csharp\n public class RouteBuilder: IRouteBuilder { public List<ControllerSectionLocalized> ControllerList { get; } public List<AreaSectionLocalized> AreaList { get; }\n\npublic RouteBuilder() { this.ControllerList = new List<ControllerSectionLocalized>(); this.AreaList = new List<AreaSectionLocalized>(); }\n\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { var controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) } ,null); this.ControllerList.Add(controllerSectionLocalized); if (this.AreaList.Any()) { this.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } var rbc = new RouteBuilderController(controllerSectionLocalized, this); return rbc; }\n\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { var areaLocalized = new AreaSectionLocalized(areaName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,areaEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, areaFrenchLocalizedString) } , null); this.AreaList.Add(areaLocalized); var rbc = new RouteBuilderArea(areaLocalized, this); return rbc; } } \n`}</code></pre>\n    <p>{`So far, we can do : `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` var areaRoutes = FluentLocalizedRoute.BuildRoute() .ForBilingualArea(Constants.Areas.CONTEST, Constants.Areas.CONTEST, Constants.Areas.CONTEST)... \n`}</code></pre>\n    <p>{`You will notice that every methods return an Interface from that point of this article. This is how you define what will appears when you cascade the instruction. It also filters what you can do or not. For example, in the previous code, the `}<em parentName=\"p\">{`ForBilingualController`}</em>{` returns a `}<strong parentName=\"p\">{`IRouteBuilderController`}</strong>{`, and the `}<em parentName=\"p\">{`ForBilingualArea`}</em>{` returns `}<strong parentName=\"p\">{`IRouteBuilderArea`}</strong>{` . Hence, you cannot do the same actions. Here is what you can do in both case.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public interface IRouteBuilderController { IRouteBuilderAction WithBilingualAction(string actionName, string actionEnglishLocalizedString, string actionFrenchLocalizedString); } public interface IRouteBuilderArea { IRouteBuilderController WithBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString); } \n`}</code></pre>\n    <p>{`It's similar but not the same. The controller lets you create an action, while the area let you create a controller. As you can see, the return is IRouteBuilderController which converge both path to the controller. That make sense since Area > Controller > Action. This is interesting because it will help us limiting the number of interface. However, keep it mind that a rich API will probably have 1 interface per underlying method. The reason is that each method you have or property you want to set may have some restriction. For example, we will see that once you have setup an action, you can create an Url, a constraint or a value but not in the controller, neither in the area.`}</p>\n    <p>{`Both Area and Controller builder takes care of defining the interface contract. It's pretty limited what they can do. They can only localize their name and define the collection of child (one will be controllers and the other one actions). `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class RouteBuilder: IRouteBuilder { public List<ControllerSectionLocalized> ControllerList { get; } public List<AreaSectionLocalized> AreaList { get; }\n\npublic RouteBuilder() { this.ControllerList = new List<ControllerSectionLocalized>(); this.AreaList = new List<AreaSectionLocalized>(); }\n\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { var controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) } ,null); this.ControllerList.Add(controllerSectionLocalized); if (this.AreaList.Any()) { this.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } var rbc = new RouteBuilderController(controllerSectionLocalized, this); return rbc; }\n\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { var areaLocalized = new AreaSectionLocalized(areaName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,areaEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, areaFrenchLocalizedString) } , null); this.AreaList.Add(areaLocalized); var rbc = new RouteBuilderArea(areaLocalized, this); return rbc; } }\n\npublic class RouteBuilderArea : IRouteBuilderArea {\n\nprivate readonly AreaSectionLocalized currentControllerSection; private readonly RouteBuilder routeBuilder;\n\npublic RouteBuilderArea(AreaSectionLocalized controllerSection, RouteBuilder routeBuilder) { this.currentControllerSection = controllerSection; this.routeBuilder = routeBuilder; }\n\npublic IRouteBuilderController WithBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { if (this.currentControllerSection.ControllerTranslations == null) { this.currentControllerSection.ControllerTranslations = new List<ControllerSectionLocalized>(); }\n\nvar controllerSectionLocalized = new ControllerSectionLocalized(controllerName, new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN,controllerEnglishLocalizedString) ,new LocalizedSection(LocalizedSection.FR, controllerFrenchLocalizedString) }, null);\n\nif (this.routeBuilder.AreaList.Any()) { this.routeBuilder.AreaList.Last().ControllerTranslations.Add(controllerSectionLocalized); } this.currentControllerSection.ControllerTranslations.Add(controllerSectionLocalized); return new RouteBuilderController(controllerSectionLocalized, routeBuilder); } } \n`}</code></pre>\n    <p>{`The action interface is getting interesting because of the number of possible action. When the controller is defined, you can do several actions for an action. You can define default value, constraints, url, defines token, create a new action or create a new controller and of course outputting the whole list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public interface IRouteBuilderAction : IRouteBuilderAction_Defaults, IRouteBuilderAction_Constraints, IRouteBuilderAction_Url, ITranslatedTokens, IRouteBuilderAction_ToList {\n\n}\n\npublic interface IRouteBuilderAction_Defaults: IRouteBuilderAction_Constraints, IRouteBuilderAction_Url, IRouteBuilderAction_ToList { IRouteBuilderAction_Defaults WithDefaultValues(object values); }\n\npublic interface IRouteBuilderAction_Constraints: IRouteBuilderAction_Url, IRouteBuilderAction_ToList { IRouteBuilderAction_Constraints WithConstraints(object constraints); IRouteBuilderAction_Constraints WithConstraints(string constraintName, object constraint); }\n\npublic interface IRouteBuilderAction_Url: IRouteBuilderAction_ToList, IRouteBuilder {\n\nIRouteBuilderAction_ToList WithUrl(string url); IRouteBuilderAction_ToList UseEmptyUrl(); IRouteBuilderAction_ToList UseDefaulUrl(); }\n\npublic interface IRouteBuilderAction_ToList: IRouteBuilder, IAndAction, ITranslatedTokens { List<ControllerSectionLocalized> ToList(); List<AreaSectionLocalized> ToListArea(); }\n\npublic interface IAndAction { IRouteBuilderController And(); } public interface ITranslatedTokens { IRouteBuilderAction_ToList WithTranslatedTokens(string tokenKey, string english, string french); } \n`}</code></pre>\n    <p>{`So for each scenario, you end up with interfaces, and also it's implementation. Most of these implementation return an interface that the Action class will inherit, thus we can return the same class. This is the reason that in the implementation, `}<strong parentName=\"p\">{`RouteBuilderAction`}</strong>{` , you will see that a lot of methods return this. This allows to chain actions on the same object. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{` public class RouteBuilderAction : IRouteBuilderAction , IRouteBuilderAction_Defaults , IRouteBuilderAction_Constraints , IRouteBuilderAction_Url , IRouteBuilderAction_ToList { private List<ActionSectionLocalized> listActions = new List<ActionSectionLocalized>(); private ControllerSectionLocalized currentControllerSection; private readonly ActionSectionLocalized currentAction; private RouteBuilderController routeBuilderController; private RouteBuilder routeBuilder;\n\npublic RouteBuilderAction(ControllerSectionLocalized controllerSection , ActionSectionLocalized currentAction , RouteBuilder routeBuilder , RouteBuilderController routeBuilderController) { currentControllerSection = controllerSection; this.currentAction = currentAction; this.routeBuilder = routeBuilder; this.routeBuilderController = routeBuilderController; }\n\npublic List<ControllerSectionLocalized> ToList() { return routeBuilder.ControllerList; }\n\npublic List<AreaSectionLocalized> ToListArea() { return routeBuilder.AreaList; }\n\npublic IRouteBuilderAction_ToList UseEmptyUrl() { currentAction.Url = string.Empty; return this; }\n\npublic IRouteBuilderAction_ToList UseDefaulUrl() { currentAction.Url = \"{area}/{controller}/{action}\"; return this; }\n\npublic IRouteBuilderAction_Constraints WithConstraints(object constraints) { if (currentAction.Constraints == null) { currentAction.Constraints = new RouteValueDictionary(); } var rvd = currentAction.Constraints as RouteValueDictionary; if (rvd != null) { var c = constraints as RouteValueDictionary; if (c == null) { c = new RouteValueDictionary(constraints); } c.ToList().ForEach(x => rvd.Add(x.Key, x.Value)); } this.currentAction.Constraints = rvd; return this; }\n\npublic IRouteBuilderAction_Constraints WithConstraints(string constraintName, object constraint) { if (currentAction.Constraints == null) { currentAction.Constraints = new RouteValueDictionary(); } var rvd = currentAction.Constraints as RouteValueDictionary; if (rvd != null) { rvd.Add(constraintName, constraint); } return this; }\n\npublic IRouteBuilderAction_Defaults WithDefaultValues(object values) { currentAction.Values = values; return this; }\n\npublic IRouteBuilderAction_ToList WithUrl(string url) { currentAction.Url = url; return this; }\n\npublic IRouteBuilderController And() { AddInActionList(); return this.routeBuilderController; }\n\nprivate void AddInActionList() { if (currentAction != null) { listActions.Add(currentAction); } }\n\npublic IRouteBuilderController ForBilingualController(string controllerName, string controllerEnglishLocalizedString, string controllerFrenchLocalizedString) { AddInActionList(); return routeBuilder.ForBilingualController(controllerName, controllerEnglishLocalizedString, controllerFrenchLocalizedString); }\n\npublic IRouteBuilderArea ForBilingualArea(string areaName, string areaEnglishLocalizedString, string areaFrenchLocalizedString) { AddInActionList(); return routeBuilder.ForBilingualArea(areaName, areaEnglishLocalizedString, areaFrenchLocalizedString); }\n\npublic IRouteBuilderAction WithBilingualAction(string actionName, string actionEnglishLocalizedString, string actionFrenchLocalizedString) { AddInActionList(); return routeBuilderController.WithBilingualAction(actionName, actionEnglishLocalizedString, actionFrenchLocalizedString); }\n\npublic IRouteBuilderAction_ToList WithTranslatedTokens(string tokenKey, string english, string french) {\n\nif (currentAction != null) { if (this.currentAction.Tokens == null) { this.currentAction.Tokens = new Dictionary<string, List<LocalizedSection>>(); } var tokenToAdd = new Dictionary<string, List<LocalizedSection>>(); if (this.currentAction.Tokens.Keys.Any(g => g == tokenKey)) { //Already exist, tbd what we do here, for now nothing } else { this.currentAction.Tokens.Add(tokenKey, new List<LocalizedSection>() { new LocalizedSection(LocalizedSection.EN,english) ,new LocalizedSection(LocalizedSection.FR, french) }); } } return this; } } \n`}</code></pre>\n    <p>{`The Fluent API is not cheap to create, neither something to do on everything. However, in that particular scenario the benefices are tremendous. Not only the code is way shorter to write but it is also limit the duplication by having every collections and properties instantiated in a single place.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}