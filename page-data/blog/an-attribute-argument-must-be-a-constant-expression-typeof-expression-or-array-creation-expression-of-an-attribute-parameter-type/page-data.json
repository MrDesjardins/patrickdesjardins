{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/an-attribute-argument-must-be-a-constant-expression-typeof-expression-or-array-creation-expression-of-an-attribute-parameter-type",
    "result": {"data":{"mdx":{"frontmatter":{"title":"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type","date":"November 9, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\",\n  \"date\": \"2012-11-09\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are trying to use a static string in an attribute for an action inside a Asp.Net MVC's controller, you will get a strange error.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\")), mdx(\"p\", null, \"This is because you are using static string instead of constant.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static string AdministratorRole=\\\"admin\\\"; \\n\")), mdx(\"p\", null, \"The code below works because it's a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public const string\"), \" instead of a public static string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public const string AdministratorRole=\\\"admin\\\"; \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"37802047-0739-5093-bd25-03db57e2327c","totalPages":68}},
    "staticQueryHashes": ["3159585216"]}