{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/javascript-the-good-things-to-know",
    "result": {"data":{"mdx":{"frontmatter":{"title":"JavaScript The Good Things to Know","date":"October 31, 2014"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Null and array\"), mdx(\"p\", null, \"The type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"null\"), \" or the type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"array\"), \" are in fact of type object. You can verify this by using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"typeof\"), \". ```typescript\\nconsole.log(typeof(null)); console.log(typeof(\", \"[1,2,3]\", \"); \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\n## Variables Name\\n\\nVariables name can have illegal character if used with quote when defined. For example, you can use **numeric** and **alphanumeric character** with **underscore** but you cannot use directly a dash for example. The variable name this-is-illegal is not legal but if you define your object with the property name \\\"this-is-illegal\\\" it works. ```typescript\\nvar yourObject = { \\\"this-is-illegal\\\":\\\"but it works because of the quote\\\", this_is_legal : \\\"and does not require quote\\\" }; \\n\")), mdx(\"p\", null, \" Even if the illegal character can be by-passed by the first approach, using quote, it is not recommended to write you code this way. Retreving the value require to use the array notation instead of the dot notation. ```typescript\\nvar v1 = yourObject\", \"[\\\"this-is-illegal\\\"]\", \"; //instead of var v1 = yourObject.this_is_legal; \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\n## arguments variable\\n\\nEvery function can access the **arguments** keyword. This variable is not an official JavaScript array (lack of Array method) but can access every elements with the square bracket.\\n\\n```typescript\\nfunction add(a,b) { return a + b; // or return arguments[0] + arguments[1]; } \\n\")), mdx(\"p\", null, \"But this goes far beyond that. You can define your function to not have any arguments and use it with multiple arguments. The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arguments\"), \" variable will hold all arguments passed to the function and not only those officially specified.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function add() { var index var sum = 0; for (index = 0; index < arguments.length; index += 1) { sum += arguments[index]; } return sum } var result = add(1,2,3,4,5); // 15 \\n\")), mdx(\"h2\", null, \"Default Initialization\"), mdx(\"p\", null, \"If you are not sure if a variable has already been initialized you can use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"|| operator\"), \" to check and assign. ```typescript\\nvar variableWithValueForSure = anotherVariable.variable1 || \\\"defaultValue\\\"; \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" What it does is that it check if the first expression returns _undefined_. If it is undefined, than this one return _false_. Since it returns _false_, the next expression is evaluate which set the value. In the case it is not _undefined_, this one return not _true_ but the value directly. This is why, often in JavaScript we see the same variable doing this trick to itself to be sure that it is defined. The next example ensures that the variable \\\"me\\\" is defined and not undefined. ```typescript\\nvar me = me || {}; \\n\")), mdx(\"h2\", null, \"Object and Dynamic Variables\"), mdx(\"p\", null, \"It is possible to add variables at anytime with JavaScript. You just need to set a value to have the variable defined inside your object. This is also true for functions. ```typescript\\nvar obj = { variable1 : 1 }; obj.newVariable = 2; //newVariable is added to the object obj \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\n## References is used not copy\\n\\nEvery time you set an existing object to another variable this one pass its reference. This is true for function parameters but also for variable inside a function. ```typescript\\nvar x1 = x2; //x1 and x2 are the same now x2.v1 = 'value1'; //x1.v1 is also at 'value1' \\n\")), mdx(\"h2\", null, \"Prototype\"), mdx(\"p\", null, \"Prototype is the concept in JavaScript that allow you to share information through different object of the same type. When calling a function or variable on an object, if this one does not find the function or variable it go check if it can find it in its prototype. If it does not find it it goes to the prototype of the prototype and so on until it reach object.prototype. If nothing is found, it return \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"undefined\"), \".\"), mdx(\"h2\", null, \"hasOwnProperty\"), mdx(\"p\", null, \"If you want to loop your object proprety (variables and functions) than you will stumble into prototype properties which you may not want to see. If you want to see only method that you have defined for the object and not those ones from the prototype you must use the function \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"hasOwnProperty('propertyToCheck')\"), \". ```typescript\\nvar propertyName ; for (propertyName in yourObject) { if (yourObject.hasOwnProperty(propertyName])) { //Do what you want with the property that is inside YourObject and not inside the its prototype } } \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" We used the for in statement to loop through all properties. This give us property in an non-specific order. If you want to have properties in the order defined in the code you must use a for with a integer that loop every properties in an array.\\n\\n## Delete keyword\\n\\nUsing delete can remove a property. For example, if you define a property named \\\"prop1\\\" and you execute delete on it, this one will return undefined exepted if the prototype has a \\\"prop1\\\" method. Because of the nature of the prototyoe\\n\\n## Adding Method to Prototype\\n\\nYou can add methods to an object with the prototype. You just need to use the prototype keyword after the type you want to enhance. The example below add a trim method to any string. ```typescript\\nString.prototype['trim'] = function () { return this.replace(/^\\\\\\\\s+|\\\\\\\\s+$/g, ''); }; This add the trim method to all String type. \\n\")), mdx(\"h2\", null, \"Variables Declaration\"), mdx(\"p\", null, \"In JavaScript it is better to define variable in the beginning of the function instead of the best practice that suggest to declare the variable the nearest of its use. The reason is that JavaScript scope works differently than other languages. JavaScript variables defined in a scope can access others variables outside its scopes. ```typescript\\nvar Program = function() { var var1 = 1; var Program2= function() { var1 = var1 + 1; // This can access var1 function which is not the case in other scoped language. } Program2(); // Call f2 function //The value of var 1 is 2; } \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" For example, this does not work in C#: \\n```csharp\\n class Program { private int a;\\n\\nprivate class Program2 { public Program2() { a = a + 1; // Do not compile } } } \\n\")), mdx(\"h2\", null, \"Apply Keyword\"), mdx(\"p\", null, \"You can call any function with by following this function with the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"apply\"), \". This one takes two parameters. The first one is the value you want to set to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" for the method you call. The value can be set to null if you do not want to pass a value to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" of the function. The second parameter is an array. This array are converted into the function parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function add(a,b) { return a + b; } \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"//Can be called this way: var result1 = add(1,2); //3 //or var result2 = add.apply(null,[1,2]); //3 \\n\")), mdx(\"h2\", null, \"Exceptions\"), mdx(\"p\", null, \"You can throw exception and catch them. The exception throw an object you want. You can use any thing. ```typescript\\nthrow {name: 'Error Name', message : 'message you want'}; \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Thrown statement are read by catch block. If you want to catch multiple exception, than you must do a if statement on a property you want, for example the name. ```typescript\\ntry { throw {name: 'StackOverFlow', message : 'message you want'}; } catch(e) { if(e.name === 'StackOverFlow') { console.log('***' + e.name + ': ' + e.message + '***'); } console.log(e.name + ': ' + e.message); } \\n\")), mdx(\"h2\", null, \"Chaining Calls\"), mdx(\"p\", null, \"It is always good to return the this keyword if your method return nothing. This allow to do chaining calls. ```typescript\\nvar Human= function() { this.name = 'Not Defined'; this.gender = 'm'; };\"), mdx(\"p\", null, \"Human.prototype.setName = function(name) { this.name = name; return this; };\"), mdx(\"p\", null, \"Human.prototype.setGender = function(gender) { this.gender = gender; return this; }; \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" This allow us to chain because every function return the **this** reference. ```typescript\\nvar patrick = new Humain() .setName('patrick') .setGender('male'); \\n\")), mdx(\"h2\", null, \"Javascript Encapsulation with Closure\"), mdx(\"p\", null, \"JavaScript provides Encapsulation with something named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Closure\"), \". Since everything in JavaScript uses function, this one too. The principle of closure is to encapsulate every variables and methods into a cohesive function. This allow us to scope what is private to the object from what is public. It is very similar to object oriented class. Private methods and variables are not returned by the closure while public methods and variable are. Let's start with an example to demystify the concept of closure. ```typescript\\nvar referenceToTheObject = (function () { var privateVariable = 0; return { publicMethod1: function () { } ,publicMethod2: function () { } }; }() ); \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" This is interesting because in fact, we are invoking an anonymous function (see the line before the last one). This function return an object with two public functions. As you must know now, these function can call any methods and variables in their outer scope. This mean that both public method can call each others but also the private variable. The private variable is not reachable outside the anonymous function because it is not returned by the anonymous function.\\n\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"JavaScript The Good Things to Know\\\",\\\"date\\\":\\\"2014-10-31\\\",\\\"categories\\\":[\\\"javascript\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c47c31cf-305f-5d2a-a6c9-d909433b84ed","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}