{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-class-decorator-method-performance",
    "result": {"data":{"mdx":{"frontmatter":{"title":"TypeScript Class Decorator : Method Performance","date":"May 9, 2017"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript Class Decorator : Method Performance\",\n  \"date\": \"2017-05-09\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TypeScript supports decorator for classes, methods, properties, parameters and attributes. In this post, we will see how to create a decorator that will sit on top of a method. The goal of this decorator is to have an easy way to add to any of your method some code that will be executed. This is good for re-usability and doesn't need you to have to add a call inside your method for every method you need to have something executed. We will see that we need to change TypeScript compiler, how to create the decorator and how to use this one.\"), mdx(\"p\", null, \"The use of decorator is still very recent and it needs TypeScript to activate experimental decorator on. This is done by adding in the compilerOptions section of TypeScript compiler the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"experimentalDecorators\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \". While many other decorator types require also to have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emitDecoratorMetadata\"), \" on, this is not the case with method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es6\\\",\\n    \\\"experimentalDecorators\\\": true\\n    }\\n}\\n\")), mdx(\"p\", null, \"The decorator for the method is one of the most powerful decorator. It is executed when the method is called which allow you to do something before and after this one. If you are from .Net, it's a little bit like using a class that inherit IDisposable and have this one wrapping the whole method. The resemblance is that the Disposable method can do something in the constructor as a pre-execution code and do something in the dispose method as post-execution.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class MyCSharpClass{\\n  public void TestMethod(){\\n    using(new PseudoDecoratorButInsideMethod()){\\n      //Code here\\n      }\\n  }\\n}\\n\")), mdx(\"p\", null, \"In TypeScript, there is not something similar else than doing function function callback where you also wrap the code you want to decorate by executing a method that will do your pre and post code. The disadvantage is like with the .Net alternative which is that it needs intervention withing the method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class MyClass {\\n  myMethod() {\\n    this.doSomething(() => {\\n      console.log(\\\"Inside\\\");\\n    });\\n  }\\n  doSomething(callBack: Function): void {\\n    console.log(\\\"Before\\\");\\n    callBack();\\n    console.log(\\\"After\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"The decorator version is more clean and doesn't need you to change the method where you want to inject some logic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class MyClass {\\n  @myMethodDecorator\\n  myMethod() {\\n    console.log(\\\"Inside\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"From here you should see some scenario where it makes sense to use decorator or not. I'll illustrate one by using a method decorator to capture the time a method takes to execute. I'll call this method \\\"performanceLog\\\" and will allow to supply two parameters, which the latest will be optional with a default value. The first parameter will tell if we want to display in the console the performance. The rational behind it that we may just want to log the information into our telemetry system in production. The second parameter is when to change the log into an error. It's the threshold in millisecond of when it's too long for the method.\"), mdx(\"p\", null, \"To be able to have parameter, we must wrap the decorator into a function. Then, we need to return a function that has 3 parameters. The first one is the target which is the class prototype. This will allow us to dig inside the class to get into the method which is defined by the second parameter. Finally, the third parameter is a variable that contain the value of the method -- this is where we will define the new method we want to swap from the original. As you saw in the previous way to do, we needed to have a callback that was executed between two statements. This is similar. We will extract the actual method and reuse this one between two statements and return a \\\"new\\\" methods into the value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export function performanceLog(\\n  outputConsole: boolean,\\n  thresholdToDisplayErrorInMs: number = 1000\\n) {\\n  /**\\n   * @params{any} target - The prototype of the class (Object).\\n   * @params{string} propertyKey - The name of the method.\\n   * @params{PropertyDescriptor} descriptor - Property that has a value (in that case the method)\\n   */\\n  return (\\n    target: any,\\n    propertyKey: string,\\n    descriptor: PropertyDescriptor\\n  ) => {};\\n}\\n\")), mdx(\"p\", null, \"To get the performance of a method, we need to collect the time before executing the original method, and display the final time, after its execution. So, first, before doing anything there is two important steps to do. We need to ensure that we have a descriptor defined (third parameter). This may be overridden by another decorator, hence we need to be sure it's defined, if not to create back this one. Then, we need to do a copy of the original method because we want to execute it at the proper time.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export function performanceLog(\\n  outputConsole: boolean,\\n  thresholdToDisplayErrorInMs: number = 1000\\n) {\\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\\n    // Ensure we have the descriptor that might been overriden by another decorator\\n    if (descriptor === undefined) {\\n      descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\\n    }\\n    // Copy\\n    const originalMethod = descriptor.value;\\n    // To be continued\\n  };\\n}\\n\")), mdx(\"p\", null, \"Next, we need to create the new function that will be swapped from the original. This is done by defining a new function in the descriptor.value. You should not use the arrow function syntax because it will mess up the \\\"this\\\" pointer. To get more data for the log, you can get all parameters passed by stringify all parameters. After, you can start a timer and get the user time and call the original method. You must collect the result (in case of method that return something else than void) and stop the timer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// Redefine the method to this new method who will call the original method\\n// Use the function's this context instead of the value of this when log is called (no arrow function)\\ndescriptor.value = function (...args: any[]) {\\n  const parametersAsString = args\\n    .map((parameter) => JSON.stringify(parameter))\\n    .join(\\\",\\\");\\n  const startTime = window.performance.now();\\n  const result = originalMethod.apply(this, args);\\n  // Call the original method\\n  const endTime = window.performance.now();\\n  const timespan = endTime - startTime;\\n  const stringResult = JSON.stringify(result);\\n  // To be continued\\n};\\n\")), mdx(\"p\", null, \"The last step is to bring everything to live with showing in the console the performance by using the threshold. Here is the complete TypeScript decorator method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export function performanceLog(\\n  outputConsole: boolean,\\n  thresholdToDisplayErrorInMs: number = 1000\\n) {\\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\\n    // Ensure we have the descriptor that might been overriden by another decorator\\n    if (descriptor === undefined) {\\n      descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\\n    }\\n\\n    const originalMethod = descriptor.value;\\n    // Redefine the method to this new method who will call the original method\\n    // Use the function's this context instead of the value of this when log is called (no arrow function)\\n    descriptor.value = function (...args: any[]) {\\n      const parametersAsString = args\\n        .map((parameter) => JSON.stringify(parameter))\\n        .join(\\\",\\\");\\n      const startTime = window.performance.now();\\n      const result = originalMethod.apply(this, args);\\n      // Call the original method\\n      const endTime = window.performance.now();\\n      const timespan = endTime - startTime;\\n      const stringResult = JSON.stringify(result);\\n      if (outputConsole) {\\n        const message =\\n          \\\"Call [\\\" +\\n          timespan +\\n          \\\"ms]: \\\" +\\n          propertyKey +\\n          \\\"(\\\" +\\n          parametersAsString +\\n          \\\") => \\\" +\\n          stringResult;\\n        if (timespan < thresholdToDisplayErrorInMs) {\\n          console.log(message);\\n        } else {\\n          console.error(message);\\n        }\\n      }\\n      return result;\\n    };\\n    return descriptor;\\n  };\\n}\\n\")), mdx(\"p\", null, \"TypeScript decorators are still in an early stage like if you were to use them with JavaScript. Decorator with method are a lot more straight forward than other decorator that require other library to extract meta-data for example. Decorators are getting more popular and start to be even cornerstone to some popular JavaScript framework like Angular 2 (and 4). Like every new shiny language feature, using at the proper time is the key of success.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"b6a5c119-eac9-5a1b-bbec-ec81053bfd1f","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}