{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/docker-vitejs-hot-reload",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to have ViteJS (via SolidJS) to Hot Reload when inside a Docker Container","date":"August 9, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to have ViteJS (via SolidJS) to Hot Reload when inside a Docker Container\",\n  \"date\": \"2022-08-09\",\n  \"categories\": [\"azure\", \"vitejs\", \"container\", \"solidjs\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Suppose you are using ViteJS to automate your TypeScript, JSX, and CSS, then you will need to adjust the ViteJS configuration to use the hot-reload mechanism still. Likewise, you will need to perform these steps using SolidJS instead of CRA since SolidJS relies on ViteJS.\"), mdx(\"p\", null, \"My current example works if you use a Docker container for your web application that mounts its file on your development machine. The solution is neat as it allows you to isolate the web server that ViteJS starts in development inside a Docker container and still leverage a fast development experience with your TypeScript, CSS, and HTML file on your machine. If you are unsure what I am describing, I suggest reading this previous article about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./docker-nodejs-frontend-backend\"\n  }, \"how to configure Docker with two containers: frontend and backend\"), \".\"), mdx(\"h1\", null, \"ViteJS Configuration File\"), mdx(\"p\", null, \"Most of the heavy work is done by modifying the ViteJS configuration file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vite.config.ts\"), \", which should be at the root of your frontend project. If the file is not present, it is time to create it. \"), mdx(\"p\", null, \"I have removed in the following code a lot of SolidJS configurations as well as other needed configurations. The goal is to highlight the vital part of having ViteJS accessible outside your container but mainly to keep the capability of modifying a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tsx\"), \" file and seeing the change within a few milliseconds occurring on the browser.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"export default (conf: any) => {\\n  return defineConfig({\\n    server: {\\n      host: \\\"0.0.0.0\\\",\\n      hmr: {\\n        clientPort: ENV_VARIABLES.OUTER_PORT_FRONTEND,\\n      },\\n      port: ENV_VARIABLES.INNER_PORT_FRONTEND_DEV, \\n      watch: {\\n        usePolling: true,\\n      },\\n    },\\n  });\\n};\\n\")), mdx(\"p\", null, \"The first part is under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server\"), \" is the host. It needs to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.0.0.0\"), \" to make every IP accessible. A value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"127.0.0.1\"), \" is not enough when you are inside a Docker container.\"), mdx(\"p\", null, \"The second part is the ports. The first port is under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hmr\"), \", which stands for \\\"hot module reload\\\". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clientPort\"), \" must be set to the port your Docker container exposes. My \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Docker-compose.yaml\"), \" has for the frontend server that configuration:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ports:\\n      - \\\"${OUTER_PORT_FRONTEND}:${INNER_PORT_FRONTEND}\\\"\\n\")), mdx(\"p\", null, \"Which take the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OUTER_PORT_FRONTEND\"), \" to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INNER_PORT_FRONTEND\"), \". So, if you are exposing outside port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"80\"), \" but that inside your are running on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3000\"), \" it means that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hmr\"), \" must be the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"80\"), \" value. That is the value that the browser will use to access the website.\"), mdx(\"p\", null, \"The third part is the port of the internal ViteJS server. The value you see of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INNER_PORT_FRONTEND_DEV\"), \" is the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3000\"), \" port for a SolidJS application.\"), mdx(\"p\", null, \"At this point, the configuration should work, and you should see your web application if you go on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"80,\"), \" but a change does not reload the site. I notice that even a refresh of the browser is not performing any changes but that if I connect to the container, the JavaScript is generated. So, TypeScript is being transpiled, but for some reason, something blocks. The secret is to enable the polling.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"watch: {\\n  usePolling: true,\\n},\\n\")), mdx(\"h1\", null, \"Conclusion\"), mdx(\"p\", null, \"The path to success with Docker, ViteJS, SolidJS, and all other abstractions is paved with holes. For example, it is not apparent why the polling is required to have new changes through Docker. However, it works, and I hope it helps with your configuration.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"9ea604cb-bd3f-54ae-983e-50a0da6f6b69","totalPages":75}},
    "staticQueryHashes": ["3159585216"]}