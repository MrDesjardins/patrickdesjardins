{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/install-apollo-server-to-host-a-graphql-service",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Install Apollo Server to host a GraphQL service","date":"January 14, 2019"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Install Apollo Server to host a GraphQL service\",\n  \"date\": \"2019-01-14\",\n  \"categories\": [\"graphql\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is the second post about my journey on prototyping a GraphQL service to abstract all REST and gRPC services that we have at Netflix Open Connect. You can consult the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"getting-started-with-graphql-for-netflix-open-connect\"\n  }, \"first article that was describing GraphQL\"), \" and the high-level architecture to have a better idea of the motivation. In this article, I'll start diving into how to get started with Apollo. I will not filter out my pain points: there are way too many articles that continue to spin the hype on GraphQL. While GraphQL is great in theory, the practice is never as shiny.\"), mdx(\"h2\", null, \"NPM Packages\"), mdx(\"p\", null, \"The first step is to get Apollo and the general GraphQL package. Using NPM like any other libraries is the best way to get the packages. Apollo is divided into several packages, so far, I had to use the main one, the core, and the express library. Apollo is made with TypeScript, thus no type is required. For GraphQL, there is a definition file package available. Because I will use an Express server, I also needed the Express' type. So far, so good.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install --save apollo-server apollo-server-core apollo-server-express graphql npm install --save-dev @types/graphql @types/express typescript\\n\\n\")), mdx(\"p\", null, \"The whole journey will be strongly typed with TypeScript. GraphQL is having its own schemas and we will see in a future article how we can leverage the type from Proto Buffers (gRPC services), GraphQL schema as TypeScript definition type.\"), mdx(\"h2\", null, \"TypeScript\"), mdx(\"p\", null, \"The quickest way to configure TypeScript is to use the initialize command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"tsc --init\\n\")), mdx(\"p\", null, \"I have been using TypeScript for many years and used many different configurations. In 2018, I have been targeting \\\"es5\\\" and used the \\\"esNext\\\" for the module. However, coding in NodeJS with \\\"esNext\\\" is problematic with many libraries. Apollo libraries are in the group of packages that do not support \\\"esNext\\\". The error \\\"Cannot find module 'x' rise. NodeJS supports \\\"commonjs\\\" module, hence I had to switch the \\\"esNext\\\" to \\\"commonjs\\\". The other characteristic was that the \\\"moduleResolution\\\" was not set explicitly. I assumed that because I am using a TypeScript's version superior to 3.2 that it was the default. Adding the configuration removed over 10 different problems in the terminal (in VsCode). Here is an extract of the TypeScript tsconfig.json file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"target\\\": \\\"es5\\\" ,\\n\\\"module\\\": \\\"commonjs\\\",\\n\\\"skipLibCheck\\\": true,\\n\\\"moduleResolution\\\": \\\"node\\\",\\n\\\"lib\\\": [\\\"es6\\\", \\\"dom\\\", \\\"esnext.asynciterable\\\", \\\"es2015\\\", \\\"es2016\\\", \\\"es2017\\\"],\\n\\\"sourceMap\\\": true,\\n\\\"pretty\\\": true,\\n\\\"strict\\\": true,\\n\\\"outDir\\\": \\\"build/dist\\\",\\n\\\"rootDir\\\": \\\"src\\\",\\n\\\"baseUrl\\\": \\\"src\\\",\\n\\\"allowSyntheticDefaultImports\\\": true,\\n\\\"esModuleInterop\\\": true\\n\")), mdx(\"h2\", null, \"Express\"), mdx(\"p\", null, \"The Apollo website has a great introduction tutorial that mentions a way to host the GraphQL by simply calling the ApolloServer object. My issue with that approach is that I needed to have custom endpoints. For example, in general, we have a health check endpoint to configure that will be periodically pinged to see if the service is up or down. Also, I wanted to have the flexibility to have any future endpoints on the NodeJS.\\xA0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const server = new ApolloServer({ typeDefs });\\n\\nserver.listen().then(({ url }) => {\\n  console.log(`\\uD83D\\uDE80 Server ready at ${url}`);\\n});\\n\\n\")), mdx(\"p\", null, \"Without having to look very far, many implementations on the Internet also use Express and use ApolloServer has a middleware. The way to proceed is to create an Express Http server and attach Apollo's server.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import express, { Request, Response } from \\\"express\\\";\\nconst app = express();\\napp.get(\\\"/healthcheck\\\", (req: Request, res: Response) => {\\n    res.status(200).send(\\\"ok\\\");\\n});\\nconst server = new ApolloServer(await apolloServerConfig());\\nserver.applyMiddleware({ app, path: endpoint, cors: true });\\napp.listen(endpoints.graphQlServerPort, () => {\\n        console.log(\\\"Up-and-running\\\");\\n});\\n\")), mdx(\"p\", null, \"It is possible to verify the validity of the actual configuration without configuring Apache. While the objective is to use the authentication mechanism by the Netflix's Apache module, at the moment nothing require authentication. The excerpt of the Express server on port \\\"graphQlServerPort\\\" which is no port 80. Apache will be using port 80 and will redirect the request to the \\\"graphQlServerPort\\\". The extract is in the main index.ts file which I have an NPM command that calls TypeScript to build and then calls NodeJS to execute.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"dev\\\": \\\"concurrently \\\\\\\\\\\"tsc -w\\\\\\\\\\\" \\\\\\\\\\\"nodemon build/dist/index.js\\\\\\\\\\\"\\\"\\n\")), mdx(\"p\", null, \"Indeed, another command in package.json is required when running Apache in Docker, but I will skip that part to focus on GraphQL. The \\\"dev\\\" command start TypeScript in watch mode and has a node monitoring process that will restart on every change of file which occurs every time TypeScript compile. So far, the project is tiny, it takes less than two seconds.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"images/2018-12-17_16-16-55.gif\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"TypeScript and NodeJS Refreshing\"), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"I will stop there for the moment. The Express server is running which is the HTTP server that will host the GraphQL service. TypeScript is configured building the .ts files into .js files that NodeJS can execute. Apollo is attached to Express allowing the API to be called but also to host the playground that we will explore in the next article. So far, it's been without too much hassle but we have not much configured. Upcoming challenges will strike and the youth of the technology will surface.\"), mdx(\"h2\", null, \"My GraphQL Articles\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"getting-started-with-graphql-for-netflix-open-connect\"\n  }, \"Getting Started with GraphQL for Netflix Open Connect\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"install-apollo-server-to-host-a-graphql-service\"\n  }, \"Install Apollo Server to host a GraphQL service\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"apollo-server-and-secured-playground\"\n  }, \"Apollo Server and Secured Playground\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"graphql-context\"\n  }, \"GraphQL Context\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"graphql-query-with-argument\"\n  }, \"GraphQL Query with Argument\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"apollo-graphql-resolvers-and-data-source-separation\"\n  }, \"Apollo GraphQL Resolvers and Data Source separation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"how-to-setup-a-typescript-nodejs-express-apollo-server-to-easy-debugging-with-vscode\"\n  }, \"How to setup a TypeScript, NodeJS, Express Apollo Server to easy debugging with VsCode\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"graphql-resolvers-with-apollo\"\n  }, \"GraphQL Resolvers with Apollo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"configuring-apollo-playground-and-api-on-two-different-url\"\n  }, \"Configuring Apollo Playground and API on two different URL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"how-to-automatically-generate-typescript-for-consumer-of-your-graphql\"\n  }, \"How to automatically generate TypeScript for consumers of your GraphQL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"graphql-extension-to-collect-http-and-resolvers-telemetry\"\n  }, \"GraphQL and HTTP Telemetry\"), \"  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"how-to-consume-graphql-in-typescript-and-react\"\n  }, \"GraphQL and TypeScript/React\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"3bcf79d9-8f9d-5919-8d58-89765c590980"}},
    "staticQueryHashes": ["3159585216"]}