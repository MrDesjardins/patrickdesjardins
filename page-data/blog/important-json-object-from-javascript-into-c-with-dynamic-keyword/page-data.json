{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/important-json-object-from-javascript-into-c-with-dynamic-keyword",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Import Json object from Javascript into C# with Dynamic keyword","date":"October 23, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Import Json object from Javascript into C# with Dynamic keyword\",\n  \"date\": \"2011-10-23\",\n  \"categories\": [\"dynamic\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I never really used the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword in a real application. I did some tutorials but not much.\"), mdx(\"p\", null, \"This week, I got a situation where I was getting from Silverlight a Json object that I did not want to create an object for.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string response = HtmlPage.Window.Invoke(\\\"GetMyJson\\\").ToString(); MyObject data = (MyObject)JsonConvert.DeserializeObject(response); \\n\")), mdx(\"p\", null, \"But, I did not wanted to create the MyObject because it was just for transferring data; a simple DTO object. Instead, I used the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword provided by .Net framework 4.0.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword will be resolved in runtime and this give us the leverage to access property that might not exist. For example, \\\"GetMyJson\\\" function was returning a simple object with 2 properties \\\"Abc\\\" and \\\"Def\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{'Abc':'123','Def':'456'} \\n\")), mdx(\"p\", null, \"So, in the C# code, I simply called those properties from the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string response = HtmlPage.Window.Invoke(\\\"GetMyJson\\\").ToString(); dynamic data = JsonConvert.DeserializeObject(response); string s1 = data.Abc; string s2 = data.Def; \\n\")), mdx(\"p\", null, \"This is pretty useful for accessing quickly some data from Json object.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"dbe236ef-f821-5358-afad-1da3a2c080c1","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}