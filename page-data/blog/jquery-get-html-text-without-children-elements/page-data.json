{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/jquery-get-html-text-without-children-elements",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Jquery Get Html Text Without Children Elements","date":"October 3, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jquery Get Html Text Without Children Elements\",\n  \"date\": \"2013-10-03\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Some time, you have a hmtl list inside an other html list or in fact any html element inside html and you want to have the text but not other html tag. How can you do?\"), mdx(\"p\", null, \"You cannot use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".html()\"), \" because it will return the inner html tag. You cannot use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".text()\"), \" because it will return the text of the html element with the text inside inner html element.\"), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<ul> <li id=\\\"step1\\\">This is Step 1 <ul> <li>This is inside Step 1</li> </ul> </li> <li id=\\\"step2\\\">This is Step 2 </li> </ul> \\n\")), mdx(\"p\", null, \"If we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step1.html()\"), \". The output is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"This is Step 1 <ul> <li>This is inside Step 1</li> </ul> \\n\")), mdx(\"p\", null, \"If we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step1.text()\"), \". The output is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"This is Step 1 This is inside Step 1 \\n\")), mdx(\"p\", null, \"But if you want to get only \\\"This is Step 1\\\" you will have to use several Jquery calls.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$(\\\"#step1\\\").clone() \\n.children() \\n.remove() \\n.end() \\n.text(); \\n\")), mdx(\"p\", null, \" The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clone\"), \" instruction do a copy of the ul structure. It contains the whole structure with inner list. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" get everything under the step 1. This is the ul right under the step1 id. The remove take out all children. In our case, it removes only the ul under the step1 id. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \" method tell Jquery to select back the initial selector which is the cloned element and get its text. Since we have removed every children, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"text\"), \" method will return only the text of the element.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"4aa59b44-b8d5-5917-82da-223c7d592663","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}