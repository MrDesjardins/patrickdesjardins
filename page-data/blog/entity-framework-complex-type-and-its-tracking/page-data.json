{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/entity-framework-complex-type-and-its-tracking",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Entity Framework Complex Type and its Tracking","date":"July 22, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework Complex Type and its Tracking\",\n  \"date\": \"2015-07-22\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Entity Framework has something called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"complex type\"), \". They are classes that does not have unique identifier. They are used has a subset of an entity. For example, you can have an Address class that you want to have inside another class but do not want to have to have a table for the Address. This is useful for concepts that can be shared across entities without having to refer them as entity themselves. Another example could be Audit. An Audit table can be a solution, but you may want to have a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ModifiedDate\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ModifiedUser\"), \" for some of your entities. The solution would be to copy paste those two properties on all your entities or to have a class that has those two properties and to use this class inside entities that want to have audit.\"), mdx(\"p\", null, \"Let's see a coding example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class House { public int Id { get; set; } public double Price { get; set; } public Address Address { get; set; } }\\n\\npublic class Address { public string Street { get; set; } public int Number { get; set; } public string City { get; set; } } \\n\")), mdx(\"p\", null, \"An house has an Address. Later on, if we add Business entity, this one could also refer to the Address entity without having to copy and paste all Address properties.\"), mdx(\"p\", null, \"The main point of that article is that every properties inside a complex type is considered as one by Entity Framework's tracking system. It means that if you mark any of the property to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IsModified\"), \" true that the whole complex type will be tracked as changed. Same thing if you mark that complex type has \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IsModified\"), \" to true, than every property, even if not changed, will be marked to be changed. The principle behind that is that complex type is treated as an immutable type. That mean that complex type is a whole. Changing one value of this one would mean to create a new instance of that object. I am not sure that this is very convenient in many \\\"real life scenario\\\" but in theory it makes sense.\"), mdx(\"p\", null, \"To illustrate more the point, here is a second example with Entity Framework calls.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class MyEntity { public MyComplexClass Property1 { get; set; } }\\n\\nvar entityLocal = this.Set<MyEntity>().Local.SingleOrDefault(d => d.Id == entity.Id); if (entityLocal == null) { entityLocal = this.Set<MyEntity>().Attach(entity); } this.ChangeTracker.Entries<MyEntity>().Single(d => d.Entity == entityLocal).State = EntityState.Modified; this.Entry(entity).Property(s => s.Property1.SubProperty1).IsModified = true; this.Entry(entity).Property(s => s.Property1.SubProperty2).IsModified = false;//This remove all modification of the object!!! this.SaveChanges(); \\n\")), mdx(\"p\", null, \"As you can see, the entity is marked as modified and I set one of the complex type property to false. The result is that none of the complex type properties will be saved. Here is the SQL generated: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" update [dbo].[MyEntity] set @p = 0 where (([Id] = @0)) \\n\")), mdx(\"p\", null, \" The Sql update just the property of the entity, not the one of the complex type. However, if we do not mark the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SubProperty2\"), \" with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IsModified\"), \" to False, we have a SQL that save the whole entity, with the complex type. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" update [dbo].[MyEntity] set [Property1_SubProperty1] = @0 , [Property1_SubProperty2] = null where (([Id] = @1)) \\n\")), mdx(\"p\", null, \"I took the shortcut to profile the Sql Database to see the output but you could just check from the database context the properties changed and realize the same behavior. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var entry = DatabaseContext.Entry(entity); var namesOfChangedProperties = entry.CurrentValues.PropertyNames .Where(p => entry.Property(p).IsModified) .ToArray(); \\n\")), mdx(\"p\", null, \"At the end, you have to think the Complex Type as a whole. That mean that everything is related for Entity Framework. It also mean that if you are concerned about performance that you may not want to have huge complex type because, during load or save, the transportation of the information become into a single package. You may have end result that is not what desired, have too much information loaded or half a complex type saved (in the case you have just fill up half of the object). Take in consideration that Entity Framework limitation/feature when you create your classes design.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"8f4f13b5-46bd-50d1-87e8-0e25d48463cd","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}