{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/lambda-utilities-to-get-nested-property-name-and-value",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Lambda Utilities to get nested property name and value","date":"February 10, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lambda Utilities to get nested property name and value\",\n  \"date\": \"2015-02-10\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It is handy to develop code that does not use directly the string name of a property when creating method to work against dynamic code. In the past, we would wrote code like that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" bool isNotNull = MyMethod(myObjectToVerify, \\\"propertyToVerify\\\"); \\n\")), mdx(\"p\", null, \"The problem with code that specify string method's name is that error occurs. You can mistype, you can forgot to rename the string when refactoring or you can simply not know about that string when during a replace this one got changed without you even knowing. This is why, since Microsoft .Net has introduced Lambda, you should use an expression. The result is strongly typed and it looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" bool isNotNull = LambdaUtilities.VerifyNotNull( ()=>myObjectToVerify.propertyToVerify ); \\n\")), mdx(\"p\", null, \"The code to verify the value is very simple. It consists of compiling the expression and invoking the property. If this one return null, return false, otherwise, return true. I am not going to show you how to create that simple true/false condition but how to get the value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static object GetValue<T>(Expression<Func<T>> selector) { var method = selector.Compile(); var value= method.Invoke(); return value; } \\n\")), mdx(\"p\", null, \"The method works for nested property. So you can use these variants when using it: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var x = GetValue(()=>yourObject.Property); var x2 = GetValue(()=>yourObject.Property.NestedProperty); var x3 = GetValue(()=>yourObject.Property.NestedProperty.AndSoOn); \\n\")), mdx(\"p\", null, \"Getting the name of the property require more code. The code come from one of my project and if my memory is good, come almost all from a StackOverflow post. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static string GetPropertyName<T>(Expression<Func<T>> expression) { var stack = new Stack<string>(); Expression expression1 = expression.Body; while (expression1 != null) { if (expression1.NodeType == ExpressionType.Call) { var methodCallExpression = (MethodCallExpression)expression1; if (IsSingleArgumentIndexer(methodCallExpression)) { stack.Push(string.Empty); expression1 = methodCallExpression.Object; } else break; } else if (expression1.NodeType == ExpressionType.ArrayIndex) { var binaryExpression = (BinaryExpression)expression1; stack.Push(string.Empty); expression1 = binaryExpression.Left; } else if (expression1.NodeType == ExpressionType.MemberAccess) { var memberExpression = (MemberExpression)expression1; stack.Push(\\\".\\\" + memberExpression.Member.Name); expression1 = memberExpression.Expression; } else if (expression1.NodeType == ExpressionType.Parameter) { stack.Push(string.Empty); expression1 = null; } else if (expression1.NodeType == ExpressionType.Convert) { var memberExp = ((UnaryExpression)expression1).Operand as MemberExpression; stack.Push(\\\".\\\" + memberExp.Member.Name); expression1 = memberExp.Expression; } else break; } if (stack.Count > 0 && string.Equals(stack.Peek(), \\\".model\\\", StringComparison.OrdinalIgnoreCase)) stack.Pop(); if (stack.Count <= 0) return string.Empty; return (stack).Aggregate(((left, right) => left + right)).TrimStart(new[] { '.' }); }\\n\\nprivate static bool IsSingleArgumentIndexer(Expression expression) { var methodExpression = expression as MethodCallExpression; if (methodExpression == null || methodExpression.Arguments.Count != 1) return false; return (methodExpression.Method.DeclaringType.GetDefaultMembers()).OfType<PropertyInfo>().Any((p => p.GetGetMethod() == methodExpression.Method)); } \\n\")), mdx(\"p\", null, \"To get the name of the property, you have to call it like the one to get the value. This one support as well nested properties. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var x = GetPropertyName(()=>yourObject.Property); var x2 = GetPropertyName(()=>yourObject.Property.NestedProperty); var x3 = GetPropertyName(()=>yourObject.Property.NestedProperty.AndSoOn); \\n\")), mdx(\"p\", null, \"With these two methods, you should be in business to get the value and the name of properties from Lambda. Avoiding the use of string is interesting for your maintainability and it allows you to modify without fearing to forget a string somewhere.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"23003f83-7544-5e58-9e7d-1314a3e0f606","totalPages":69}},
    "staticQueryHashes": ["3159585216"]}