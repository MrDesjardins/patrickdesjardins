{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-transfer-files-between-computers-using-HDMI-Part-6-instruction-black-white",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to Transfer Files Between Computers Using HDMI (Part 6: Instruction and Black and White)","date":"May 31, 2023"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Transfer Files Between Computers Using HDMI (Part 6: Instruction and Black and White)\",\n  \"date\": \"2023-05-31\",\n  \"categories\": [\"rust\", \"hdmi\", \"video\", \"encoding\", \"steganography\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Last time, we determined that the original idea of relying on a insignificant character to fill the frame is not great. It causes non-text content to break as soon as the selected character can be found in the middle of the content. The solution is to reserve space at the beginning of the first frame (after the red frame) to inject the number of byte to retrieve. Then, the rest of the frame can be filled with null character to have a full video frame.\"), mdx(\"h1\", null, \"Instruction Header\"), mdx(\"p\", null, \"The video frame structure has now a function to inject into the frame the instruction:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub fn write_instruction(&mut self, instruction: &Instruction, size: u8) -> (u16, u16) {\\n    let mut instruction_index = 0;\\n    let mut x: u16 = 0;\\n    let mut y: u16 = 0;\\n    'outer: for i in (0..self.frame_size.height as u16).step_by(size as usize) {\\n        for j in (0..self.frame_size.width as u16).step_by(size as usize) {\\n            if instruction_index < 64 {\\n                let (r, g, b) = get_rgb_for_bit(\\n                    instruction.relevant_byte_count_in_64bits[instruction_index],\\n                );\\n                self.write(r, g, b, j, i, size);\\n                x = j + size as u16;\\n                instruction_index += 1;\\n            } else {\\n                break 'outer;\\n            }\\n        }\\n\\n        y = i + size as u16;\\n    }\\n    if x == self.frame_size.width as u16 {\\n        x = 0; // y is already increased\\n    }\\n    return (x, y);\\n}\\n\")), mdx(\"p\", null, \"The function works well with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" meaning that if each data is set to be stored into a bigger size than 1 pixel, the instruction will also be biggest. The instruction stores its data into the first 64 spaces. If we use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" of 1, it takes 64 pixels of the first frame of the whole video. With that information on hand, we can store the remaining data after. At extraction time, once the red frame is found, we can extract the first 64 pixels (if size 1) and know how many byte of data to extract.\"), mdx(\"p\", null, \"The solution works well!\"), mdx(\"h1\", null, \"Loseless\"), mdx(\"p\", null, \"Most video frame were written using Open CV using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VideoWriter::fourcc('p', 'n', 'g', ' ')\"), \". Using this fourcc make the code work well locally to inject data and extract locally. However, when it is time to transfer using the capture card and the HDMI cable it does not work. Colors are shifted with R, G and B lossing their original value. Also, the format does not let me open the file on the source computer with VLC. However, using the black and white algorithm with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VideoWriter::fourcc('a', 'v', 'c', '1')\"), \" worked well locally even if the format is not loseless. Mostly because each color are not taken the value straigh. It always round it up to the most black or white. Because the range is from 0 to 255, it gives some space to imperfection that we can easily put back.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub fn get_bit_from_rgb(rgb: &Vec<u8>) -> bool {\\n    let sum: u32 = rgb.iter().map(|x| *x as u32).sum();\\n    sum >= (255_u32 * (rgb.len() as u32) / 2)\\n}\\n\")), mdx(\"p\", null, \"The function shows that it takes a collection of color (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u8\"), \" because 0 to 255) and make the sum and divides. So if the color is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"10,10,40\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0,0,0\"), \" the sum is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"60\"), \". Then, divided by the amount of color. In that case three. It gives \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"20\"), \". Because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"20\"), \" is < than half of the to 126 it is considered black.\"), mdx(\"h1\", null, \"Video Encoding\"), mdx(\"p\", null, \"To be more faitful to the transmission format, the video encoding is now dynamically chosen depending of the algorithm.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let fourcc = if options.algo == options::AlgoFrame::RGB {\\n    VideoWriter::fourcc('p', 'n', 'g', ' ')\\n} else {\\n    VideoWriter::fourcc('a', 'v', 'c', '1')\\n};\\n\")), mdx(\"p\", null, \"That being said, the RGB solution is and will never be suitable to transfer data without rethinking to a mechanism to bring resiliency on data corruption which happen massively with video compression.\"), mdx(\"h1\", null, \"Testing Locally\"), mdx(\"p\", null, \"Injecting a zip file of 13.3 megs produces a video file of 47.1 megs in 5 seconds. The video length is 1 second.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"cargo run --release -- -m inject -i outputs/test2.zip -o outputs/test2zip.mp4 --fps 30 --height 1080 --width 1920 --size 1 -p true -a bw\\n\")), mdx(\"p\", null, \"Extracting the zip file takes 15 seconds.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"cargo run --release -- -m extract -i outputs/test2zip.mp4 -o outputs/test2_extract.zip --fps 30 --height 1080 --width 1920 --size 1 -p true -a bw\\n\")), mdx(\"h1\", null, \"Testing with Capture Card and HDMI\"), mdx(\"p\", null, \"The first test was a picture of 2 megs. I started using 15 fps and pixel size of 5. The slowest fps was to ensure that more duplicate would be there to avoid missing frame. I would still read at 30 fps on the target computer. The size of 5 is also to ensure the video well received. The source computer with VLC couldn't play the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acv1\"), \" format and I had to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mp4v\"), \" fourcc. More investigation is needed to understand the reason. The produced video size is 104 megs and has 13 seconds length.\"), mdx(\"p\", null, \"However, I see in the terminal when closing ffmpeg using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"q\"), \" this message:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"real-time buffer too full or near too full frame dropped!\")), mdx(\"p\", null, \"Also, during the extraction process, the instruction gives zero byte. The pixel colors were all black. Maybe the two are related? Adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-rtbufsize\"), \" to ffmpeg resolved the error message but the data could not be more extracted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"ffmpeg  -r 30 -f dshow -s 1920x1080 -vcodec mjpeg -rtbufsize 200M -i video=\\\"USB Video\\\" -r 30 out1.mp4\\n\")), mdx(\"p\", null, \"The next step was to ensure we are not missing data on the frame. To verify this hypothesis I decided to start with creating a small video that do a square of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" pixel of different color. It looks like a rainbow from the outside skirt to the inside. Then, passing the video into the capture card and comparing to see if some colors were missing on any edge. I performed few tests with different size without finding anything clear. \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"./images/hdmi-file-transfer-frame-rainbow.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"Then, I decided to perform a second test. This time, using diagonal of 10 pixels on each corner. By using a bigger size than 1 pixel for each square, I can count the square. I did with 1 pixel to ensure the integrity since using bigger size for each square is easier to count but might have the corner pixel missing few pixels. \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"./images/hdmi-file-transfer-frame-diagonal.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"After several different configurations, I confirmed that what is recorded by the ffmpeg was full frames. Thus, the last explanation was that reading the frames, especially the one containing the instruction, was faulty. Could the frame with the instruction be missing? Maybe frames are not all captured causing a stream of video with few gaps which are not perceptive visually but are critical to form a comprehensible message back.\"), mdx(\"h1\", null, \"Conclusion\"), mdx(\"p\", null, \"In this section we saw that adding instruction and using black and white frame work well locally but then again using an HDMI cable with a capture card cause some issues like not being able to decrypt the size of the data. In the next post, we will see how to mitigate the issue by analyzing what is happening by creating an additional test.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d1f3c9d1-dfdf-558d-924e-f996167304c7","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}