{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-and-object-entries",
    "result": {"data":{"mdx":{"frontmatter":{"title":"TypeScript and Object.Entries","date":"November 30, 2017"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript and Object.Entries\",\n  \"date\": \"2017-11-30\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using a dictionary or map in TypeScript you may want to know how many elements are mapped. This can be done with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.Entries(myMappedObject).length\"), \". However, the default Typescript configuration won't let use this latest function because it's only available in EcmaScript 2017. To get access to it, you need to change the tsconfig.json. Tsconfig.json has a portion called \\\"lib\\\" which increments TypeScript with libraries. To have access to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.Entries\"), \", you need to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"es2017.object\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \" \\\"lib\\\": [ \\\"es6\\\", \\\"dom\\\", \\\"es2017.object\\\" ]\\n\")), mdx(\"p\", null, \"If you are curious about the TypeScript generic way to have a dictionary, you can use this interface:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export interface MyMap<T> {\\n  [id: string]: T;\\n}\\n\")), mdx(\"p\", null, \"From there you can do:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const c: MyMap<MyObject> = {};\\nc[\\\"myId1\\\"] = myObject1;\\nc[\\\"myId2\\\"] = myObject2;\\nc[\\\"myId3\\\"] = myObject3;\\nconst numberOfElementInDictionary = Object.entries(c).length;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"008ae8a0-75db-52a9-8e58-966cdd593a7f","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}