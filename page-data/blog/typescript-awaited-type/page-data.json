{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-awaited-type",
    "result": {"data":{"mdx":{"frontmatter":{"title":"TypeScript Awaited Type","date":"January 26, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript Awaited Type\",\n  \"date\": \"2022-01-26\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Before TypeScript version 4.5, there was a unexpected type conversion happening with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \". The current code is working prior to version 4.5.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"{1, 2, 20}\",\n    \"{1,\": true,\n    \"2,\": true,\n    \"20}\": true\n  }, \"async function computationLogic<T>(arg: Promise<T>): Promise<T[]> {\\n  return [await arg];\\n}\\n\\nclass Observer<T> {\\n  private value: T | undefined;\\n  public constructor(t: T | undefined = undefined) {\\n    this.value = t;\\n  }\\n  async getValue() {\\n    return this.value;\\n  }\\n  async compute() {\\n    return computationLogic(this.getValue());\\n  }\\n}\\n\\n(async () => {\\n  const p = new Observer<Promise<string>>();\\n  const m = await p.compute(); //  Promise<string>[] instead of string[]\\n})();\\n\")), mdx(\"p\", null, \"The code compile and but the line 20, the last highlighted line, return for the variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m\"), \" a type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise<string>[]\"), \" which is not true. Because at line 2, we are use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" we are returning an array of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awaited\"), \" type. The awaited type of a Promise is the generic type. Thus, in that case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \".\"), mdx(\"p\", null, \"The next code contains the use of the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Awaited<>\"), \" that specify to TypeScript that we are returning the type resolved.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"{2}\",\n    \"{2}\": true\n  }, \"async function computationLogic<T>(arg: Promise<T>): Promise<Awaited<T>[]> {\\n  return [await arg];\\n}\\n\\nclass Observer<T> {\\n  private value: T | undefined;\\n  public constructor(t: T | undefined = undefined) {\\n    this.value = t;\\n  }\\n  async getValue() {\\n    return this.value;\\n  }\\n  async compute() {\\n    return computationLogic(this.getValue());\\n  }\\n}\\n\\n(async () => {\\n  const p = new Observer<Promise<string>>();\\n  const m = await p.compute(); //  Promise<string>[] instead of string[]\\n})();\\n\")), mdx(\"p\", null, \"The type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m\"), \" is not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string[]\"), \" instead of a promise of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string[]\"), \". As expected at runtime! While researching the new awaited feature I found very limited example or usage. All of them, as I am writing this blog post are revolving around an array of generic type. I suspect that this will be useful to have an accurate return type when using promises and arrays. For example, with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.all()\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"18434b03-d878-5858-b98a-325b3ac435ca","totalPages":70}},
    "staticQueryHashes": ["3159585216"]}