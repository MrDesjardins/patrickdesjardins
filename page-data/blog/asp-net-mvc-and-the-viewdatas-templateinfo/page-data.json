{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/asp-net-mvc-and-the-viewdatas-templateinfo",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Asp.Net MVC and the ViewData's TemplateInfo","date":"June 15, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Asp.Net MVC and the ViewData's TemplateInfo\",\n  \"date\": \"2013-06-15\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The TemplateInfo contains an interesting method which is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"HtmlFieldPrefix\")), \" property. This property gives the same information than the method \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"GetFullHtmlFieldName(string.Empty)\")), \".\"), mdx(\"p\", null, \"What is interesting is that from an editor template you can know the property name which is sometime primordial if you want to build your editor or display template. This is required to be able to bind with the ModelBinder back the information to the server once the user will submit the page back to the server.\"), mdx(\"p\", null, \"For example, if you have a special editor template for a string, you can add on your property (usually over the property of your view model or model) the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"UIHint\"), \" to make a link between the property and the template. Then, in the template you could create your control.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" @model string\\n\\n@{ var controlPropertyName = ViewData.TemplateInfo.HtmlFieldPrefix <input id=\\\"@controlPropertyName\\\" name=\\\"@controlPropertyName\\\" value=\\\"...\\\"> <input id=\\\"............... } \\n\")), mdx(\"p\", null, \"The short snippet above show you what from a single property, you could have multiple input with different names and the one that will be bound will be the one that came from the ViewData.TemplateInfo.\"), mdx(\"p\", null, \"Having several input may be something required in scenarios of multiple list of elements that needs to be selected for example. Let say that you have a textbox which can be loaded from a list of value. The template will contain the input with the property name to be bound later to the view model (or model) and others input are there only to select a possible value (via Javascript).\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ddeab6ae-4e6e-5cca-8ed2-6e8e3e2a37f4","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}