{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/quick-add-html-button-with-css3-and-jquery",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Quick Add Html Button with CSS3 and JQuery","date":"August 4, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Quick Add Html Button with CSS3 and JQuery\",\n  \"date\": \"2015-08-04\",\n  \"categories\": [\"css\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a small JavaScript and CSS control that allows to have some edition from a textbox in a fashion that this one is only a button to minimize space and once clicked become a more extended version. The goal is to have a way to add information in a quick way without taking too much space. This is perfect for situation where adding information is not the main task. The use case is that a user want to add information which require a text box. The user click the button to open the edition which reveal a text box. The button does not need to stay there because we want to save space so the button transforms into a closing button which cancel the operation if required. When the user starts to type, a save button is added. From there, the user can click the cancel button or hit save. In both case, the text box is rolling back and the user interface come back to the initial state. This design is intended to be minimal. There is not label. This is why we need to use a watermark, also known as placeholder in the text box. Since we want to limit button, the expand button and cancel (collapse) button is the same. To make sure that the user knows what the button is doing we display a tooltip but also we have an animation that transform visually the button to its intend.\"), mdx(\"p\", null, \"To keep it simples, let's start with a division that will hold all our Html elements.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<div id=\\\"container\\\"> </div> \\n\")), mdx(\"p\", null, \"Next, we need to create our three main controls. The first one is the input where the user will write any information that will be saved. The second one is the toggle button that expand or collapse the input box and the third one is the save button that will be displayed only when the user save. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var $controlContainer = $('#container');\\n\\nvar $inputBox = $(\\\"<input>\\\") \\n  .attr('id', 'inline-editor-textbox') \\n  .attr('type', 'text') .attr('value', '') \\n  .attr('maxlength', 20 ) \\n  .attr('style', 'display:none') \\n  .attr('placeholder', \\\"This is some watermark\\\") \\n  .addClass('hide-input-inline') ; \\n$inputBox.appendTo($controlContainer);\\n\\nvar $buttonToggle = $(\\\"<button>\\\")\\n  .attr('id', 'toggleButton')\\n  .attr('title', 'Open')\\n  .attr('type', 'button'); \\nvar $spanIcon = $('<span>')\\n .addClass(\\\"glyphicon glyphicon-plus\\\"); \\n\\n$spanIcon.appendTo($buttonToggle); \\n$buttonToggle.appendTo($controlContainer);\\n\\nvar $buttonOk = $(\\\"<button>\\\")\\n .attr('id', 'okButton')\\n  .attr('style', 'display:none')\\n  .attr('title', 'Ok') \\n  .addClass('hide-ok-button')\\n  .attr('type', 'button'); \\n\\nvar $spanIconOk = $('<span>')\\n  .addClass(\\\"glyphicon glyphicon-save\\\"); \\n\\n$spanIconOk.appendTo($buttonOk); \\n$buttonOk.appendTo($controlContainer);\\n\\n\")), mdx(\"p\", null, \"The next step is to add events. The toggle will open and close the input. It will also change the icon of the button from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \". The okay button will save the information and collapse the input if everything is fine. The keyup is there to show the save button if the text box contains text.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$buttonToggle.click({ input: $inputBox, buttonToggle: $buttonToggle, buttonOk: $buttonOk},onToggle); \\n$buttonOk.click({ input: $inputBox, buttonToggle: $buttonToggle, buttonOk: $buttonOk},onOk); \\n$inputBox.keyup( { input: $inputBox, buttonOk: $buttonOk }, onKeyUp); \\n\")), mdx(\"p\", null, \"The toggle function has reference to some of our controls. This is a great way to pass reference without having to communicate through JQuery selector. Depending of the state of the toggle, which is the class \\\"hide-input-inline\\\" we make it appears or not. We add a delay because we have CSS3 animation and we want everything to be smooth together. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function onToggle(jqueryEvent) { \\n  var data = jqueryEvent.data; \\n  var $input = data.input; \\n  var $buttonToggle = data.buttonToggle; \\n  var $buttonOk = data.buttonOk;\\n\\nvar isHidden = $input.hasClass(\\\"hide-input-inline\\\"); \\nif (isHidden) { \\n  $input.fadeIn(); \\n  $input.removeClass(\\\"hide-input-inline\\\"); \\n  $input.addClass(\\\"show-input-inline\\\"); \\n  $input.val(''); \\n  $buttonToggle.addClass(\\\"add-to-close\\\"); \\n  $buttonToggle.attr('title', 'Close'); \\n} else { \\n  $input.removeClass(\\\"show-input-inline\\\"); \\n  $input.addClass(\\\"hide-input-inline\\\")\\n   .delay(600)\\n   .fadeOut(); \\n  $buttonToggle.removeClass(\\\"add-to-close\\\"); \\n  $buttonOk.addClass(\\\"hide-ok-button\\\"); \\n  $buttonOk.removeClass(\\\"show-ok-button\\\").delay(600).fadeOut(); \\n  $buttonToggle.attr('title', 'Open'); \\n  } \\n} \\n\")), mdx(\"p\", null, \"The key up is to check the length but we could also check for \\\"Enter\\\" to be pressed and invoke the Ok code. The code is adding or removing classes, with a delay to let CSS animation to be executed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function onKeyUp(jqueryEvent) { \\n  var data = jqueryEvent.data; \\n  var $input = data.input; \\n  var $buttonOk = data.buttonOk; \\n  if ($input.val().length === 0) { \\n    $buttonOk.removeClass(\\\"show-ok-button\\\"); \\n    $buttonOk.addClass(\\\"hide-ok-button\\\").delay(600).fadeOut(); \\n    htmlElementWithIconState($buttonOk, true); \\n  } else { \\n    $buttonOk.fadeIn(); \\n    $buttonOk.addClass(\\\"show-ok-button\\\"); \\n    $buttonOk.removeClass(\\\"hide-ok-button\\\"); \\n    htmlElementWithIconState($buttonOk, false); \\n  } \\n} \\n\")), mdx(\"p\", null, \"This helper method is used to mark the save icon into a disable state. At this moment, this is not really used but if validation is added we could still have the button add without having to remove it until the user fix the problem.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"\\nfunction htmlElementWithIconState($element, disabled) { \\n  $element.prop(\\\"disabled\\\", disabled); \\n  $element.find('.glyphicon').css('opacity', (disabled === true) ? .4 : 1); \\n} \\n\\n\")), mdx(\"p\", null, \"Finally, we have the okay button hit which close up the text box and every buttons. In real life, a callback into a real save or okay code would be executed. If successful than close, otherwise keep everything open for the user to adjust his or her input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function onOk(jqueryEvent) { \\n  var data = jqueryEvent.data; \\n  var $input = data.input; \\n  var $buttonOk = data.buttonOk; \\n  onToggle(jqueryEvent); \\n} \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"#toggleButton, #okButton { \\n   padding:0 2px 4px 2px; \\n   margin-left:3px; \\n   height: 22px; \\n   width: 22px; \\n   vertical-align: top; \\n}\\n\\n#toggleButton span.glyphicon { \\n  transition: all 1000ms ease; \\n}\\n\\n#okButton { \\n  transition: all 1000ms ease;\\n}\\n\\n.hide-input-inline { \\n  width:0; \\n  transition: width 1000ms ease-in-out; \\n}\\n\\n.show-input-inline { \\n  width:210px; \\n  transition: width 1000ms ease-in-out; \\n}\\n\\n.add-to-close span { \\n  transform: rotate(135deg); \\n}\\n\\n.hide-ok-button { \\n  opacity:0;\\n}\\n\\n.show-ok-button { \\n  opacity:1; \\n}\\n\\n#inline-editor-textbox::-webkit-input-placeholder { \\n  /* WebKit browsers */ \\n  color:#7f7f7f\\n} \\n\\n#inline-editor-textbox { \\n  border: none; \\n  background-color: #E2E2E2; \\n  color:#7f7f7f; \\n  padding-left:4px; \\n  height:22px;/*To fix the size of the button since we do not have any border*/ \\n }\\n }\\n\\n#inline-editor-textbox:focus { outline: none; background-color:white; } \\n\\n\")), mdx(\"h1\", null, \"Interactive Demo\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jsfiddle.net/mrdesjardins/tLpu8kfr/3/\"\n  }, \"https://jsfiddle.net/mrdesjardins/tLpu8kfr/3/\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"953ff697-762b-5d68-9f47-7db32a385b55","totalPages":77}},
    "staticQueryHashes": ["3159585216"]}