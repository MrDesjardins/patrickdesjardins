{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2016/application-insights-how-to-handle-undefined-custom-dimension-property/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Application Insights How to Handle undefined Custom Dimension property","date":"November 8, 2016"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Application Insights How to Handle undefined Custom Dimension property\",\n  \"date\": \"2016-11-08\",\n  \"categories\": [\"azure\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Application Insights is awesome. It allows to query your system for events that you define. For example, when your user login you could create a new event to send data to Application Insights and then query it to know how many of your user did a valid login and how many failed.\"), mdx(\"p\", null, \"In C#, you can have something that record if the login was successful and if not giving a reason why. This could be \\\"wrong login\\\" or \\\"account not validated\\\" or \\\"too many tentative\\\" etc. However, when the login is successful we do not need reason. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public void SendLogin(bool isValidLogin, string reason = \\\"\\\") { var properties = new Dictionary<string, string> { {\\\"IsValidLogin\\\" , isValidLogin.ToString()} ,{\\\"LoginDetail\\\" , reason} }; this.telemetry.TrackEvent(\\\"LoginRequestSuccess\\\", properties); } \\n\")), mdx(\"p\", null, \"The end result desired is a graph that gives the number of successful login, and the number of failed tentative by reason. The challenge is that the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"customDimension\"), \" property of a success will not have any reason. A solution is to check if the custom dimension is defined, which mean null, and assign a temporary string for detail. By assigning a string, we can group by this detailed reason and then by time to spread the result on a time x-axis.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"customEvents | where name == \\\"LoginRequestSuccess\\\" | where timestamp >= ago(14d) | extend d=parsejson(customDimensions) | extend isValidLogin = d.IsValidLogin | extend detail = iff(isnull(d.LoginDetail), \\\"Okay\\\", tostring(d.LoginDetail)) | project detail, timestamp | summarize count(detail) by detail, bin(timestamp, 1d) | order by timestamp asc \\n\")), mdx(\"p\", null, \"The important line if the one that extend detail. This on-the-fly column is getting the login detail which is provided when the login fail. Since it's not provided when success, we do a check with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"isnull\"), \". If it is null, we set a temporary string, otherwise, we cast the provided login detail. The cast is required because the custom dimension is a dynamic type, not a string. The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"iff\"), \" must return the same type for each condition. The first one is a hard-coded string, thus, the second must be a string.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"006740ae-1e80-5fce-a6ea-3eb810c5b87e","slug":"2016/application-insights-how-to-handle-undefined-custom-dimension-property","__params":{"slug":"2016"}}},
    "staticQueryHashes": ["3159585216"]}