{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/why-microsoft-needs-to-do-something-about-azure-website-and-https-certificate",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Why Microsoft needs to do something about Azure Website and Https certificate","date":"October 24, 2016"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why Microsoft needs to do something about Azure Website and Https certificate\",\n  \"date\": \"2016-10-24\",\n  \"categories\": [\"azure\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Websites are going Https as a normal protocol now. It's secure and faster than it was. Even \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html\"\n  }, \"Google gives a push in their ranking algorithm\"), \" to websites that are https. With Azure, the free and easy solution is to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://letsencrypt.org/\"\n  }, \"LetsEncrypt\"), \". It's a company that give for free certificate with a 3 months live before it expires. Afterward, it can be renewed. However, it's a cumbersome task. Microsoft Azure had a top rated \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://feedback.azure.com/forums/169385-websites/suggestions/6737285-add-support-for-free-ssl-certs-like-those-from-let\"\n  }, \"UserVoice\"), \" asking to bring Https on Azure and since LetsEncrypt provided something convenient and that someone on the web created an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gooroo.io/GoorooTHINK/Article/16420/Lets-Encrypt-Azure-Web-Apps-the-Free-and-Easy-Way/21872#.V_HM0PArIuU\"\n  }, \"Azure extension\"), \" to setup it up, Microsoft closed this need as \\\"done\\\". It's not a surprise to see that now, the top ranked request in Azure \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://feedback.azure.com/forums/169385-web-apps-formerly-websites/suggestions/15099342-add-support-for-let-s-encrypt-in-the-azure-portal\"\n  }, \"UserVoice\"), \" is to have something that doesn't rely on a third party.\"), mdx(\"p\", null, \"While \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://letsencrypt.org/\"\n  }, \"LetsEncrypt\"), \" is doing a great job, the problem is the free Azure Extension. It's maintained by someone outside Microsoft and it's not as ready, follow or is compatible with other Azure features. While the best solution would be to just have to use a checkbox to activate Https, at least a solution that is not broken should exist.\"), mdx(\"p\", null, \"Some may have problem during setup -- I did not. It went all smooth and took less than 1 hour. The problem started few weeks after the installed. First, it doesn't support Azure Slot. It means that every time you switch between slot, something break. For example, switching slot break the jobs that are responsible to renew the certificate in 3 months. I learned that the hard way by having an email from LetsEncrypt few days before the certification expired.\"), mdx(\"p\", null, \"Second, how to debug what this extension is doing is not clear and documented. It's pretty black-boxed. You can end up having multiple certificated installed for the same DNS. That is what happen to me when I reinstalled the third-party Azure Extension. And, even if I had many new certificated installed, I was still receiving from LetsEncrypt notice about that my certificate was about to expire.\"), mdx(\"p\", null, \"At the end, if you are using Azure Deployment Slot and the Azure Extension for LetsEncrypt, you will have to manually to install again the certificate. It's not a big deal, but it's not working \\\"as advertised\\\". I do not understand how come Microsoft simply closed this first UserVoice request without evaluating that implications. The current proposed solution is broken with how Azure's features and not maintained by anyone active (nothing has changed in the last 3 months).\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"b14e4232-d970-5590-bc58-9472ed3ebc97"}},
    "staticQueryHashes": ["3159585216"]}