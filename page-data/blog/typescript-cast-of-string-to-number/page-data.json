{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-cast-of-string-to-number",
    "result": {"data":{"mdx":{"frontmatter":{"title":"TypeScript cast of string to number","date":"May 5, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript cast of string to number\",\n  \"date\": \"2015-05-05\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The simple task of casting from a primitive type to another can be sometimes easier than we think. If you come from C# you may search within TypeScript the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Convert.ToInt32()\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Int32.Parse()\"), \" or maybe just use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(int)\"), \". None of these conversion syntaxes works with TypeScript. To cast a string to a number, you have to use JavaScript. This means that you can either use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"parseInt\"), \" function or to simply add a plus sign in from of your string.\"), mdx(\"p\", null, \"var myInt1 = +\\\"123\\\";\\nvar myInt2 = +myStringVariable;\\nvar myInt3 = parseInt(\\\"123\\\", 10);\\nvar myInt4 = Number(\\\"123\\\")\"), mdx(\"p\", null, \"The output of the variables if they are proper number are:\"), mdx(\"p\", null, \"123\\n(The number of value if the myStringVariable is a proper number)\\n123\\n123\"), mdx(\"p\", null, \"If the value are not a proper number, the result will be:\"), mdx(\"p\", null, \"NaN\\nNaN\\nNaN OR something else\\nNan \"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parseInt\"), \" can be deceiving. For example, if you try with \\\"123asd\\\" you will get 12 as an answer. However, if you parse \\\"asd\\\" you will get \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NaN\"), \". I recommend using the function Number when the base is 10 and to relies on parseInt only if you are working with another base (hex for example).\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d8d53121-88a0-57d6-bc05-908b68c2f602","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}