{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/c-two-dimensional-array-with-double-bracket-and-with-single-bracket",
    "result": {"data":{"mdx":{"frontmatter":{"title":"C# two dimensional array with double bracket and with single bracket","date":"October 16, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"With Microsoft .Net and C# it's possible to have multiple dimension array with two different ways. One use double bracket and one with single bracket with a comma.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" int [][] myDoubleArray = new int[100][]; \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" int [,] mySingleArrayActingAsTwoDimensional = new int[100,100]; \\n\")), mdx(\"p\", null, \"The first example, is in fact an array of array. You can have multiple dimension for your second dimension. It's called a jagged array. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" int [][] myDoubleArray = new int[100][]; myDoubleArray[0] = new int[5]; myDoubleArray[1] = new int[10]; myDoubleArray[2] = new int[50]; myDoubleArray[...] = new int[...]; \\n\")), mdx(\"p\", null, \"This lead to the possibility to have a variable that is not uniform in its size, it can but it doesn't mean it is a perfect rectangle. The second way to make a multiple dimensional array is by using the comma. This force to have the size defined for both dimension and to be the same for each rows. It also not possible to get a row like array of array because it's based on index. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" int [,] mySingleArrayActingAsTwoDimensional = new int[100,100]; mySingleArrayActingAsTwoDimensional[50] = ... // CRASH!!! mySingleArrayActingAsTwoDimensional[50,0] = 1; \\n\")), mdx(\"p\", null, \"For the jagged array, to loop through all items, we must check for each array. This is require to get its size because it can change. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" for (int i = 0; i < myDoubleArray.Length; i++) { for (int j = 0; j < myDoubleArray[i].Length; j++) { myDoubleArray[i][j] = i * j; } } \\n\")), mdx(\"p\", null, \"For a rectangle array, it's not required and we can just check the first item lenght.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" for (int i = 0; i < mySingleArrayActingAsTwoDimensional.GetLength(0); i++) { for (int j = 0; j < mySingleArrayActingAsTwoDimensional.GetLength(1); j++) { mySingleArrayActingAsTwoDimensional[i, j] = i * j; } } \\n\")), mdx(\"p\", null, \"Finally, you can create jagged array with a short nomenclature.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var jaggedArrayTwoDimension= {new int[5] ,new int[10], new int[]{1,2,3,4,5,6,7,8,9,10}}; \\n``` The last example create an array of 2 dimensions. 3 rows, the first one has 5 integers, the second has 10 integer and the last rows and 10 integers. The first two rows are integer not defined and the last row has integer defined from 1 to 10.\\n\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"C# two dimensional array with double bracket and with single bracket\\\",\\\"date\\\":\\\"2013-10-16\\\",\\\"categories\\\":[\\\"c-sharp\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"270ded41-96ef-57b6-9f47-acbefd27467a","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}