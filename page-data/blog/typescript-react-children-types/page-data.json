{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-react-children-types",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to type your React Children Property in TypeScript","date":"February 21, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to type your React Children Property in TypeScript\",\n  \"date\": \"2022-02-21\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you are using TypeScript and React, a good practice is to type your property. Each component is well defined and clear with what to provide. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface MyOptions {\\n  name: string;\\n}\\n\\nexport const MyComponent = (props: MyOptions) => {\\n  // ...\\n};\\n\")), mdx(\"p\", null, \"In React, a popular pattern is allowing the use of children.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface MyOptions {\\n    name: string\\n    children?: React.ReactNode;\\n}\\nexport const MyComponent = (props: MyOptions) => {\\n  return <div>{props.children</div>;\\n}\\n\")), mdx(\"p\", null, \"You can use several types for the children. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.ReactNode\"), \" is one that is often used, but also \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSX.Element\"), \" which inherently uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.ReactElement\")), mdx(\"p\", null, \"If you look at the type definition of React you can see that:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\\n\")), mdx(\"p\", null, \"and \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"declare global {\\n    namespace JSX {\\n        interface Element extends React.ReactElement<any, any> { }\\n\")), mdx(\"p\", null, \"They are not the same, but in most cases are almost interchangeable. I would lean toward the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactNode\"), \" if you have no personal preference has it covers specific, explicit types and has the null/undefined for free.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ebcb2929-b0cb-53a1-92ac-f596ec401d8c","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}