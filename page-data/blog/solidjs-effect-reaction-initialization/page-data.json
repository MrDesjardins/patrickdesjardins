{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/solidjs-effect-reaction-initialization",
    "result": {"data":{"mdx":{"frontmatter":{"title":"SolidJS: CreateEffect without Triggering Initialization","date":"March 18, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SolidJS: CreateEffect without Triggering Initialization\",\n  \"date\": \"2022-03-18\",\n  \"categories\": [\"solidjs\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In SolidJS, it is possible to listen to a specific variable. When the reference change (object) or value (primitive type), the effect is triggered. Coming from React, you might relate to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" hook. In the ecosystem of SolidJS, it is called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createEffect\"), \".\"), mdx(\"p\", null, \"React does not handle a use case well because you want to listen for change but not have the effect triggered on initialization. For example, if you're going to create an effect on a property of your component. You want to be notified when the property change. However, you do not want the inside of the effect function to be called upon initialization.\"), mdx(\"p\", null, \"There is some workaround with React by creating a variable that keep track of if the component is mounted and inside the effect to have a condition to check if the variable is set. Like many aspects of SolidJS, it handles it for you. No need to pollute your code with these tricks. Instead, you can pass an option to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createEffect\"), \" that will defer the first change.\"), mdx(\"p\", null, \"Here is a full code sample of a small increment application that give the count to a child component. The child renders the property and has an effect that consoles the value as well. Without the defer option, the console display on rendering the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"{8}\",\n    \"{8}\": true\n  }, \"import { Component, createEffect, createSignal } from \\\"solid-js\\\";\\nimport { render } from \\\"solid-js/web\\\";\\n\\ninterface ChildProps {\\n  count: number;\\n}\\nconst Child = (props: ChildProps) => {\\n  createEffect(() => {\\n    console.log(props.count);\\n  });\\n  return <p>{props.count ?? \\\"-\\\"}</p>;\\n};\\n\\nconst App: Component = () => {\\n  const [innerStateValue, setInnerStateValue] = createSignal(1);\\n  return (\\n    <div>\\n      <h1>Hello, world!</h1>\\n      <Child count={innerStateValue()} />\\n      <div>\\n        <button\\n          onclick={() => {\\n            setInnerStateValue((prev) => prev + 1);\\n          }}\\n        >\\n          Increment\\n        </button>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nrender(() => <App />, document.getElementById(\\\"app\\\"));\\n\")), mdx(\"p\", null, \"What if we only want to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" the user action. We want to skip the first effect. We can change the child component to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createEffect\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"{3, 7}\",\n    \"{3,\": true,\n    \"7}\": true\n  }, \"const Child = (props: ChildProps) => {\\n  createEffect(\\n    on(\\n      () => props.count,\\n      () => console.log(props.count),\\n      {\\n        defer: true\\n      }\\n    )\\n  );\\n  return <p>{props.count ?? \\\"-\\\"}</p>;\\n};\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on\"), \" gives the possibility to provide one or many dependencies that will trigger the effect if their reference change. In that case, SolidJS watches \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.count\"), \". The second argument is the code to be executed. Lastly, in the third position is the options object to specify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defer: true\"), \". With that in place, running the code will display the number \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" on the HTML but not in the console. However, if the user clicks the button, the value appears in the HTML and in the console. Thus, precisely what desired.\"), mdx(\"p\", null, \"You can play with the complete code in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/defereffect-9h1z1q?file=/src/index.tsx\"\n  }, \"CodeSandbox.io\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"fc6441e4-d5ff-584e-913e-b6a38de563c0","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}