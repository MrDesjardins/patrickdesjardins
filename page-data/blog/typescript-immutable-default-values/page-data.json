{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-immutable-default-values",
    "result": {"data":{"mdx":{"frontmatter":{"title":"A Safe Way to Define Immutable Default Values in TypeScript","date":"February 24, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A Safe Way to Define Immutable Default Values in TypeScript\",\n  \"date\": \"2022-02-24\",\n  \"categories\": [\"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Regardless of the framework you are using, you will end up having some area of code that relies on default values. When the state relies on an object, there is a way to ensure that the default values are not mutated in the future.\"), mdx(\"p\", null, \"The simplest way to define a set of default values is to assign an object's value. TypeScript infers the object to be of two properties. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p1\"), \" to be a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boolean\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p2\"), \" to be a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const defaultValues = { p1: true, p2: 100 };\\ndefaultValues.p1 = false;\\n\")), mdx(\"p\", null, \"A step further is to ensure the type does not change and be as narrow as possible using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as const\"), \". In that case, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p1\"), \" type is not a boolean but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p2\"), \" is if type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"100\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const defaultValues = { p1: true, p2: 100 } as const;\\ndefaultValues.p1 = false; // Error!\\n\")), mdx(\"p\", null, \"That is great for design time, but JavaScript has the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.freeze\"), \" that ensure that at runtime you cannot change an object. Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.freeze\"), \" generates a type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReadOnly<>\"), \" between the inferred type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const defaultValues = Object.freeze({ p1: true, p2: 100 });\\ndefaultValues.p1 = false; // Error!\\n\")), mdx(\"p\", null, \"This is the same as:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface MyValueType {\\n  p1: boolean;\\n  p2: number;\\n}\\nconst defaultValues: Readonly<MyValueType> = Object.freeze({ p1: true, p2: 100 });\\ndefaultValues.p1 = false; // Error!\\n\")), mdx(\"p\", null, \"I like the explicit interface because we can use it around the application for a parameter. However, also possible to extract the type using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"type MyValueType = typeof defaultValues;\\n\")), mdx(\"p\", null, \"But, that is not right. We cannot use that type around the application because the extraction results to the type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface MyValueType {\\n  readonly p1: boolean;\\n  readonly p2: number;\\n}\\n\")), mdx(\"p\", null, \"A more accurate extraction would be to use a mapped type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"type UnReadonly<T> = { -readonly [P in keyof T]: T[P] };\\ntype MyValueType = UnReadonly<typeof defaultValues>;\\n\")), mdx(\"p\", null, \"The right approach is the one you defined with your team. Regardless, what is interesting is that you can have a safe type at runtime and design time and still be able to use the type in mutable are of your code when needed.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c6ce597f-034c-5f7a-8a87-e97e40f86926","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}