{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/create-a-new-git-branch-with-uncommited-code",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Create a New Git Branch with Uncommited Code","date":"December 8, 2014"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create a New Git Branch with Uncommited Code\",\n  \"date\": \"2014-12-08\",\n  \"categories\": [\"git\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you started doing some code modification but you realize that you should have done these modifications in a branch instead of directly into the branch you did the modification, you can move all files into a new branch. The command is checkout with the parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-b\"), \" which create the branch if this one does not exist.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git checkout -b NewBranch git add . \\n\")), mdx(\"p\", null, \"The git \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add .\"), \" simply add all uncommited file into the staged area.\"), mdx(\"p\", null, \"Other possibility exist like using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash\"), \" to move uncommited code into a temporary place and unstash into another branch. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git stash git checkout NewBranch git stash apply \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f57d6f2c-da5e-5f2f-9388-cf579e3f776e","totalPages":77}},
    "staticQueryHashes": ["3159585216"]}