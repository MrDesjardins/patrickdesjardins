{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-localized-mvc-routing-with-area-without-specifying-local-in-the-url-with-a-fluent-api",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to Localized MVC Routing with Area Without Specifying Culture Short Name in the Url","date":"December 21, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Localized MVC Routing with Area Without Specifying Culture Short Name in the Url\",\n  \"date\": \"2015-12-21\",\n  \"categories\": [\"asp-mvc\"],\n  \"tags\": [\"csharp\", \"css3\", \"dotnet\", \"html5\", \"localization\", \"routing\", \"web\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In a previous post, I wrote how to enhance the standard \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./asp-net-mvc-localized-url-without-having-to-specify-the-language-in-it\"\n  }, \"Asp.Net MVC Routing to have localized URL with controller and action\"), \". This solution had some flaws that this article will cover. First of all, it was not working with area. Second, you were not able to use all functionalities like constraints and default values and third, it was a lot of configuration by having to use a lot of lists.\"), mdx(\"p\", null, \"This article illustrates an easier way to define your routing configuration by adding a Fluent API but also by giving you all standard routing capabilities. This solution will let you configure every route possibles: values, defaults values, constraints, etc and will enhance the standard MVC routing by figuring out which language to display all your resources by setting the culture for you.\"), mdx(\"p\", null, \"Before going any further, here is an example of what the system let you use without Fluent API.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var controllerRoutes = new List<ControllerSectionLocalized>{\\n  new ControllerSectionLocalized(\\\"Home\\\",\\n  new List<LocalizedSection>{\\n    new LocalizedSection(LocalizedSection.EN, \\\"Home\\\")\\n    ,new LocalizedSection(LocalizedSection.FR, \\\"Demarrer\\\")\\n  }\\n  ,new List<ActionSectionLocalized>{\\n    new ActionSectionLocalized(\\\"Index\\\"\\n    , new List<LocalizedSection>{\\n      new LocalizedSection(LocalizedSection.EN, \\\"Index\\\")\\n      , new LocalizedSection(LocalizedSection.FR, \\\"Index\\\")\\n    }\\n    , new { id = \\\"\\\"} , null , \\\"{controller}/{action}/{id}\\\" )\\n  }),\\n  new ControllerSectionLocalized(\\\"Account\\\" ,\\n  new List<LocalizedSection>{\\n    new LocalizedSection(LocalizedSection.EN, \\\"Account\\\")\\n    ,new LocalizedSection(LocalizedSection.FR, \\\"Compte\\\")\\n  }\\n    ,new List<ActionSectionLocalized>{\\n      new ActionSectionLocalized(\\\"Profile\\\"\\n      , new List<LocalizedSection>{\\n        new LocalizedSection(LocalizedSection.EN, \\\"Profile\\\")\\n        ,new LocalizedSection(LocalizedSection.FR, \\\"Profile\\\")\\n      }\\n      , new {username = UrlParameter.Optional } , null , \\\"{action}/{username}\\\" )\\n  , new ActionSectionLocalized(\\\"DisplayBadges\\\"\\n    , new List<LocalizedSection>{\\n      new LocalizedSection(LocalizedSection.EN, \\\"Badges\\\")\\n      ,new LocalizedSection(LocalizedSection.FR, \\\"Medailles\\\")\\n    } , null , null , \\\"{action}\\\" )\\n  , new ActionSectionLocalized(\\\"Privilege\\\"\\n  , new List<LocalizedSection>{\\n    new LocalizedSection(LocalizedSection.EN, \\\"Privilege-benefits\\\")\\n    ,new LocalizedSection(LocalizedSection.FR, \\\"benefice-des-privileges\\\")\\n    } , null , null , \\\"{action}\\\" )\\n    , new ActionSectionLocalized(\\\"PrivilegeBuyConfirm\\\"\\n      , new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"Privilege-buy-confirm\\\")\\n      ,new LocalizedSection(LocalizedSection.FR, \\\"confirmation-achat-privilege\\\") } , null , null , \\\"{action}\\\" )\\n    , new ActionSectionLocalized(\\\"Login\\\"\\n      , new List<LocalizedSection>{\\n        new LocalizedSection(LocalizedSection.EN, \\\"Login\\\") ,new LocalizedSection(LocalizedSection.FR, \\\"Identification\\\")\\n      } , null , null , \\\"{controller}/{action}\\\" ) , new ActionSectionLocalized(\\\"ReSendingCreationEmail\\\" , new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"SendValidationMail\\\")\\n      ,new LocalizedSection(LocalizedSection.FR, \\\"EnvoieCourrielDeValidation\\\") } , null , null , \\\"{controller}/{action}/{emailAddress}/now\\\"\\n    /* We need to be able to have more than just action translated but also text token for e.g. NOW*/ )\\n    , new ActionSectionLocalized(\\\"ActivateAccount\\\"\\n    , new List<LocalizedSection>{ new LocalizedSection(LocalizedSection.EN, \\\"ActivateAccount\\\")\\n      ,new LocalizedSection(LocalizedSection.FR, \\\"activer-compte\\\") } , null , null , \\\"{controller}/{action}/{emailAddress}/now\\\"\\n    /* We need to be able to have more than just action translated but also text token for e.g. NOW*/ ) } )\\n};\\n\")), mdx(\"p\", null, \"And with the Fluent Routing API:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var controllerRoutes = FluentLocalizedRoute.BuildRoute()\\n  .ForBilingualController(\\\"Home\\\", \\\"Home\\\", \\\"Demarrer\\\")\\n    .WithBilingualAction(\\\"Index\\\", \\\"Index\\\", \\\"Index\\\")\\n    .WithDefaultValues(new { id = \\\"\\\" })\\n    .UseDefaulUrl()\\n  .ForBilingualController(\\\"Account\\\", \\\"Account\\\", \\\"Compte\\\")\\n    .WithBilingualAction(\\\"Profile\\\", \\\"Profile\\\", \\\"Profile\\\")\\n    .WithDefaultValues(new { username = UrlParameter.Optional })\\n    .WithUrl(\\\"{action}/{username}\\\")\\n    .And()\\n      .WithBilingualAction(\\\"DisplayBadges\\\", \\\"Badges\\\", \\\"Medailles\\\")\\n      .WithUrl(\\\"{action}\\\")\\n    .And()\\n      .WithBilingualAction(\\\"Privilege\\\", \\\"Privilege-benefits\\\", \\\"benefice-des-privileges\\\")\\n      .WithUrl(\\\"{action}\\\")\\n    .And()\\n      .WithBilingualAction(\\\"PrivilegeBuyConfirm\\\", \\\"Privilege-buy-confirm\\\", \\\"confirmation-achat-privilege\\\")\\n      .WithUrl(\\\"{action}\\\")\\n    .And()\\n      .WithBilingualAction(\\\"Login\\\", \\\"Login\\\", \\\"Identification\\\")\\n      .WithUrl(\\\"{controller}/{action}\\\")\\n    .And()\\n      .WithBilingualAction(\\\"ReSendingCreationEmail\\\", \\\"SendValidationMail\\\", \\\"EnvoieCourrielDeValidation\\\")\\n      .WithUrl(\\\"{controller}/{action}/{emailAddress}/now\\\")\\n    .And()\\n      .WithBilingualAction(\\\"ActivateAccount\\\", \\\"ActivateAccount\\\", \\\"activer-compte\\\")\\n      .WithUrl(\\\"{controller}/{action}/{emailAddress}/now\\\")\\n  .ToList() ;\\n\")), mdx(\"p\", null, \"As you can see, it's way more concise. Of course, the method used in the API focus on 2 languages but underneath you can have unlimited localization -- it's just more convenient for a lot of people to have a bilingual application, thus these helper methods. So what does this localized code will give you:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Url that can be in an unlimited language bound to Mvc code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Url that change the Culture and CultureUI without having to specify the local like en-us or fr-ca\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A system that handles Area, Controller and Action to be translated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A system that generate subsequent URL with the default Asp.Net MVC Helper in the right language\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A system compatible with the current Asp.Net routing system, thus both can be run in parallel\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A Fluent API that let you write quickly routing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full support of current Asp.Net feature with default values, constraints and even with custom language token that can be localized within the URL\")), mdx(\"p\", null, \"Let's start without having the Fluent API because the Fluent API it's just something you add above the custom multilanguage Asp.Net Mvc routing system we are developing.\"), mdx(\"p\", null, \"The first class that we need is the one that will hold the localized string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class LocalizedSection {\\n  public static CultureInfo EN = CultureInfo.GetCultureInfo(\\\"en-US\\\");\\n  public static CultureInfo FR = CultureInfo.GetCultureInfo(\\\"fr-FR\\\");\\n  public CultureInfo CultureInfo { get; set; }\\n  public string TranslatedValue { get; set; }\\n  public LocalizedSection(CultureInfo culture, string translatedValue) {\\n    CultureInfo = culture; TranslatedValue = translatedValue;\\n  }\\n}\\n\")), mdx(\"p\", null, \"This \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"LocalizedSection\"), \" class is pretty simple by having a single constructor that take a culture and a string that is localized. Some static properties are there because I am developing an English-French system and wanted to have the culture that I will use defined once. Even if everything explained in this article is about a bilingual system in English and French, the system is already in shape to let you use other languages than these two but also more than two. Once you have that class, you need to defines the structure of how we will keep all localized sections for the system. The structure is the same as Asp.Net MVC routing which is area, controller and action. We will build everything to support Area-Controller-Action and Controller-Action. To do so, we need three classes.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class AreaSectionLocalized {\\n  public string AreaName { get; set; }\\n  public List<LocalizedSection> Translation { get; set; }\\n   public List<ControllerSectionLocalized> ControllerTranslations { get; set; }\\n\\n  public AreaSectionLocalized(string areaName, List<LocalizedSection> translation, List<ControllerSectionLocalized> controllersList) {\\n    this.AreaName = areaName; this.Translation = translation;\\n    this.ControllerTranslations = controllersList; }\\n  }\\n\\n    public class ControllerSectionLocalized {\\n      public string ControllerName { get; set; }\\n      public List<LocalizedSection> Translation { get; set; }\\n      public List<ActionSectionLocalized> ActionTranslations { get; set; }\\n\\n  public ControllerSectionLocalized(string controllerName, List<LocalizedSection> translation, List<ActionSectionLocalized> actionsList) {\\n    this.ControllerName = controllerName;\\n    this.Translation = translation;\\n    this.ActionTranslations = actionsList;\\n  }\\n}\\n\\npublic class ActionSectionLocalized {\\n  public string ActionName { get; set; }\\n  public List<LocalizedSection> Translation { get; set; }\\n\\n  public object Values { get; set; }\\n  public object Constraints { get; set; }\\n  public string Url { get; set; }\\n  public ActionSectionLocalized(string actionName, List<LocalizedSection> translation, object values = null, object constraints = null, string url = \\\"\\\") {\\n    this.ActionName = actionName;\\n    this.Translation = translation;\\n    this.Values = values;\\n    this.Constraints = constraints;\\n    this.Url = url;\\n  }\\n  public Dictionary<string,List<LocalizedSection>> Tokens { get; set; }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"AreaSectionLocalized\"), \" class is the one that contain the real area's name under the property named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AreaName\"), \". This one will be used to map when you request from Mvc Html Helper a route with the real name but also when you specify in the url a localized string from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Translation\"), \" property. This list, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Translation\"), \" , is where you store the collection of localized area name for this area. For example, if you have an area in your code called \\\"Order\\\" than you can have the area to be displayed in the url has \\\"customer-area\\\" and \\\"commande-du-client\\\". Since it's a list, you can have unlimited translation -- each of them are linked to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CultureInfo\"), \". The last important property of that class is the collection of controller. As you can see, we are building a three of routing. At the root will be a collection of area, with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"AreaSectionLocalized\"), \". Each of area will have a list of controller, which will have a list of action. That is why the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ControllerSectionLocalized\"), \" look alike the area class. The action class, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ActionSectionLocalized\"), \" is the class among the three that contains more information. It has also the same principle of having the action name which is the one that the controller class define and use in Asp.Net MVC Url Helper with a list of localized string but also multiple properties. Values, constraints, Url are all information used to build the URL in the standard Asp.Net MVC routing system. Here is a standard route:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" routes.MapRoute(Constants.Areas.CONTEST + \\\"_contest_detail\\\" , Constants.Areas.CONTEST + \\\"/{\\\" + Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID + \\\"}/Detail\\\"\\n , new RouteValueDictionary { { Constants.RoutePortionName.ACTION, \\\"Detail\\\" }\\n , { Constants.RoutePortionName.CONTROLLER, \\\"UserContest\\\" }}\\n , new RouteValueDictionary {{ Constants.RoutePortionName.ACTIVE_CURRENT_CONTEST_ID,@\\\"\\\\\\\\d+\\\"} });\\n\")), mdx(\"p\", null, \"The second line is the URL, the third line is the value and the forth line is the constraint. We also do the same in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ActionSectionLocalized\"), \" class. One custom new principle is the Tokens list. This is a dictionary of string that we will replace with a localized string. Item of the list represent a token, every value contains a list of localized text to replace in the URL. That mean that you can create an URL that look like this : \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/{area}/{controller}/{action}/always/{page}/{pagenumber}\"), \" where the area, controller and action will be replaced with the according value as the standard Asp.Net MVC routing is normally doing, the same is true about the hard-coded \\\"always\\\" that will remains the same whatever the language and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{pagenumber}\"), \" if defined in the URL will be used as a routing variable. The difference is that if we detect that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{page}\"), \" is not used as a routing value that we will lookup in the token list to see if it could be replaced with a localized value. We will see it in more detail later.\"), mdx(\"p\", null, \"The next one is one of the code class of the system, it's the new route class. This localized route class, named accordingly to its goal \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"LocalizedClass\"), \", inherit from the Asp.Net MVC's Route class. This way, it's possible to continue to use the same routing system without having to re-invent the wheel.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class LocalizedRoute : Route {\\n  public CultureInfo Culture { get; private set; }\\n  public ActionSectionLocalized ActionTranslation { get; private set; }\\n  public ControllerSectionLocalized ControllerTranslation { get; private set; }\\n  public AreaSectionLocalized AreaSectionLocalized { get; private set; }\\n\\n  public LocalizedRoute(AreaSectionLocalized areaSectionLocalized, ControllerSectionLocalized controllerTranslation, ActionSectionLocalized actionTranslation, string url , RouteValueDictionary defaults, RouteValueDictionary constraints, CultureInfo culture)\\n  : this(areaSectionLocalized, controllerTranslation, actionTranslation, url, defaults, constraints, null, new MvcRouteHandler(), culture) {\\n\\n  }\\n\\n  public LocalizedRoute(AreaSectionLocalized areaSectionLocalized, ControllerSectionLocalized controllerTranslation, ActionSectionLocalized actionTranslation, string url , RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens, IRouteHandler routeHandler, CultureInfo culture)\\n  : base(url, defaults, constraints, dataTokens, routeHandler) {\\n    this.AreaSectionLocalized = areaSectionLocalized;\\n\\n  if (controllerTranslation == null) {\\n    throw new ArgumentNullException(\\\"controllerTranslation\\\");\\n  }\\n  this.ControllerTranslation = controllerTranslation;\\n  if (actionTranslation == null) {\\n    throw new ArgumentNullException(\\\"actionTranslation\\\");\\n  }\\n  this.ActionTranslation = actionTranslation;\\n\\n  if (url == null) { throw new ArgumentNullException(\\\"url\\\"); }\\n\\n  if (culture == null) { throw new ArgumentNullException(\\\"culture\\\"); }\\n\\n  this.Culture = culture;\\n\\n  if (dataTokens == null) {\\n    base.DataTokens = new RouteValueDictionary();\\n  }\\n\\n  if (base.Defaults != null && base.Defaults.Keys.Contains(Constants.AREA)) {\\n    if (base.DataTokens == null) {\\n      base.DataTokens = new RouteValueDictionary();\\n    }\\n    base.DataTokens.Add(Constants.AREA, base.Defaults[Constants.AREA].ToString());\\n  }\\n}\\n\\n/// <summary>\\n/// Set the thread culture with the route culture\\n/// </summary>\\n/// <param name=\\\"httpContext\\\"></param>\\n/// <returns></returns>\\npublic override RouteData GetRouteData(HttpContextBase httpContext) {\\n  var returnRouteData = base.GetRouteData(httpContext);\\n  if (returnRouteData != null) {\\n    System.Threading.Thread.CurrentThread.CurrentCulture = this.Culture;\\n    System.Threading.Thread.CurrentThread.CurrentUICulture = this.Culture;\\n  }\\n  return returnRouteData;\\n}\\n\\nprotected override bool ProcessConstraint(HttpContextBase httpContext, object constraint, string parameterName, RouteValueDictionary values, RouteDirection routeDirection) {\\n  return base.ProcessConstraint(httpContext, constraint, parameterName, values, routeDirection);\\n}\\n\\npublic override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values) {\\n  var currentThreadCulture = System.Threading.Thread.CurrentThread.CurrentUICulture; //First step is to avoid route in the wrong culture\\n  if (this.Culture.Name != currentThreadCulture.Name) { return null; }\\n\\n  //Second, set the right Area/Controller/Action to have MVC generating the URL with the localized string\\n  bool replaceRoutingValues = true;\\n  LocalizedSection areaTranslated = null;\\n  LocalizedSection controllerTranslated = null;\\n  LocalizedSection actionTranslated = null;\\n  if (this.AreaSectionLocalized != null && values[Constants.AREA] !=null) //If added in the RouteValue, it will be just there later during GetVirtualPath (merge from MVC's route creation code)\\n  {\\n    var valueToken = values[Constants.AREA];\\n    areaTranslated = this.AreaSectionLocalized.Translation.FirstOrDefault(d => d.CultureInfo.Name == currentThreadCulture.Name);\\n    replaceRoutingValues = (areaTranslated != null && areaTranslated.TranslatedValue == valueToken);\\n  }\\n\\n  if (replaceRoutingValues && this.ControllerTranslation != null) {\\n    var valueToken = values[Constants.CONTROLLER];\\n    controllerTranslated = this.ControllerTranslation.Translation.FirstOrDefault(d => d.CultureInfo.Name == currentThreadCulture.Name);\\n    replaceRoutingValues &= (controllerTranslated != null && controllerTranslated.TranslatedValue == valueToken);\\n  }\\n\\n  if (replaceRoutingValues && this.ActionTranslation != null) {\\n    var valueToken = values[Constants.ACTION]; actionTranslated = this.ActionTranslation.Translation.FirstOrDefault(d => d.CultureInfo.Name == currentThreadCulture.Name); replaceRoutingValues &= (actionTranslated != null && actionTranslated.TranslatedValue == valueToken);\\n  }\\n\\n  //We need to find a translation that fit at least Controller and Action\\n  //if (!replaceRoutingValues)\\n  //{\\n  // return null;\\n  //}\\n\\n  //Switch text token to the right language\\n  if (this.ActionTranslation != null) {\\n    base.Url = ReplaceTokens(base.Url, this.ActionTranslation.Tokens);\\n  }\\n\\n  // Check with the new values if the system can get an URL with the values in the culture desired\\n  var vitualPathData = this.GetVirtualPathForLocalizedRoute(requestContext, values); //vitualPathData.DataTokens\\n\\n  // Asp.Net MVC found a URL, time to enhance the URL with localization replacement\\n  if (vitualPathData != null) {\\n    //This is to replace {action}, {controller} and {area} with the localized version\\n    vitualPathData.VirtualPath = LocalizedSection.ReplaceSection(this.Url, areaTranslated, controllerTranslated, actionTranslated);\\n\\n    //Enhance url with replace or append route value dictionary\\n    vitualPathData.VirtualPath = AdjustVirtualPathWithRoutes(vitualPathData.VirtualPath, values);\\n\\n    //Default value if not defined in the route value\\n    vitualPathData.VirtualPath = AdjustVirtualPathWithActionTranslationDefaultValues(vitualPathData.VirtualPath, values); vitualPathData.VirtualPath = vitualPathData.VirtualPath.TrimEnd('/');\\n  }\\n\\n  return vitualPathData;\\n}\\n\\n/// <summary>\\n/// Adjust virtual path with action translation default value not in the route. This is because we can define default and the\\n/// value of default is only used when not more specific from the route.\\n///\\n/// Route has precedence on Default Value (this.ActionTranslation.Values)\\n/// </summary>\\n/// <param name=\\\"currentVirtualPath\\\"></param>\\n/// <param name=\\\"values\\\"></param>\\n/// <returns></returns>\\npublic string AdjustVirtualPathWithActionTranslationDefaultValues(string currentVirtualPath, RouteValueDictionary values) {\\n  if (string.IsNullOrEmpty(currentVirtualPath) || values == null) { return currentVirtualPath; }\\n  string finalVirtualPath = currentVirtualPath; //This is for the case that optional parameter in the action are not defined in the URL\\n  if (this.ActionTranslation != null) {\\n    var rc = new RouteValueDictionary(this.ActionTranslation.Values); // If defined {word} is not in the URL, then we use the value from the actionTranslated\\n\\n    foreach (var key in rc.Keys.Where(q => !values.ContainsKey(q))) {\\n      string toReplace = \\\"{\\\" + key + \\\"}\\\";\\n      finalVirtualPath = finalVirtualPath.Replace(toReplace, System.Net.WebUtility.UrlEncode(rc[key].ToString()));\\n    }\\n  }\\n  return finalVirtualPath;\\n}\\n\\n/// <summary>\\n/// Get all routes information that are not Area-Controller-Action and change the value from the URL.\\n/// If not in the URL, add the data in query string\\n/// </summary>\\n/// <param name=\\\"currentVirtualPath\\\"></param>\\n/// <param name=\\\"values\\\"></param>\\n/// <returns></returns>\\npublic string AdjustVirtualPathWithRoutes(string currentVirtualPath, RouteValueDictionary values) {\\n  string finalVirtualPath = currentVirtualPath;\\n  if (values != null) {\\n    foreach (var key in values.Keys.Where(k => k != Constants.AREA && k != Constants.CONTROLLER && k != Constants.ACTION)) {\\n      string toReplace = \\\"{\\\" + key + \\\"}\\\"; if (values[key] != null) {\\n        string replaceWith = System.Net.WebUtility.UrlEncode(values[key].ToString());\\n        if (currentVirtualPath.Contains(toReplace)) {\\n          finalVirtualPath = finalVirtualPath.Replace(toReplace, replaceWith);\\n         } else {\\n          finalVirtualPath = AddKeyValueToUrlAsQueryString(finalVirtualPath, toReplace, replaceWith);\\n        }\\n      }\\n    }\\n  }\\n\\n  return finalVirtualPath;\\n}\\n\\npublic string ReplaceTokens(string url, Dictionary<string, List<LocalizedSection>> tokens) {\\n  if (tokens!= null) {\\n    foreach (var key in tokens.Keys) {\\n      var tokenInCurrentCulture = tokens[key].FirstOrDefault(f => f.CultureInfo.Name == this.Culture.Name);\\n      if (tokenInCurrentCulture != null) {\\n        string toReplace = \\\"{\\\" + key + \\\"}\\\";\\n      return url.Replace(toReplace, System.Net.WebUtility.UrlEncode(tokenInCurrentCulture.TranslatedValue));\\n      }\\n    }\\n  }\\n  return url;\\n}\\n\\npublic string AddKeyValueToUrlAsQueryString(string url, string key, string value) {\\n  if (!string.IsNullOrEmpty(key) && url!=null) {\\n    key = key.Replace(\\\"{\\\", \\\"\\\").Replace(\\\"}\\\", \\\"\\\");\\n    if (url.Contains(\\\"?\\\")) {\\n      return url + \\\"&\\\" + key + \\\"=\\\" + value;\\n    } else {\\n      return url + \\\"?\\\" + key + \\\"=\\\" + value;\\n    }\\n  }\\n  return url;\\n}\\n\\npublic virtual VirtualPathData GetVirtualPathForLocalizedRoute(RequestContext requestContext, RouteValueDictionary values) {\\n  return base.GetVirtualPath(requestContext, values);\\n  }\\n}\\n\")), mdx(\"p\", null, \"I will not describe everything since I added comment directly inside the code but the gist of the class is to manipulate the URL and routing by overriding \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GetVirtualPath\"), \" to be sure to convert the localized route section requested into the original Area-Controller-Action name, to use the default code to get url that would be generated by ASP.Net MVC and then enhance this one by localizing this one with Area-Controller-Action. You can see the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GetVirtualPath\"), \" as the entry point that is called for every route defined when you use any ASP.Net MVC mechanism to get an URL. The framework loops all the route by calling \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GetVirtualPath\"), \" and if one return not NULL, it takes this one.\"), mdx(\"p\", null, \"This class also override \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GetRouteData\"), \" which is used when the user enter an URL in a browser. That time, since we are still using the default route mechanism and that we store the route with the standard Area-Controller-Action + Constraint that we have almost nothing to do. We only set the current thread Culture from the culture defined by the route.\"), mdx(\"p\", null, \"The last remaining piece to be able to have everything work is to create an helper to add localized route to the ASP.Net MVC's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RouteCollection\"), \". I decided to create a static method that take the route and a list of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AreaSectionLocalized\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ControllerSectionLocalized\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static class RouteCollectionExtension {\\n\\npublic static void AddRoutes(this RouteCollection routes, List<AreaSectionLocalized> areaRoutes) {\\n  foreach (var area in areaRoutes) {\\n    routes.AddRoutes(area.ControllerTranslations, area);\\n  }\\n}\\n\\npublic static void AddRoutes(this RouteCollection routes, List<ControllerSectionLocalized> controllerRoutes, AreaSectionLocalized areaSectionLocalized = null) {\\n  foreach (var controller in controllerRoutes) {\\n    foreach (var controllerTranslation in controller.Translation) {\\n      foreach (var action in controller.ActionTranslations) {\\n         var urlAction = action.Url;\\n\\n        foreach (var actionTranslation in action.Translation) {\\n          if (controllerTranslation.CultureInfo == actionTranslation.CultureInfo) {\\n            RouteValueDictionary values = null;\\n            if (action.Values is RouteValueDictionary) {\\n              values = action.Values as RouteValueDictionary;\\n            } else {\\n              values = new RouteValueDictionary(action.Values);\\n            }\\n\\n            LocalizedSection areaTranslation = null;\\n            if (areaSectionLocalized != null && areaSectionLocalized.Translation.Any(d => d.CultureInfo.Name == controllerTranslation.CultureInfo.Name)) {\\n              values[Constants.AREA] = areaSectionLocalized.AreaName;\\n              areaTranslation = areaSectionLocalized.Translation.FirstOrDefault(d => d.CultureInfo.Name == controllerTranslation.CultureInfo.Name);\\n            }\\n\\n            values[Constants.CONTROLLER] = controller.ControllerName;\\n            values[Constants.ACTION] = action.ActionName;\\n            RouteValueDictionary constraints = null;\\n\\n            if (action.Constraints is RouteValueDictionary) {\\n              constraints = action.Constraints as RouteValueDictionary;\\n            } else {\\n              constraints = new RouteValueDictionary(action.Constraints);\\n            }\\n\\n            var newUrl = LocalizedSection.ReplaceSection(urlAction, areaTranslation, controllerTranslation, actionTranslation);\\n            routes.Add(new LocalizedRoute( areaSectionLocalized , controller , action , newUrl , values , constraints , actionTranslation.CultureInfo ) );\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"The code is adding a route by looping through all areas, all controllers, all actions and for each language add the route. I will create a second article to describe to Fluent interface that help to have a more concise way to write the routing and also that gives Microsoft Intellisence support. So far, in this article, we have seen how to enhance the existing Asp.Net MVC routing system by having localized route. The code handles the thread culture, thus by changing the URL you have all your pages in the right local too. Finally, we saw that\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"a2508863-455f-5c65-bf82-6f87b292f4fb","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}