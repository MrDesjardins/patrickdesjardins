{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-bind-sql-view-to-an-entity-framework-object",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to bind Sql View to an Entity Framework object","date":"October 7, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to bind Sql View to an Entity Framework object\",\n  \"date\": \"2013-10-07\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you do not want to create an Entity and to configure this one with the ToTable() to the name of your view, you can use direct method from the context to call the database and bind the result into a class.\"), mdx(\"p\", null, \"Here is how to do it with the ToTable method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class WorkoutConfiguration : EntityTypeConfiguration<Workout> { public WorkoutConfiguration() { base.ToTable(\\\"dbo\\\", \\\"ViewNameHere\\\"); base.HasMany(d => d.Sessions) .WithRequired(d=>d.Workout) .WillCascadeOnDelete(true); } } \\n\")), mdx(\"p\", null, \"Here is how to do it with a direct SQL statement:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var workouts =_dbContext.Database.SqlQuery<Workout>(\\\"select * from dbo.Workout\\\") \\n\")), mdx(\"p\", null, \"The SqlQuery acts the same with the binding of value than with Entity Framework. Every fields is mapped with the corresponding methods. You can use AS statement to change the return value of some fields to be the same name of your methods.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var workouts =_dbContext.Database.SqlQuery<Workout>(\\\"select id as ID, name as nameFR from dbo.Workout\\\") \\n\")), mdx(\"p\", null, \"At first, the last solution seems to be faster and fine but consider the first one if you are using table or view because it's better. Better because you do not have to handle a string with a SQL query. If the database change, you won't notice any problem until the query is executed. It's more a work around than a good \\\"enterprise\\\" solution. But, the last one can be a good compromise if you need to use stored procedure. Nevertheless, always ask yourself in the long term what will be the repercussion of your choice.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"0d588d52-eef5-5b42-b2ac-09da0e7b9ec5","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}