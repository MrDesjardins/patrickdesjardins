{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/mastering-sqlconnection",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Mastering SqlConnection","date":"September 26, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Mastering SqlConnection\",\n  \"date\": \"2011-09-26\",\n  \"categories\": [\"ado-net\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SqlConnection\"), \" object is an object that derive of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DbConnection\"), \". It opens the connection between the application and the database. It's also inherit of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IDisposable\"), \" because of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DbConnection\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var connection = new SqlConnection(); connection.ConnectionString = @\\\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\\\"; connection.Open(); connection.Close(); \\n\")), mdx(\"p\", null, \"or\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" using (var connection = new SqlConnection()) { connection.ConnectionString = @\\\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\\\"; connection.Open(); connection.Close(); } \\n\")), mdx(\"p\", null, \"These two snippets of code illustrate the creation of a connection. Both of them were using connection string from a string but the value can be directly loaded from the app.config or web.config.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings[\\\"ApplicationServices\\\"]; using (var connection = new SqlConnection(connectionStringSettings.ConnectionString)) { connection.Open(); connection.Close(); } \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <configuration> <connectionStrings> <add name=\\\"ApplicationServices\\\" connectionString=\\\"Data Source=PATRICK-PC\\\\\\\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True\\\" providerName=\\\"System.Data.SqlClient\\\" /> </connectionStrings> ... ... \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"0b734057-1f06-5f2e-bc9b-7c83dc5528fe","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}