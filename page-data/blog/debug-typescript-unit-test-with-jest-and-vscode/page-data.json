{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/debug-typescript-unit-test-with-jest-and-vscode",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Debug TypeScript Unit Test with Jest and VsCode","date":"December 12, 2017"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Debug TypeScript Unit Test with Jest and VsCode\",\n  \"date\": \"2017-12-12\",\n  \"categories\": [\"typescript\", \"visual-studio\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using create-react-app or the TypeScript equivalent \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/wmonk/create-react-app-typescript\"\n  }, \"react-script-ts\"), \" for TypeScript, you see that the default testing framework is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://facebook.github.io/jest/\"\n  }, \"Jest\"), \". This is developed by Facebook like React and Redux. Jest procures many advantages like being fast. It doesn't need to load a browser headless or being in a browser at all. It is also fast because it can run the unit tests on a changed test or run the unit test that has a relation to the code changed instead of running every test. In this article, I'll guide you to setup Visual Studio Code to be able to debug directly in TypeScript. I take the time to write something because information on Internet is very slim and the configuration is fragile.\"), mdx(\"p\", null, \"As mentioned, configuring Visual Studio with Jest require subtle detail that can break the whole experience. For example, using Node 8.1.4 won't work, using Node 8.4 or 8.6 works. Another sensitive area is the configuration of Visual Studio. It requires having some specific configurations which vary. The following code is two different launchers that work with Visual Studio Code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"{ \\n  \\\"type\\\": \\\"node\\\", \\n  \\\"request\\\": \\\"launch\\\", \\n  \\\"name\\\": \\\"Jest 1\\\", \\n  \\\"program\\\": \\\"${workspaceRoot}/node_modules/jest/bin/jest\\\", \\n  \\\"args\\\": [ \\\"-i\\\" ], \\n  \\\"preLaunchTask\\\": \\\"tsc: build - tsconfig.json\\\", \\n  \\\"internalConsoleOptions\\\": \\\"openOnSessionStart\\\", \\n  \\\"console\\\": \\\"integratedTerminal\\\", \\n  \\\"outFiles\\\": [ \\\"${workspaceRoot}/build/dist/**/*\\\" ], \\n  \\\"envFile\\\": \\\"${workspaceRoot}/.env\\\" \\n}\\n\\n// OR\\n\\n{ \\n  \\\"name\\\": \\\"Jest 3\\\", \\n  \\\"type\\\": \\\"node\\\", \\n  \\\"request\\\": \\\"launch\\\", \\n  \\\"program\\\": \\\"${workspaceRoot}/node_modules/jest-cli/bin/jest.js\\\", \\n  \\\"stopOnEntry\\\": false, \\\"args\\\": [ \\\"--runInBand\\\" ], \\n  \\\"cwd\\\": \\\"${workspaceRoot}\\\", \\n  \\\"preLaunchTask\\\": null, \\n  \\\"runtimeExecutable\\\": null, \\n  \\\"runtimeArgs\\\": [ \\\"--nolazy\\\" ], \\n  \\\"env\\\": { \\\"NODE_ENV\\\": \\\"test\\\" }, \\n  \\\"console\\\": \\\"integratedTerminal\\\", \\n  \\\"sourceMaps\\\": true\\n} \\n\")), mdx(\"p\", null, \"The second one requires to have jest-cli, the first one not. To download the jest-cli use NPM. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" npm install --save-dev jest-cli \\n\")), mdx(\"p\", null, \"From there you can run directly inside Visual Studio Code under the debug tab the debug program or hit F5.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"68dbb414-a1e5-52b1-bbc2-32d4709e1069","totalPages":75}},
    "staticQueryHashes": ["3159585216"]}