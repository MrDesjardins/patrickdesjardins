{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/visual-studio-code-with-npm-and-typescript-part-4-node-server",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Visual Studio Code with NPM and TypeScript (Part 4 : Node Server)","date":"March 6, 2017"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Visual Studio Code with NPM and TypeScript (Part 4 : Node Server)\",\n  \"date\": \"2017-03-06\",\n  \"categories\": [\"nodejs-web\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So far, in this series, we have used TypeScript and Gulp but didn't executed in a browser any code. This time, we will look about how to launch a small HTTP server with node.js.\"), mdx(\"p\", null, \"Many solutions exist, but we will go with Express.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" npm install --save express \\n\")), mdx(\"p\", null, \"The next step is to create a file that nodejs will use as entry point to use Express. You can name it the name you want, in this example, we will call it server.js. The first step, a little bit like Gulp worked in the previous step, we need to require the library. The next code is to start listening to a specific port.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var express = require('express') var app = express()\\n\\napp.get('/', function (req, res) { res.send('Hello World!') })\\n\\napp.use(express.static('.'))\\n\\napp.listen(3000, function () { console.log('Server listening on port 3000.') }) \\n\")), mdx(\"p\", null, \"To be able to server our static file, the index.html, we need to use the static file and point the folder. Since we have index.html at the root, we can just use dot. Ideally, we would move the whole file structure into a single folder and not server all our configuration file, but for the moment, let's keep it this way.\"), mdx(\"p\", null, \"At that point, you can start the server in a Powershell console simply by using nodejs and the file we just created. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"node server.js \\n\")), mdx(\"p\", null, \"You should see in the console \\\"Server listening on port 3000.\\\" which is the console.log from the listen method. You can go in a browser and write : http://localhost:3000/index.html\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7566b6dd-1c2e-5cc6-95cb-2930c7ecf3df","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}