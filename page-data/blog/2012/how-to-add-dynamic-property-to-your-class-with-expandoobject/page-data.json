{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2012/how-to-add-dynamic-property-to-your-class-with-expandoobject/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to add dynamic property to your class with ExpandoObject","date":"December 5, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to add dynamic property to your class with ExpandoObject\",\n  \"date\": \"2012-12-05\",\n  \"categories\": [\"c-sharp\", \"dynamic\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some scenario, you may want to add dynamically information to your object without having to define a specific type or interface. This type of scenario has been developed by Asp.Net MVC with the ViewBag which let you add any type of information dynamically. In a project, you may want to have this kind of behavior and be able to add information of different type and to access it later.\"), mdx(\"p\", null, \"To do, you need to use the ExpandoObject.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class YourClass { public int Id{ get; set; } public dynamic Attributes { get; set; }\\n\\npublic MatriceRow() { Attributes = new ExpandoObject(); } } \\n\")), mdx(\"p\", null, \"This is a working example. From there you can use the YourClass class and set attributes. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var myClass = new YourClass(); myClass.Id = 1; myClass.Attributes.IsBoolean = true; myClass.Attributes.MyName = \\\"Patrick Desjardins\\\"; \\n\")), mdx(\"p\", null, \"You cannot define the Attributes property directly to the type of ExpandoObject. If you do, you will get an exception.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"'IsBoolean' and no extension method 'IsBoolean' accepting a first argument of type 'System.Dynamic.ExpandoObject' could be found (are you missing a using directive or an assembly reference?)\")), mdx(\"p\", null, \"This functionality should be used rarely. It's always better to be strongly typed and not use dynamic because this one is only checked when the code is executed rather than when compiled.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"0a5fecc5-d897-5b7d-9db0-c040e6dac767","slug":"2012/how-to-add-dynamic-property-to-your-class-with-expandoobject","__params":{"slug":"2012"}}},
    "staticQueryHashes": ["3159585216"]}