{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/httpcookie-and-web-config-domain",
    "result": {"data":{"mdx":{"frontmatter":{"title":"HttpCookie and web.config domain","date":"July 12, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"HttpCookie and web.config domain\",\n  \"date\": \"2012-07-12\",\n  \"categories\": [\"asp\", \"asp-net\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can set in your Asp.Net web.config file a domain for all your cookie. This is done by setting the httpcookies from the system.web.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<system.web> \\n  <httpCookies domain=\\\".domain.com\\\"/> \\n</system.web> \\n\")), mdx(\"p\", null, \"The main goal is to have all your cookies attached to the domain and not set to the subdomain. Also, notice that I have wrote .domain.com and not domain.com. This is important, otherwise, it won't work with subdomain.\"), mdx(\"p\", null, \"So what does it do behind the scene? It simply set the domain property of the cookie to the domain name. In fact you could have code it manually:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var cookie = new HttpCookie(); \\n cookie.Domain = \\\".domain.com\\\"; \\n\")), mdx(\"p\", null, \"Instead you set it once in the web.config. This is the constructor of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpCookie\"), \". As you can see, it calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SetDefaultsFromConfig()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public HttpCookie(String name, String value) {\\n  _name = name;_stringValue = value; \\n  SetDefaultsFromConfig();_changed = true; \\n} \\n\")), mdx(\"p\", null, \"This method goes into the web.config to get the domain. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"private void SetDefaultsFromConfig() { \\n  HttpCookiesSection config = RuntimeConfig.GetConfig().HttpCookies;\\n  _secure = config.RequireSSL;_httpOnly = config.HttpOnlyCookies;\\n\\n  if (config.Domain != null && config.Domain.Length > 0)\\n    _domain = config.Domain; \\n} \\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variable_domain\"), \" is changed by the configuration file value.\"), mdx(\"p\", null, \"This variable is also setted by the domain property.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public String Domain { \\n   get { return_domain;} \\n   set {\\n    _domain = value;\\n    _changed = true; \\n  } \\n} \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"5b21edc3-561e-54b5-a38a-d026624248d1","totalPages":75}},
    "staticQueryHashes": ["3159585216"]}