{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2013/how-to-include-correctly-property-within-a-collection-when-using-entity-framework-code-first/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to include correctly property within a collection when using Entity Framework code first","date":"May 10, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to include correctly property within a collection when using Entity Framework code first\",\n  \"date\": \"2013-05-10\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have several \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./asnotracking-to-force-your-data-context-to-get-everything-from-the-database\"\n  }, \"example\"), \" in this website that include with a string the property when it's a property inside a collection of my main entity. Here is one example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(\\\"Sessions.WorkoutSessionExercises\\\") .Include(\\\"Sessions.WorkoutSessionExercises.Exercise\\\") .Single(c => c.Id == id); \\n``` At least, this example use the property for the Sessions. But why I wrote with a string for the two others includes? Because Sessions is a collection which doesn't let me link to one of its property. Instead, it links me to a list of property of the collection. This is quite logic if we think about it. However, I remain with the problem of using string which will lead in the maintenance phase to some possible problem when refactoring. Renaming a property won't change the string. This is why it would be better to specify the property of the collection.\\n\\nThis can be done by using the Linq method \\\"**Select**\\\". \\n```csharp\\n return DatabaseContext .SetOwnable<Workout>() .Include(x => x.Sessions) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises)) .Include(x => x.Sessions.Select(d=>d.WorkoutSessionExercises.Select(g=>g.Exercise))) .Single(c => c.Id == id); \\n\")), mdx(\"p\", null, \"As you can see, we load the collection Sessions, then we load the collection WorkoutSessionExercise which is inside every Session. Finally, we load every Exercise that is a property without being a collection.\"), mdx(\"p\", null, \"This example show you that even with multiple collection deep you can still avoid using string to specify that to include and what not.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6cc9a4fe-f084-5bb3-8303-aa1c4327116a","slug":"2013/how-to-include-correctly-property-within-a-collection-when-using-entity-framework-code-first","__params":{"slug":"2013"}}},
    "staticQueryHashes": ["3159585216"]}