{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/memorystream-invalid-operation-exception",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Memorystream : Invalid Operation Exception","date":"June 13, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Memorystream : Invalid Operation Exception\",\n  \"date\": \"2012-06-13\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Memorystream\"), \" that is initialized with the constructor that take another stream can raise the exception \\\"Invalid Operation Exception\\\".\"), mdx(\"p\", null, \"The proper way to is to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Write\"), \" property after using the empty constructor.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var encoding= new UnicodeEncoding(); Byte[] bytesToCompress = encoding.GetBytes(\\\"Test123); var streamToCompress = new MemoryStream(); streamToCompress .Write(bytesToCompress, 0, bytesToCompress.Length); \\n\")), mdx(\"p\", null, \"You can use Unicode encoding but also UTF8 or any other file encoding available.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"bcd8d05a-338f-570d-973e-f9fc5135762d","totalPages":68}},
    "staticQueryHashes": ["3159585216"]}