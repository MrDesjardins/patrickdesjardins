{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/mstest-and-the-error-method-should-be-marked-static",
    "result": {"data":{"mdx":{"frontmatter":{"title":"MSTest and the error Method should be marked static","date":"December 26, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MSTest and the error Method should be marked static\",\n  \"date\": \"2011-12-26\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you came from the world of NUnit you may stomped into the error \\\"Method should be marked static\\\" without any other indication of which method it's about.\"), mdx(\"p\", null, \"With NUnit, you were using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TestFixtureSetUp\"), \" as attribute to a class' method to get it executed before all test once. With MSTest you have to use the attribute \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ClassInitialize\"), \".\"), mdx(\"p\", null, \"So, if you are used to write :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[TestFixtureSetUp] \\npublic void Init() { \\n  //Some code executed once \\n} \\n\")), mdx(\"p\", null, \"You cannot simply use :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[ClassInitialize] \\npublic void Init() { \\n  //Some code executed once \\n} \\n\")), mdx(\"p\", null, \"In fact, the Microsoft Unit Testing framework require to have this method public with a parameter of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[ClassInitialize] \\npublic static void Init(TestContext ctx) { \\n  //Some code executed once \\n} \\n\")), mdx(\"p\", null, \"Once this is set as it should, with the statis method and the TestContext attribute, the error \\\"Method should be marked static\\\" will be removed and you will be all fine.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7fe51018-163e-5426-8338-00952edd73b0","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}