{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/regex-to-get-everything-until-a-specific-character-is-found",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Regex to get Everything Until a Specific Character is Found","date":"March 2, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Regex to get Everything Until a Specific Character is Found\",\n  \"date\": \"2015-03-02\",\n  \"categories\": [\"regex\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Stripping attribute from HTML can be time consuming if you do it manually. Since the value can change on each of the attribute, you cannot do a simple search and replace. What you need is a regular expression that will search for the attribute you want to remove and with anything between quotes. That mean you need to have a Regex that search a string until a specific character is reach. In the case of having an Html attribute with a value between double quote that change you need to search what does not change and have the Regex catching all until it found the second quote.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"data-info=\\\"this is value 1\\\" data-info=\\\"thisIsValue2\\\"\",\n    \"data-info\": \"\\\"thisIsValue2\\\"\",\n    \"is\": true,\n    \"value\": true,\n    \"1\\\"\": true\n  }, \"```  The Regex to parse all string and is the following one. It takes the part that does not change and search for everything not a double quote. The Regex part that does this is the square bracket following by the ^ symbol. It informs the Regex to search everything until it finds the double quote. The \\\"everything\\\" is specified by the star character that is following the ending square bracket. ```typescript\\ndata-info=\\\\\\\\\\\"[^\\\"]*\\\\\\\\\\\" \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"8b19c522-08a2-527f-aeba-25d6bb69a647","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}