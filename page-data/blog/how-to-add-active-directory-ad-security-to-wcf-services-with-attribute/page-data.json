{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-add-active-directory-ad-security-to-wcf-services-with-attribute",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to add active directory (AD) security to WCF services with attribute?","date":"June 27, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to add active directory (AD) security to WCF services with attribute?\",\n  \"date\": \"2013-06-27\",\n  \"categories\": [\"asp-mvc\", \"asp-net\", \"webservices\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using WCF web services with active directory (AD) you may want to have a more atomic authorization process than setting the security by IIS. You may want to allow for specific method some group when some other may only have access to others.\"), mdx(\"p\", null, \"The first step is to create a custom attribute. This example show you how to add a single role but you could modify this code to allow multiple roles.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class SecureOperationAttribute : Attribute, IOperationBehavior { public string Role { get; set; } public void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters){} public void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation) { } public void Validate(OperationDescription operationDescription) {} public void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation) {\\n\\ndispatchOperation.Invoker = new SecureOperationInvoker(Role, dispatchOperation); } } \\n\")), mdx(\"p\", null, \"Once the attribute is set you need to create the invoker.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class SecureOperationInvoker : IOperationInvoker { \\n  private readonly IOperationInvoker_baseInvoker; \\n  private readonly string_operationName; \\n  private readonly string_role;\\n\\n  public SecureOperationInvoker(string role, DispatchOperation operation) {\\n    _role = role;\\n    _baseInvoker = operation.Invoker;\\n    _operationName = operation.Name; \\n  }\\n\\n  public object Invoke(object instance, object[] inputs, out object[] outputs) { \\n    if (!UserIsInRole(_role)) { \\n      throw new FaultException(string.Format(\\\"Authentification fail. The operation '{0}' requires the role '{1}'.\\\",_operationName,_role), new FaultCode(\\\"Authentification\\\")); \\n    } \\n    return_baseInvoker.Invoke(instance, inputs, out outputs); \\n  }\\n\\n  public object[] AllocateInputs() { \\n    return_baseInvoker.AllocateInputs(); \\n  }\\n\\n  public IAsyncResult InvokeBegin(object instance, object[] inputs, AsyncCallback callback, object state) { \\n    return_baseInvoker.InvokeBegin(instance, inputs, callback, state); \\n  }\\n\\n  public object InvokeEnd(object instance, out object[] outputs, IAsyncResult result) {\\n    return_baseInvoker.InvokeEnd(instance, out outputs, result); \\n  }\\n\\n  public bool IsSynchronous { \\n    get { return_baseInvoker.IsSynchronous; } \\n  } \\n    \\n  public bool UserIsInRole(string role) { \\n    var winPrinc = new WindowsPrincipal(OperationContext.Current.ServiceSecurityContext.WindowsIdentity); \\n    return winPrinc.IsInRole(role); \\n  } \\n}\\n\")), mdx(\"p\", null, \"Of course, this example a small representation of what should have been done in a real system. In fact, the UserIsInRole shouldn't be hardcoded to use WindowsPrincipal. It should be injected to be able to test without having to use WindowsPrincipal. Also, the role variable may in fact not be exactly the name of the active directory (AD) group, so you may need to inject also a mechanism to translate the role used by the attribute to the AD group.\"), mdx(\"p\", null, \"Here is how to use the attribute over your WCF contract. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[ServiceContract] \\npublic interface IMyEntityXYZ { \\n  [OperationContract] \\n  [SecureOperation(Role = \\\"Admin\\\")] \\n  void Action(DTOXYZ[] xyz); \\n} \\n\")), mdx(\"p\", null, \"What I like is that you can set the security on the contract. It's simple for the maintenance cause the operation signature contains who has access the the method defined. It's also easy to test if you are using injection to create a stub method for the validation of the role.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7a057e7b-5336-535a-bb9c-defbc82ca5a5","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}