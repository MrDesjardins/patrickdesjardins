{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-overload-the-square-bracket-operator-in-c",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to overload the square bracket operator in C#?","date":"November 3, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to overload the square bracket operator in C#?\",\n  \"date\": \"2011-11-03\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is pretty simple. In fact, I am writing this because most example show you this :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public object this[int index] { get { return collection[index]; } set { collection[index] = value; } } \\n\")), mdx(\"p\", null, \"In fact, you should return the type of your collection. So, if your object contains a collection of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Person\"), \" than you should write :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public Person this[int index] { get { return collection[index]; } set { collection[index] = value; } } \\n\")), mdx(\"p\", null, \"This way, the value returned doesn't require to be casted.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"b0550147-49e5-59be-b7a6-ac6863636426","totalPages":70}},
    "staticQueryHashes": ["3159585216"]}