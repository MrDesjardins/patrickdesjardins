{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/unity-life-time-management",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Unity Life time management","date":"January 7, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unity Life time management\",\n  \"date\": \"2013-01-07\",\n  \"categories\": [\"unity\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you use Unity to get an instance of a class, Unity pass through the life time manager. The life time manager responsibility is indicate to unity how to instance the class into an object. This one may already have an instanced object for the class requested and thus give this one instead of creating a new instance.\"), mdx(\"h2\", null, \"TransientLifetimeManager\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TransientLifetimeManager\"), \" is the default life time manager used by Unity if none is specified. This is the simplest form of life time manager. It creates a new instance every time unity need an instance of the class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var container = new UnityContainer(); container .RegisterType(typeof(IMyClass), typeof(MyClass), \\\"namedMyClass\\\") .RegisterType(typeof(IMyClass), typeof(MyClass), \\\"named2MyClass\\\", new TransientLifetimeManager()); \\n\")), mdx(\"p\", null, \"In the above example, you can see two registrations with unity of IMyClass interface with the concrete implementation of MyClass. Both of them are using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TransientLifetimeManager\"), \". The first one is implicit because it use the default life time manager, while the second is explicit by having a third parameters which specify to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TransientLifetimeManager\"), \" life time manager.\"), mdx(\"h2\", null, \"Singleton\"), mdx(\"p\", null, \"The singleton is pattern (or anti-pattern) that specify that only one instance will live in memory. With Unity, the singleton life time manager is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContainerControlledLifetimeManager\"), \". The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContainerControlledLifetimeManager\"), \" will instance on the first call the class into an object and all subsequent call will simply give a pointer (reference) to the same object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var container = new UnityContainer(); container .RegisterType(typeof(IMyClass), typeof(MyClass), \\\"SingletonMyClass\\\", new ContainerControlledLifetimeManager()); \\n\")), mdx(\"p\", null, \"Of course, it's only possible to use the explicit registration for singleton since the implicit would create a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TransientLifetimeManager\"), \". A small note before we pass to the next life time manager : if you are using a web application, beware that the object will be shared between all your users.\"), mdx(\"h2\", null, \"Others life time manager\"), mdx(\"p\", null, \"Unity does have multiple others life time manager like \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PerThreadLifetimeManager\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PerResolveLifetimeManager\"), \". Both of them won't be discuss there. The first one can be useful with a system where you are using parallel operations and the last one in some custom case where the life time manager need to be re-created every time.\"), mdx(\"p\", null, \"In a web application, the default life time, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TransientLifetimeManager\"), \", is the one to use. It will create an instance per web request. Of course, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContainerControlledLifetimeManager\"), \" is also used in the case of instancing the data access layer, the caching system, the logging system, etc. Those are used across the system without containing \\\"user\\\" objects.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"caa6342b-f333-570f-9ee2-37377b997027","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}