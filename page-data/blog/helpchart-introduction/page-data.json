{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/helpchart-introduction",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to use Helm Chart to configure dynamically your Kubernetes file for beginner?","date":"August 25, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use Helm Chart to configure dynamically your Kubernetes file for beginner?\",\n  \"date\": \"2022-08-25\",\n  \"categories\": [\"Kubernetes\", \"helm\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Kubernetes is a powerful tool that allow you to deploy your servers, load-balancers and other infrastructure with a common language. However, it does not handle dynamic portion in the configuration. For example, you might want to inject a specific Docker image tag or inject an environment variable that change depending of the where the infrastructure is deployed (test/prod). Helm Chart is a templating engine that allows to specify values in a tree fashion into your Kubernetes configuration.\"), mdx(\"h1\", null, \"Installing Helm Chart\"), mdx(\"p\", null, \"On a Windows machine, you can use Chocolatey:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"choco install kubernetes-helm\\n\")), mdx(\"p\", null, \"On MacOs, you can use Brew\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"brew install helm\\n\")), mdx(\"p\", null, \"There is plenty of alternative depending of your preference or operating system in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://helm.sh/docs/intro/install\"\n  }, \"the official installation page\"), \".\"), mdx(\"h1\", null, \"Getting Started\"), mdx(\"p\", null, \"The first step is to create a Helm. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create\"), \" command creates a folder with many files and folders. My project already have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kubernetes\"), \" folder, hence I moved into it and used the Helm Chart's create command. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"helm create realtimepixel\\n\")), mdx(\"p\", null, \"The last word is your project name and also the name of the folder that is created.\"), mdx(\"h1\", null, \"Default Pages\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7ea92636-8d3a-5968-843c-8fe6f3c043b4","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}