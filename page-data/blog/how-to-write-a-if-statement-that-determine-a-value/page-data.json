{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-write-a-if-statement-that-determine-a-value",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to Write a IF Statement that determine a value","date":"October 5, 2016"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Write a IF Statement that determine a value\",\n  \"date\": \"2016-10-05\",\n  \"categories\": [\"best-practices\", \"c-sharp\", \"javascript\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Pretty much a basic case if you have done some programming. How to write a IF statement is an agnostic problem when it's to assign one or multiple variables to be used. There is two patterns that I often see. The first one assign the variable or property directly. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \" if (/*what ever*/) { \\n  this.icon = \\\"icon1\\\"; \\n} else { \\n  this.icon = \\\"icon2\\\"; \\n} \\n\")), mdx(\"p\", null, \"The second approach set the value into a temporary, scoped, variable and at the end of the IF assign the value to the field/property. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \" var iconType = \\\"\\\"; \\n if (/*what ever*/) { \\n  iconType = \\\"icon1\\\"; \\n} else {\\n  iconType = \\\"icon2\\\"; \\n} \\nthis.icon = iconType ; \\n\")), mdx(\"p\", null, \"These two examples could be that instead of assigning to this.icon would be that we call this.featureMethod(icon). Like the two examples above, in the first approach, you would see the method twice, while on the second approach you would assign the value into a variable and have the method call once at the end. The first approach is appealing because you do not have to assign a temporary variable. However, we have code duplication that doesn't seem to bother most people. The real problem is in code maintenance. If the method that needs to be invoked change it's signature, you have two places to change instead of 1. If the IF become with more condition (else if) you will have to call the method (or assign field/property) few more times instead of just keeping a single call. These two argumentation leans in favor of the second approach and there is more. The second approach is cleaner in term of figuring out what is going on. The first approach is taking a decision and executing at the same time. If you look at the method, you cannot have a clear view of what is happening. From top to bottom you have multiple sections that do a condition check + action. Thus, the second approach is cleaner. We could even break down the code into two distinct part: arrange and act. We could refactor the method into 2 sub-methods which one determines the values to be used and the second that set values or calls methods.\"), mdx(\"p\", null, \"I am bringing that point because the first approach seems to be taken with the argument that it's the same as the second one. The real justification is that the first one is taking 2 lines of code less, hence faster to type which make it an easy default choice. If you are using the first approach, I suggest that you try for few times the second approach. You will see the benefits slowly when working and modifying that code again in the future.\"), mdx(\"p\", null, \"Here is an example of 3 temporary variables\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \" function getMyLink(threshold: number) { \\n  // Default \\n  let url: string = \\\"http://aboveHundred.com\\\"; \\n  let className: string = \\\"default\\\"; let padding: number = 0; \\n  \\n  // Logics \\n  if (threshold <= 0) { \\n    url = \\\"http://underOrZero.com\\\"; \\n    className = \\\"dark-theme\\\"; \\n    padding = 100; \\n  } else if (threshold > 0 && threshold < 100) { \\n    url = \\\"http://betweenZeroAndHundred.com\\\"; \\n    className = \\\"light-theme\\\"; \\n    padding = 200; \\n  } \\n  \\n  // Assignments \\n  this.url = url; \\n  this.className = className; \\n  this.padding = padding; \\n} \\n\")), mdx(\"p\", null, \"If the next iteration of changes in the code requires to change one of the assignment to other variable, we have a single place to change. If instead of assigning we need to return something, we also have a single place to change.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \" function getMyLink(threshold: number) { \\n  // Default \\n  let url: string = \\\"http://aboveHundred.com\\\"; \\n  let className: string = \\\"default\\\"; \\n  let padding: number = 0; \\n  \\n  // Logics \\n  if (threshold <= 0) { \\n    url = \\\"http://underOrZero.com\\\"; \\n    className = \\\"dark-theme\\\"; \\n    padding = 100; \\n  } else if (threshold > 0 && threshold < 100) { \\n    url = \\\"http://betweenZeroAndHundred.com\\\"; \\n    className = \\\"light-theme\\\"; \\n    padding = 200; \\n  } \\n  // Now we return \\n  return `<a href=\\\"${url}\\\" class=\\\"${className}\\\" style=\\\"padding:${padding}\\\">Click Here</a>`; \\n} \\n\")), mdx(\"p\", null, \"In term of flexibility, you may have to define these variables but the code is structured to be well resistant to future changes. Also, when a function requires a lot of assignation, it is often a case that the method will be long. It means that it's even harder to have an idea of what is going on if assignations are done all over the function. I strongly believe that while assigning a long list of variables can be cumbersome that assigning them directly to several places reduce the readability and introduce more error (like forgetting one assignment in a specific case which keep an old assignment).\"), mdx(\"p\", null, \"There are pros and cons in both, but the one I illustrate has more pros than cons in my opinion.\"), mdx(\"p\", null, \"To recap about the advantage of having to assign values and then calling or assigning:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove code duplication\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easier refactoring since only one signature to change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clearer readability of what happen into a method\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow faster refactoring into smaller methods\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"014bbd7d-2732-55c3-9032-350ad0c1fa50","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}