{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-add-css-file-or-javascript-file-by-action-of-controller",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to add CSS file or Javascript file by action of controller","date":"June 30, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to add CSS file or Javascript file by action of controller\",\n  \"date\": \"2012-06-30\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Would it be great to specify for a specific action what CSS or Javascript file to load? With Asp.Net MVC it's possible to do something custom pretty fast and useful with attribute. Attribute is something that the developer add at the top of the method (action). The syntax is simple. It uses the square bracket and between you have the name of the attribute and parameters.\"), mdx(\"p\", null, \"Above is the result of how to use the Javascript attribute to get 2 Javascripts file loaded only when Index is called. We could improve by also let the developer add the tag over the controller class which would load the Javascript for all actions of this controller.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class HomeController : Controller { [JavaScript(\\\"MyFile1\\\", \\\"MyFile2\\\")] public ActionResult Index() { ViewBag.Message = \\\"Welcome to ASP.NET MVC!\\\";\\n\\nreturn View(); }\\n\\npublic ActionResult About() { return View(); } } \\n\")), mdx(\"p\", null, \"The first step is to create an attribute for each of the specific file you want. For example, one for CSS and one for Javascript. For simplicity, we will only do Javascript here.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class JavaScript : Attribute { public string[] FileNames { get; set; }\\n\\npublic JavaScript(params string[] fileName) { this.FileNames = fileName; } } \\n\")), mdx(\"p\", null, \"Then, we need to add to the master page (by default_Layout.cshtml) a code that will read those attributes and add the Javascript include tag in the header of the Html code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title>@ViewBag.Title</title> <link href=\\\"@Url.Content(\\\"~/Content/Site.css\\\")\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" /> <script src=\\\"@Url.Content(\\\"~/Scripts/jquery-1.5.1.min.js\\\")\\\" type=\\\"text/javascript\\\"></script> <script src=\\\"@Url.Content(\\\"~/Scripts/modernizr-1.7.min.js\\\")\\\" type=\\\"text/javascript\\\"></script> @Html.GetJavascript(); </head> \\n\")), mdx(\"p\", null, \"The GetJavascript() helper code will loop all attributes to find what has been defined at the controller side.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public static class JavascriptHelper { public static MvcHtmlString GetJavascript(this HtmlHelper helper) { IList<string> fileNames = new List<string>();\\n\\n//The class may have more than one Javascript file. Need to loop them all and also loop all entries MemberInfo controllerInfo = helper.ViewContext.Controller.GetType(); object[] listOfcontrollerAttributes = controllerInfo.GetCustomAttributes(typeof(JavaScript), true); FillUpFileArray(fileNames, listOfcontrollerAttributes);\\n\\n//Method attributes. First get the method that has been called and loop all possible Javascript tag and entries MethodInfo method; if (helper.ViewContext.HttpContext.Request.HttpMethod == \\\"POST\\\"){ method = helper.ViewContext.Controller.GetType().GetMethods().FirstOrDefault(t => t.Name == helper.ViewContext.RouteData.GetRequiredString(\\\"action\\\") && t.GetCustomAttributes(typeof(JavaScript), true).Any() && t.GetCustomAttributes(typeof(HttpPostAttribute), true).Any()); } else{ method = helper.ViewContext.Controller.GetType().GetMethods().FirstOrDefault(t => t.Name == helper.ViewContext.RouteData.GetRequiredString(\\\"action\\\") && t.GetCustomAttributes(typeof(JavaScript), true).Any() && !t.GetCustomAttributes(typeof(HttpPostAttribute), true).Any()); } if(method!=null){ object[] methodAttributes = method.GetCustomAttributes(typeof(JavaScript), true); FillUpFileArray(fileNames, methodAttributes); }\\n\\n//Create Html if (fileNames.Any()) { var sb = new StringBuilder(); var url = new UrlHelper(helper.ViewContext.RequestContext); const string JS_SCRIPT_FORMAT = \\\"<script src=\\\\\\\\\\\"{0}.js\\\\\\\\\\\" type=\\\\\\\\\\\"text/javascript\\\\\\\\\\\"></script>\\\"; foreach (string fmt in fileNames.Select(name => string.Format(JS_SCRIPT_FORMAT, url.Content(\\\"~/Scripts/\\\") + name))){ sb.AppendLine(fmt); } return new MvcHtmlString(sb.ToString()); }\\n\\nreturn new MvcHtmlString(string.Empty); }\\n\\nprivate static void FillUpFileArray(ICollection<string> fileNames, IEnumerable<object> listOfcontrollerAttributes){ if (listOfcontrollerAttributes != null){ foreach (string name in listOfcontrollerAttributes.OfType<JavaScript>().SelectMany(classAttributes => classAttributes.FileNames.Where(name => !string.IsNullOrEmpty(name) && !fileNames.Contains(name)))){ fileNames.Add(name); } } } } \\n\")), mdx(\"p\", null, \"Here is the explication step by step: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" MemberInfo controllerInfo = helper.ViewContext.Controller.GetType(); object[] listOfcontrollerAttributes = controllerInfo.GetCustomAttributes(typeof(JavaScript), true); FillUpFileArray(fileNames, listOfcontrollerAttributes); \\n``` The first section get everything from the controller that has been called the view to get all possibles attributes defined and loop through them. Every time it finds an attribute, it loops through the list of string that represent a Javascript file.\\n\\n\\n```csharp\\n MethodInfo method; if (helper.ViewContext.HttpContext.Request.HttpMethod == \\\"POST\\\"){ method = helper.ViewContext.Controller.GetType().GetMethods().FirstOrDefault(t => t.Name == helper.ViewContext.RouteData.GetRequiredString(\\\"action\\\") && t.GetCustomAttributes(typeof(JavaScript), true).Any() && t.GetCustomAttributes(typeof(HttpPostAttribute), true).Any()); } else{ method = helper.ViewContext.Controller.GetType().GetMethods().FirstOrDefault(t => t.Name == helper.ViewContext.RouteData.GetRequiredString(\\\"action\\\") && t.GetCustomAttributes(typeof(JavaScript), true).Any() && !t.GetCustomAttributes(typeof(HttpPostAttribute), true).Any()); } if(method!=null){ object[] methodAttributes = method.GetCustomAttributes(typeof(JavaScript), true); FillUpFileArray(fileNames, methodAttributes); } \\n``` It's almost the same with method, but this time, we need to get the good action method. A same method can be good for GET or HTTP so we need to figure out the good one. As you can see, we do not search explicitly for GET because action's method is implicitly GET.\\n\\n\\n```csharp\\n if (fileNames.Any()) { var sb = new StringBuilder(); var url = new UrlHelper(helper.ViewContext.RequestContext); const string JS_SCRIPT_FORMAT = \\\"<script src=\\\\\\\\\\\"{0}.js\\\\\\\\\\\" type=\\\\\\\\\\\"text/javascript\\\\\\\\\\\"></script>\\\"; foreach (string fmt in fileNames.Select(name => string.Format(JS_SCRIPT_FORMAT, url.Content(\\\"~/Scripts/\\\") + name))){ sb.AppendLine(fmt); } return new MvcHtmlString(sb.ToString()); }\\n\\nreturn new MvcHtmlString(string.Empty); \\n``` At the end, we print the list of Javascript file by adding the extension and but referring to the good script folder.\\n\\nHere is an example of a controller that works pretty well with this kind of scenario:\\n\\n\\n```csharp\\n [JavaScript(\\\"Controller1\\\", \\\"Controller2\\\")] public class HomeController : Controller {\\n\\n[JavaScript(\\\"MyFileAction1\\\", \\\"MyFileAction2\\\")] public ActionResult Index() { ViewBag.Message = \\\"Welcome to ASP.NET MVC!\\\";\\n\\nreturn View(); }\\n\\n[JavaScript(\\\"Integer\\\", \\\"Integer\\\")] [HttpGet] public ActionResult Test(int i, int j) { ViewBag.Message = \\\"Welcome to ASP.NET MVC!\\\" + i + \\\" \\\" + j;\\n\\nreturn View(\\\"Index\\\"); }\\n\\n[JavaScript(\\\"PostFile1\\\")] [HttpPost] public ActionResult Test(string s) { ViewBag.Message = \\\"Welcome to ASP.NET MVC!\\\" + s;\\n\\nreturn View(\\\"Index\\\"); }\\n\\npublic ActionResult About() { return View(); } } \\n\")), mdx(\"p\", null, \"Hope it helps you to get cleaner code!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6703a5f9-a961-54cc-8713-bcd73c94631d","totalPages":68}},
    "staticQueryHashes": ["3159585216"]}