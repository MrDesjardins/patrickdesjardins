{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/entity-framework-and-the-connection-string",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Entity Framework and the Connection String","date":"October 5, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework and the Connection String\",\n  \"date\": \"2011-10-05\",\n  \"categories\": [\"entity-framework\", \"sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A connection string is a string with key value pair in it that indicate where to get the connection to the server for persistence. In Entity Framework something change from the standard and it's the location of the CSDL, SSDL and MSL file.\"), mdx(\"p\", null, \"Here is an example of connection string that connect to a file database named \\\"qwe\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<add name=\\\"AdventureWorks_DataEntities\\\" connectionString=\\\"metadata=res://*/MyEFModel.csdl|res://*/MyEFModel.ssdl|res://*/MyEFModel.msl; provider=System.Data.SqlClient; provider connection string=&quot; Data Source=.\\\\\\\\SQLEXPRESS; AttachDbFilename=|DataDirectory|\\\\\\\\qwe.mdf; Integrated Security=True; Connect Timeout=30; User Instance=True; MultipleActiveResultSets=True &quot;\\\" providerName=\\\"System.Data.EntityClient\\\" />\\n\\n\\n\")), mdx(\"p\", null, \"Here is an example of connection string for entity framework 4 to a Sql Server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<add name=\\\"NorthwindEntities\\\" connectionString=\\\"metadata=res://*/NorthWindEntityDataModel.csdl|res://*/NorthWindEntityDataModel.ssdl|res://*/NorthWindEntityDataModel.msl; provider=System.Data.SqlClient; provider connection string=&quot; Data Source=.\\\\\\\\SQLEXPRESS; Initial Catalog=Northwind; Integrated Security=True; MultipleActiveResultSets=True&quot;\\\" providerName=\\\"System.Data.EntityClient\\\" /> \\n\")), mdx(\"p\", null, \"You can see one major difference that is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AttachDbFilename\"), \" for one when the other has a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Initial Catalog\"), \". Also, the file based database lets you to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Instance\"), \" when the SQL server won't. But it's not a big deal because User Install just make the database use the current user as the runner of the database instance instead of the \\\"NT AUTHORITY\", \"\\\\\", \"NETWORK SERVICE. Also you can see the use of |DataDirectory| keyword in the path of the database file. This keyword is read by the System.Data.Common.DbConnectionOptions and will translate this string with AppDomain.CurrentDomain.BaseDirectory. The base directory is the assembly directory.\"), mdx(\"h2\", null, \"How Entity Framework Manage Connection String?\"), mdx(\"p\", null, \"Entity Framework generates the Object Context with multiple constructor. One of the constructor takes the name of the connection string where it should read it. This is the case of the first line of the code below. This name is an entry in the connectionString element inside the configuration element of the app.config (or web.config for web application).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public AdventureWorks_DataEntities() : base(\\\"name=AdventureWorks_DataEntities\\\", \\\"AdventureWorks_DataEntities\\\") public AdventureWorks_DataEntities(string connectionString) : base(connectionString, \\\"AdventureWorks_DataEntities\\\") public AdventureWorks_DataEntities(EntityConnection connection) : base(connection, \\\"AdventureWorks_DataEntities\\\") \\n\")), mdx(\"p\", null, \"The second constructor let you put in a string format directly the connection string. You could also get the connection string from the .config file and to load it with this second constructor.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string connectionString = ConfigurationManager.ConnectionStrings[\\\"qwe\\\"]; \\n\")), mdx(\"p\", null, \"The third constructor let you use an EntityConnection object. This object contain not only the traditional connection string but also the conceptual model data (CSDL, MSL, SSDL files). This let you create dynamically connection string with object. To use EntityConnection class, the help of EntityConnectionStringBuilder and SqlConnectionStringBuilder can be wise. You can get a MSDN Tutorial about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/bb738533.aspx\",\n    \"title\": \"MSDN Tutorial for EntityConnection construction\"\n  }, \"creating EntityConnection at Microsoft\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"dc9d81a6-c8a0-5c35-b9f8-0a853d9f3a0a"}},
    "staticQueryHashes": ["3159585216"]}