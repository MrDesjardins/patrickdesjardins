{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/asp-mvc-controller-return-html-by-jquery-ajax-to-load-dynamically-html-into-div",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Asp mvc controller return html by Jquery Ajax to load dynamically html into div","date":"March 6, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Asp mvc controller return html by Jquery Ajax to load dynamically html into div\",\n  \"date\": \"2012-03-06\",\n  \"categories\": [\"asp-mvc\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When it's time to load Html from the server side from Javascript, the best way to do it is with Ajax.\"), mdx(\"p\", null, \"You can use JQuery framework to make the call to the server. This is pretty interesting if you need to get Html loaded with Model information from the server. A simple way to do it, without having to use parameters is to simply call a partial view with the routing url to the information you want.\"), mdx(\"p\", null, \"For example, let say you want to\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var ajaxCall = $.ajax(\\n  {\\n    url: 'MyController/MyAction/' + id,\\n    success: /*...*/, dataType: \\\"html\\\"\\n  });\\n\")), mdx(\"p\", null, \"This will call the server, get the information of the id and render the html for it.\"), mdx(\"p\", null, \"In the success fonction, you just have to setup with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".html\"), \"(contentHere) and you will be fine to load the data from the Model of the server into the html without having to do a request with a PostBack.\"), mdx(\"p\", null, \"One important note is that the controller need to return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PartialView\"), \" and not simply a View. This would cause to load the whole layout back to the client and it's not what you should want.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6bb7b998-f960-529d-b68d-7806a8fbdabc","totalPages":69}},
    "staticQueryHashes": ["3159585216"]}