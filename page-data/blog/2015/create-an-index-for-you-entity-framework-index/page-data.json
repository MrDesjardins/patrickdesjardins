{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2015/create-an-index-for-you-entity-framework-index/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Create an Index for you Entity Framework Index","date":"March 27, 2015"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create an Index for you Entity Framework Index\",\n  \"date\": \"2015-03-27\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Either you are working with a field that require a fast access or if the field is used as reference in some case, you will need to create an Index. Unfortunately, Entity Framework does not offer a quick way to do it. To tell Entity Framework to generate the Sql Index on the column, you must use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Column Annotation\"), \". Entity Framework column annotation has an already created class named IndexAnnotation that can be added to your column.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" this.Property(d => d.Date) .HasColumnAnnotation(\\\"Index\\\" , new IndexAnnotation( new IndexAttribute(\\\"IX_Date\\\") {IsUnique = true} ) ); \\n``` The code above set for a _Date_ column an **index**. It creates a IndexAnnotation which create a unique index attribute.\\n\\nThis result into an Index inside the migration class with a unique property set to true. \\n```csharp\\n CreateTable( \\\"YourEntityName\\\", c => new { Id = c.Int(nullable: false, identity: true), Date = c.DateTime(nullable: false), }) .PrimaryKey(t => t.Id) .Index(t => t.Date, unique: true); \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"b24a2fcb-dc17-5e16-9af2-87f1d8805b5d","slug":"2015/create-an-index-for-you-entity-framework-index","__params":{"slug":"2015"}}},
    "staticQueryHashes": ["3159585216"]}