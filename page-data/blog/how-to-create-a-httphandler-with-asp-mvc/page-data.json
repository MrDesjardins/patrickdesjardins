{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-create-a-httphandler-with-asp-mvc",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to create a HttpHandler with Asp Mvc","date":"June 29, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create a HttpHandler with Asp Mvc\",\n  \"date\": \"2012-06-29\",\n  \"categories\": [\"asp-mvc\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"With traditional Asp.Net, doing an http handler required without a doubt to add a new Http Handler in IIS to handle a specific extension and then doing some work to get the request and to send back a response. This is about the same with Asp.Net MVC but you have the leverage to do everything in code with routing.\"), mdx(\"p\", null, \"In this article, we will do a Http Handler for image. This will allow us to instead of using directly a server path for our image in our website to call this image http handler to get the image. This can be useful if you want to protect who access the image. Direct linking from outside of the website won't be allowed for example. You could also decide to implement a special algorithm that return image depending of who is logged to the website, etc.\"), mdx(\"p\", null, \"First of all, you need to create a new class that will inherit from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IRouteHandler\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ImageHandler : IRouteHandler { public IHttpHandler GetHttpHandler(RequestContext requestContext) { } } \\n\")), mdx(\"p\", null, \"Once created, you need to specify the website that this routing handler exist. This is done with global.asax.cs You need to add the route into the Application_Start().\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" RouteTable.Routes.Add(\\\"ImagesRoute\\\", new Route(\\\"privateImage/{uniqueIdentifier}\\\", new ImageHandler())); \\n\")), mdx(\"p\", null, \"As you can see, I have decided that any url that will have privateImage/#### will be routed to the new http handler.\"), mdx(\"p\", null, \"Let's go back to the Http handler. Now we need to verify that the uniqueIdentifier is present when the handler is called. Otherwise, we will return a 404 Http error. This is done by returning null.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ImageHandler : IRouteHandler { public IHttpHandler GetHttpHandler(RequestContext requestContext) { var routeValues = requestContext.RouteData.Values; if(routeValues.ContainsKey(\\\"UniqueIdentifier\\\")) { } else { return null; } } } \\n\")), mdx(\"p\", null, \"No we need to get the image and to send it back to the user. This is done by opening the file one the server in a stream and to write it back to the response stream which will go the the client via http.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ImageHandler : IRouteHandler { public IHttpHandler GetHttpHandler(RequestContext requestContext) { var routeValues = requestContext.RouteData.Values; if(routeValues.ContainsKey(\\\"UniqueIdentifier\\\")) { //Do something with the parameter (UniqueIdentifier) to get the image on the server string serverPathToImageToOutput = //What ever you want like database call or file server algo; //Start a new Response requestContext.HttpContext.Response.Clear(); //Response type will be the same as the one requested requestContext.HttpContext.Response.ContentType = GetContentType(requestContext.HttpContext.Request.Url.ToString()); //We buffer the data to send back until it's done requestContext.HttpContext.Response.BufferOutput = true; Image image = Image.FromStream(new FileStream(serverPathToImageToOutput, FileMode.Open)); image.Save(requestContext.HttpContext.Response.OutputStream, ImageFormat.Png); requestContext.HttpContext.Response.End(); } else { return null; } } } \\n\")), mdx(\"p\", null, \"As you may notice, nothing is yet written for security purpose. In fact, it's quite simple. What we need to do is to check from where the request as been sent. Since we are the only one who should use the http handler, we can authorize only server request by checking the referer variable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" request.ServerVariables[\\\"HTTP_REFERER\\\"] \\n\")), mdx(\"p\", null, \"This can be added at the beginning of the GetHttpHandler method and return a static image that say \\\"Image is not authorized\\\".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7e07194e-c3eb-5435-976a-ca159fe212b2","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}