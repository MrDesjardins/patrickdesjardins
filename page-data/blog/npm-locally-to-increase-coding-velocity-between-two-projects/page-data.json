{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/npm-locally-to-increase-coding-velocity-between-two-projects",
    "result": {"data":{"mdx":{"frontmatter":{"title":"NPM locally to increase coding velocity between two projects","date":"April 3, 2018"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NPM locally to increase coding velocity between two projects\",\n  \"date\": \"2018-04-03\",\n  \"categories\": [\"nodejs-web\", \"npm\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One advantage having a big repository is to be able to change a part quickly and see the result right away. Recently, I moved a piece of code into another library. The reason was to reuse the library on several systems. The concept of breaking apart into different cohesive library make sense, however, it comes with the price that a quick one line change can become more demanding. I found that it's roughly 5 to 10 times slower. The reason is that a single line of change require to save the file and the code is ready to use. The same change in another repository needs to package the source code and to fetch the new package. The major problem is that everyone using the package sees the version bumping and the release may not even be ready to share. Ideally, a library is self-contained, and a group of unit tests ensures that the quality is as expected. However, in reality, it appears that a shareable version may require some checks directly on the browser.\"), mdx(\"p\", null, \"NPM provides a solution. The solution is to share the library code locally to a local project. The beauty is that no code modification is required. The solution tells NPM to link locally instead of getting the package from the remote server.\"), mdx(\"p\", null, \"The first step is to have your project that consumes the library and the library locally on your computer. Both projects can reside anywhere.\"), mdx(\"p\", null, \"The second step is to go at with your command line at the location of the package.json of your library. NPM has a command called \\\"link\\\". The execution of the command will specify if the creation is a success or not. If it is a success, you can use your command prompt to move to the project that consumes the library. Again, at the level of the package.json the command \\\"npm link\\\" must be executed. The difference is the argument that needs to specify which library to link. The name of the library is the name specified in the package.json of the library that we \\\"npm link\\\" at the second step. This command succeeds with an output that shows that node_modules points to the local directory.\"), mdx(\"p\", null, \"Finally, once you are done and want to use the node_module library, you can unlink. The command to unlink is \\\"npm unlink \\\" where the parameter is the parameter of the library linked. The library can also be unlinked by going back to the library and executed \\\"npm unlink\\\".\"), mdx(\"p\", null, \"As a recap: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// 1) At the library level \\nnpm link \\n// 2) At the project level (consumer) \\nnpm link my-library-name \\n// 3) Stop using the local version \\nnpm unlink my-library-name \\n// 4) Stop sharing locally my-library-name (must move back to library level) \\nnpm unlink \\n\")), mdx(\"p\", null, \"The technique works with TypeScript. The compilation of the library needs to occur since the link to the library read the package.json and will look for the \\\"files\\\" property which is mostly pointing to the build folder.\"), mdx(\"p\", null, \"Before closing on the subject, make sure that both libraries are running on the same NodeJS and npm version. Each NodeJS version links to a different folder. You can confirm the location of the link by using \\\"node -v\\\". Another tips is for people using \\\"create-react-app\\\". In that case, you may have to close and open the development server on each change. The reason is that Webpack does not notice the change in node_modules folder and will serve you the same files of the startup.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"3c9d5937-d80a-51d5-b4e5-dce89c00b5ed","totalPages":77}},
    "staticQueryHashes": ["3159585216"]}