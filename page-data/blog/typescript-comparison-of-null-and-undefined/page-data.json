{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/typescript-comparison-of-null-and-undefined",
    "result": {"data":{"mdx":{"frontmatter":{"title":"TypeScript comparison of null and undefined","date":"August 2, 2016"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Comparing if something is null or undefined is a trivial task but can take different color depending to whom you talk. This article will try to make it simple to understand. Since TypeScript is built on top of JavaScript, it has to handle the craziness of how JavaScript compare. In this article we will compare 4 types to check if the value is null, undefined or really reflect the values intended. All tests are built with this simple class and utility method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"class TestClass { public propString: string; public propNumber: number; public propBoolean:boolean; public propObject:TestClass; }\\n\\nfunction show(propertyName:string, operator:string) { var output = document.getElementById(\\\"output\\\"); output.innerHTML = output.innerHTML + (\\\"<p class='one-result'>\\\" + propertyName + \\\" is null true with \\\" + operator + \\\"</p>\\\"); }\\n\\nvar trr = new TestClass(); \\n\")), mdx(\"p\", null, \"First, let's test the boolean value when this one is set to nothing. We expect to have this value to be undefined which can be validated by ==, ===, ! and typeof :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"if(trr.propBoolean === null) { show(\\\"propBoolean\\\", \\\"=== null\\\"); } if(trr.propBoolean == null) { show(\\\"propBoolean\\\", \\\"== null\\\"); } if(trr.propBoolean) { show(\\\"propBoolean\\\", \\\"no operator\\\"); }\\n\\nif(!!trr.propBoolean) { show(\\\"propBoolean\\\", \\\"!!\\\"); }\\n\\nif(trr.propBoolean === undefined) { show(\\\"propBoolean\\\", \\\"=== undefined\\\"); } if(trr.propBoolean == undefined) { show(\\\"propBoolean\\\", \\\"== undefined\\\"); }\\n\\nif(typeof(trr.propBoolean) === \\\"undefined\\\") { show(\\\"propBoolean\\\", \\\"type of === undefined\\\"); } \\n\")), mdx(\"p\", null, \"The output is what expected except the ! operator which doesn't work with undefined with a boolean value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" propBoolean is null true with == null propBoolean is null true with === undefined propBoolean is null true with == undefined propBoolean is null true with type of === undefined \\n\")), mdx(\"p\", null, \"If we redo the test with boolean, but this time by setting the value to null (trr.propBoolean = null;) we get this result: ```\\npropBoolean is null true with === null propBoolean is null true with == null propBoolean is null true with == undefined \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nThe result is more surprising. As expected, the typeof undefined is not working anymore since it's defined to null. However, the comparison the == undefined is true. Also, the direct validation doesn't work as well as the !!.\\n\\nSetting the value to true, we have the no operator and the !! that let it through. Setting to false, nothing is printed. So, if we only take the boolean case in consideration and you want to be sure that true or false is set to the variable than you must use 1) == null or 2) == undefined.\\n\\n## Number\\n\\nIf we do the test with number, we have the same result than with boolean when comparing to nothing (undefined) as well as null. ``` \\n propNumber is null true with == null propNumber is null true with === undefined propNumber is null true with == undefined propNumber is null true with type of === undefined \\n\")), mdx(\"p\", null, \"and : ```\\npropNumber is null true with === null propNumber is null true with == null propNumber is null true with == undefined \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nThe problem is when we set the number to the value of 1. This one will pass the test of being true if compared with if(numberOfValue1) and also if (!!1). So, the only way to really validate number type to check if they are null or undefined is to use 1) == null or 2) == undefined.\\n\\n## String\\n\\nComparing a string is producing the same value when undefined and null than the boolean and number. The problem is if the value of the string is \\\"0\\\" or \\\"true\\\" than it will goes in the if(stringValueWithZero) or if(stringValueOfTrue).\\n\\n\")), mdx(\"p\", null, \" propString is null true with no operator propString is null true with !! \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nIt means that you can really truly just verify null or undefined value of a string with the equal operator -- again.\\n\\n## Object\\n\\nThe last test is to compare a custom object. As expected, when undefined and null the result is the same. You can also use the if(trr.propObject) and if(!!trr.propObject) without problem. In that case, you have more options.\\n\\n## Summary\\n\\nFrom all scenarios cover in this article, it's obvious that the only save way to check if a value has been set or if this one is set to null that is to compare with the double equal with null or undefined. I prefer the == null because undefined, in JavaScript, could be rewritten with a value. Thus causing some false-true. You can always use the triple equal to check null and undefined, but this is just more typing for the same result. You can have fun at this link to play around with the test : [http://typescript.io/aEeZGxas0wg](http://typescript.io/aEeZGxas0wg). If you are interested to see all other cases where comparing with if(yourVariable) can be dangerous, you should look at [https://dorey.github.io/JavaScript-Equality-Table/](https://dorey.github.io/JavaScript-Equality-Table/) where they show multiple scenario where a true value can occur when not expected. Here is a glimpse: ![](images/JavaScriptTrueFalse.png)\\n\\nYou can see many discussion on [StackOverFlow about checking the value in TypeScript](http://stackoverflow.com/questions/28975896/is-there-a-dedicated-function-to-check-null-and-undefined-in-typescript) or in \\n```javascript\\n(http://stackoverflow.com/questions/2647867/how-to-determine-if-variable-is-undefined-or-null/21273362) which lead to the same conclusion of not trying to use semantic shortcut but to compare with the double ==. TypeScript supports it in [strict mode](https://github.com/Microsoft/TypeScript/pull/8452) as you can see in this pull request where Anders Hejlsberg is involved (core developer of TypeScript).\\n\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"TypeScript comparison of null and undefined\\\",\\\"date\\\":\\\"2016-08-02\\\",\\\"categories\\\":[\\\"typescript\\\"]}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7ac66268-5a47-5217-8494-304a011f5130","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}