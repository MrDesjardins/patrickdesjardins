{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/alternative-to-clearboth-when-you-need-to-have-container-to-expand-to-your-floating-content",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Alternative to clear:both when you need to have container to expand to your floating content","date":"June 15, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Alternative to clear:both when you need to have container to expand to your floating content\",\n  \"date\": \"2012-06-15\",\n  \"categories\": [\"css\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Instead of adding a Html tag after floating division, it's better to add a class that will do this. It's better because you do not have to alter the Html for visual stuff that the CSS is designed too handle. The solution is known as \\\"Clear fix\\\". It's possible with CSS 2.0 to add :after which will add an element after the one that will carry this class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \" .clear-fix:after { visibility: hidden; display: block; font-size: 0; line-height: 0; content: \\\" \\\"; clear: both; height: 0; width: 0; } \\n\")), mdx(\"p\", null, \"In fact, this will create an invisible division after any dom element that has the clear-fix class. It will act the same as the old way to do it with an empty division with the clear:both style. But it's cleaner.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"9dc2717f-3389-5a73-9d6c-bfe887056335","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}