{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-unit-test-a-method-that-return-an-anonymous-type",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to unit test a method that return an anonymous type?","date":"April 2, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to unit test a method that return an anonymous type?\",\n  \"date\": \"2012-04-02\",\n  \"categories\": [\"asp-mvc\", \"c-sharp\", \"dynamic\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's really easy to have in ASP.NET MVC a function that return an anonymous type. I say in ASP.NET MVC but this could be also in ASP.NET. In fact, when you have an action inside a controller that return a JsonResult you can simply return an anonymous type and Javascript will be able to handle it as simple as using the same syntax that you would use with object in C#.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public JsonResult Update(MyObject o) { //... return Json(new { IsSaved = false, Id = 123}); } \\n\")), mdx(\"p\", null, \"In Javascript you would use :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"//...Ajax call success: function (data) { var x = data.IsSaved; var xx = data.Id; } \\n\")), mdx(\"p\", null, \"To unit test this scenario, you need to do two things. First, you need to use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" keyword of .Net to be able to receive from the controller the response of the action which is anonymous.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" dynamic returnedData = myController.Update(new MyObject()); \\n\")), mdx(\"p\", null, \"The problem is that everything that has been generated as anonymous in a DLL stay internal. If you are doing you unit testing in a separated assembly (DLL) you will need to explicitly say that you want to share internal values with another assembly. This can be done by modifying the assembly configuration by editing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AssemblyInfo.cs\"), \". You need to open the file AssemblyInfo.cs of the tested controller and add the following statement.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [assembly: InternalsVisibleTo(\\\"Tests.Unit\\\")] \\n\")), mdx(\"p\", null, \"This will give the permission to see internal to the unit testing project called \\\"Tests.Unit\\\".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"69eddefd-d60f-5e95-8306-97f3086d2c6f","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}