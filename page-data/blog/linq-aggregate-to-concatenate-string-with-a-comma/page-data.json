{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/linq-aggregate-to-concatenate-string-with-a-comma",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Linq Aggregate to concatenate string with a comma","date":"April 1, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linq Aggregate to concatenate string with a comma\",\n  \"date\": \"2013-04-01\",\n  \"categories\": [\"c-sharp\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you have an array that you want to flatten into a string with a comma between each entry, you could use Linq with a one liner delegate to reach this goal.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string flatten = inputs.Aggregate((current, next) => string.Format(\\\"{0}, {1}\\\", current, next)) \\n\")), mdx(\"p\", null, \"This is quite powerful as you can see, you do not have to do validation to know if you have reach the last entry to not add a trailing comma. Without Linq and the aggregate function, you would have to loop and to verify this condition.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" string flatten = string.Empty; for(int i = 0 ; i < inputs.Length ; i++) { if(i!=(i.Length-1)) { flatten += str + \\\", \\\"; } else { flatten += str; } } \\n\")), mdx(\"p\", null, \"I don't know for you, but I found more easy to read the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Aggregate\"), \" method than the second snippet of code.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6bfa4b15-b68b-5feb-a822-e32bbf37ad98","totalPages":68}},
    "staticQueryHashes": ["3159585216"]}