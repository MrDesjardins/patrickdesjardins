{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/rust-how-to-debug-cli-",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to debug Rust CLI application with VsCode using Windows","date":"November 21, 2022"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to debug Rust CLI application with VsCode using Windows\",\n  \"date\": \"2022-11-21\",\n  \"categories\": [\"rust\", \"vscode\", \"debug\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Prerequisites\"), mdx(\"p\", null, \"Before debugging using Visual Studio Code (VSCode), you need to have VsCode and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\"\n  }, \"CodeLLDB extension\"), \".\"), mdx(\"h1\", null, \"Launch File\"), mdx(\"p\", null, \"VsCode's debug configuration file is under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vscode/launch.json\"), \". You need two entries: one for your executable (command line) to test the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cli\"), \" and one for the unit tests.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"version\\\": \\\"0.2.0\\\",\\n  \\\"configurations\\\": [\\n    {\\n      \\\"type\\\": \\\"lldb\\\",\\n      \\\"request\\\": \\\"launch\\\",\\n      \\\"name\\\": \\\"Debug executable 'rust-p2p-chat'\\\",\\n      \\\"cargo\\\": {\\n        \\\"args\\\": [\\\"build\\\", \\\"--bin=rust-p2p-chat\\\", \\\"--package=rust-p2p-chat\\\"],\\n        \\\"filter\\\": {\\n          \\\"name\\\": \\\"rust-p2p-chat\\\",\\n          \\\"kind\\\": \\\"bin\\\"\\n        }\\n      },\\n      \\\"args\\\": [\\n        \\\"--ip\\\",\\n        \\\"127.0.0.1\\\",\\n        \\\"--port\\\",\\n        \\\"8077\\\",\\n        \\\"--username\\\",\\n        \\\"YourNameHere\\\"\\n      ],\\n      \\\"cwd\\\": \\\"${workspaceFolder}\\\"\\n    },\\n    {\\n      \\\"type\\\": \\\"lldb\\\",\\n      \\\"request\\\": \\\"launch\\\",\\n      \\\"name\\\": \\\"Debug unit tests in executable 'rust-p2p-chat'\\\",\\n      \\\"cargo\\\": {\\n        \\\"args\\\": [\\n          \\\"test\\\",\\n          \\\"--no-run\\\",\\n          \\\"--bin=rust-p2p-chat\\\",\\n          \\\"--package=rust-p2p-chat\\\"\\n        ],\\n        \\\"filter\\\": {\\n          \\\"name\\\": \\\"rust-p2p-chat\\\",\\n          \\\"kind\\\": \\\"bin\\\"\\n        }\\n      },\\n      \\\"args\\\": [],\\n      \\\"cwd\\\": \\\"${workspaceFolder}\\\"\\n    }\\n  ]\\n}\\n\")), mdx(\"p\", null, \"One detail that is not obvious is how to have default arguments for your executable. The configuration has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"args\"), \" property that allows an array of arguments. Each element of the array must be what you would separate by a space. For example, if you type normally \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myApp.exe --argument1 value1\"), \", then in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"args\"), \", you write:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"args\\\": [\\n  \\\"--argument1\\\",\\n  \\\"value1\\\",\\n]\\n\")), mdx(\"p\", null, \"Of course, all the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rust-p2p-chat\"), \" needs to change for your application name. The good news is that if your project does not have any launch.json file, you can have VsCode generates the scaffolding for you. Then, only the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"args\"), \" is needed to fill.\"), mdx(\"h1\", null, \"How to debug?\"), mdx(\"p\", null, \"The last step is to set a breakpoint. Click on the left side gutter of the editor next to the line number. A red dot appears, then you can launch the application using the VsCode \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Run and Debug\"), \" using the configuration to debug the executable. The editor will stop once the program reaches the line with the breakpoint.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f5e10348-0747-5e80-a04c-d61ffed0e8a2","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}