{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/learning-lsof-awk-by-killing-a-process",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Learning the Linux Command Line lsof and awk by Killing a Process that Hold a Port","date":"September 19, 2023"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning the Linux Command Line lsof and awk by Killing a Process that Hold a Port\",\n  \"date\": \"2023-09-19\",\n  \"categories\": [\"linux\", \"command line\", \"cli\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Goal and Context\"), mdx(\"p\", null, \"Developing web applications and services requires opening ports on a machine. In some situations, a process using a port might die without releasing the port -- the process is dead but runs in the background, keeping the port reserved. Thus, the solution is to kill the process. Sometimes, some ports might be used by many different processes in different periods of time. Therefore, having a process keeping a port in hostage happens. The solution is to find the process who is holding the port and killing it.\"), mdx(\"p\", null, \"In this article, we will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \" to find the process of who is holding the port and using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill -9\"), \" to kill it. A third tool is needed to combine the information of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill\"), \", which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awk\"), \".\"), mdx(\"h1\", null, \"Finding the process id by a port number: Lsof\"), mdx(\"p\", null, \"The command line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \" is natively available in Linux. The letters of the tool are for \\\"LiSt Open File\\\".\"), mdx(\"p\", null, \"The trick is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-i\"), \" which allows to find a file that matches a specific address. Many combinations vary for ipv4 or ipv6 or different protocols. In my case, the port I want to kill most of the time is for a web server, a docker container, or a port used in Visual Studio Code (VsCode) for debugging. They are all using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tcp\"), \". Thus, using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof -i tcp:9229\"), \" gives the information.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"lsof -i tcp:9229\\n\\nCOMMAND PID USER FD TYPE DEVICE\\nnode 19005 pdesjardins 26u IPv4 ox033434234\\n\")), mdx(\"p\", null, \"The output is simplified but has the information needed: the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PID\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pid\"), \" is the process identifier that is needed to pass to the next command line.\"), mdx(\"h1\", null, \"Grabbing the last line: Tail\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tail\"), \" command line allows to read a specific line from the end of a file. A file can be the output of a command line. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tail\"), \" is a way to skip the header of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \". The following command uses the option \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-n 1\"), \", which returns the last line.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"lsof -i tcp:9229 | tail -n 1\\n\\nnode 19005 pdesjardins 26u IPv4 ox033434234\\n\")), mdx(\"h1\", null, \"Grabbing a record: Awk\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awk\"), \" command scans for a pattern. Awk has an option to scan each tab. The PID is on the second record (tab).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"lsof -i tcp:9229 | tail -n 1 | awk '{print $2}' \\n\\n19005\\n\")), mdx(\"h1\", null, \"Knowing your Tools\"), mdx(\"p\", null, \"As I wrote this blog post, I looked further the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \" documentation and found out about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-t\"), \" option. The option provides a terse output with only the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pid\"), \", meaning that the information can be piped to kill. It means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awk\"), \" can be removed by using:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"lsof -i tcp:9229 -t\\n\")), mdx(\"h1\", null, \"Killing the process: Kill\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill\"), \" command sends a signal to a process using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PID\"), \". Killing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill -9 <pid here>\"), \" instantly kills the process.\\nHowever, another tool is needed to inject the PID into a command argument: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xargs\"), \".\"), mdx(\"h1\", null, \"xargs: Passing the PID from Lsof to Kill\"), mdx(\"p\", null, \"The last step is to send the process id to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill\"), \" from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xargs\"), \" executes a command line and can use a pattern to replace a string by a value. In our case, the pattern is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{pid}\"), \" and will be replaced by the piped PID. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xargs\"), \" uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-I\"), \" to specify the string to replace. Then, the command is specified with its option. The command needs to use the string, for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{pid}\"), \", which will be replaced by the value piped. If more than one value is passed, then the command will be executed several times with each value.\"), mdx(\"p\", null, \"The final script:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"lsof -i tcp:9229 -t | xargs -I {pid} kill -9 {pid}\\n\")), mdx(\"h1\", null, \"Conclusion\"), mdx(\"p\", null, \"Ultimately, three tools were needed: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lsof\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xargs\"), \" and kill. Learning about the tool helped to reduce the complexity by removing two additional tools (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awk\"), \").\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"28a8f443-3672-57c9-88fa-ec70ecb0861a","totalPages":77}},
    "staticQueryHashes": ["3159585216"]}