{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/how-to-create-a-mapping-to-a-primitive-type-with-automapper",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to create a mapping to a primitive type with AutoMapper.","date":"November 30, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create a mapping to a primitive type with AutoMapper.\",\n  \"date\": \"2012-11-30\",\n  \"categories\": [\"automapper\", \"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you want to map one of your complex object to a primitive you cannot use the ForMember method of Automapper to do it. Instead, you have to use the ConvertUsing.\"), mdx(\"p\", null, \"Here is a case of ComplexType which reprensent a boolean value. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" Mapper .CreateMap<ComplexType, bool>() .ConvertUsing(f=>f.ID);\\n\\nMapper .CreateMap<bool, ComplexType>() .ConvertUsing(f => new ComplexType(f)); \\n\")), mdx(\"p\", null, \"This is usefull if you have view models that represent primitive data and you want them to be represented into a view model object.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"389f5850-b7c8-5006-9d42-f658bd962811"}},
    "staticQueryHashes": ["3159585216"]}