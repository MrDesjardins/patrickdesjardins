{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/xamlparseexception-failed-to-create-a-system-windows-input-icommand-from-the-text",
    "result": {"data":{"mdx":{"frontmatter":{"title":"XamlParseException: failed to create a 'System.Windows.Input.ICommand' from the text","date":"October 10, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"XamlParseException: failed to create a 'System.Windows.Input.ICommand' from the text\",\n  \"date\": \"2011-10-10\",\n  \"categories\": [\"silverlight\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"XamlParseException: failed to create a 'System.Windows.Input.ICommand' from the text\")), mdx(\"p\", null, \"This error can occur when binding a Command inside a Xaml file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <Button Command=\\\"MyCommand\\\"> Click Me </Button> \\n\")), mdx(\"p\", null, \"In fact, the problem with this syntax reside in the way we call the command. The previous example were not using the Binding syntax.\"), mdx(\"p\", null, \"You need to use the Binding keyword.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <Button Command=\\\"{Binding MyCommand}\\\"> Click Me </Button> \\n\")), mdx(\"p\", null, \"Of course, you need bind to a ICommand property to the desired command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public ICommand MyCommand { get { return .... } } \\n\")), mdx(\"p\", null, \"Hope this help some body that has this error.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"36efcb38-2c2a-5fa5-b939-b7f08e1de74c","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}