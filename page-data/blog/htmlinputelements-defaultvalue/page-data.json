{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/htmlinputelements-defaultvalue",
    "result": {"data":{"mdx":{"frontmatter":{"title":"HTMLInputElement's defaultValue","date":"April 17, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"HTMLInputElement's defaultValue\",\n  \"date\": \"2012-04-17\",\n  \"categories\": [\"javascript\", \"web\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Did you know that you can know the original value written by the server to the client by calling:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"var originalName = document.getElementById(\\\"txtUserName\\\").defaultValue;\\n\")), mdx(\"p\", null, \"Yes, the Dom contain for every Html element of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTMLInputElement\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTMLTextAreaElement\"), \" the possibility to access the original value. This is interesting to know if a form has dirty inputs. It's also interesting because it removes the need to hide values into hidden fields or to hide into a Javascript object all original values.\"), mdx(\"p\", null, \"From the ECMAScript's specification we can see that it's a property that return a string. It's also possible to know if the value was originally checked in the case of a checkbox with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"defaultChecked\"), \".\"), mdx(\"p\", null, \"From here it's easy to know if a Html form is dirty (has something changed). We just need to loop through all inputs and compare.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function TestDirty(){\\n  var formDirty = false;\\n  $('#frm :input').each( function(){\\n\\n  if($(this).is(\\\"input\\\")) {\\n    //alert('Name :' + $(this).attr('name') + \\\">\\\" +$(this).val()+ \\\" != \\\" + $(this)[0].defaultValue);\\n    var type = $(this).attr('type');\\n    if (type == \\\"checkbox\\\" || type == \\\"radio\\\") {\\n\\n      if ($(this).is(':checked') != $(this)[0].defaultChecked) {\\n        //alert('Form dirty by' + $(this).attr('name') + \\\">\\\" +$(this).is(':checked')+ \\\" != \\\" + $(this)[0].defaultChecked);\\n        formDirty = true;\\n        }\\n      } else if (type == \\\"hidden\\\" || type == \\\"password\\\" || type == \\\"text\\\") {\\n          if ($(this).val() != $(this)[0].defaultValue) {\\n            //alert('Form dirty by' + $(this).attr('name') + \\\">\\\" +$(this).val()+ \\\" != \\\" + $(this)[0].defaultValue);\\n            formDirty =true;\\n          }\\n        } \\n    } else { \\n      var type = $(this).get(0).tagName; \\n      if (type == \\\"TEXTAREA\\\") { \\n        if ($(this).val() != $(this)[0].defaultValue) { \\n          //alert('Form dirty by' + $(this).attr('name') + \\\">\\\" +$(this).val()+ \\\" != \\\" + $(this)[0].defaultValue); \\n          return formDirty; \\n        } \\n      } else(type == \\\"SELECT\\\") { \\n        alert('Form dirty by ' + $(this).attr('name') + \\\">\\\" +$(this).val()+ \\\" != \\\" + $(this)[0].defaultSelected); \\n        if ($(this).val() != $(this)[0].defaultSelected) { \\n          //alert('Form dirty by' + $(this).attr('name') + \\\">\\\" +$(this).val()+ \\\" != \\\" + $(this)[0].defaultValue); \\n          return formDirty; \\n        } \\n      } \\n    }\\n  });\\n\\n  return formDirty; \\n}\\n\")), mdx(\"p\", null, \"You can have the above code functional \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jsfiddle.net/r8PH4/20/\"\n  }, \"here\"), \". The only case that doesn't seem to work is the select box which the value is undefined. If someone has the code to fix it, feel free to post it.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\"\n  }, \"ECMAScript specification about defaultValue\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.w3schools.com/jsref/prop_text_defaultvalue.asp\"\n  }, \"DefaultValue W3C reference\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"289b2dc4-7d90-5761-96cd-456642319c6f","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}