{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-secure-your-web-api-controller-globally-without-having-to-use-authorize-attribute",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to secure your Web Api Controller globally without having to use Authorize attribute","date":"May 5, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to secure your Web Api Controller globally without having to use Authorize attribute\",\n  \"date\": \"2013-05-05\",\n  \"categories\": [\"asp-mvc\", \"webservices\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web Api\"), \" of .Net 4.5 framework and want to have the same behavior of Asp.Net MVC which let you have global authorization set to every http request, than you need to configure your website differently.\"), mdx(\"p\", null, \"In Asp.Net you would add a new filter to the FilterConfig file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); filters.Add(new AuthorizeAttribute()); } \\n\")), mdx(\"p\", null, \"But, this won't work with the Api controller. You have to set the AuthorizeAttribute to the WebApiConfig file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public static void Register(HttpConfiguration config) { config.Routes.MapHttpRoute( name: \\\"DefaultApi\\\", routeTemplate: \\\"api/{controller}/{id}\\\", defaults: new { id = RouteParameter.Optional } );\\n\\nconfig.Filters.Add(new AuthorizeAttribute()); } \\n\")), mdx(\"p\", null, \"From here, every method of all your controllers will require authorization. If you want to remove this required authorization for specific web method, you need to add the attribute \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"[AllowAnonymous]\"), \". You can have additional information directly at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.asp.net/web-api/overview/security/authentication-and-authorization-in-aspnet-web-api\"\n  }, \"Microsoft\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2a622e7e-0c71-56a0-ba8d-a788211b5d4d","totalPages":70}},
    "staticQueryHashes": ["3159585216"]}