{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2017/typescript-react-and-redux-part-4-multiple-returns-from-action-creator/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"TypeScript, React and Redux Part 4 : Multiple Returns from Action Creator","date":"September 27, 2017"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript, React and Redux Part 4 : Multiple Returns from Action Creator\",\n  \"date\": \"2017-09-27\",\n  \"categories\": [\"react\", \"typescript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this article, we will see how to execute more than a single action from a single call to an action creator. This will be useful for a scenario like requesting data where we expect the action creator to dispatch a loading state to have the user interface showing a loading animation and to invoke another dispatch when the data is received which stop the loading animation and load the information on the screen.\"), mdx(\"p\", null, \"Previously, the action creator was returning an interface from the action. This means that the action creator was calling the action and this one was returning the type and values. The problem with this approach is that most of the time, an action is executed with a fast response and a second one was sent with the actual result. The first call allows to setup the user interface to display a spinner or any kind of loading experience, while the second one will stop this loading state to display the actual content.\"), mdx(\"p\", null, \"This is where the middleware concept of Redux get in place. For the purpose of this article, we won't go into detail about how middle-ware works, but will just use the open source middle-ware called \\\"Thunk\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" npm install --save redux-thunk npm install --save-dev @types/redux-thunk \\n\")), mdx(\"p\", null, \"This will allow us to return a Thunk Action instead of an object, which allows us to dispatch as many responses we want.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { ThunkAction } from \\\"redux-thunk\\\"; import { Dispatch } from \\\"redux\\\";\\n\\nexport function applyFilter(): ThunkAction<void, IAppState, void> { return (dispatch: Dispatch<IUpdateFilterAction>, getState: () => IAppState, extra: any) => { setTimeout(() => { const fakePayload = {} as IResults; // Simulate date from response through Ajax response dispatch(actionApplyResponse(fakePayload)); }, 1500);\\n\\nreturn dispatch(actionApplyRequest()); }; } \\n\")), mdx(\"p\", null, \" In this example, we can see that we are referencing the ThunkAction class and Dispatch. The ThunkAction is the returned type which takes three type in its generic signature. The first one is the returned type we expect. In that case, I do not return anything, thus it is \\\"void\\\". The second parameter is the type of the state in the store. This is useful because it allows us to interrogate the store inside the action creator. This is useful for validation purposed but also to computer possible value from existing values. The last type is any extra value to use. The example shows that the actionApplyRequest action is dispatched immediately and that the actionApplyReponse is dispatched 1.5 seconds later.\"), mdx(\"p\", null, \"In this article, we brought a new dependency called Thunk that allows us to dispatch multiple actions instead of returning a single action. This allows us to handle an asynchronous scenario like fetching data from a remote source. This approach gave us the capability to consult the store as well which opens endless possibility in term of validations, data to use for data manipulation and so on.\"), mdx(\"h3\", null, \"Articles of the series:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-react-and-redux-part-1-the-big-picture\"\n  }, \"TypeScript, React and Redux\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-react-and-redux-part-2-creating-the-store-and-the-reducer\"\n  }, \"TypeScript and Redux Store\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-react-and-redux-part-3-binding-the-store-and-component\"\n  }, \"TypeScript Redux Store Binding\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-react-and-redux-part-4-multiple-returns-from-action-creator\"\n  }, \"TypeScript Redux Action Creators\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./typescript-react-and-redux-part-5-reducer-with-different-actions\"\n  }, \"TypeScript, React and Redux Part 5 : Reducer with Different Actions\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"9ccb6cc2-1a48-5291-a071-98fe742a8c87","slug":"2017/typescript-react-and-redux-part-4-multiple-returns-from-action-creator","__params":{"slug":"2017"}}},
    "staticQueryHashes": ["3159585216"]}