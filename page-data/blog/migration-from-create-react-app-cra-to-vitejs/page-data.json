{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/migration-from-create-react-app-cra-to-vitejs",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Migration from Create React App CRA to ViteJS","date":"March 2, 2023"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Migration from Create React App CRA to ViteJS\",\n  \"date\": \"2023-03-02\",\n  \"categories\": [\"react\", \"vitejs\", \"cra\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What is Create React App?\"), mdx(\"p\", null, \"Create React App (CRA) has been around since 2016 and has been a delight since its origin. CRA allows starting coding fast by avoiding the recurrent problem with a project to configure its tools. The web development ecosystem surrounding JavaScript has been 2010 changing a lot with tools that require expertise while continually evolving and changing direction. CRA fixed abstract the configuration of WebPack and other tools into a single command line. Under the tool, a local server runs for you with many capabilities to make you focus on your code and when ready to ship the code with another command.\"), mdx(\"h1\", null, \"Why Migrate?\"), mdx(\"p\", null, \"However, the positivity around CRA shifted recently, and the movement got amplified with a few online community influencers.\"), mdx(\"p\", null, \"I was still recommending CRA for a new project in 2022. It has been simple and stable since 2016 and was not jumping into the latest trend. However, many people want to have the option to try the latest, and CRA needs to be actively maintained. Releases could be faster with many old dependencies.\"), mdx(\"p\", null, \"However, this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/reactjs/reactjs.org/pull/5487\"\n  }, \"Github's thread\"), \" got a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/reactjs/reactjs.org/pull/5487#issuecomment-1409720741\"\n  }, \"response\"), \" from one of the most popular maintainer of React: Dan Abranov. The discord around CRA is mostly fueled by developers building public applications. However, for people working on internal web applications, it does not matter since most arguments are around server-side rendering (SSR) that CRA does not provide. Hence, I always favor no SSR solution, like CRA for internal tool because they are simpler to users and avoid several issues like requiring a server to run the web application or opening unnecessary server-side solution which split the code with client/server logics making in the process everything harder to grasp. Dan Abramov points this particular point as well in the response:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This doesn't even mean necessarily depending on a Node.js server. Many popular frameworks don't require a server and can work in SSG mode, so they can address the \\\"fully static\\\" use cases too.\")), mdx(\"p\", null, \"So, why did I migrate from CRA to ViteJS? Because it was getting harder to get other tools to work without ejecting or using an alternative solution like Craco that is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dilanx/craco/issues/426\"\n  }, \"not actively supported\"), \". In particular, I wanted to use an absolute reference to point to a Git submodule.\"), mdx(\"h1\", null, \"Why ViteJS?\"), mdx(\"p\", null, \"There are plenty of solutions to replace CRA. It is problematic with so much fragmentation to pick one that will last for the long term without having too much of a learning curve. React does provide a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://beta.reactjs.org/learn/start-a-new-react-project\"\n  }, \"list of alternatives\"), \" but some of them are questionable, like using GatbyJS with simple \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby/discussions/37200#discussioncomment-4538715\"\n  }, \"migration that does not work\"), \". ViteJS is lightweight, and does not impose custom routing or mechanisms unique to ViteJS. Similar to CRA with a more active development and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://2022.stateofjs.com/en-US/libraries/#tier_list\"\n  }, \"well respected at the top position of 2022\"), \".\"), mdx(\"h1\", null, \"Migration Steps\"), mdx(\"h2\", null, \"Migration Step 1: Install NPM Packages\"), mdx(\"p\", null, \"The first step is to install ViteJS and a few dependencies. You may have to install more or less depending on your project. In my case, I wanted to have ViteJS and the absolute path capability. Thus, I'll describe the step to migrate CRA to ViteJS using TypeScript and absolute path.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install --save-dev vite @vitejs/plugin-react vite-tsconfig-paths\\n\")), mdx(\"p\", null, \"There is nothing particular to install for TypeScript. Vite supports TypeScript.\"), mdx(\"h2\", null, \"Migration Step 2: ViteJS Configuration File\"), mdx(\"p\", null, \"A single TypeScript file must be present at the root of your project, next to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file. The file name is: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vite.config.ts\"), \". The content varies depending on your need. In my case:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"/// <reference types=\\\"vitest\\\" />\\nimport path from \\\"path\\\";\\nimport { defineConfig } from 'vite';\\nimport react from '@vitejs/plugin-react';\\nimport viteTsconfigPaths from 'vite-tsconfig-paths';\\n\\nexport default defineConfig({\\n  plugins: [react(), viteTsconfigPaths()],\\n  build: {\\n    outdir: \\\"build\\\"\\n  },\\n  server: {\\n    open: true,\\n    port: 3000\\n  },\\n  preview: {\\n    port: 8000,\\n    open: false\\n  },\\n  test: {\\n    globals: true,\\n    environment: \\\"jsdom\\\",\\n    setupFiles: \\\"./src/setupTest.ts\\\",\\n    coverage: {\\n      reportDirectory: \\\"./coverage\\\",\\n      clean: false,\\n      reporter: [\\\"cobertura\\\", \\\"text\\\", \\\"html\\\"],\\n      exclude: [\\\"node_modules/\\\"]\\n    },\\n  }\\n});\\n\")), mdx(\"p\", null, \"The plugins are to work with React and to handle TypeScript alias path from the .tsconfig.json file. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"viteTsconfigPaths\"), \" plugins allows to not have to add a configuration similar to TypeScript to define the path for each alias. For example, the following code is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" needed if you use the plugin (if you have the alias defined in your TypeScript configuration file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"resolve: {\\n  alias: {\\n    \\\"@myaliashere\\\" : path.resolve(__dirname, \\\"./packages/mypackagehere\\\")\\n  }\\n},\\n\")), mdx(\"p\", null, \"The build configuration is to push the building code to the same place CRA used.\"), mdx(\"p\", null, \"The server and preview are the configurations for the local development server (port 3000) and the build for the deployment server (port 8000). It would help if you had these configurations explicitly to mimic CRA values. One important configuration is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \" that must be set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" otherwise your continuous  integration system (CI) might fail with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spawn xdg-open\"), \" exception. \"), mdx(\"p\", null, \"The resolve indicates the path for an alias.\"), mdx(\"p\", null, \"The test section gives the coverage output configuration and how to handle tests in general. An important point if you are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Docker\"), \" is to ensure that you have a volume to the specified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reportDirectory\"), \" to allow the CI to access the result. Also, you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"must\"), \" set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clean\"), \" option to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \". Otherwise, vstest execute a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rmdir\"), \" to the specified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reportDirectory\"), \" which will thrown an exception (error). The reason is that Docker with the volume will hold the folder and prevent any deletion.\"), mdx(\"h2\", null, \"Migration Step 3: Index.html\"), mdx(\"p\", null, \"With CRA, the index.html is in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public\"), \" folder. With ViteJS, the index.html is inside the root folder, next to the package.json file (and the vite.config.ts file). Besides moving the file, you need to edit the index.html. First, remove all mention of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%PUBLIC_URL%\"), \". You do not need to replace it with anything -- just remove it. Second, you need to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"script\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module\"), \". Here is what is needed without the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" portion, which should be the same (without \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%PUBLIC_URL%\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/index.tsx\\\"></script>\\n  </body>\\n</html>\\n\")), mdx(\"h2\", null, \"Migration Step 4: TypeScript\"), mdx(\"p\", null, \"TypeScript changes are limited to adding two types: one for Vite and one for Vitest (the test framework that replaces Jest).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"types\\\": [\\\"vite/client\\\", \\\"vitest/globals\\\"]\\n\")), mdx(\"p\", null, \"Then, you need to create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vite-env.d.ts\"), \" with this single line:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"/// <reference types=\\\"vite/client\\\" />\\n\")), mdx(\"h2\", null, \"Migration Step 5: Environment Variable\"), mdx(\"p\", null, \"React uses the prefix \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"REACT_APP_\"), \" before each environment variable. Vite uses a different prefix but also a position to store the values. CRA stores the value directly in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" but ViteJS stores the value under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import.meta.env\"), \".\"), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"process.env.REACT_APP_myvar;\\n// Become\\nimport.meta.env.VITE_myvar\\n\")), mdx(\"p\", null, \"The change is fast by performing a search and replaces of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env.REACT_APP_\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import.meta.env.VITE_\"), \" and you are good to go.\"), mdx(\"h2\", null, \"Migrating Step 6: Package.json\"), mdx(\"p\", null, \"You need to change the CRA commands for Vite commands.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"scripts\\\": {\\n  \\\"start\\\": \\\"vite\\\",\\n  \\\"build\\\": \\\"tsc && vite build\\\",\\n  \\\"serve\\\": \\\"vite preview --host\\\",\\n  \\\"test\\\": \\\"NODE_OPTIONS=\\\\\\\"\\\\\\\" vitest run\\\",\\n  \\\"test:watch\\\": \\\"NODE_OPTIONS=\\\\\\\"\\\\\\\" vitest watch\\\",\\n  \\\"test:cov\\\": \\\"NODE_OPTIONS=\\\\\\\"\\\\\\\" vitest run --coverage\\\"\\n},\\n\")), mdx(\"p\", null, \"You can see that the test change the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_OPTIONS\"), \" to nothing. In my case, the Dockerfile injected some certificate with the SSL option, causing the vitest to fail.\"), mdx(\"p\", null, \"Another detail is to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--host\"), \" which will allow the IP to be beyond the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost\"), \". In the case you are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Docker\"), \" in Kubernetes, you want to serve outside your \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pod\"), \" meaning you need to expose your server to the outside.\"), mdx(\"h1\", null, \"Conclusion\"), mdx(\"p\", null, \"The migration was quick when looking at it from the perspective of the project size I had to migrate. It wasn't without a hiccup but was smoother than expected as barely any code in change was needed, except for the environment variables and few options to turn on and off. The changes were all configurations to fit the previous CRA or to get ViteJS into the project. Tests were still using the describe/it mechanism and the same assertion, the React components remained unchanged, and the development commands remained the same. One positive aftermath of the migration wast the compilation speed, which drastically improved with over twice fast to build and instantly for development hot-reload behavior.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"5450013f-c8ee-5e4e-a170-148d5d6aca27","totalPages":75}},
    "staticQueryHashes": ["3159585216"]}