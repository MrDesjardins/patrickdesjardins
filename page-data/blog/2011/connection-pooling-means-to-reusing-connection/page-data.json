{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2011/connection-pooling-means-to-reusing-connection/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Connection pooling means to reuse database connection","date":"September 21, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Connection pooling means to reuse database connection\",\n  \"date\": \"2011-09-21\",\n  \"categories\": [\"ado-net\", \"sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Connection Pooling\"), \" is handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Connection Manager\"), \" to reuse available connection instead of creating a new one. This is performance wise because the system won't create and kill connection every time a database is require. This is also very true for web application that not only a same user may call multiple time the database per page but also go in multiple page and this is done by many users. To activate Pooling, add in the collection string \\\"Pooling=True;\\\", that's it.\"), mdx(\"p\", null, \"To use connection pooling suffices to change the connection string. From there you can select the size of the pool and many other options.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Default value for the pool size is 100\")), mdx(\"p\", null, \"The way pooling works does not involve any modification or special behavior for the database. It's all code handled. All ADO.NET provider can use this mechanism.\"), mdx(\"p\", null, \"Also, pooling does not have any huge disadvantage and than should always be activated. The only moment it can be bright to turn it off is when debugging connection problem.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"56d0497a-cd40-5813-806c-3d8b3be65cec","slug":"2011/connection-pooling-means-to-reusing-connection","__params":{"slug":"2011"}}},
    "staticQueryHashes": ["3159585216"]}