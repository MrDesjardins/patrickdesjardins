{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2011/model-defined-function-with-entity-framework/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Model Defined Function with Entity Framework","date":"September 18, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Model Defined Function with Entity Framework\",\n  \"date\": \"2011-09-18\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Entity Framework let you create Model Defined Function that is function that will be executed server side.\"), mdx(\"p\", null, \"Let say that you you have a table with 3 columns : idProduct, Quantity, Price. You want to have the total amount for each rows. In Sql you would have done something like\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \" SELECT idProduct, Quantity, Price, Quantity*Price as Total FROM Product \\n\")), mdx(\"p\", null, \"You could also get this total with a Linq to Entity query like\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var allRows = db.Products.Select(prod=>;new Product(prod.idProduct, prod.Quantity, prod.Price, prod.Quantity * prod.Price); \\n\")), mdx(\"p\", null, \"The problem is that with bigger mathematics function that may require more than 2 fields on a lot of objects, this would require you to get a lot of data for the calculus. If you just need the total, instead of returning the price, quantity, etc you just need to use the model defined function and you are ready.\"), mdx(\"h2\", null, \"Defining the Model Defined Function\"), mdx(\"p\", null, \"The first step is to open the Entity Model (.edmx) file in XML. The second step is to search for the CSDL section (you can search for \\\"edmx:ConceptualModels\\\"). Inside this, you need to add your function inside the schema tag.\"), mdx(\"p\", null, \"Here is an example: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \" <Function Name=\\\"Total\\\" ReturnType=\\\"Decimal\\\">; <Parameter Name=\\\"p\\\" Type=\\\"NorthwindModel.Product\\\" />; <DefiningExpression>; (p.Price * p.Quantity) </DefiningExpression>; </Function>; \\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameter Name\"), \" is the name used in the calculus and the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Type\"), \" is the type of this parameter. This must be a type of the Entity Model. The mapping will be then done to the table in the database later. In the DefiningExpression you could use some SQL function like CAST.\"), mdx(\"p\", null, \"The third step is the add some C# code to be able to call this new function. This is where the EDMFunction attribute comes in action. This attribute need to be placed over a static method that will have the same return type of the one defined in the function attribute ReturnType. Also, the parameter need to be of the same type defined in the parameter element of the function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" [EdmFunction(\\\"Northwind\\\", \\\"Total\\\")] public static decimal Total(Product product) { throw new NotSupportedException(\\\"Totalcan only be used in a LINQ to Entities query\\\"); } \\n\")), mdx(\"p\", null, \"This static method can be placed where you want. You can insert this method in a class that hold all those EDMFunctions but the the best practice is to partial class the related class. This is perfect for a class generated by the Entity Framework because even if you synchronize it wont be erased. It's also good if you have POCO class because it won't dirty it with persisted functions. Do not forget to add the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Data.Objects.DataClasses\"), \" namespace.\"), mdx(\"h2\", null, \"How to use EDMFunction?\"), mdx(\"p\", null, \"The Entity Model Function is defined inside the CSDL tag, it's also defined in the C# and finally we can call it. As you have seen, this method is only a shell and does not have any code inside. It can only be executed on the server side.\"), mdx(\"p\", null, \"Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var result = (from p in db.Products select new { p.ProductID, DetailTotal = MyStaticClass.Total(p) }).ToList(); \\n\")), mdx(\"p\", null, \"And here you go!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f460c171-76c6-5289-bed9-7db119264c13","slug":"2011/model-defined-function-with-entity-framework","__params":{"slug":"2011"}}},
    "staticQueryHashes": ["3159585216"]}