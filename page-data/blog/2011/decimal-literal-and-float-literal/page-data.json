{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/2011/decimal-literal-and-float-literal/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Decimal literal and Float literal","date":"October 6, 2011"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Decimal literal and Float literal\",\n  \"date\": \"2011-10-06\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Some may don't know but if you want to write a double value in code you cannot write:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" double myVariable = 100; \\n\")), mdx(\"p\", null, \"This won't work because the value will be treated as an integer. To resolve this issue, the simplest way to do it is to mark it as decimal to the compiler with the suffix 'd' or 'D'.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" double myVariable = 100d; //or double myVariable = 100D; \\n\")), mdx(\"p\", null, \"The same thing is good for float type. Instead of using the literal 'd' or 'D' you need to use the character 'F' or 'f'.\"), mdx(\"p\", null, \"This is so basic that sometime you may wonder why Visual Studio mark it as an error. You could ask yourself also what is the character to mark a number into a specific type like double or float. Well, the first letter of each of type is the answer.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7cc2a121-6007-515a-a737-6dbdcc68ae7d","slug":"2011/decimal-literal-and-float-literal","__params":{"slug":"2011"}}},
    "staticQueryHashes": ["3159585216"]}