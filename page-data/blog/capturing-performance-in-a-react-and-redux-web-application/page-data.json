{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/capturing-performance-in-a-react-and-redux-web-application",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Capturing Performance in a React and Redux Web Application","date":"October 25, 2017"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Capturing Performance in a React and Redux Web Application\",\n  \"date\": \"2017-10-25\",\n  \"categories\": [\"javascript\", \"react\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recently, I started working a project and wanted to gather information in regard to performance. I wanted to have insight about where code could be improved over time. This means that I need to have entry points where I can collect metrics and send them to the server. In this article, I won't discuss the detail of how to send the information, but more about where to set these markers.\"), mdx(\"p\", null, \"Before anything, let's clarify the situation. This is a React application, that uses Redux as the way to manipulate the data flow. The application has container components that are connecting to the store through the \\\"connect\\\" React-Redux function. Presentation components will delegate back to the container component. Once an action occurs, the \\\"mapDispatchToProps\\\" of the corresponding container component calls the dispatch method The exact flow that React dispatch a call to the action creator. This latter can do some business logic and Ajax call to finally dispatch an action that will be intercepted reducers. Between the beginning of the call to the reducer and the end, middlewares can act upon the state. Finally, the \\\"mapStateToProps\\\" of the connected component is called and change the state of the component which will call the shouldComponentUpdate, the render and the componentDidUpdate.\"), mdx(\"p\", null, \"I\\u2019ve seen many places on the Internet that were placing performance markers in a middleware. I can understand the appealing reason of being easily injectable, but that doesn't cover the whole flow as I just described.\"), mdx(\"p\", null, \"The confirm what my hypothesis of having to start performance log right before the dispatch and the performance log to stop at the update method, let's do an experience with some console.log in 6 different places. The first one right before \\u201Cdispatching\\u201D to the action creator. One in the first line of the action creator, a third one in the render method of the component, and a fourth one in the componentDidUpdate. Finally, two console.log in a basic middleware invokes the console before and after the action.\"), mdx(\"p\", null, \"The order is:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Dispatch \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ActionCreator (first line) \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Middleware before action \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Middleware after action \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Component Render \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Component componentDidUpdate\")), mdx(\"p\", null, \"That being established, calling any kind of stop marker at a middleware level is preamptive. This is even truer if you are using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://facebook.github.io/react/docs/perf.html\"\n  }, \"Perf.start() and Perf.stop()\"), \" at the Middleware level.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"8ec8215b-3454-54a8-8b6b-409ca509871d","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}