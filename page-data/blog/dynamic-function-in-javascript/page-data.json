{
    "componentChunkName": "component---src-pages-blog-mdx-slug-tsx",
    "path": "/blog/dynamic-function-in-javascript",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Dynamic function in Javascript","date":"May 23, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic function in Javascript\",\n  \"date\": \"2012-05-23\",\n  \"categories\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some occasion, calling a dynamic function in Javascript can be useful. This is the case when you have a string that represent the name of the function that you want to execute. One way to do it it to use the EVAL keyword in Javascript. It's not the best way to do it, but it's the more known by developer. It let you evaluate Javascript in a string format. That mean that anything given to that function is executed on the client browser. This open a door to malicious code that could be executed if not well used. This is why, I'll show you a second approach that will not use the EVAL key work to execute dynamic method in Javascript.\"), mdx(\"p\", null, \"First of all, here is an example of code that execute a dynamic function with the EVAL keyword.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function myFunction { alert('Test'); }\\n\\nvar functionName = \\\"myFunction\\\"; //Dynamic builded var functionParameter = \\\"firstParameter, secondParameter\\\"; //Dynamic parameters var functionToCall = functionName + \\\"('\\\" + functionParameter + \\\"');\\\"; var ret = eval(functionToCall); \\n\")), mdx(\"p\", null, \"As you can see, we could had some kind of logic to choose the functionName. This could have been generated by the server side or could have been loaded from the database or a Web Service. The dangerous part is that someone could change the functionName to direct Javascript statements that could harm the user.\"), mdx(\"p\", null, \"Second, here is better approach that consist to use the window object to call the method. This, atleast, ensure that we are calling a function and not any Javascript statement. Howerver, it's still possible to be hacked and to executed harmful code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function myFunction { alert('Test'); }\\n\\nvar functionName = \\\"myFunction\\\"; //Dynamic builded var functionParameter = \\\"firstParameter, secondParameter\\\"; //Dynamic parameters var functionToCall = window[functionName]; var ret = functionToCall(functionParameter); \\n\")), mdx(\"p\", null, \"In both case, the important thing is not to EVAL data that has been inputted by the user. The executed dynamic code in Javascript must be generated by the developper that has build the system only.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f9b283bd-5286-5258-abbc-646e6806adbf"}},
    "staticQueryHashes": ["3159585216"]}