{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-use-unity-with-web-api",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to use Unity with Web API","date":"April 29, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to use Unity with Web API\",\n  \"date\": \"2013-04-29\",\n  \"categories\": [\"asp-mvc\", \"unity\", \"webservices\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Web Api controller are instantied by Asp.Net MVC framework and by default, the parameter less constructor is called. If you want to instantiate your class with your IoC, like Microsoft Unity, you will have to customize the instantiation of those Web Api Controller. The customized instanciator is called a Dependency Resolver and can be configured in the Global.asax.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class WebApiApplication : System.Web.HttpApplication { protected void Application_Start() { AreaRegistration.RegisterAllAreas();\\n\\nWebApiConfig.Register(GlobalConfiguration.Configuration); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles);\\n\\nUnityConfiguration.Initialize(); MapperConfiguration.Initialize(UnityConfiguration.Container.Resolve<IMapperFactory>()); UnityConfiguration.Container.Resolve<IDatabaseContext>().InitializeDatabase(); GlobalConfiguration.Configuration.DependencyResolver = new IoCContainer(UnityConfiguration.Container); } } \\n\")), mdx(\"p\", null, \"The first thing to do is to modify the Application_Start of your WebApi project. You need to execute the configuration of all your interface with Unity. In the example above, this is done by calling UnityConfiguration.Initialize() which Resolve every interface to a concrete class.\"), mdx(\"p\", null, \"The second thing to do is to set to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GlobalConfiguration\"), \" a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DependencyResolver\"), \" to a IocContainer that we will create to use Unity container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" internal class ScopeContainer : IDependencyScope { protected readonly IUnityContainer_container;\\n\\npublic ScopeContainer(IUnityContainer container) { if (container == null) { throw new ArgumentNullException(\\\"container\\\"); } this._container = container; }\\n\\npublic object GetService(Type serviceType) {\\n\\nif (!_container.IsRegistered(serviceType)) { if (serviceType.IsAbstract || serviceType.IsInterface) { return null; } } return_container.Resolve(serviceType); }\\n\\npublic IEnumerable<object> GetServices(Type serviceType) { return_container.IsRegistered(serviceType) ?_container.ResolveAll(serviceType) : new List<object>(); }\\n\\npublic void Dispose() {_container.Dispose(); } }\\n\\ninternal class IoCContainer : ScopeContainer, IDependencyResolver { public IoCContainer(IUnityContainer container):base(container) { }\\n\\npublic IDependencyScope BeginScope() { var child =_container.CreateChildContainer(); return new ScopeContainer(child); } } \\n\")), mdx(\"p\", null, \"The GetService is made in a way that it doesn't require you to register every controllers with Unity but only registered type will go through Unity.\"), mdx(\"p\", null, \"From here, every Web Api controllers will be instanced by passing by the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ScopeContainer\"), \" , which will check every parameters' type and resolve the type with Unity.\"), mdx(\"p\", null, \"The Web Api will create a new instance of Unity and dispose of it at every http request.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"fe1ce6c0-8285-57e1-9cde-bdd8babc96a8","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}