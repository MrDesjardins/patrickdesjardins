{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/what-is-the-difference-between-mapkey-vs-hasforeignkey",
    "result": {"data":{"mdx":{"frontmatter":{"title":"What is the difference between MapKey vs HasForeignKey?","date":"September 18, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What is the difference between MapKey vs HasForeignKey?\",\n  \"date\": \"2013-09-18\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can define association 1 to many and defining the relationship with both code snippet below. One is defined with a string, the other one with a property.\"), mdx(\"p\", null, \"HasRequired with association defined by string: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" this.HasRequired(a => a.Property1) .WithMany() .Map(a => a.MapKey(\\\"MyFK\\\")); \\n\")), mdx(\"p\", null, \"HasRequired with association defined by property: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" this.HasRequired(a => a.Property1) .WithMany() .HasForeignKey(a => a.MyFK); \\n\")), mdx(\"p\", null, \"Both mappings will create exactly the same database schema with a non nullable foreign key.\"), mdx(\"p\", null, \"The mapping with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MapKey\"), \" is used when you don't want to have the foreign key as a property in your model context class. This is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Independent Association\"), \".\"), mdx(\"p\", null, \"The mapping with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HasForeignKey\"), \" when the foreign key is a property in the model. This type is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Foreign Key Association\"), \".\"), mdx(\"p\", null, \"You can use the one you want. Personally, I prefer to use the HasForeignKey because it's strongly mapped and if the property name is refactored that I am sure that the property will follow.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"025a9abe-4d0f-599e-8c33-00b705538478","totalPages":72}},
    "staticQueryHashes": ["3159585216"]}