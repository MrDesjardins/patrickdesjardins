{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/working-with-biginteger-with-c-net-and-sql-server",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Working with BigInteger with C# .Net and Sql Server","date":"July 29, 2014"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Working with BigInteger with C# .Net and Sql Server\",\n  \"date\": \"2014-07-29\",\n  \"categories\": [\"c-sharp\", \"sql\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you must pass to a Store Procedure or just for a simple query a variable of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \" beware you can be surprised with the result. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \" in SqlServer has nothing to do with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInteger\"), \" class of .Net. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \" in Sql exists a long way before \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInteger\"), \" from .Net (4.0). If you are using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInteger\"), \" you will get a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"System.InvalidCastException\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An exception of type 'System.InvalidCastException' occurred in System.Data.dll but was not handled in user code\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Additional information: Failed to convert parameter value from a BigInteger to a Int64.\")), mdx(\"p\", null, \"To pass a value to Sql Server of type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BigInt\"), \", you must use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"long\"), \" in .Net.\"), mdx(\"p\", null, \"For example, here is how to pass a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"long\"), \" to SqlServer using SqlParameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" long myBigNumber = 1; var myParameter = new SqlParameter(\\\"@myParameterName\\\", myBigNumber) { SqlDbType = SqlDbType.BigInt }; \\n\")), mdx(\"p\", null, \"You have to use a long for the value, but you specify the type to be of SqlDbType.BigInt. Has you can see, we do not need to specify the DbType but only the SqlDbType. We are using a long because a long and Int64 is the same type.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"53383fc1-d682-56e6-9a13-522765940636","totalPages":73}},
    "staticQueryHashes": ["3159585216"]}