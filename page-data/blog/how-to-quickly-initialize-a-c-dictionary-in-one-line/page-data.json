{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/how-to-quickly-initialize-a-c-dictionary-in-one-line",
    "result": {"data":{"mdx":{"frontmatter":{"title":"How to quickly initialize a C# Dictionary in one line","date":"April 15, 2014"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to quickly initialize a C# Dictionary in one line\",\n  \"date\": \"2014-04-15\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I stumble into a situation where I had to fill up a dictionary but desire not to use the .Add method. The case appears to be frequent if you are using Help Helper of Asp.Net MVC. The reason is that if you want to add html attribute by Html Helper than you have to provide a dictionary of key-value that represent the attribute name and attribute value.\"), mdx(\"p\", null, \"Here is a class that represent a simple scenario. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class ColumnHeader { public IDictionary<string, string> Attributes { get; set; } } \\n\")), mdx(\"p\", null, \"If you want to initialize the property, than you can use new but also to double the curly braces. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" var col = new ColumnHeader{Attributes = new Dictionary<string, string>{{ \\\"attribute1\\\",\\\"value1\\\"}}}; \\n``` This is an example about how to add a single value into the dictionary. As you can see, we have a first curly brace to initialize the property itself and then we have the double curly brace that initialize the dictionary and the key value. If we wanted to initialize two items, we could by adding a comma after the curly brace for the key value.\\n\\n\\n```csharp\\n var col = new ColumnHeader{Attributes = new Dictionary<string, string>{{ \\\"attribute1\\\",\\\"value1\\\"},{ \\\"attribute2\\\",\\\"value2\\\"}}}; \\n\")), mdx(\"p\", null, \"Nothing more to said. Initializing a dictionary with C# without having to initialize it with the empty constructor and then adding individually every key-value is very straightforward.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"232ce331-cebb-555d-82b0-34168d1816c4","totalPages":74}},
    "staticQueryHashes": ["3159585216"]}