{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/entity-framework-with-poco-object-using-data-annotations-for-database-tables-columns-mapping",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Entity Framework with Poco object using Data Annotations for database tables columns mapping","date":"March 18, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework with Poco object using Data Annotations for database tables columns mapping\",\n  \"date\": \"2012-03-18\",\n  \"categories\": [\"entity-framework\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's possible when using Poco object with Entity Framework to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.columnattribute(v=VS.103).aspx\"\n  }, \"DataAnnotation\")), \" or to use the Fluent API.\"), mdx(\"p\", null, \"The DataAnnotation require to add a reference to \\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.columnattribute(v=VS.103).aspx\"\n  }, \"System.Component.Model.DataAnnotations\"), \"\\\"\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" using System.ComponentModel.DataAnnotations; \\n\")), mdx(\"p\", null, \"This is pretty easy but as the disadvantage to corrupt your Poco object with database indicator (columns name).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public class MyObject { public int ID { get; set; } [Column(\\\"Code_SuperWeirdTableColumnName\\\")] public string Code{ get; set; } [Column(\\\"Name_EN_USA\\\")] public string Name { get; set; } } \\n\")), mdx(\"p\", null, \"As you can see in the example above, the property Code is linked to Code_SuperWeirdTableColumnName which let you have a proper name inside your model object and still use another name into the table. It's the same for the Name of the MyObject class. It will be linked to Name_EN_USA.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"df67f2a3-2b7b-5cc8-bffa-98c972b38d5e","totalPages":71}},
    "staticQueryHashes": ["3159585216"]}