{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/entity-framework-select-value-q-with-esql-why",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Entity Framework SELECT VALUE Q with ESQL, why?","date":"November 18, 2013"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Entity Framework SELECT VALUE Q with ESQL, why?\",\n  \"date\": \"2013-11-18\",\n  \"categories\": [\"entity-framework\", \"linq\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you are using Entity Framework and want to pass a query string manually, you have to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT VALUE XXX FROM ...\"), \" why? This is a good question and often we see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT VALUE Q FROM\"), \", why Q? In fact, it can be anything but a single word. ESQL allow to do a select with a row wrapper or without. When using VALUE, it adds a wrapper which create a return of a materialized data record. Entity Framework handle this materialized data record to bind the result into a context object. Without the VALUE, you do not have any wrapper and you get back a set of rows.\"), mdx(\"p\", null, \"Here is an example with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT VALUE\"), \". We receive a strongly typed set of object. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"string queryString = \\\"SELECT VALUE q from table1.attr1 as q\\\"; \\nObjectQuery<T> query = context.CreateQuery<T>(queryString); \\n\")), mdx(\"p\", null, \"You can also specify which field you return if you do not want every fields. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"string queryString = \\\"SELECT VALUE row (q.Field1 as Field1, q.Field2 as Field2) from table1.attr1 as q)\\\"; \\nObjectQuery<T> query = context.CreateQuery<T>(queryString); \\n\")), mdx(\"p\", null, \"This time, the keyword \\\"row\\\" is required because it's a reserved keyword by ESQL. ROW constructs an anonymous value.\"), mdx(\"p\", null, \"And an example that return a set of rows. As you can see, we have a DbDataRecord.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"string queryString = \\\"SELECT q table1.attr1 as q\\\"; \\nObjectQuery<DbDataRecord> query = context.CreateQuery<DbDataRecord>(queryString); \\n\")), mdx(\"p\", null, \"Most of the time, you will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT VALUE q FROM ...\"), \" The use of ESQL must be as low as you can because it opens a door to have SQL Query inside your code, which the ORM is there to abstract. Nevertheless, sometime, for optimization, ESQL is perfect.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"292af4cd-ecbc-578f-9490-174baee4a263","totalPages":75}},
    "staticQueryHashes": ["3159585216"]}