{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/returning-a-jsonresult-within-the-error-function-of-jquery-ajax",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Returning a JsonResult within the Error function of JQuery Ajax","date":"April 4, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Returning a JsonResult within the Error function of JQuery Ajax\",\n  \"date\": \"2012-04-04\",\n  \"categories\": [\"asp-mvc\", \"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let say that you have an exception on the server side and you want to specify this error to the client, what could you do?\"), mdx(\"p\", null, \"The easiest way is to return the error into the return value directly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public JsonResult Create(MyObject myObject) { \\n  //AllFine \\n  return Json(new { IsCreated = True, Content = ViewGenerator(myObject)); \\n  //Error \\n  return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); \\n} \\n\")), mdx(\"p\", null, \"In the Javascript, we just need to take the error message and display it. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$.ajax({ \\n  type: \\\"POST\\\", \\n  dataType: \\\"json\\\", \\n  url: \\\"MyObjectController/Create\\\", \\n  data: JSON.stringify(myObjectJson), \\n  success: function (result) { \\n    if(result.IsCreated) { \\n      //... \\n    } else { \\n      alert(result.ErrorMessage); \\n    } \\n  } \\n}); \\n\")), mdx(\"p\", null, \"This is a correct way to do it. But sometime, you may want to return handled error this way because you \\\"control\\\" the situation and do something else for unhandled error. This could be the case of any error that you do not catch with precision but you still need to return something to the client. Since you are using Ajax you may not want to redirect your user to another page but just to display an alert that the operation is unsuccessful.\"), mdx(\"p\", null, \"This can be done by changing the Response Header with a Http Code that is different from the normal 200.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \" public JsonResult Create(MyObject myObject) { \\n   //AllFine \\n   return Json(new { IsCreated = True, Content = ViewGenerator(myObject));\\n\\n  //Use input may be wrong but nothing crashed \\n  return Json(new { IsCreated = False, Content = ViewGenerator(myObject)); \\n\\n  //Error \\n  Response.StatusCode = (int)HttpStatusCode.InternalServerError; \\n  return Json(new { IsCreated = false, Content = ViewGenerator(myObject), ErrorMessage = 'Could not save because XYZ'); \\n} \\n\")), mdx(\"p\", null, \"The Javascript can than go in three different direction:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"$.ajax({ \\n  type: \\\"POST\\\", \\n  dataType: \\\"json\\\", \\n  url: \\\"MyObjectController/Create\\\", \\n  data: JSON.stringify(myObjectJson), \\n  success: function (result) { \\n    if(result.IsCreated) { \\n      //... ALL FINE \\n    } else { \\n      //... Use input may be wrong but nothing crashed \\n    } \\n  }, error: function (jqXHR, textStatus, errorThrown) { \\n    alert(\\\"Error:\\\" + jQuery.parseJSON(jqXHR.responseText).Info); //Error\\n  } \\n}); \\n\")), mdx(\"p\", null, \"This way, you handle in a clear way how to display error to the user or to display problem with his inputs. It also give you the possibility to do it in a clean way at the server side and also to the client side.\"), mdx(\"p\", null, \"For you curiosity, if you want to play with different status you can go see in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System.Net\"), \" the enumeration \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpStatusCode\"), \" all different possible values.\"), mdx(\"p\", null, \"Here is it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"namespace System.Net { \\n  public enum HttpStatusCode { \\n    Continue = 100, SwitchingProtocols = 101, OK = 200, Created = 201, Accepted = 202, NonAuthoritativeInformation = 203, NoContent = 204, ResetContent = 205, PartialContent = 206, Ambiguous = 300, MultipleChoices = 300, Moved = 301, MovedPermanently = 301, Found = 302, Redirect = 302, RedirectMethod = 303, SeeOther = 303, NotModified = 304, UseProxy = 305, Unused = 306, RedirectKeepVerb = 307, TemporaryRedirect = 307, BadRequest = 400, Unauthorized = 401, PaymentRequired = 402, Forbidden = 403, NotFound = 404, MethodNotAllowed = 405, NotAcceptable = 406, ProxyAuthenticationRequired = 407, RequestTimeout = 408, Conflict = 409, Gone = 410, LengthRequired = 411, PreconditionFailed = 412, RequestEntityTooLarge = 413, RequestUriTooLong = 414, UnsupportedMediaType = 415, RequestedRangeNotSatisfiable = 416, ExpectationFailed = 417, InternalServerError = 500, NotImplemented = 501, BadGateway = 502, ServiceUnavailable = 503, GatewayTimeout = 504, HttpVersionNotSupported = 505, \\n  } \\n} \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"314fcb4f-3cad-5f7b-9f81-729c4805f732","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}