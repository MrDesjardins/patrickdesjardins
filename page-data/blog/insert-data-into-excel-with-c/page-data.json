{
    "componentChunkName": "component---src-templates-blog-article-tsx",
    "path": "/blog/insert-data-into-excel-with-c",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Insert data into Excel with C#","date":"February 16, 2012"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Insert data into Excel with C#\",\n  \"date\": \"2012-02-16\",\n  \"categories\": [\"c-sharp\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's possible with .Net to write data into Excel's cells. This can be done by using the library of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Microsoft.Office\"), \".\"), mdx(\"p\", null, \"The first step is to add a reference into you project by right clicking on the References folder and add the COM of Microsoft Office Excel.\"), mdx(\"p\", null, \"Here is a small example that show you how to open an Excel worksheet and add value to 2 cells. It will save the content back the to same file. The first approach do not use the Dynamic keyword which will be more verbose. The second example, do the same thing in less code by using Dynamic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"_Application docExcel = new Microsoft.Office.Interop.Excel.Application(); \\ndocExcel.Visible = false; \\ndocExcel.DisplayAlerts = false;\\n\\n_Workbook workbooksExcel = docExcel.Workbooks.Open(@\\\"C:\\\\\\\\test.xlsx\\\", Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);\\n_Worksheet worksheetExcel = (_Worksheet)workbooksExcel.ActiveSheet;\\n\\n((Range)worksheetExcel.Cells[\\\"1\\\", \\\"A\\\"]).Value2 = \\\"aa\\\"; \\n((Range)worksheetExcel.Cells[\\\"1\\\", \\\"B\\\"]).Value2 = \\\"bb\\\";\\n\\nworkbooksExcel.Save(); \\nworkbooksExcel.Close(false, Type.Missing, Type.Missing); \\ndocExcel.Application.DisplayAlerts = true; \\ndocExcel.Application.Quit();\\n\")), mdx(\"p\", null, \"Second example: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"_Application docExcel = new Application{Visible = false};\\n\\ndynamic workbooksExcel = docExcel.Workbooks.Open(@\\\"C:\\\\\\\\test.xlsx\\\"); \\nvar worksheetExcel = (_Worksheet)workbooksExcel.ActiveSheet;\\n\\n((Range)worksheetExcel.Cells[\\\"1\\\", \\\"A\\\"]).Value2 = \\\"test1\\\"; \\n((Range)worksheetExcel.Cells[\\\"1\\\", \\\"B\\\"]).Value2 = \\\"test2\\\";\\n\\nworkbooksExcel.Save(); \\nworkbooksExcel.Close(false); \\ndocExcel.Application.Quit(); \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"5fee8af8-2aea-54e0-8643-675d6bceaef3","totalPages":76}},
    "staticQueryHashes": ["3159585216"]}