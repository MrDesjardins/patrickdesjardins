3:I[5613,[],""]
5:I[1778,[],""]
4:["slug","a-single-graphqls-schema-for-internal-and-external-users","d"]
0:["U9WHEHP9m9dAVmOepwIU5",[[["",{"children":["blog",{"children":[["slug","a-single-graphqls-schema-for-internal-and-external-users","d"],{"children":["__PAGE__?{\"slug\":\"a-single-graphqls-schema-for-internal-and-external-users\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","a-single-graphqls-schema-for-internal-and-external-users","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e917b4f00bcb2347.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","title",null,{"children":"Patrick Desjardins Website and Blog"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1, shrink-to-fit=no"}]]}],["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f7004a68ac8d367c.css","precedence":"next","crossOrigin":""}]],"$L6"]]]]
7:I[5250,["674","static/chunks/674-a46cce5ee161a346.js","308","static/chunks/app/blog/%5Bslug%5D/page-e23445258eb56deb.js"],""]
8:I[1749,["674","static/chunks/674-a46cce5ee161a346.js","308","static/chunks/app/blog/%5Bslug%5D/page-e23445258eb56deb.js"],"Image"]
6:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
2:["$","div",null,{"className":"__className_aaf875","children":["$","div",null,{"className":"layout_container__Tovb9","children":[["$","header",null,{"className":"layout_siteTitle__k5U8g","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"layout_navLinks__mf70r","children":["$","li",null,{"className":"layout_navLinkItem__1L8fB","children":[["$","$L7",null,{"className":"layout_navLinkText__bt28R","href":"/","children":"Main Page"}],["$","$L7",null,{"className":"layout_navLinkText__bt28R","href":"/blog","children":"Blog"}],[["$","$L7","2024",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2024","children":2024}],["$","$L7","2023",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2023","children":2023}],["$","$L7","2022",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2022","children":2022}],["$","$L7","2021",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2021","children":2021}],["$","$L7","2020",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2020","children":2020}],["$","$L7","2019",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2019","children":2019}],["$","$L7","2018",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2018","children":2018}],["$","$L7","2017",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2017","children":2017}],["$","$L7","2016",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2016","children":2016}],["$","$L7","2015",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2015","children":2015}],["$","$L7","2014",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2014","children":2014}],["$","$L7","2013",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2013","children":2013}],["$","$L7","2012",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2012","children":2012}],["$","$L7","2011",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"children":["$","$L8",null,{"className":"layout_blogTopPicture__RJHNN","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.jpeg","width":1000,"height":300}]}],["$","main",null,{"className":"layout_main__mXTwS","children":[["$","h1",null,{"children":"A Single GraphQL's Schema for Internal and External Users"}],["$","div",null,{"className":"layout_blogPostContainer__WYELx","children":[["$","p",null,{"className":"layout_blogPostDate__LUvx5","children":["Posted on: ","2019-05-14"]}],[["$","p",null,{"children":"Imagine the scenario that you have a GraphQL schema that is consumed only by engineers of your organization. However, some engineers work on external facing applications while some other works on internal applications. The difference is subtle, but some information must remain confidential. While it might be more restrictive than most GraphQL that are fully public, there is the benefit that the schema is private and we can leverage that detail."}],"\n",["$","h1",null,{"children":"Internal vs External"}],"\n",["$","p",null,{"children":["In the scenario described, the GraphQL server is deployed into an Amazon VPC -- an ",["$","a",null,{"href":"https://aws.amazon.com/vpc/","children":"Amazon Virtual Private Cloud"}],". The environment is secured and the authorization is granted to only a limited to specific security groups."]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/blog/GraphQLServers-Page-11.png","alt":""}]}],"\n",["$","h1",null,{"children":"Internal vs External Environment"}],"\n",["$","p",null,{"children":["The challenge is not to limit the schema definition into an internal and external, but to have the external users not able to craft a request to access unexpected information. Because the GraphQL server is behind the VPC, it is not directly accessible by the user. The external application can communicate to the GraphQL server and every front-ends request to fetch data are proxied by the web server application. The proxy is important. It means that the browser of external users is not directly connected to the GraphQL server. Instead, the browser performs an AJAX call to the respective web server and this one, on the behalf of the user will conduct the GraphQL query. The proxy is conducted with the ",["$","a",null,{"href":"https://httpd.apache.org/docs/2.4/mod/mod_proxy.html","children":"ProxyPass"}]," instruction of Apache."]}],"\n",["$","p",null,{"children":"Internal applications do not have many constraints but keeping the same pattern of proxying is a good habit. It simplifies CORS because the browser performs HTTP requests to the same server, and only underneath it communicate to other servers. It also simplifies the security by having a central point of communication (the web server) to communicate with backend secured services."}],"\n",["$","h1",null,{"children":"GraphQL Single Schema"}],"\n",["$","p",null,{"children":"An obvious solution is to have two schemas: one internal and one external. The solution is the only choice if you need to expose the GraphQL schema externally without exposing the definition of internal fields and entities. However, because I had the constraint of not exposing GraphQL outside, I could simplify the maintainability by having a single schema. The problem with many schemas is that it does not scale very well. First, when adding a field that is good externally, you need to add it twice. Then, when it is time to modify or remove, you need to keep in synchronization the different schemas. Any little boilerplate cause the engineering experience to be a burden but also is prone to errors."}],"\n",["$","p",null,{"children":"In an ideal world, a single schema exists and we flag the field or entity to be only available internally. That world can exist with the power of GraphQL directive."}],"\n",["$","h1",null,{"children":"The GraphQL Directive Idea"}],"\n",["$","p",null,{"children":"GraphQL allows enhancing the graph's schema with annotation. Let's start with the end result which should talk more than any explanation."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"type MyTypeA {    "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    fieldA: EntityTypeA"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    fieldB: EntityTypeA @internalData"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":"The idea is to add \"@internalData\" to every field that must be only visible to internal usage. The annotation marks field but also can mark a whole type."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"type MyTypeA @internalData {    "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    fieldA: EntityTypeA"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    fieldB: EntityTypeA"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":"The idea is to have a single schema that had an indication that the field is added into a request will have some consequence. Because it is a single graph, the field appears in the interactive Graphql Playground and is a valid field to request; even externally. However, when invoked, GraphQL at runtime will be able to read the directive and perform a logic. In our case, the logic will be to verify the source of the request and figure out if the request is internal or not. In the case of an internal request, the data will be part of the response. If the source is external, an exception will occur and the field will be undefined."}],"\n",["$","h1",null,{"children":"How to build a GraphQL Directive?"}],"\n",["$","p",null,{"children":"The directive is two parts: one is in the GraphQL language (design time) and one is the logic to perform at runtime."}],"\n",["$","p",null,{"children":["In any .graphql file, you need to specify the directive to let know GraphQL about its existence. I created a file with the name of the directive and added this single line. The directive indicates that it can be applied to a type (",["$","em",null,{"children":"OBJECT"}],") or to a field (",["$","em",null,{"children":"FIELD_DEFINITION"}],"). The directive could also have arguments. For example, we could have a more advanced need to specify which role can access which field."]}],"\n",["$","p",null,{"children":"directive @internalData on OBJECT | FIELD_DEFINITION"}],"\n",["$","p",null,{"children":"The second part if to handle the directive. When merging all the resolvers and type definitions you can also specify the collection of directives. What you need to pass is a key-value pair with the directive name and the class of the directive (not the object). It means that you do not instantiate (new) the class, but only give a reference to the class."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const schemas = makeExecutableSchema({"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    typeDefs: allSchemas,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    resolvers: allResolvers,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    schemaDirectives: {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        internalData: InternalDataDirective,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"});"}]}]]}]}]}],"\n",["$","p",null,{"children":["The class must inherit ",["$","em",null,{"children":"SchemaDirectiveVisitor"}],". Then, because we have specified that it can be applied to a field and a type, we need to override two functions: ",["$","em",null,{"children":"visitFieldDefinition"}]," and ",["$","em",null,{"children":"visitObject"}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"export class InternalDataDirective extends SchemaDirectiveVisitor {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    private static readonly INTERNAL_APP = [\"app1\", \"app2\", \"app3\"];"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    public visitObject(object: GraphQLObjectType): GraphQLObjectType | void | null {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        this.ensureFieldsWrapped(object);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    public visitFieldDefinition("}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        field: GraphQLField<any, any>,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        details: {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            objectType: GraphQLObjectType | GraphQLInterfaceType;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    ): GraphQLField<any, any> | void | null {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        this.checkField(field);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    private ensureFieldsWrapped(objectType: GraphQLObjectType | GraphQLInterfaceType) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        if ((objectType as any).__scopeWrapped) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            return;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            (objectType as any).__scopeWrapped = true;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        const fields = objectType.getFields();"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        Object.keys(fields).forEach(fieldName => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            const field = fields[fieldName];"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            this.checkField(field);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        });"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    private checkField(field: GraphQLField<any, any>): void {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        const { resolve = defaultFieldResolver } = field;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        field.description = `🔐 Internal Field. Only available for: ${InternalDataDirective.INTERNAL_APP.join(\", \")}.`;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        field.resolve = async function("}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            source: any,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            args: any,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            context: GraphQLCustomResolversContext,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            graphQLResolveInfo: GraphQLResolveInfo"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        ) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            if ("}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                context.req.appOrigin === undefined ||"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                !InternalDataDirective.INTERNAL_APP.includes(context.req.appOrigin)"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            ) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                throw new Error("}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                    `The field [${field.name}] has an internal scope and does not allow access for the application [${"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                        context.req.appOrigin"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                    }]`"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"                );"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            const result = await resolve.apply(this, [source, args, context, graphQLResolveInfo]);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            return result;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":"The directive converges the two entry points (field and object) into a single function. The two functions are called once when the class is instantiated by the GraphQL code at the startup of the server. It means that you cannot have custom logic in the visit functions. The dynamic aspect appends because we wrap the resolve of the field. It means that the actual resolution is executed but the code specified in \"checkField\" is also performed at runtime. In the code excerpt, we see that it checks for a list of accepted internal applications. If the field has the directive, it goes into the directive's resolver and checks if the origin if from the list of accepted internal application. If not, it throws an error."}],"\n",["$","p",null,{"children":"A little detail, it is possible to inject a description from the directive that is set on the initialization of this one. In my case, I specify that the field is private and mention which application can access it. If a software engineer needs an application to be on the list, it requires a code change. This is not something that happens often and because a code change is required it involves a pull request where many people will have a look."}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/blog/graphqlinternalfield.png","alt":""}]}],"\n",["$","p",null,{"children":"Example of how it looks from the GraphQL Interactive Playground. The engineer who build the query knows that it is an internal field as well as under which application the response will return a value"}],"\n",["$","h1",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":"The more I work with different organizations, code bases, and technologies, the more I lean toward simplicity. There is so many changes, so many ways to get very deep into subjects and so little time. Getting into complex solution often cause the maintainability a nightmare or make some people very dependent. The solution of a directive in GraphQL took less than 150 lines of code and can scale toward the entire graph of objects without having a dependency on a system to manage many schemas. The security of the information is preserved, the engineers that consume the graph are aware when building the query (description) and while executing the query (error), and the engineers building the graph can add the tag to the fields or types which take a few seconds without having to worry about the detail of the implementation."}],"\n",["$","h1",null,{"children":"My Other GraphQL Blog Posts"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"getting-started-with-graphql-for-netflix-open-connect","children":"Getting Started with GraphQL for Netflix Open Connect"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"install-apollo-server-to-host-a-graphql-service","children":"Install Apollo Server to host a GraphQL service"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"apollo-server-and-secured-playground","children":"Apollo Server and Secured Playground"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"graphql-context","children":"GraphQL Context"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"graphql-query-with-argument","children":"GraphQL Query with Argument"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"apollo-graphql-resolvers-and-data-source-separation","children":"Apollo GraphQL Resolvers and Data Source separation"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"how-to-setup-a-typescript-nodejs-express-apollo-server-to-easy-debugging-with-vscode","children":"How to setup a TypeScript, NodeJS, Express Apollo Server to easy debugging with VsCode"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"graphql-resolvers-with-apollo","children":"GraphQL Resolvers with Apollo"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"configuring-apollo-playground-and-api-on-two-different-url","children":"Configuring Apollo Playground and API on two different URL"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"how-to-automatically-generate-typescript-for-consumer-of-your-graphql","children":"How to automatically generate TypeScript for consumers of your GraphQL"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"graphql-extension-to-collect-http-and-resolvers-telemetry","children":"GraphQL and HTTP Telemetry"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"how-to-consume-graphql-in-typescript-and-react","children":"GraphQL and TypeScript/React"}]}],"\n"]}]]]}]]}],["$","div",null,{"className":"layout_paginationBar__jnuuR","children":[["$","div",null,{"className":"layout_paginationTitle__PsOw5","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"layout_paginationLinks__LdBaH","children":[["$","$L7","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L7","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L7","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L7","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L7","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L7","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L7","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L7","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L7","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L7","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L7","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L7","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L7","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L7","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L7","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L7","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L7","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L7","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L7","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L7","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L7","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L7","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L7","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L7","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L7","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L7","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L7","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L7","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L7","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L7","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L7","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L7","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L7","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L7","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L7","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L7","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L7","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L7","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L7","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L7","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L7","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L7","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L7","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L7","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L7","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L7","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L7","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L7","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L7","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L7","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L7","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L7","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L7","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L7","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L7","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L7","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L7","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L7","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L7","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L7","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L7","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L7","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L7","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L7","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L7","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L7","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L7","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L7","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L7","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L7","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L7","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L7","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L7","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L7","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L7","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L7","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L7","77",{"className":"","href":"/blog/page/77","children":77}]]}]]}]]}]}]
