3:I[5613,[],""]
5:I[1778,[],""]
6:I[5250,["250","static/chunks/250-d7e0a94ebe194dac.js","79","static/chunks/79-2d03397107aae3f1.js","308","static/chunks/app/blog/%5Bslug%5D/page-6528fc8a86d3d7ed.js"],""]
4:["slug","rust-how-to-use-mpsc-unbounded-to-share-data-between-rust-threads","d"]
0:["AAsfQHKb5tIaVeXdFRWxP",[[["",{"children":["blog",{"children":[["slug","rust-how-to-use-mpsc-unbounded-to-share-data-between-rust-threads","d"],{"children":["__PAGE__?{\"slug\":\"rust-how-to-use-mpsc-unbounded-to-share-data-between-rust-threads\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","rust-how-to-use-mpsc-unbounded-to-share-data-between-rust-threads","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/080eae226cfe3297.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","alignItems":"center","justifyContent":"center","height":"100vh"},"children":["$","div",null,{"style":{"width":"50%","height":"20%","backgroundColor":"#ffeded","borderRadius":12,"padding":12,"textAlign":"center"},"children":[["$","h1",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L6",null,{"href":"/","children":"Return Home"}]]}]}],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4f3d065c9e2d01e0.css","precedence":"next","crossOrigin":""}]],"$L7"]]]]
8:I[1749,["250","static/chunks/250-d7e0a94ebe194dac.js","79","static/chunks/79-2d03397107aae3f1.js","308","static/chunks/app/blog/%5Bslug%5D/page-6528fc8a86d3d7ed.js"],"Image"]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Patrick Desjardins Blog - How to use mpsc::unbounded to share data between Rust threads"}],["$","meta","3",{"name":"description","content":"How to use mpsc::unbounded to share data between Rust threads"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
2:["$","div",null,{"className":"__className_aaf875","children":["$","div",null,{"className":"layout_container__Tovb9","children":[["$","header",null,{"className":"layout_siteTitle__k5U8g","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"layout_navLinks__mf70r","children":["$","li",null,{"className":"layout_navLinkItem__1L8fB","children":[["$","$L6",null,{"className":"layout_navLinkText__bt28R","href":"/","children":"Main Page"}],["$","$L6",null,{"className":"layout_navLinkText__bt28R","href":"/blog","children":"Blog"}],[["$","$L6","2024",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2024","children":2024}],["$","$L6","2023",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2023","children":2023}],["$","$L6","2022",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2022","children":2022}],["$","$L6","2021",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2021","children":2021}],["$","$L6","2020",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2020","children":2020}],["$","$L6","2019",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2019","children":2019}],["$","$L6","2018",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2018","children":2018}],["$","$L6","2017",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2017","children":2017}],["$","$L6","2016",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2016","children":2016}],["$","$L6","2015",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2015","children":2015}],["$","$L6","2014",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2014","children":2014}],["$","$L6","2013",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2013","children":2013}],["$","$L6","2012",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2012","children":2012}],["$","$L6","2011",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"className":"layout_blogPictureContainer__XC7nK","children":["$","$L8",null,{"className":"layout_blogTopPicture__RJHNN","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.jpeg","width":800,"height":260}]}],["$","main",null,{"className":"layout_main__mXTwS","children":[["$","h1",null,{"children":"How to use mpsc::unbounded to share data between Rust threads"}],["$","div",null,{"className":"layout_blogPostContainer__WYELx","children":[["$","p",null,{"className":"layout_blogPostDate__LUvx5","children":["Posted on: ","2022-11-26"]}],[["$","p",null,{"children":"Moving information between threads is always a delicate task. This is because so many issues can occur, and Rust is built around safety; hence it has a safe way to send information between two threads."}],"\n",["$","p",null,{"children":["One way is to rely on the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"futures"}]}]}]}]," crate and use a ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"unbounded"}]}]}]}],". The documentation is fuzzy around how to use the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"future::mpsc::unbounded,"}]}]}]}]," and I'll try to provide an easy example to grasp the whole idea."]}],"\n",["$","p",null,{"children":["First, before getting too deep with ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"future::mpsc::unbounded"}]}]}]}],", know that there is also ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"future::mpsc::channel"}]}]}]}],". Channel is similar but is for ",["$","em",null,{"children":"bounded"}]," communication. The ",["$","em",null,{"children":"bounded"}]," has a single channel per sender, while the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"future::mpsc::unbounded"}]}]}]}]," has a single channel for every sender. The example uses the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"future::mpsc::unbounded"}]}]}]}]," with an internal buffer in case the receiver is not fetching the data fast enough."]}],"\n",["$","h1",null,{"children":"Main Loop Function"}],"\n",["$","p",null,{"children":"The example consists of three functions. The first one, the main one, is the entry one that will spawn two threads."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"rust","data-theme":"github-light","children":["$","code",null,{"data-language":"rust","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"fn main() {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    let (broker_sender, broker_receiver) = mpsc::unbounded::<String>();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    task::spawn(receive_loop(broker_receiver));"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    task::block_on(send_loop(broker_sender));"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The loop uses `task::spawn` that starts a thread without blocking the execution of the `main` function and starting the `receive_loop` function into a separate thread. It allows getting into the second line that blocks the `main` function to keep the program running while also running a second function, `send_loop` to run into another thread. "}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The `mpsc::unbounded::<String>` create a sender and receiver that can be shared between the two threads."}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"# send_loop Function"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The send loop is a function that takes the user input from the command line and adds the value into the `broker_sender` that gets the string into the `mpsc::unbounded` to have the `receive_loop` read it later. "}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"````rust"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"async fn send_loop(mut broker: mpsc::UnboundedSender<String>) -> () {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    loop {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        let mut user_input = String::new();"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        print!(\"> \");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        io::stdout().flush().unwrap();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        io::stdin().read_line(&mut user_input).unwrap();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        let user_input_clean = user_input.trim();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        broker.send(user_input_clean.to_string()).await.unwrap();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The function has an infinite loop, waiting for the user's inputs. Then, it waits to read the `stdin`, which takes the user line that is all the characters until the enter key is pressed. Finally, the last line gets the `mpsc::UnboundedSender<String>` and `send` the `String` using `await.unwrap`, which asynchronously puts the value into the communication pipeline. It still needs to be consumed."}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"# receive_loop Function"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The last step is the receiving function."}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"````rust"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"async fn receive_loop(mut broker: mpsc::UnboundedReceiver<String>) -> () {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    let ten_millis = time::Duration::from_millis(500);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    loop {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        if let Ok(wrapper_msg) = broker.try_next() {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            println!(\"New message: {}\", wrapper_msg.unwrap());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        thread::sleep(ten_millis)"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The function also has an infinite loop. It reads the `mpsc::UnboundedReceiver<String>` where the value is sitting from the previous function. The code above takes the value by calling `try_next`, which returns a `Result`. The function does not look for the `Err` path because the `try_next` spams an error anytime the `mpsc::UnboundedReceiver` is empty. However, when data is ready to be read, the value goes into the `wrapper_msg`, an `Option` type. Hence, the `unwrap` is called to read the string."}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"# Conclusion"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"A final observation is that the `mpsc::UnboundedSender` and `mpsc::UnboundedReceiver` shared between the two functions required to be mutable. You can see the `mut` in both parameters. Without the `mut`, the code throws a compilation error:"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"cannot borrow `broker` as mutable, as it is not declared as mutable"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"cannot borrow as mutable"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The reason seems to be that the `try_next` has a `&mut self`  in its [definition](https://docs.rs/futures-channel/0.3.25/src/futures_channel/mpsc/mod.rs.html#1131). From my limited knowledge of Rust, the reason of why the `try_next` seems to be that at the end, it has a queue where it needs to change its value (mutate) with the [unpark_one](https://docs.rs/futures-channel/0.3.25/src/futures_channel/mpsc/mod.rs.html#1031). "}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"There is a very low amount of examples on the Internet using the `mpsc::unbounded`. I hope these small examples gave you help on how to use Rust Future mpsc to pass information between threads."}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"The code in this article relies on these two dependencies:"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"futures = \"0.3.25\""}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"async-std = \"1.12.0\""}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"```"}]}]]}]}]}]]]}]]}],["$","div",null,{"className":"layout_paginationBar__jnuuR","children":[["$","div",null,{"className":"layout_paginationTitle__PsOw5","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"layout_paginationLinks__LdBaH","children":[["$","$L6","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L6","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L6","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L6","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L6","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L6","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L6","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L6","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L6","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L6","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L6","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L6","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L6","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L6","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L6","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L6","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L6","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L6","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L6","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L6","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L6","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L6","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L6","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L6","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L6","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L6","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L6","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L6","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L6","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L6","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L6","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L6","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L6","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L6","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L6","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L6","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L6","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L6","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L6","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L6","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L6","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L6","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L6","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L6","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L6","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L6","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L6","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L6","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L6","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L6","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L6","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L6","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L6","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L6","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L6","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L6","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L6","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L6","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L6","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L6","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L6","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L6","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L6","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L6","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L6","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L6","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L6","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L6","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L6","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L6","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L6","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L6","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L6","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L6","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L6","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L6","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L6","77",{"className":"","href":"/blog/page/77","children":77}]]}]]}]]}]}]
