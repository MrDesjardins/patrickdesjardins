3:I[5613,[],""]
5:I[1778,[],""]
4:["slug","typescript-full-optional-type-issue","d"]
0:["U9WHEHP9m9dAVmOepwIU5",[[["",{"children":["blog",{"children":[["slug","typescript-full-optional-type-issue","d"],{"children":["__PAGE__?{\"slug\":\"typescript-full-optional-type-issue\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","typescript-full-optional-type-issue","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e917b4f00bcb2347.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","title",null,{"children":"Patrick Desjardins Website and Blog"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1, shrink-to-fit=no"}]]}],["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f7004a68ac8d367c.css","precedence":"next","crossOrigin":""}]],"$L6"]]]]
7:I[5250,["674","static/chunks/674-a46cce5ee161a346.js","308","static/chunks/app/blog/%5Bslug%5D/page-e23445258eb56deb.js"],""]
8:I[1749,["674","static/chunks/674-a46cce5ee161a346.js","308","static/chunks/app/blog/%5Bslug%5D/page-e23445258eb56deb.js"],"Image"]
6:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","meta","2",{"name":"next-size-adjust"}]]
1:null
2:["$","div",null,{"className":"__className_aaf875","children":["$","div",null,{"className":"layout_container__Tovb9","children":[["$","header",null,{"className":"layout_siteTitle__k5U8g","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"layout_navLinks__mf70r","children":["$","li",null,{"className":"layout_navLinkItem__1L8fB","children":[["$","$L7",null,{"className":"layout_navLinkText__bt28R","href":"/","children":"Main Page"}],["$","$L7",null,{"className":"layout_navLinkText__bt28R","href":"/blog","children":"Blog"}],[["$","$L7","2024",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2024","children":2024}],["$","$L7","2023",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2023","children":2023}],["$","$L7","2022",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2022","children":2022}],["$","$L7","2021",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2021","children":2021}],["$","$L7","2020",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2020","children":2020}],["$","$L7","2019",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2019","children":2019}],["$","$L7","2018",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2018","children":2018}],["$","$L7","2017",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2017","children":2017}],["$","$L7","2016",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2016","children":2016}],["$","$L7","2015",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2015","children":2015}],["$","$L7","2014",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2014","children":2014}],["$","$L7","2013",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2013","children":2013}],["$","$L7","2012",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2012","children":2012}],["$","$L7","2011",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"children":["$","$L8",null,{"className":"layout_blogTopPicture__RJHNN","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.jpeg","width":1000,"height":300}]}],["$","main",null,{"className":"layout_main__mXTwS","children":[["$","h1",null,{"children":"TypeScript Type with Full Optional Field Might Cause you Issue"}],["$","div",null,{"className":"layout_blogPostContainer__WYELx","children":[["$","p",null,{"className":"layout_blogPostDate__LUvx5","children":["Posted on: ","2022-03-30"]}],[["$","p",null,{"children":"I recently received a message from one of my teammates asking to look at a piece of code that was compiled but wrong. After a moment, I realized that the interface (type) that was used was coming from a generated package from one of our gRPC. Because all the gRPC Protobuf type had their fields optional, the generated types were also optional."}],"\n",["$","h1",null,{"children":"Example of the Issue"}],"\n",["$","p",null,{"children":"Here are two types that illustrate the situation."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"interface TypeA {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    name?: string;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"interface TypeB {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    age?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":["The problem with ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeB"}]}]}]}]," having all their fields optional is that a valid ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," can be ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{}"}]}]}]}],". And that a valid ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeB"}]}]}]}]," can be ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{}"}]}]}]}],". By consequence, a function like the following accepts either type."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"plaintext","data-theme":"github-light","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"function forEach(a: TypeA): void {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    console.log(a);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":["I did not choose the name ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}]," by accident. The real ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}]," or ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"map"}]}]}]}]," function suffers from the same behavior. If you expect a collection of ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"<T>"}]}]}]}]," and that your ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"T"}]}]}]}]," is a type of full optional field, then you can fall into the illusion that you are passing the right object when you are actually not. Before diving any further, you can ",["$","a",null,{"href":"https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgCoE8AOECCyDeAsAFDJnLAAmA-AFzIgCuAtgEbQDcJ5DczEdZAGcwUUAHMuxAL4kSoSLEQoM2AEIFu5KoKZtOWsnHED6e9lCmziJGIxAIwwAPYhkMZ1ACiiABYAKOHpVXABKegA3ZypNUnIEVyFnABsIADpk53FA0Ks5YgSQEWQgtCxcZABeAgpKegBGABpefnoAIlQIETbkaSlC4tZg8o1q-FqG5uMIBoAGXqlbTx8EALhcpe8-f1YN4g8t1f98aVygA","children":"play"}]," with the following code to see by yourself how the function ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}]," that is expecting ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," accept a ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeB"}]}]}]}]," and even ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{}"}]}]}]}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"interface TypeA {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    name?: string;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"interface TypeB {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    age?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"function forEach(a: TypeA): void {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    console.log(a);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const a: TypeA = { id: 1, name: \"Test\" };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const b: TypeB = { id: 1, age: 10 };"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(a);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(b);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach({});"}]}]]}]}]}],"\n",["$","p",null,{"children":"Let's explain why with some examples."}],"\n",["$","h2",null,{"children":"Example 1: Implicit Declaration"}],"\n",["$","p",null,{"children":["Let's define a variable ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"a"}]}]}]}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const a = { id: 1, name: \"Test\" }; // Coubt be TypeA"}]}],"\n",["$","span",null,{"data-line":"","children":" "}]]}]}]}],"\n",["$","p",null,{"children":["The variables ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"a"}]}]}]}]," is not explicitly typed. It does not have ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":": TypeA"}]}]}]}]," after the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"a"}]}]}]}],". It is ",["$","strong",null,{"children":"not"}]," officially a ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," but a \"on-the-fly\" unamed type that share the same structure. Thus, is is totally acceptable to"]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const a: TypeA = { id: 1, name: \"Test\" }; "}]}]}]}]}],"\n",["$","p",null,{"children":["Hence, the variable ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"a"}]}]}]}]," compiles when used in the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}]," function. It is important to understand that we are not coercing the type to be ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}],". That would happen if we were doing:"]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const a = { id: 1, name: \"Test\" } as TypeA; // THIS IS BAD, DO NOT DO IT but it compiles"}]}]}]}]}],"\n",["$","p",null,{"children":["That should never be done since you can convert anything to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," even if it is not true."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const x = {asd:123} as TypeA; // THIS IS WRONG but it compiles"}]}]}]}]}],"\n",["$","h2",null,{"children":"Example 2: Explicit Declaration"}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}]," does not accept ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeB"}]}]}]}],". Defining a variable ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"b"}]}]}]}]," with the explicit type ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeB"}]}]}]}]," and providing only the field that is common with ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," is not enough to have ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"b"}]}]}]}]," to compile when passing to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const b: TypeB = { id: 1 };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(b); // Does not work because we typed explicitly to TypeB (and having the right TypeB structure, hence no coearcing with as)"}]}]]}]}]}],"\n",["$","p",null,{"children":"That makes sense in terms of \"naming\" being different. Hence, by being explicit, you are protecting yourself."}],"\n",["$","h2",null,{"children":"Example 3: Implicit or Explicit with Discriminant Field"}],"\n",["$","p",null,{"children":"While I try to be as explicit as possible, there are many situations where being implicit is valid."}],"\n",["$","p",null,{"children":["There is an easy fix that is a default when using GraphQL. In GraphQL, when you generate your TypeScript type (interface), you receive all the translated properties from the GraphQL schema type to the TypeScript interface. However, it comes with a discriminant field. The discriminant field is a field in which the type is a unique string. It is critical to understand that the field type is ",["$","strong",null,{"children":"not"}]," of string but a particular string. If we transform the previous example to have a discriminant field, the two types become:"]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","data-highlighted-line":"","children":["$","span",null,{"children":"interface TypeA {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    __typename: \"TypeA\";"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    name?: string;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","data-highlighted-line":"","children":["$","span",null,{"children":"interface TypeB {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    __typename: \"TypeB\";"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    age?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":"With the field in place, you can write:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const d = { __typename: \"TypeA\" as const, id: 1 }; // Match TypeA without specifying the type"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(d); // Works because __typename is defined"}]}]]}]}]}],"\n",["$","p",null,{"children":["The variable ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"d"}]}]}]}]," is not officially of type ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," but it does respect the structure of ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," and hence can be used with the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","data-highlighted-line":"","children":["$","span",null,{"children":"interface TypeA {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    __typename?: \"TypeA\";"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    name?: string;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","data-highlighted-line":"","children":["$","span",null,{"children":"interface TypeB {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    __typename?: \"TypeB\";"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    age?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":["Differently but with the same result, if you have the discriminant optional, it remains enough to block a type with a discriminant of a type that is not ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const e = { __typename: \"TypeB\" as const, id: 1 }; "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(e);"}]}]]}]}]}],"\n",["$","p",null,{"children":["The reason is that the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach"}]}]}]}]," expect ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," or should we way a structure that respects:"]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"__typename?: \"TypeA\";"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"id?: number;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"name?: string;"}]}]]}]}]}],"\n",["$","p",null,{"children":["We can see that because ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"__typename"}]}]}]}]," of ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"e"}]}]}]}]," is set to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeB"}]}]}]}]," that it does not pass the structural comparison. The accepted values are for ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"__typename"}]}]}]}]," to be ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," or nothing at all."]}],"\n",["$","p",null,{"children":"Hence this compile:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const e = { __typename: undefined, id: 1 }; "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const f = { __typename: \"TypeA\" as const, id: 1 }; "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const g = { id: 1, name: undefined }; "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(e);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(f);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(g);"}]}]]}]}]}],"\n",["$","p",null,{"children":"However, this one does not:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"typescript","data-theme":"github-light","children":["$","code",null,{"data-language":"typescript","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const h = { __typename: \"TypeA\" , id: 1 }; "}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"forEach(g);"}]}]]}]}]}],"\n",["$","p",null,{"children":["A keen observer understands that the type ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"h"}]}]}]}]," is still not of ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"TypeA"}]}]}]}]," but results in an unnamed type of ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{__typename: string; id: number}"}]}]}]}]," which is not the same as ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{__typename: \"TypeA\"; id: number}"}]}]}]}],". We are using ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"as const"}]}]}]}]," previously to have TypeScript narrowing down the type to is strictness definition."]}],"\n",["$","h1",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":["Interfaces and types are structural in TypeScript, and the name does not matter. However, it is essential to understand the concept, and it is potent as it does not require a lot of work around building an object with a name in mind. Relying on a discriminant field is one of my favorite patterns. It does not require creating a function to create a ",["$","a",null,{"href":"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates","children":"user-defined guard"}]," removing to work with casting and generating a lot of code as the amount of interface grow. Also, it works well even if all the fields are optional, which might happen as we saw in the scenario that a situation force you to have all the fields optional (e.g., Protobuf outside your control)."]}]]]}]]}],["$","div",null,{"className":"layout_paginationBar__jnuuR","children":[["$","div",null,{"className":"layout_paginationTitle__PsOw5","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"layout_paginationLinks__LdBaH","children":[["$","$L7","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L7","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L7","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L7","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L7","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L7","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L7","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L7","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L7","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L7","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L7","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L7","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L7","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L7","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L7","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L7","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L7","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L7","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L7","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L7","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L7","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L7","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L7","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L7","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L7","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L7","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L7","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L7","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L7","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L7","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L7","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L7","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L7","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L7","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L7","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L7","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L7","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L7","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L7","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L7","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L7","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L7","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L7","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L7","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L7","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L7","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L7","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L7","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L7","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L7","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L7","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L7","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L7","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L7","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L7","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L7","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L7","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L7","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L7","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L7","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L7","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L7","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L7","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L7","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L7","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L7","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L7","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L7","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L7","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L7","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L7","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L7","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L7","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L7","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L7","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L7","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L7","77",{"className":"","href":"/blog/page/77","children":77}]]}]]}]]}]}]
