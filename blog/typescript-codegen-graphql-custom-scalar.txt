3:I[5613,[],""]
5:I[1778,[],""]
6:I[5250,["250","static/chunks/250-d7e0a94ebe194dac.js","749","static/chunks/749-0b1ce23612086a28.js","308","static/chunks/app/blog/%5Bslug%5D/page-68fa1940f31329f5.js"],""]
4:["slug","typescript-codegen-graphql-custom-scalar","d"]
0:["HFalGKF2xALccIX_qargj",[[["",{"children":["blog",{"children":[["slug","typescript-codegen-graphql-custom-scalar","d"],{"children":["__PAGE__?{\"slug\":\"typescript-codegen-graphql-custom-scalar\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","typescript-codegen-graphql-custom-scalar","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bd14de653b61b94e.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","div",null,{"className":"layout_bodystyle__9TFhb","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],null]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","alignItems":"center","justifyContent":"center","height":"100vh"},"children":["$","div",null,{"style":{"width":"50%","height":"20%","backgroundColor":"#ffeded","borderRadius":12,"padding":12,"textAlign":"center"},"children":[["$","h1",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L6",null,{"href":"/","children":"Return Home"}]]}]}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/378d2a9747ade719.css","precedence":"next","crossOrigin":""}]]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7050e9db94ad156b.css","precedence":"next","crossOrigin":""}]],"$L7"]]]]
8:I[1749,["250","static/chunks/250-d7e0a94ebe194dac.js","749","static/chunks/749-0b1ce23612086a28.js","308","static/chunks/app/blog/%5Bslug%5D/page-68fa1940f31329f5.js"],"Image"]
2:["$","div",null,{"className":"BlogBody_BlogBody__600mT","children":[["$","header",null,{"className":"BlogBody_siteTitle__f7uyb","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"BlogBody_navLinks__ZV12t","children":["$","li",null,{"className":"BlogBody_navLinkItem__Pml2e","children":[["$","$L6",null,{"className":"BlogBody_navLinkText__ZtH2y","href":"/","children":"Main Page"}],["$","$L6",null,{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog","children":"Blog"}],[["$","$L6","2024",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2024","children":2024}],["$","$L6","2023",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2023","children":2023}],["$","$L6","2022",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2022","children":2022}],["$","$L6","2021",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2021","children":2021}],["$","$L6","2020",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2020","children":2020}],["$","$L6","2019",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2019","children":2019}],["$","$L6","2018",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2018","children":2018}],["$","$L6","2017",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2017","children":2017}],["$","$L6","2016",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2016","children":2016}],["$","$L6","2015",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2015","children":2015}],["$","$L6","2014",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2014","children":2014}],["$","$L6","2013",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2013","children":2013}],["$","$L6","2012",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2012","children":2012}],["$","$L6","2011",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"className":"BlogBody_blogPictureContainer__IAbPL","children":["$","$L8",null,{"className":"BlogBody_blogTopPicture__L6lao","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.jpeg","width":800,"height":260}]}],["$","main",null,{"className":"BlogBody_main__XrdKY","children":[["$","h1",null,{"className":"BlogBody_heading__bYRBe","children":"Typescript and GraphQL: Custom Scalar with Apollo Client"}],["$","div",null,{"className":"Page_blogPostContainer__AUIcf","children":[["$","p",null,{"className":"Page_blogPostDate__wVWWB","children":["Posted on: ","2022-04-19"]}],[["$","p",null,{"children":["Imagine you must interact with a system that provides 64 bits type, like a ",["$","code",null,{"children":"long"}]," in ",["$","a",null,{"href":"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html","children":"Java"}]," by GraphQL. The ",["$","a",null,{"href":"https://graphql.org/graphql-js/basic-types/","children":"GraphQL standard does not have a number"}]," for 64 bits."]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/blog/CustomScalar-NumberNotNumber.png","alt":""}]}],"\n",["$","p",null,{"children":["Relying on number cause issue with a number above ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER","children":"2^53 because of how JavaScript handles number"}],". Hence, above that size, in JavaScript you must create a wrapped type called ",["$","code",null,{"children":"BigInt"}],". While this article focuses on ",["$","code",null,{"children":"Long"}]," to ",["$","code",null,{"children":"BigInt"}],", it is the same issue with many other types like ",["$","code",null,{"children":"Date"}],", ",["$","code",null,{"children":"Time"}]," or more complex scalar."]}],"\n",["$","h1",null,{"children":"Server Configuration"}],"\n",["$","p",null,{"children":["There is a part that you will need to communicate with the GraphQL server owner. The server cannot send the GraphQL ",["$","code",null,{"children":"Int"}]," type, so the server must send the data as a ",["$","code",null,{"children":"string"}],". Sending the value as a Java ",["$","code",null,{"children":"Long"}]," would create an accuracy issue. The transmission of the data will be a ",["$","code",null,{"children":"number"}]," and causes an issue if the value is above 2^53 bit. The best is to have the server marshaling the value into a ",["$","code",null,{"children":"string"}],". Hence, inside the ",["$","code",null,{"children":"string"}],", the value can be above 2^53. It means the value would be in the format:"]}],"\n",["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token literal-property property","children":"data"}]," ",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token literal-property property","children":"YourEntityName"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token literal-property property","children":"myField"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"192381290381209381290839012830918209510257182759817287128371298738928\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":["To specify to the client that the ",["$","code",null,{"children":"string"}]," is actually not a GraphQL ",["$","code",null,{"children":"string"}],", the best is to rely on a ",["$","a",null,{"href":"https://graphql.org/learn/schema/","children":"custom scalar"}],". For example, the GraphQL server can create a GraphQL ",["$","code",null,{"children":"Long"}]," time."]}],"\n",["$","pre",null,{"className":"language-plaintext","children":["$","code",null,{"className":"language-plaintext code-highlight","children":["$","span",null,{"className":"code-line","children":"scalar Long\n"}]}]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/blog/CustomScalar-ScalarLong.png","alt":""}]}],"\n",["$","p",null,{"children":["Therefore, the client knows that type is a ",["$","code",null,{"children":"Long"}],", the data is transmitted as a string, and we can tackle the next step with these two pieces of information."]}],"\n",["$","h1",null,{"children":"Client Configuration"}],"\n",["$","p",null,{"children":["On the client-side, there is some work to do. First, I assume you are using TypeScript and ",["$","a",null,{"href":"https://www.graphql-code-generator.com/","children":"Codegen"}]," to generate your TypeScript from the GraphQL files."]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/blog/CustomScalar-GenTs.png","alt":""}]}],"\n",["$","p",null,{"children":"I assume you have somehow the whole Graphql Schema and several files in your client repository that have queries, mutations, inputs, and types. Something like:"}],"\n",["$","pre",null,{"className":"language-yml","children":["$","code",null,{"className":"language-yml code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"schema"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"output/introspectionResult.json\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"documents"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"./src/**/*.graphql\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"overwrite"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"generates"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token key atrule","children":"./src/autogenerated/allTypes.ts"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token key atrule","children":"config"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"maybeValue"}],["$","span",null,{"className":"token punctuation","children":":"}]," T ",["$","span",null,{"className":"token punctuation","children":"|"}]," undefined\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"preResolveTypes"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"avoidOptionals"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token key atrule","children":"plugins"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," typescript\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," typescript",["$","span",null,{"className":"token punctuation","children":"-"}],"operations\n"]}]]}]}],"\n",["$","p",null,{"children":["So, you need to add a couple of details to tell Codegen how to generate the proper type for the custom scalar ",["$","code",null,{"children":"Long"}]," and to tell Codegen how to convert the ",["$","code",null,{"children":"string"}]," into a BigInt`."]}],"\n",["$","h2",null,{"children":"TypeScript: Converting the Custom Scalar to Your Type"}],"\n",["$","p",null,{"children":["Inside your codegen.yml you can define a ",["$","code",null,{"children":"scalars"}]," option. For a ",["$","code",null,{"children":"Long"}]," to a ",["$","code",null,{"children":"BigInt"}]," you can have:"]}],"\n",["$","pre",null,{"className":"language-yml","children":["$","code",null,{"className":"language-yml code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"scalars"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token key atrule","children":"Long"}],["$","span",null,{"className":"token punctuation","children":":"}]," BigInt\n"]}]]}]}],"\n",["$","p",null,{"children":["If you execute the generation, you will see that anywhere in your queries that you are fetching a type of ",["$","code",null,{"children":"Long"}]," that the TypeScript generated will have the type ",["$","code",null,{"children":"BigInt"}],". So, the codegen.yml file looks like this:"]}],"\n",["$","pre",null,{"className":"language-yml","children":["$","code",null,{"className":"language-yml code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"schema"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"output/introspectionResult.json\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"documents"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"./src/**/*.graphql\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"overwrite"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"generates"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token key atrule","children":"./src/autogenerated/allTypes.ts"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token key atrule","children":"config"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"maybeValue"}],["$","span",null,{"className":"token punctuation","children":":"}]," T ",["$","span",null,{"className":"token punctuation","children":"|"}]," undefined\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"preResolveTypes"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"avoidOptionals"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line highlight-line","children":"            scalar Long\n"}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token key atrule","children":"plugins"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," typescript\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," typescript",["$","span",null,{"className":"token punctuation","children":"-"}],"operations\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":["However, the work is only for ",["$","em",null,{"children":"design"}]," time so far. At ",["$","em",null,{"children":"runtime"}],", the ",["$","code",null,{"children":"typeof"}]," is still a ",["$","code",null,{"children":"string"}],"."]}],"\n",["$","h2",null,{"children":"Apollo Client: Converting Value to the Proper Type"}],"\n",["$","p",null,{"children":["The second part is the trickiest. It requires having a custom plugin for Codegen. The plugin's goal is to generate a type policy for the Apollo Client. On every GraphQL request, Apollo will inject the response into the ",["$","code",null,{"children":"InMemoryCache"}],". There is a way with the Apollo Client to have custom logic when data enters the cache. The plugin's goal is to automatically generate these functions for all the fields from your custom scalar. Codegen is the best to know since it analyzes the schema and knows which field is being used in your GraphQL files. Thus, know which field to create the custom policy."]}],"\n",["$","p",null,{"children":["Before diving into the plugin, let's see the ",["$","code",null,{"children":"typePolicies"}]," property of Apollo Client (version 3)."]}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," cache ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token keyword","children":"new"}]," ",["$","span",null,{"className":"token class-name","children":"InMemoryCache"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["    typePolicies",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        YourEntityName",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            fields",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["                myField",["$","span",null,{"className":"token operator","children":":"}]," longBigIntPolicy\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":["The example shows that add manually a function called ",["$","code",null,{"children":"longBigIntPolicy"}]," for the ",["$","code",null,{"children":"YourEntityName.field"}]," that is of type ",["$","code",null,{"children":"Long"}],". While you can do that case by case, a plugin would allow you to handle it for you systematically and have the following code instead."]}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," cache ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token keyword","children":"new"}]," ",["$","span",null,{"className":"token class-name","children":"InMemoryCache"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["    typePolicies",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["      ",["$","span",null,{"className":"token operator","children":"..."}],"scalarTypePolicies",["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token comment","children":"// You can still define here custom policies"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h2",null,{"children":"Codegen: Plugin to Generate the Type Policies"}],"\n",["$","p",null,{"children":"The codegen.yml needs the last modification to call a plugin to generate the type policies for Apollo to consume."}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/blog/CustomScalar-Plugin.png","alt":""}]}],"\n",["$","p",null,{"children":["First, a configuration for the plugin that maps the ",["$","code",null,{"children":"scalarTypePolicies"}]," types. In that example, there is one type: ",["$","code",null,{"children":"Long"}]," and it is mapped to ",["$","code",null,{"children":"longBigIntPolicy#longBigIntPolicy"}]," which mean  check in the ",["$","code",null,{"children":"longBigIntPolicy"}]," file for the function ",["$","code",null,{"children":"longBigIntPolicy"}],"."]}],"\n",["$","p",null,{"children":["Second, there is the plugin that must be a ",["$","code",null,{"children":".js"}]," file. Here it points to ",["$","code",null,{"children":"generateScalarPolicies.js"}]]}],"\n",["$","pre",null,{"className":"language-yml","children":["$","code",null,{"className":"language-yml code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"schema"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"output/introspectionResult.json\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"documents"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"./src/**/*.graphql\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"overwrite"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token key atrule","children":"generates"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token key atrule","children":"./src/autogenerated/allTypes.ts"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token key atrule","children":"config"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"maybeValue"}],["$","span",null,{"className":"token punctuation","children":":"}]," T ",["$","span",null,{"className":"token punctuation","children":"|"}]," undefined\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"preResolveTypes"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"avoidOptionals"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token boolean important","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":"            scalar Long\n"}],["$","span",null,{"className":"code-line highlight-line","children":["            ",["$","span",null,{"className":"token key atrule","children":"scalarTypePolicies"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["                ",["$","span",null,{"className":"token key atrule","children":"Long"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"../scalarPolicies/longBigIntPolicy#longBigIntPolicy\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token key atrule","children":"plugins"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," ./plugins/output/generateScalarPolicies.js\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," typescript\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"-"}]," typescript",["$","span",null,{"className":"token punctuation","children":"-"}],"operations\n"]}]]}]}],"\n",["$","p",null,{"children":["The tricky part is the plugin. We need something that scans all your types against the server's GraphQL schema and identifies where to create an entry for each field. The good news is that there is an ",["$","a",null,{"href":"https://github.com/homebound-team/graphql-typescript-scalar-type-policies/blob/main/src/index.ts","children":"unsupported repository with the plugin"}],", and it is written in TypeScript! The bad news is that the NPM is not usable, and the project is not supported. So, we need to copy the code and have a script to run the TypeScript into a JavaScript file before executing the Codegen. You can create a bash script that runs TypeScript and use it before one NPM command you have for your project."]}],"\n",["$","pre",null,{"className":"language-sh","children":["$","code",null,{"className":"language-sh code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"#Content of ./plugins/generate.sh "}],"\n"]}],["$","span",null,{"className":"code-line","children":["npx tsc plugins/generateScalarPolicies.ts ",["$","span",null,{"className":"token parameter variable","children":"--target"}]," es2018 ",["$","span",null,{"className":"token parameter variable","children":"--module"}]," commonjs ",["$","span",null,{"className":"token parameter variable","children":"--moduleResolution"}]," ",["$","span",null,{"className":"token function","children":"node"}]," ",["$","span",null,{"className":"token parameter variable","children":"--lib"}]," esnext ",["$","span",null,{"className":"token parameter variable","children":"--skipLibCheck"}]," ",["$","span",null,{"className":"token boolean","children":"true"}]," ",["$","span",null,{"className":"token parameter variable","children":"--outDir"}]," ",["$","span",null,{"className":"token string","children":"\"./plugings/output/\""}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"Inside your package.json:"}],"\n",["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token string-property property","children":"\"scripts\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token string-property property","children":"\"gen\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"./plugins/generate.sh && graphql-codegen --config codegen.yml\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":["The result is that along with your typical generated types, inside ",["$","code",null,{"children":"allTypes.ts"}]," (as defined in the ",["$","code",null,{"children":"codegen.yml"}]," file), you will have a ",["$","code",null,{"children":"const"}]," variable."]}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"export"}]," ",["$","span",null,{"className":"token keyword","children":"const"}]," scalarTypePolicies ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token comment","children":"// ..."}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"The constant is the one you need to refer to with Apollo."}],"\n",["$","h1",null,{"children":"Execution"}],"\n",["$","p",null,{"children":["At that point, you can execute your code and see that the type defined as ",["$","code",null,{"children":"BigInt"}]," is also the one at runtime. If you are using ",["$","code",null,{"children":"typeof"}]," on the field that was defined to be ",["$","code",null,{"children":"Long"}]," in the GraphQL schema, it is ",["$","strong",null,{"children":"not"}]," a ",["$","code",null,{"children":"number"}],", nor a ",["$","code",null,{"children":"string"}]," -- it is a ",["$","code",null,{"children":"BigInt"}],". Exactly what we desire."]}],"\n",["$","h1",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":["Using custom scalar in Apollo Client is very cumbersome. The documentation is scarce, and few solutions are wrong. For example, going with the ",["$","a",null,{"href":"https://github.com/eturino/apollo-link-scalars#usage","children":"Apollo Link"}]," route will cause your serialization issue once the data gets into the ",["$","code",null,{"children":"InMemoryCache"}],". Furthermore, that solution requires having the whole schema on the client (browser), which could be impractical for a vast schema. The Codegen solution is elegant because it generates a tailored version of the conversion for your usage and executes once at design time. However, because it requires an unsupported plugin, it raises the question of how well scalar types are supported. A fundamental issue for a system that is based on type. If you look at the problem from the perspective of Apollo, we can see that they are pushed toward a wall: they are in the business of the runtime while the solution must be performed at design time to be efficient. Hence, it must be why ",["$","a",null,{"href":"https://github.com/apollographql/apollo-client/issues/8857","children":"issues have risen for years in their Github"}]," without any concrete explanation. On the other side, Codegen has a few Apollo official plugins, but none that perform a type-to-type conversion. Codegen has a ",["$","a",null,{"href":"https://www.graphql-code-generator.com/plugins/typescript-apollo-client-helpers","children":"Apollo Client type policies helper"}],", but it is limited to typing the whole policy instead of working on type conversion."]}],"\n",["$","p",null,{"children":"After years of GraphQL standard supporting custom scalar, my final words are that we must still rely on custom code to handle the browser (with Apollo) custom scalar type. That is the reality."}]]]}]]}],["$","div",null,{"className":"BlogBody_paginationBar__1gsMc","children":[["$","div",null,{"className":"BlogBody_paginationTitle__H_eFX","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"BlogBody_paginationLinks__nk8zd","children":[["$","$L6","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L6","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L6","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L6","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L6","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L6","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L6","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L6","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L6","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L6","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L6","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L6","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L6","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L6","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L6","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L6","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L6","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L6","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L6","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L6","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L6","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L6","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L6","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L6","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L6","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L6","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L6","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L6","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L6","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L6","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L6","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L6","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L6","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L6","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L6","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L6","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L6","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L6","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L6","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L6","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L6","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L6","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L6","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L6","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L6","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L6","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L6","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L6","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L6","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L6","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L6","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L6","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L6","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L6","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L6","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L6","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L6","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L6","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L6","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L6","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L6","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L6","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L6","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L6","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L6","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L6","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L6","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L6","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L6","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L6","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L6","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L6","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L6","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L6","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L6","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L6","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L6","77",{"className":"","href":"/blog/page/77","children":77}]]}]]}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Patrick Desjardins Blog - Typescript and GraphQL: Custom Scalar with Apollo Client"}],["$","meta","3",{"name":"description","content":"Typescript and GraphQL: Custom Scalar with Apollo Client"}]]
1:null
