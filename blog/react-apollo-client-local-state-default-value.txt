3:I[6102,[],""]
5:I[2609,[],""]
6:I[6196,["196","static/chunks/196-d9d7275cf071dc4b.js","986","static/chunks/986-aab1d30514616ab7.js","308","static/chunks/app/blog/%5Bslug%5D/page-1d51dd1d8a502245.js"],""]
4:["slug","react-apollo-client-local-state-default-value","d"]
0:["DdzE-IFtXnjUR0eO8cujI",[[["",{"children":["blog",{"children":[["slug","react-apollo-client-local-state-default-value","d"],{"children":["__PAGE__?{\"slug\":\"react-apollo-client-local-state-default-value\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","react-apollo-client-local-state-default-value","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fcb9e03867a4ea9e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/5c2c40c02c39ca14.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f810ef15b2c7fffa.css","precedence":"next","crossOrigin":"$undefined"}]],["$","div",null,{"className":"layout_blogbodystyle___Uc1w","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/78bcead87aa8ba1c.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","className":"layout_htmlstyle__PseMz","children":["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","alignItems":"center","justifyContent":"center","height":"100vh"},"children":["$","div",null,{"style":{"width":"50%","height":"20%","backgroundColor":"#ffeded","borderRadius":12,"padding":12,"textAlign":"center"},"children":[["$","h1",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L6",null,{"href":"/","children":"Return Home"}]]}]}],"notFoundStyles":[]}]}]}]],null],null],["$L7",null]]]]
8:I[8986,["196","static/chunks/196-d9d7275cf071dc4b.js","986","static/chunks/986-aab1d30514616ab7.js","308","static/chunks/app/blog/%5Bslug%5D/page-1d51dd1d8a502245.js"],"Image"]
2:["$","div",null,{"className":"BlogBody_BlogBody__600mT","children":[["$","header",null,{"className":"BlogBody_siteTitle__f7uyb","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"BlogBody_navLinks__ZV12t","children":["$","li",null,{"className":"BlogBody_navLinkItem__Pml2e","children":[["$","$L6",null,{"className":"BlogBody_navLinkText__ZtH2y","href":"/","children":"Main Page"}],["$","$L6",null,{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog","children":"Blog"}],[["$","$L6","2024",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2024","children":2024}],["$","$L6","2023",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2023","children":2023}],["$","$L6","2022",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2022","children":2022}],["$","$L6","2021",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2021","children":2021}],["$","$L6","2020",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2020","children":2020}],["$","$L6","2019",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2019","children":2019}],["$","$L6","2018",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2018","children":2018}],["$","$L6","2017",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2017","children":2017}],["$","$L6","2016",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2016","children":2016}],["$","$L6","2015",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2015","children":2015}],["$","$L6","2014",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2014","children":2014}],["$","$L6","2013",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2013","children":2013}],["$","$L6","2012",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2012","children":2012}],["$","$L6","2011",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"className":"BlogBody_blogPictureContainer__IAbPL","children":["$","$L8",null,{"className":"BlogBody_blogTopPicture__L6lao","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.webp","width":800,"height":260}]}],["$","main",null,{"className":"BlogBody_main__XrdKY","children":[["$","h1",null,{"className":"BlogBody_heading__bYRBe","children":"React Apollo Client Local State with Default Value on Fragment"}],["$","div",null,{"className":"Page_blogPostContainer__AUIcf","children":[["$","p",null,{"className":"Page_blogPostDate__wVWWB","children":["Posted on: ","2023-02-02"]}],[["$","p",null,{"children":["The best approach is to rely on the local state if you need to add additional value to an existing GraphQL entity from your GraphQL server. Apollo has several patterns, and in this article, I am showing how to use the local state using the ",["$","code",null,{"children":"InMemoryCache"}]," and the ",["$","code",null,{"children":"writeFragment"}]," method."]}],"\n",["$","h1",null,{"children":"When to use the GraphQL Apollo Local State?"}],"\n",["$","p",null,{"children":["The main reason to add a local state to the GraphQL Apollo is to attach information not needed on the server but needed on the client side. The main justification to use the GraphQL Apollo local state instead of a variable or a React's state is to still impacts all queries on your client side on value change. The concept is you are attaching a new ",["$","strong",null,{"children":"field"}]," on one of your GraphQL entities (defined by the GraphQL server). By using the GraphQL client, if the local state change, a trigger to render all React hooks that use that entity occurs -- similar to if a refetch data or a new query comes with a response that alters an entity. Hence, if you change the value of the local state you can ensure the user interface updates. Furthermore, because it uses the ",["$","code",null,{"children":"InMemoryCache"}]," of GraphQL, the local state is normalized inside the Apollo storage. Thus, you do not have to manage duplication if the entity is used on several queries."]}],"\n",["$","p",null,{"children":["For example, if you have an entity called ",["$","code",null,{"children":"Movie"}]," and want to add a property ",["$","code",null,{"children":"isStreaming"}]," that indicates if the movie is playing or not. You may not want that information persisted on the server and only on the client side. However, if you change that boolean value from one value to another, you want the user interface to render differently. Using a state might work, but once you have a collection of ",["$","code",null,{"children":"Movie"}],", the object used in many React components will be complicated to keep in synchronization. Thus, having it in a single place and being reactive to change is an elegant solution."]}],"\n",["$","p",null,{"children":["I recommend using Apollo local state only for information that strongly depends on the property type you add. Otherwise, another alternative, like client-side state management (for example, Redux) or to have a component state (for example, ",["$","code",null,{"children":"useState"}],") is less entangled."]}],"\n",["$","h1",null,{"children":"Step to Add a Field to a Type"}],"\n",["$","h2",null,{"children":"Modifying your GraphQL Schema"}],"\n",["$","p",null,{"children":["The first step to adding your new piece of data is to include the field in your GraphQL schema. In my case, I have a generated server-side unified file that has all the types of the GraphQL server. To keep the server-side schema separated, the best is to define a separate GraphQL file (",["$","code",null,{"children":".graphql"}],") for the local state. After that, specifying the exact type again is tolerated. The re-defined type only needs the local fields. Apollo will merge all types even if defined multiple types."]}],"\n",["$","pre",null,{"className":"language-graphql","children":["$","code",null,{"className":"language-graphql code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":"Movie"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token attr-name","children":"isStreaming"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token scalar","children":"Boolean"}],["$","span",null,{"className":"token operator","children":"!"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":["In our example, the ",["$","code",null,{"children":"Movie"}]," type has many fields, but we only define the local state field in this new file."]}],"\n",["$","p",null,{"children":["Then, you need to go into the fragment (or query) where you are fetching the field and add the new field to be fetched. The need of ",["$","code",null,{"children":"@client"}]," is required. It indicates that the field is not on the server."]}],"\n",["$","pre",null,{"className":"language-graphql","children":["$","code",null,{"className":"language-graphql code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"fragment"}]," ",["$","span",null,{"className":"token fragment function","children":"MovieFragment"}]," ",["$","span",null,{"className":"token keyword","children":"on"}]," ",["$","span",null,{"className":"token class-name","children":"Movie"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token property","children":"id"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token property","children":"title"}],"\r\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["  ",["$","span",null,{"className":"token property","children":"isStreaming"}]," ",["$","span",null,{"className":"token directive function","children":"@client"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","h2",null,{"children":"Modifying your CodeGen Configuration File"}],"\n",["$","p",null,{"children":["If you are using ",["$","a",null,{"href":"https://the-guild.dev/graphql/codegen/docs/integrations/apollo-local-state","children":"The Guild CodeGen"}],", there is an easy way for the generator to include the local state field. First, you must add a ",["$","code",null,{"children":"schema"}]," to your local GraphQL file you did in the previous step. That's it. Second, you auto-generated TypeScript. Now, the output will have the ",["$","code",null,{"children":"isStreaming"}]," field but will not query the field in the auto-generated ",["$","code",null,{"children":"gql"}]," statement."]}],"\n",["$","h2",null,{"children":"Default Value"}],"\n",["$","p",null,{"children":["Any ",["$","code",null,{"children":"useQuery"}]," that asks for your fragment (or query) that has the field will now fetch the data but still, need a default value for these fields. Until the value is written explicitly by you (we will cover that in a few), the value is ",["$","code",null,{"children":"undefined"}],". To define a default value, you must change the ",["$","code",null,{"children":"InMemoryCache"}]," to add a policy for your GraphQL type."]}],"\n",["$","p",null,{"children":["The concept is that you can determine how each field behaves in reading and writing. In that case, we specify our field ",["$","code",null,{"children":"read"}]," property to return ",["$","code",null,{"children":"false"}]," if the field is new (",["$","code",null,{"children":"undefined"}],"). Otherwise, it returns the value determined by us."]}],"\n",["$","pre",null,{"className":"language-tsx","children":["$","code",null,{"className":"language-tsx code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Snip..."}],"\r\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"new"}]," ",["$","span",null,{"className":"token class-name","children":"ApolloClient"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  link",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token comment","children":"// Snip,"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  cache",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token keyword","children":"new"}]," ",["$","span",null,{"className":"token class-name","children":"InMemoryCache"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["    typePolicies ",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token maybe-class-name","children":"Movie"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["        fields",["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["          isStreaming ",["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token function","children":"read"}],["$","span",null,{"className":"token punctuation","children":"("}],"existingValue",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line highlight-line","children":["              ",["$","span",null,{"className":"token keyword","children":"return"}]," existingValue ",["$","span",null,{"className":"token operator","children":"??"}]," ",["$","span",null,{"className":"token boolean","children":"false"}],["$","span",null,{"className":"token punctuation","children":";"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token punctuation","children":"}"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["          ",["$","span",null,{"className":"token punctuation","children":"}"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token punctuation","children":"}"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"}"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h2",null,{"children":"Updating the Value"}],"\n",["$","p",null,{"children":["The last step is to update the value locally. A change should not generate a GraphQL mutation because the field is unknown to the server. However, we want to have the same effect: on change it impacts everywhere the field was used. In our case, every React component that relies on the ",["$","code",null,{"children":"MovieFragment"}]," must be updated for a new render."]}],"\n",["$","p",null,{"children":["There are a few options; the one I prefer relies on the ",["$","code",null,{"children":"writeFragment"}]," because its foundation is the same as the data from the server. The method does not rely on external reactivity systems or third-party state management tools. It is also a single instruction using the Apollo Client."]}],"\n",["$","pre",null,{"className":"language-tsx","children":["$","code",null,{"className":"language-tsx code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Snip"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," client ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token function","children":"useApolloClient"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Snip"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["client",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token method function property-access","children":"writeFragment"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  id",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token template-string","children":[["$","span",null,{"className":"token template-punctuation string","children":"`"}],["$","span",null,{"className":"token interpolation","children":[["$","span",null,{"className":"token interpolation-punctuation punctuation","children":"$${"}],"existingEntity",["$","span",null,{"className":"token punctuation","children":"."}],"__typeName",["$","span",null,{"className":"token interpolation-punctuation punctuation","children":"}"}]]}],["$","span",null,{"className":"token string","children":":"}],["$","span",null,{"className":"token interpolation","children":[["$","span",null,{"className":"token interpolation-punctuation punctuation","children":"$${"}],"existingEntity",["$","span",null,{"className":"token punctuation","children":"."}],"id",["$","span",null,{"className":"token interpolation-punctuation punctuation","children":"}"}]]}],["$","span",null,{"className":"token template-punctuation string","children":"`"}]]}],["$","span",null,{"className":"token punctuation","children":","}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  fragment",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"MovieFragmentDoc"}],["$","span",null,{"className":"token punctuation","children":","}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  data",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token spread operator","children":"..."}],"existingMovie",["$","span",null,{"className":"token punctuation","children":","}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["    isStreaming",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":","}],"\r\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":","}],"\r\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":["The example above shows how to set the value to ",["$","code",null,{"children":"true"}],". Few details that are critical to have the mechanism working:\r\nThe ",["$","code",null,{"children":"id"}]," field must have the format of ",["$","code",null,{"children":"<entity name>:<entity id>"}],". You can write it the way I did, which works for every type.\r\nPass the ",["$","code",null,{"children":"fragment"}],", which is a breeze if you are using CodeGen since it has it for you auto-generated.\r\nYou pass the object with the value that you want to give.\r\nYou must pass a complete object; hence take the ",["$","code",null,{"children":"existingMovie"}]," coming from the ",["$","code",null,{"children":"useQuery"}]," from your component."]}],"\n",["$","p",null,{"children":["When this line is executed, if you have a breakpoint to the ",["$","code",null,{"children":"read"}]," function defined in this article, you will break the amount of time the field is used across your application to evaluate the value of the changing field. Exactly what we want."]}],"\n",["$","h1",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":"The documentation around this feature is present but needs clarification about the default value and how to ensure the field is updated. Also, I have not seen any mention of leveraging The Guilt Code Generator. I hope this article helps some of you."}]]]}]]}],["$","div",null,{"className":"BlogBody_paginationBar__1gsMc","children":[["$","div",null,{"className":"BlogBody_paginationTitle__H_eFX","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"BlogBody_paginationLinks__nk8zd","children":[["$","$L6","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L6","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L6","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L6","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L6","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L6","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L6","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L6","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L6","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L6","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L6","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L6","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L6","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L6","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L6","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L6","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L6","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L6","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L6","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L6","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L6","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L6","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L6","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L6","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L6","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L6","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L6","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L6","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L6","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L6","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L6","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L6","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L6","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L6","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L6","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L6","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L6","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L6","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L6","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L6","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L6","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L6","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L6","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L6","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L6","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L6","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L6","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L6","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L6","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L6","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L6","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L6","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L6","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L6","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L6","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L6","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L6","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L6","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L6","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L6","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L6","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L6","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L6","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L6","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L6","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L6","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L6","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L6","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L6","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L6","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L6","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L6","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L6","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L6","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L6","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L6","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L6","77",{"className":"","href":"/blog/page/77","children":77}],["$","$L6","78",{"className":"","href":"/blog/page/78","children":78}]]}]]}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Patrick Desjardins Blog - React Apollo Client Local State with Default Value on Fragment"}],["$","meta","3",{"name":"description","content":"React Apollo Client Local State with Default Value on Fragment"}]]
1:null
