3:I[5613,[],""]
5:I[1778,[],""]
6:I[5250,["250","static/chunks/250-d7e0a94ebe194dac.js","79","static/chunks/79-2d03397107aae3f1.js","308","static/chunks/app/blog/%5Bslug%5D/page-51ffba90d3459f4b.js"],""]
4:["slug","understand-typeScript-iterator-and-iterable","d"]
0:["1vQD30hvDOxOsywMykDOC",[[["",{"children":["blog",{"children":[["slug","understand-typeScript-iterator-and-iterable","d"],{"children":["__PAGE__?{\"slug\":\"understand-typeScript-iterator-and-iterable\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","understand-typeScript-iterator-and-iterable","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3ff82c7c50da3436.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","alignItems":"center","justifyContent":"center","height":"100vh"},"children":["$","div",null,{"style":{"width":"50%","height":"20%","backgroundColor":"#ffeded","borderRadius":12,"padding":12,"textAlign":"center"},"children":[["$","h1",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L6",null,{"href":"/","children":"Return Home"}]]}]}],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4f3d065c9e2d01e0.css","precedence":"next","crossOrigin":""}]],"$L7"]]]]
8:I[1749,["250","static/chunks/250-d7e0a94ebe194dac.js","79","static/chunks/79-2d03397107aae3f1.js","308","static/chunks/app/blog/%5Bslug%5D/page-51ffba90d3459f4b.js"],"Image"]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Patrick Desjardins Blog - Understand TypeScript Iterator and Iterable"}],["$","meta","3",{"name":"description","content":"Understand TypeScript Iterator and Iterable"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
2:["$","div",null,{"className":"__className_aaf875","children":["$","div",null,{"className":"layout_container__Tovb9","children":[["$","header",null,{"className":"layout_siteTitle__k5U8g","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"layout_navLinks__mf70r","children":["$","li",null,{"className":"layout_navLinkItem__1L8fB","children":[["$","$L6",null,{"className":"layout_navLinkText__bt28R","href":"/","children":"Main Page"}],["$","$L6",null,{"className":"layout_navLinkText__bt28R","href":"/blog","children":"Blog"}],[["$","$L6","2024",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2024","children":2024}],["$","$L6","2023",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2023","children":2023}],["$","$L6","2022",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2022","children":2022}],["$","$L6","2021",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2021","children":2021}],["$","$L6","2020",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2020","children":2020}],["$","$L6","2019",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2019","children":2019}],["$","$L6","2018",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2018","children":2018}],["$","$L6","2017",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2017","children":2017}],["$","$L6","2016",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2016","children":2016}],["$","$L6","2015",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2015","children":2015}],["$","$L6","2014",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2014","children":2014}],["$","$L6","2013",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2013","children":2013}],["$","$L6","2012",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2012","children":2012}],["$","$L6","2011",{"className":"layout_navLinkText__bt28R","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"className":"layout_blogPictureContainer__XC7nK","children":["$","$L8",null,{"className":"layout_blogTopPicture__RJHNN","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.jpeg","width":800,"height":260}]}],["$","main",null,{"className":"layout_main__mXTwS","children":[["$","h1",null,{"children":"Understand TypeScript Iterator and Iterable"}],["$","div",null,{"className":"layout_blogPostContainer__WYELx","children":[["$","p",null,{"className":"layout_blogPostDate__LUvx5","children":["Posted on: ","2023-03-24"]}],[["$","p",null,{"children":"TypeScript follows ECMAScript (JavaScript) specification, and the concept of iteration grew up in the language in the past few years. Thus, TypeScript support since many versions of the idea of iterator and iterable. I only had a use case to rely on them outside looping collection recently, where I was receiving a stream of data that was never ending using Kafka. I had to consume an infinite stream, perform operations and push the information out in the same endless fashion. This infinite looping introduced me to a more profound knowledge of iterator and iterable in a professional context."}],"\n",["$","p",null,{"children":"In this article, we will define a few fundamental concepts and demystify the difference between similar keywords around iterator. First, we will clarify the iterator and iterable terms but also see how we can iterate synchronously and asynchronously. In the second part, we will dive into the generator and make a bridge with the reason for their relationship."}],"\n",["$","h1",null,{"children":"Preface"}],"\n",["$","p",null,{"children":"Before diving, the concept of iteration is obscure. So, do not worry if it is not natural."}],"\n",["$","p",null,{"children":["Many factors with the iteration topic make it more challenging than others. First, it relies on a concept that must still be official in production release. As of March 2023, the feature is in ",["$","a",null,{"href":"https://github.com/tc39/proposal-iterator-helpers","children":"stage 3"}],". Thus, you will see many examples using ",["$","a",null,{"href":"https://github.com/leebyron/iterall","children":"iterall"}],", which is a library that was in place until ECMAScript gets an official specification. Iterall has been there since 2016. Thus many online examples rely on it. The two flavors cause fragmentation in samples, blog posts, books, and open-source projects. Moreover, the current online documentation on the topic is sparse, and public open-source projects mix several ways to perform the different actions with iteration."]}],"\n",["$","p",null,{"children":"Second, iterators are harder to grasp because iterable and iterators are rare in many development domains. For example, I had to develop iterable and iterator only once since the concept's inception in JavaScript in 2023. To double down, the idea of an iterator wasn't there for over 15 years in ECMAScript, making alternatives to traverse collection more prevalent."}],"\n",["$","p",null,{"children":["A third aspect that makes iterable harder to master is that it is built on top of other concepts like symbol, async, and generator (star function). While ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"async"}]}]}]}]," grew significantly, symbol and generator are less known, except for a few specific frameworks that leverage the concept."]}],"\n",["$","p",null,{"children":"In this post and the following ones, we rely on the current state of iteration that is fully supported in TypeScript and soon to be in ECMAScript. Therefore, we will refrain from discussing older ways like iterall. However, remember that if you must interact with an older library or a library that does not use TypeScript, you may have incompatibility and thus need to accommodate your recent code with older ways."}],"\n",["$","h1",null,{"children":"Basic Iterable - Array"}],"\n",["$","p",null,{"children":"Before building our own iterable and iteration, let's step back and understand the principle of iterable. An array is iterable. As a consumer of the array, you can loop its content. Looping all values are a form of iteration."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const arr: number[] = [1, 2, 3];"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for (const a of arr) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(`Value is: ${a}`);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":["We can iterate the array using ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"of"}]}]}]}],". The distinction between \"iterable\" and \"iteration\" is that \"iterable\" has the capability to be looped. On the other hand, \"iteration\" is how we loop the collection of values. In this case, the iterable is a collection of numbers that we use the default iteration that loops from the first index to the last."]}],"\n",["$","p",null,{"children":["Complete code in ",["$","a",null,{"href":"https://codesandbox.io/p/sandbox/blog-iterator-example-69s022?welcome=true","children":"CodeSandbox"}]]}],"\n",["$","h1",null,{"children":"Basic Iterable - Symbol and Iterator Object"}],"\n",["$","p",null,{"children":["The first concept that might be hard to grasp is that an array is an object with a specific function that allows the keywords ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"of"}]}]}]}]," to traverse the values. The iterable portion is not particular to an array. The power of that concept is that in the future, we will see that we can iterate an infinite stream as long as we support the contract of iterable."]}],"\n",["$","p",null,{"children":["The symbol is ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Symbol.iterator"}]}]}]}],", which defines a function that must have specific functions. The symbol function is the iterable part, and the function that holds that symbol is the iterator. The difference is fuzzy, and with TypeScript, we can make it more evident as we define these sections instantly."]}],"\n",["$","h1",null,{"children":"Basic Iterable and Iterator Structure"}],"\n",["$","p",null,{"children":"Adding TypeScript was a pivotal point in enlightening my understanding. So, let's create some basic code with both types to stitch both iterable and iteration concepts."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterator: Iterator<T> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  next: () =>{"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  return: (value?: any) =>{"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  throw: (e?:any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterable: Iterable<T> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  [Symbol.iterator] : myIterator<T>;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}]]}]}]}],"\n",["$","p",null,{"children":"Complete code in [CodeSandbox]https://codesandbox.io/p/sandbox/uwnnnw)"}],"\n",["$","p",null,{"children":["First, we define an iterator. The iterator is what establishes the loop. It is how we execute the action of getting value from a data structure. It is not limited to moving the index by one in an array. In each iteration, the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," function is called. If the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," function returns a specific object, it continues to loop; otherwise, it stops. The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"returns"}]}]}]}]," function and the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"throw"}]}]}]}]," functions are additional optional features; let's not worry about these two functions and focus on the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}],"."]}],"\n",["$","p",null,{"children":"The following code creates a loop from 0 to a random ending number under 50."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"let index = 0;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const end = 10 + Math.random() * 40;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterator: Iterator<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  next: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    if (index >= end) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        value: index,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        done: index >= end,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  // return: (value?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  //   // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  // },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  // throw: (e?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  //   // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  // },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}]]}]}]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"myIterable"}]}]}]}]," is the host of the logic for the looping. When the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"of"}]}]}]}]," receives the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Iterable"}]}]}]}]," object, it starts calling ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," on the function specified in ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Symbol.iterator"}]}]}]}],". In our example, it calls ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," on the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"myIterator"}]}]}]}]," of type ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Iterator<number>"}]}]}]}],"."]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," function returns a value that is the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"index"}]}]}]}]," but wrapped inside an object with two fields: ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"value"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"done"}]}]}]}],". The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"value"}]}]}]}]," field is the generic type defined in the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Iterable"}]}]}]}]," object, in our example, ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"number"}]}]}]}],". The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"done"}]}]}]}]," is a boolean that indicates the iterable if we are done looping."]}],"\n",["$","p",null,{"children":["We can better understand what is happening if we explicitly call the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," function instead of relying on the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for of"}]}]}]}]," mechanism. Also, to encapsulate the moving part, like the index and end, let's move some pieces of code. Also, let's remove the randomness and only have an iteration that goes from 0 to 2 inclusively."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterable: Iterable<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  [Symbol.iterator]: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    let index = 0;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const end = 3;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const myIterator: Iterator<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      next: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        if (index >= end) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: index,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: index >= end,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      // return: (value?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      //   // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      // },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      // throw: (e?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      //   // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      // },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    return myIterator;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for (const c of myIterable) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(`Value is: ${c}`);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const newIteration = myIterable[Symbol.iterator]();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}]]}]}]}],"\n",["$","p",null,{"children":["The result might surprise you. The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for of"}]}]}]}]," loop returns:"]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"sh","data-theme":"github-light","children":["$","code",null,{"data-language":"sh","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Value is: 1"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Value is: 2"}]}]]}]}]}],"\n",["$","p",null,{"children":"And the four console logs return:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"json","data-theme":"github-light","children":["$","code",null,{"data-language":"json","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 1, done: false }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 2, done: false }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}]]}]}]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for of"}]}]}]}]," loop is natural, showing the value of 1 and 2 since we wanted to loop from 0 to 3, but we increment the index before the check and use the bigger or equal operator -- so 1 and 2 only, not 0 or 3 included. The explicit calls to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," shows why the loop stops: the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"done"}]}]}]}]," is ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"true"}]}]}]}]," on the third call, in the case of the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for of"}]}]}]}]," the loop end. However, when we call it manually, we can keep calling the function. The result will be the same until something internally change. For example, the index would go with a timer suddenly back to zero."]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://codesandbox.io/p/sandbox/blog-iterator-example-2-forked-kbn4px","children":"CodeSandBox Code"}]}],"\n",["$","h1",null,{"children":"The Iterator Optional Return and Throw Functions"}],"\n",["$","p",null,{"children":["So far, we have commented the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"return"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"throw"}]}]}]}]," functions. The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"return"}]}]}]}]," function is a way to inject into the iterator that it must stop. We could call this function after the first loop (returning the value 1). It would automatically stop by setting to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"done"}]}]}]}],". Any future call to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," would never return the value 2. However, that still requires us to handle the return. In our example, it means to set the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"index"}]}]}]}]," to a position (value) that it will stop. Thus, to implement the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"return"}]}]}]}]," function, the code must set the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"index"}]}]}]}]," to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"end"}]}]}]}]," and return ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"done"}]}]}]}],"."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterable: Iterable<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  [Symbol.iterator]: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    let index = 0;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const end = 3;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const myIterator: Iterator<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      next: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        if (index >= end) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: index,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: false,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      return: (value?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index = end;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      // throw: (e?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      //   // return an IteratorResult<T, TReturn>"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      // },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    return myIterator;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const newIteration = myIterable[Symbol.iterator]();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.return());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}]]}]}]}],"\n",["$","p",null,{"children":"The result:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"json","data-theme":"github-light","children":["$","code",null,{"data-language":"json","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 1, done: false }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}]]}]}]}],"\n",["$","p",null,{"children":["Without setting ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":" index = end"}]}]}]}]," the following ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," continues as usual."]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"throw"}]}]}]}]," function is similar. The function allows calling the throw function on the iterator. If we modify our code, we can have the logic that if the iterator's consumer calls throws, we reset the index to zero for subsequent ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," to iterate back from the beginning."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterable: Iterable<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  [Symbol.iterator]: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    let index = 0;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const end = 3;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const myIterator: Iterator<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      next: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        if (index >= end) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: index,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: false,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      return: (value?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index = end;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      throw: (e?: any) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index = 0;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: 0,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    return myIterator;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const newIteration = myIterable[Symbol.iterator]();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(\"Before returns\");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.return());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(\"After returns\");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(\"Before throw\");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.throw());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(\"After throw\");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.next());"}]}]]}]}]}],"\n",["$","p",null,{"children":"The output is:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"json","data-theme":"github-light","children":["$","code",null,{"data-language":"json","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 1, done: false }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Before returns"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"After returns"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Before throw"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 0, done: true }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"After throw"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 1, done: false }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: 2, done: false }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"{ value: null, done: true }"}]}]]}]}]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"return"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"throw"}]}]}]}]," are not required for iterating and are helpful in a more advanced scenario with a generator interacting more in-depth with the iteration. We will see the generator soon."]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://codesandbox.io/p/sandbox/blog-iterator-example-3-forked-s3e3xx","children":"CodeSandBox"}]}],"\n",["$","h1",null,{"children":"TypeScript Iterator Next, Return and Throw Additional Information"}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," function is the most used and the one you should focus on first. The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"return"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"throw"}]}]}]}]," are not needed in all scenarios but, in some cases, will be mandated to be able to connect your iterator in some existing system."]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"return"}]}]}]}]," and ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"throw"}]}]}]}]," accept a value upon which the iterator can apply logic."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.return(100));"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(newIteration.throw(new Error(\"My Error Here\"));"}]}]]}]}]}],"\n",["$","p",null,{"children":"The two functions are a way to inject values on specific cases into the iterator. The goal is to adapt the iteration as the looping occurs."}],"\n",["$","p",null,{"children":["Finally, all the examples presented are function and type but can be done with ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"class"}]}]}]}],". For example, you can migrate the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterable: Iterable<number>"}]}]}]}]," to be ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"class MyIterable implements Iterable<number>"}]}]}]}],". As long as the class has the function ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"[Symbol.iterator]"}]}]}]}],", it is the same as having an object with the function ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"[Symbol.iterator]"}]}]}]}],"."]}],"\n",["$","h1",null,{"children":"Asynchronous Iterator"}],"\n",["$","p",null,{"children":["TypeScript (and JavaScript) have the same concept of iterator and iterable with asynchronous code, allowing the loop on code that might take time on each ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}],". For example, imagine that you are performing a REST HTTP call on each next. Instead of blocking the main thread, we can use ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"async"}]}]}]}]," function and have a promise resolved in the return statement. Let's adapt our example to loop with a timer to demonstrate the asynchronous iterator and iterable code."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const myIterable: AsyncIterable<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  [Symbol.asyncIterator]: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    let index = 0;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const end = 3;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    const myIterator: AsyncIterator<number> = {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      next: async () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        await new Promise((resolve) => setTimeout(resolve, 500));"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        if (index >= end) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return Promise.resolve({"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          });"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          return Promise.resolve({"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            value: index,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"            done: false,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          });"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    return myIterator;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"(async () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  const newIteration = myIterable[Symbol.asyncIterator]();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(await newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(await newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(await newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(await newIteration.next());"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"})();"}]}]]}]}]}],"\n",["$","p",null,{"children":["The code prefix the type with ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Async"}]}]}]}]," and has a new symbol to define the function ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Symbol.asyncIterator"}]}]}]}],". Having two symbols for sync and async allows your iterator to support both cases if needed. Otherwise, we must return a promise with our values. In this snippet of code, we are calling explicitly the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," but we could also have a loop using: ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for await (const c of myIterable)"}]}]}]}],"."]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://codesandbox.io/p/sandbox/blog-iterator-example-4-forked-rhjjzl","children":"CodeSandBox"}]}],"\n",["$","h1",null,{"children":"Why Iterable and Iterator?"}],"\n",["$","p",null,{"children":["At first, it might be confusing between iterable and iterator. The ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Iterator_pattern","children":"design pattern"}]," behind it is well-known but easy to forget. The concept is that the developer of a structure that can be iterable abstracts how to navigate the data outside the data structure. The logic of traversing the values is outside the iterable structure: it lives inside an iterator. The power of the design pattern is that a single iterable object can have many ways to traverse the data. For example, we could have on a list (iterable) one way to traverse from the first element to the last one (one iterator) and another way to travel from the last element to the first one (second iterator). In the future, we could add an iterator that only could even number (third iterator). Each iterator does not modify the data structure; it only leverages it and applies a custom algorithm to decide the following value to consume."]}],"\n",["$","h2",null,{"children":"Example of One Iterable with Many Iterator"}],"\n",["$","p",null,{"children":"Let's create an iterable structure that holds numbers and has two iterators: one that returns odd numbers and one even number."}],"\n",["$","p",null,{"children":["The first step would be to create a function that returns an ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"Iterable"}]}]}]}]," instead of an object. That way, we can ",["$","em",null,{"children":"create"}]," many of this data structure and add additional functions to add values."]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const numberStructure = () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  const values: number[] = [];"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  let iterator: (values: number[]) => Iterator<number> = allIterator;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    [Symbol.iterator]: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      return iterator(values);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    add: (valueToAdd: number) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      values.push(valueToAdd);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    iterateBy: (iteratorToChange: (values: number[]) => Iterator<number>) => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      iterator = iteratorToChange;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}]]}]}]}],"\n",["$","p",null,{"children":"Then we can create some iterators. One to loop all values:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const allIterator: (values: number[]) => Iterator<number> = ("}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  values: number[]"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":") => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  let index = -1;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    next: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      if (index >= values.length) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: values[index],"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: false,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}]]}]}]}],"\n",["$","p",null,{"children":"This particular one is simpler, which iterates every value from the array and returns one object per collection element."}],"\n",["$","p",null,{"children":"And one to loop only even numbers:"}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const evenIterator: (values: number[]) => Iterator<number> = ("}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  values: number[]"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":") => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  let index = -1;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    next: () => {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      while (values[index] % 2 !== 0 && index < values.length) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        index++;"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      }"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      if (index > values.length) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: null,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: true,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      } else {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        return {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          value: values[index],"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"          done: false,"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"        };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"      }"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"    },"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  };"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"};"}]}]]}]}]}],"\n",["$","p",null,{"children":["The ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"evenIterator"}]}]}]}]," is peculiar because it does not return one object for every value. Instead, it has to return only the even values. Hence, we must skip values in the iteration. To skip values in an iterator, we must not return the object but still have the ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"next"}]}]}]}]," function return something. Hence, the best approach is to have an inner loop that restraint returning anything until we find a desired value (in this iterator example, an even number) or complete the iteration completely by returning ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"done"}]}]}]}]," to ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"true"}]}]}]}],"."]}],"\n",["$","p",null,{"children":"Then we can use a single array of numbers and traverse it differently by assigning a different iterator."}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":[["$","span",null,{"data-line":"","children":["$","span",null,{"children":"const s1 = numberStructure();"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"s1.add(1);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"s1.add(2);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"s1.add(3);"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(\"Log all numbers\");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for (const s of s1) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(s);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}],"\n",["$","span",null,{"data-line":"","children":" "}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"console.log(\"Log even numbers\");"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"s1.iterateBy(evenIterator);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"for (const s of s1) {"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"  console.log(s);"}]}],"\n",["$","span",null,{"data-line":"","children":["$","span",null,{"children":"}"}]}]]}]}]}],"\n",["$","p",null,{"children":["We are creating the iterator has a function to ensure that each iterator has a closure for its own ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"index"}]}]}]}],". In the case of the ",["$","em",null,{"children":"class"}]," approach, we would instantiate a new iterator class for each iterator."]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://codesandbox.io/p/sandbox/blog-iterator-example-5-forked-yxhqtq","children":"CodeSandBox"}]}],"\n",["$","h1",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":["Iteration remains a specialized way to perform an operation that we often use basic structure's innate functions. In this blog post, the example of even number can be simplified by using ",["$","span",null,{"data-rehype-pretty-code-figure":"","children":["$","code",null,{"data-language":"plaintext","data-theme":"github-light","style":{"backgroundColor":"#fff","color":"#24292e"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"filter"}]}]}]}],":"]}],"\n",["$","figure",null,{"data-rehype-pretty-code-figure":"","children":["$","pre",null,{"style":{"backgroundColor":"#fff","color":"#24292e"},"tabIndex":"0","data-language":"ts","data-theme":"github-light","children":["$","code",null,{"data-language":"ts","data-theme":"github-light","style":{"display":"grid"},"children":["$","span",null,{"data-line":"","children":["$","span",null,{"children":"myCollection.filter((d) => d % 2 === 0);"}]}]}]}]}],"\n",["$","p",null,{"children":"Thus, we must be wise when getting into iterable and iterator. A good use case is if you have a unique structure that has a special storing mechanism. Hence, the user may not be able to read the data sequentially like a simple loop. Also, we will cover in a future article that the iterative and iterator are powerful tools when we have a continuous data stream. For example, you may want your user to inject code into a stream of push notifications from a WebSocket or RedPandan/Kafka."}],"\n",["$","p",null,{"children":["If you are interested to learn more about iterator using ",["$","em",null,{"children":"class"}],", Carlos Caballero wrote a great article ",["$","a",null,{"href":"https://www.carloscaballero.io/understanding-iterator-pattern-in-javascript-typescript-using-symbol-iterator/","children":"here"}],"."]}]]]}]]}],["$","div",null,{"className":"layout_paginationBar__jnuuR","children":[["$","div",null,{"className":"layout_paginationTitle__PsOw5","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"layout_paginationLinks__LdBaH","children":[["$","$L6","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L6","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L6","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L6","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L6","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L6","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L6","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L6","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L6","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L6","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L6","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L6","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L6","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L6","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L6","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L6","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L6","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L6","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L6","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L6","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L6","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L6","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L6","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L6","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L6","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L6","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L6","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L6","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L6","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L6","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L6","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L6","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L6","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L6","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L6","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L6","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L6","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L6","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L6","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L6","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L6","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L6","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L6","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L6","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L6","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L6","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L6","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L6","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L6","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L6","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L6","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L6","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L6","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L6","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L6","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L6","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L6","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L6","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L6","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L6","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L6","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L6","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L6","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L6","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L6","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L6","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L6","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L6","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L6","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L6","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L6","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L6","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L6","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L6","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L6","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L6","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L6","77",{"className":"","href":"/blog/page/77","children":77}]]}]]}]]}]}]
