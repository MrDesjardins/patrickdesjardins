3:I[6102,[],""]
5:I[2609,[],""]
6:I[6196,["196","static/chunks/196-d9d7275cf071dc4b.js","986","static/chunks/986-aab1d30514616ab7.js","308","static/chunks/app/blog/%5Bslug%5D/page-1d51dd1d8a502245.js"],""]
4:["slug","typescript-vs-flow-part-3-of-3-syntax-difference","d"]
0:["bAgOZfxVFEnEOIYkbcdrO",[[["",{"children":["blog",{"children":[["slug","typescript-vs-flow-part-3-of-3-syntax-difference","d"],{"children":["__PAGE__?{\"slug\":\"typescript-vs-flow-part-3-of-3-syntax-difference\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","typescript-vs-flow-part-3-of-3-syntax-difference","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fcb9e03867a4ea9e.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/5c2c40c02c39ca14.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f810ef15b2c7fffa.css","precedence":"next","crossOrigin":"$undefined"}]],["$","div",null,{"className":"layout_blogbodystyle___Uc1w","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/78bcead87aa8ba1c.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","className":"layout_htmlstyle__PseMz","children":["$","body",null,{"className":"layout_bodystyle__4ncsS","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","alignItems":"center","justifyContent":"center","height":"100vh"},"children":["$","div",null,{"style":{"width":"50%","height":"20%","backgroundColor":"#ffeded","borderRadius":12,"padding":12,"textAlign":"center"},"children":[["$","h1",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L6",null,{"href":"/","children":"Return Home"}]]}]}],"notFoundStyles":[]}]}]}]],null],null],["$L7",null]]]]
8:I[8986,["196","static/chunks/196-d9d7275cf071dc4b.js","986","static/chunks/986-aab1d30514616ab7.js","308","static/chunks/app/blog/%5Bslug%5D/page-1d51dd1d8a502245.js"],"Image"]
2:["$","div",null,{"className":"BlogBody_BlogBody__600mT","children":[["$","header",null,{"className":"BlogBody_siteTitle__f7uyb","children":"Patrick Desjardins Blog"}],["$","nav",null,{"children":["$","ul",null,{"className":"BlogBody_navLinks__ZV12t","children":["$","li",null,{"className":"BlogBody_navLinkItem__Pml2e","children":[["$","$L6",null,{"className":"BlogBody_navLinkText__ZtH2y","href":"/","children":"Main Page"}],["$","$L6",null,{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog","children":"Blog"}],[["$","$L6","2025",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2025","children":2025}],["$","$L6","2024",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2024","children":2024}],["$","$L6","2023",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2023","children":2023}],["$","$L6","2022",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2022","children":2022}],["$","$L6","2021",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2021","children":2021}],["$","$L6","2020",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2020","children":2020}],["$","$L6","2019",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2019","children":2019}],["$","$L6","2018",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2018","children":2018}],["$","$L6","2017",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2017","children":2017}],["$","$L6","2016",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2016","children":2016}],["$","$L6","2015",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2015","children":2015}],["$","$L6","2014",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2014","children":2014}],["$","$L6","2013",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2013","children":2013}],["$","$L6","2012",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2012","children":2012}],["$","$L6","2011",{"className":"BlogBody_navLinkText__ZtH2y","href":"/blog/for/2011","children":2011}]]]}]}]}],["$","div",null,{"className":"BlogBody_blogPictureContainer__IAbPL","children":["$","$L8",null,{"className":"BlogBody_blogTopPicture__L6lao","alt":"Patrick Desjardins picture from a conference","src":"/images/backgrounds/patrickdesjardins_conference_bw.webp","width":800,"height":260}]}],["$","main",null,{"className":"BlogBody_main__XrdKY","children":[["$","h1",null,{"className":"BlogBody_heading__bYRBe","children":"TypeScript vs Flow (Part 3 of 3) - Syntax Difference"}],["$","div",null,{"className":"Page_blogPostContainer__AUIcf","children":[["$","p",null,{"className":"Page_blogPostDate__wVWWB","children":["Posted on: ","2017-08-30"]}],[["$","p",null,{"children":"This is part three of three of TypeScript vs Flow. We previously saw the fundamental differences between TypeScript and Flow, then we saw some high-level differences in terms of features. Now, we will see at a much lower level the differences at the syntax."}],"\n",["$","h1",null,{"children":"Declaration"}],"\n",["$","p",null,{"children":"TypeScript and Flow are exactly the same."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":"Const \n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," \n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Primitive"}],"\n",["$","p",null,{"children":"Again, no difference."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":"Number \n"}],["$","span",null,{"className":"code-line","children":"Boolean \n"}],["$","span",null,{"className":"code-line","children":"String \n"}],["$","span",null,{"className":"code-line","children":"Null \n"}],["$","span",null,{"className":"code-line","children":"Undefined \n"}],["$","span",null,{"className":"code-line","children":"Void\n"}]]}]}],"\n",["$","h1",null,{"children":"Array"}],"\n",["$","p",null,{"children":"And again, no difference."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}]," \n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token builtin","children":"Array"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token operator","children":">"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Enum"}],"\n",["$","p",null,{"children":"TypeScript is shorted:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Language file:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"export"}]," ",["$","span",null,{"className":"token keyword","children":"enum"}]," Language ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" English",["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":" French\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Use of Language file:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," Language ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token keyword","children":"from"}]," ",["$","span",null,{"className":"token string","children":"\"../general/Language\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"export"}]," ",["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"LocaleManager"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token keyword","children":"public"}]," ",["$","span",null,{"className":"token keyword","children":"static"}]," ",["$","span",null,{"className":"token function","children":"GetLocale"}],["$","span",null,{"className":"token punctuation","children":"("}],"language",["$","span",null,{"className":"token operator","children":":"}]," Language",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token keyword","children":"void"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token keyword","children":"switch"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"language",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token comment","children":"// ..."}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"Flow requires the value in const, and special import. It's more verbose."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Language file:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// @flow"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"export"}]," ",["$","span",null,{"className":"token keyword","children":"const"}]," ",["$","span",null,{"className":"token constant","children":"LANGUAGES_VALUE"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token constant","children":"FRENCH"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"French\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token constant","children":"ENGLISH"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"English\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"export"}]," ",["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":"Language"}]," ",["$","span",null,{"className":"token operator","children":"="}]," $Values",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token keyword","children":"typeof"}]," ",["$","span",null,{"className":"token constant","children":"LANGUAGES_VALUE"}],["$","span",null,{"className":"token operator","children":">"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Use of Language file:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," ",["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," Language ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token keyword","children":"from"}]," ",["$","span",null,{"className":"token string","children":"\"../general/Language\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token constant","children":"LANGUAGES_VALUE"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token keyword","children":"from"}]," ",["$","span",null,{"className":"token string","children":"\"../general/Language\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"export"}]," ",["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"LocaleManager"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token keyword","children":"static"}]," ",["$","span",null,{"className":"token function","children":"GetLocale"}],["$","span",null,{"className":"token punctuation","children":"("}],"language",["$","span",null,{"className":"token operator","children":":"}]," Language",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token keyword","children":"void"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"switch"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"language",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// ..."}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Maybe Argument"}],"\n",["$","p",null,{"children":"Watch out the question mark in the few next examples. Flow distinguishes null and undefined between optional and maybe."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":["TypeScript",["$","span",null,{"className":"token operator","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"{"}]," propertyName",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token comment","children":"//Allow null & undefined"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"Flow:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"{"}]," propertyName",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token comment","children":"//Allow null & undefined "}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Optional Property"}],"\n",["$","p",null,{"children":"TypeScript:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"{"}]," propertyName",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token comment","children":"//Allow null & undefined "}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"Flow:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"{"}]," propertyName",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token comment","children":"//Allow undefined "}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Optional Argument"}],"\n",["$","p",null,{"children":"TypeScript:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token punctuation","children":"("}]," propertyName",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token comment","children":"//Allow null & undefined"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"Flow:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"("}]," propertyName",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token comment","children":"//Allow undefined "}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Literal value as type"}],"\n",["$","p",null,{"children":"In both cases, same syntax. For example, the code below only accepts the value of two. The difference is that TypeScript allows us to pass null or undefined. Flow doesn’t. To have Flow accept null you need to use the maybe concept which is to put a question mark right before the two."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"value",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Flow to accept 2 and null and undefined:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"value",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Flow to accept 2 and undefined by not null:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"value",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Union type"}],"\n",["$","p",null,{"children":"Union type are supported by both and have the same syntax. Indeed, TypeScript allows to pass null and undefined while Flow doesn't."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"a\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token string","children":"\"b\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token string","children":"\"c\""}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Flow to have also null and undefined:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"a\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token string","children":"\"b\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token string","children":"\"c\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token keyword","children":"null"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Union primitive type"}],"\n",["$","p",null,{"children":"Union with primitive work the same. TypeScript is consistent by letting null and undefined as well."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Flow to accept null and undefined:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token keyword","children":"null"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Mixed keyword"}],"\n",["$","p",null,{"children":["Mixed doesn’t exist with TypeScript, so here is how it’s written in Flow. In TypeScript, you would use ",["$","code",null,{"children":"any"}]," or an empty definition with the curly brace: ",". The difference is that with ",["$","code",null,{"children":"any"}]," or curly brackets you can redefine the variable with any type once initialized. With Flow and the use of mixed, it’s any type until it’s defined. Once defined, the type is set for the life of the variable. Nice addition to the language, it’s a “dynamic any”."]}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":":"}]," mixed",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Any type"}],"\n",["$","p",null,{"children":"Same syntax."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"arg1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"any"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Define return type"}],"\n",["$","p",null,{"children":"Returning value is with the semi-colon followed by the type. If nothing, return void."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Function type"}],"\n",["$","p",null,{"children":"The signature of a method is exactly the same. It uses the JavaScript keyword “function” with parentheses that contain the name followed by the type. After the semicolon, the type is returned."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"p1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":","}]," p2",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token keyword","children":"void"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Function w/o type"}],"\n",["$","p",null,{"children":"Function returns void by default in both."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],"p1",["$","span",null,{"className":"token punctuation","children":","}]," p2",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," \n"]}]}]}],"\n",["$","h1",null,{"children":"Function fat arrow"}],"\n",["$","p",null,{"children":"Fat arrow is a copy and paste between the two."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," ",["$","span",null,{"className":"token function-variable function","children":"funct"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"p1",["$","span",null,{"className":"token punctuation","children":","}]," p2",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"=>"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Function with callback"}],"\n",["$","p",null,{"children":"Callback arguments are written the same way in TypeScript or Flow."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token function-variable function","children":"cb"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"e",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token keyword","children":"null"}],["$","span",null,{"className":"token punctuation","children":","}]," v",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"=>"}]," ",["$","span",null,{"className":"token keyword","children":"void"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Funct with rest"}],"\n",["$","p",null,{"children":"Both support the long and short version."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token operator","children":"..."}],"args",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"Array"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token operator","children":">"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct2"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token operator","children":"..."}],"args",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Type Alias"}],"\n",["$","p",null,{"children":"Aliases are written the same way in both case."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," obj1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token boolean","children":"true"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// or"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":"MyType"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," value",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," obj2",["$","span",null,{"className":"token operator","children":":"}]," MyType",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Type Alias with Generic"}],"\n",["$","p",null,{"children":"Generic doesn't change anything. TypeScript and Flow stays the same."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":["MyObject",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"A"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token constant","children":"B"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token constant","children":"C"}],["$","span",null,{"className":"token operator","children":">"}]]}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" property",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"A"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token function","children":"method"}],["$","span",null,{"className":"token punctuation","children":"("}],"val",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"B"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"C"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyObject",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," property",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token function-variable function","children":"method"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"=>"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token keyword","children":"return"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":";"}],["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Subtype"}],"\n",["$","p",null,{"children":"Defining your own type is the same in Flow or TypeScript."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":"TypeLetters"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"A\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token string","children":"\"B\""}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token string","children":"\"C\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Object as map"}],"\n",["$","p",null,{"children":"The first part is the same. You can use a string between square bracket to access in read or write a member of an object."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," o",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["o",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token string","children":"\"foo\""}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"However, TypeScript won’t allow dynamic adding of a member. In TypeScript, once a type is set to a variable, this one cannot change. The exception is the \"any\" type."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," o",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["o",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token string","children":"\"foo\""}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["o",["$","span",null,{"className":"token punctuation","children":"["}],"“bar”",["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"//This will work in Flow, but not in TypeScript"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"This is interesting since Flow is looser in this regard, and TypeScript is looser in term of the null/undefined. The justification of TypeScript to be strict is its structural typing."}],"\n",["$","h1",null,{"children":"Array"}],"\n",["$","p",null,{"children":"Pretty similar except the case of allowing Null. Here are all the similar scenarios."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," y ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"3"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," z ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token keyword","children":"new"}]," ",["$","span",null,{"className":"token class-name","children":["$","span",null,{"className":"token builtin","children":"Array"}]}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," w",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token boolean","children":"false"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," v",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"Array"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token boolean","children":"false"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"Here is how TypeScript does with null (nothing to do) and how to add the possibility of null in Flow."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," s",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token keyword","children":"null"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," s",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token operator","children":"?"}],["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token keyword","children":"null"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Tuple"}],"\n",["$","p",null,{"children":"Same syntax for tuple."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," tuple",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"three\""}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Key interpolation"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," obj1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token boolean","children":"true"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["obj1",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token string","children":"\"foo\""}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token boolean","children":"false"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Opaque Type"}],"\n",["$","p",null,{"children":"With Flow you can define a type detail to be only available to a module. Here is an example. It can be used by an external module by importing it. However, the other file that imports won’t be able to assign it as Number, only as “MyType”. This feature can be interesting for people to enforce the use of their type. This is not available for TypeScript."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":["opaque ",["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":"MyType"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Interface and Implementation"}],"\n",["$","p",null,{"children":"Implementing an interface is the same in Flow or TypeScript."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"Serializable"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token function","children":"serialize"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Foo"}]," ",["$","span",null,{"className":"token keyword","children":"implements"}]," ",["$","span",null,{"className":"token class-name","children":"Serializable"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token function","children":"serialize"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token keyword","children":"return"}]," ",["$","span",null,{"className":"token string","children":"'[Foo]'"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Interface as map"}],"\n",["$","p",null,{"children":"Both share the same syntax."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"MyInterface"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token punctuation","children":"["}],"key",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["x",["$","span",null,{"className":"token punctuation","children":"."}],"key ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Interface and object"}],"\n",["$","p",null,{"children":"Both are the same for the first part."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"MyInterface"}],["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["  bar",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  foo ",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"foo\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["  bar ",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"1"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"However, TypeScript is more permissive since you do not have to define both members. You can just define the type, without defining any value at all, and later assign the value. By default, the value will be undefined."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["x",["$","span",null,{"className":"token punctuation","children":"."}],"foo ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"foo\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["x",["$","span",null,{"className":"token punctuation","children":"."}],"bar ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Covariance property (readonly)"}],"\n",["$","p",null,{"children":"The syntax is a little bit different. TypeScript is using a longer approach, similar to C# with the keyword \"readonly\". Flow is using the plus symbol."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"MyInterface"}],["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token keyword","children":"readonly"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"bar\""}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["x",["$","span",null,{"className":"token punctuation","children":"."}],"foo ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"123\""}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"// Blocked!"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"Flow:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"MyInterface"}],["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token operator","children":"+"}],"foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"bar\""}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["x",["$","span",null,{"className":"token punctuation","children":"."}],"foo ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"123\""}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"// Blocked!"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Contravariance"}],"\n",["$","p",null,{"children":"TypeScript needs to have the type to be defined to all possible value. In the following example, the field is of type number. However, in the code, it can be a number or a string. TypeScript blocks the code to compile since there is a possibility of being a string, so it says that it must be a number or a string."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"Contravariant"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," writeOnly",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," numberOrString ",["$","span",null,{"className":"token operator","children":"="}]," Math",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"random"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token number","children":"0.5"}]," ",["$","span",null,{"className":"token operator","children":"?"}]," ",["$","span",null,{"className":"token number","children":"42"}]," ",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"'forty-two'"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," value2",["$","span",null,{"className":"token operator","children":":"}]," Contravariant ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," writeOnly",["$","span",null,{"className":"token operator","children":":"}]," numberOrString ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"// Doesn't work. Need to change the type number to be : number | string"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"With Flow, with the same syntax, you get the same result. However, with the sign minus, you can make the code to be contravariant."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":"Contravariant"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token operator","children":"-"}],"writeOnly",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," numberOrString ",["$","span",null,{"className":"token operator","children":"="}]," Math",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"random"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token number","children":"0.5"}]," ",["$","span",null,{"className":"token operator","children":"?"}]," ",["$","span",null,{"className":"token number","children":"42"}]," ",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"'forty-two'"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," value2",["$","span",null,{"className":"token operator","children":":"}]," Contravariant ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," writeOnly",["$","span",null,{"className":"token operator","children":":"}]," numberOrString ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"// Works!"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"Again, this is a small syntax difference. At the end, isn't just simpler to just mark the type to \"string | number\" in both case?"}],"\n",["$","h1",null,{"children":"Generic Class"}],"\n",["$","p",null,{"children":"Exact same syntax."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":["Item",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token operator","children":">"}]]}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" prop",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token function","children":"constructor"}],["$","span",null,{"className":"token punctuation","children":"("}],"param",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token keyword","children":"this"}],["$","span",null,{"className":"token punctuation","children":"."}],"prop ",["$","span",null,{"className":"token operator","children":"="}]," param",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," item1",["$","span",null,{"className":"token operator","children":":"}]," Item",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token keyword","children":"new"}]," ",["$","span",null,{"className":"token class-name","children":"Item"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token number","children":"42"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Generic Interface"}],"\n",["$","p",null,{"children":"As we saw earlier, TypeScript allows to declare a type and not instantiated completely or completely. Flow must declare and instantiate."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"interface"}]," ",["$","span",null,{"className":"token class-name","children":["MyInterface",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"A"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token constant","children":"B"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token constant","children":"C"}],["$","span",null,{"className":"token operator","children":">"}]]}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" foo",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"A"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[" bar",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"B"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[" baz",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"C"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"// Flow and TypeScript:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"foo",["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token string","children":"\"1\""}],["$","span",null,{"className":"token punctuation","children":","}]," bar",["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token number","children":"4"}],["$","span",null,{"className":"token punctuation","children":","}]," baz",["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"// Only TypeScript:"}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," MyInterface",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token builtin","children":"boolean"}],["$","span",null,{"className":"token operator","children":">"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"// Notice that we only declare."}],"\n"]}],["$","span",null,{"className":"code-line","children":["x",["$","span",null,{"className":"token punctuation","children":"."}],"foo ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"123\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Generic Type"}],"\n",["$","p",null,{"children":"Both allows to have generic type in the same syntax."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":["Item",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token operator","children":">"}]]}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" prop",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Generic Function"}],"\n",["$","p",null,{"children":"Generic function share the same syntax between Flow and TypeScript."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token generic-function","children":[["$","span",null,{"className":"token function","children":"funct1"}],["$","span",null,{"className":"token generic class-name","children":[["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token operator","children":">"}]]}]]}],["$","span",null,{"className":"token punctuation","children":"("}],"p1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token punctuation","children":","}]," p2 ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"Smith\""}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","h1",null,{"children":"Default parameter value"}],"\n",["$","p",null,{"children":"Default parameter use the equal sign followed by the value in both cases."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"function"}]," ",["$","span",null,{"className":"token function","children":"funct1"}],["$","span",null,{"className":"token punctuation","children":"("}],"p1",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":","}]," p2 ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"Smith\""}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],"\n",["$","h1",null,{"children":"Generic Type with default type and value"}],"\n",["$","p",null,{"children":"TypeScript uses the keyword extends to have a generic type from a particular type. Default value is the same."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":["Type Item",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"T"}]," ",["$","span",null,{"className":"token keyword","children":"extends"}]," ",["$","span",null,{"className":"token class-name","children":["$","span",null,{"className":"token builtin","children":"number"}]}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" prop",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","p",null,{"children":"Flow uses the semicolon to enforce the generic type and equal sign for default."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," ",["$","span",null,{"className":"token class-name","children":["Item",["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token operator","children":">"}]]}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" prop",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"T"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],"\n",["$","h1",null,{"children":"Cast"}],"\n",["$","p",null,{"children":"Cast is different. Require having parentheses and a semi colon in Flow. TypeScript uses \"as\" like in C#. Flow is a little bit more verbose and can become harder to see in a situation within the inner function with many parentheses and curly braces."}],"\n",["$","pre",null,{"className":"language-typescript","children":["$","code",null,{"className":"language-typescript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token operator","children":"="}]," otherVariable ",["$","span",null,{"className":"token keyword","children":"as"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," x",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"othervariable",["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token builtin","children":"number"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}]]}]}],"\n",["$","p",null,{"children":"While I was investigating Flow, I was getting more and more surprised by the similitude with TypeScript. In this third article, we can see that the syntax is so common with TypeScript that it’s hard to be very polarized about which one is really the best. There are few fundamental differences that we saw in terms of concept, but even there it’s not very deeply different. Indeed, Flow is checking more scenarios, and TypeScript is letting some scenarios be more “JavaScript-ish”, but still, in other scenarios allows a strong rigidity and better encapsulation."}],"\n",["$","p",null,{"children":"Every team is different. Every person has a different past. Flow and TypeScript should cover the need of having your code more strongly typed, less prone to error, and easier to understand by everyone who reads it. The choice of Flow or TypeScript is a matter of little details. At the end of my investigation, I was all open to going with Flow for our new project at Netflix. However, the last meeting tipped the decision to go with TypeScript. In our case, the number of supported third-party libraries was something that changed our mind."}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"Parts of the serie:"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"typescript-vs-flow-part-1-of-3-who-they-are","children":"TypeScript vs Flow (Part 1 of 3) – Who are they?"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"./typescript-vs-flow-part-2-of-3-high-level-coding","children":"TypeScript vs Flow (Part 2 of 3) – High Level Coding"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"./typescript-vs-flow-part-3-of-3-syntax-difference","children":"TypeScript vs Flow (Part 3 of 3) – Syntax Difference"}]}],"\n"]}]]]}]]}],["$","div",null,{"className":"BlogBody_paginationBar__1gsMc","children":[["$","div",null,{"className":"BlogBody_paginationTitle__H_eFX","children":"Chronological Blog Articles by Page"}],["$","div",null,{"className":"BlogBody_paginationLinks__nk8zd","children":[["$","$L6","1",{"className":"","href":"/blog/page/1","children":1}],["$","$L6","2",{"className":"","href":"/blog/page/2","children":2}],["$","$L6","3",{"className":"","href":"/blog/page/3","children":3}],["$","$L6","4",{"className":"","href":"/blog/page/4","children":4}],["$","$L6","5",{"className":"","href":"/blog/page/5","children":5}],["$","$L6","6",{"className":"","href":"/blog/page/6","children":6}],["$","$L6","7",{"className":"","href":"/blog/page/7","children":7}],["$","$L6","8",{"className":"","href":"/blog/page/8","children":8}],["$","$L6","9",{"className":"","href":"/blog/page/9","children":9}],["$","$L6","10",{"className":"","href":"/blog/page/10","children":10}],["$","$L6","11",{"className":"","href":"/blog/page/11","children":11}],["$","$L6","12",{"className":"","href":"/blog/page/12","children":12}],["$","$L6","13",{"className":"","href":"/blog/page/13","children":13}],["$","$L6","14",{"className":"","href":"/blog/page/14","children":14}],["$","$L6","15",{"className":"","href":"/blog/page/15","children":15}],["$","$L6","16",{"className":"","href":"/blog/page/16","children":16}],["$","$L6","17",{"className":"","href":"/blog/page/17","children":17}],["$","$L6","18",{"className":"","href":"/blog/page/18","children":18}],["$","$L6","19",{"className":"","href":"/blog/page/19","children":19}],["$","$L6","20",{"className":"","href":"/blog/page/20","children":20}],["$","$L6","21",{"className":"","href":"/blog/page/21","children":21}],["$","$L6","22",{"className":"","href":"/blog/page/22","children":22}],["$","$L6","23",{"className":"","href":"/blog/page/23","children":23}],["$","$L6","24",{"className":"","href":"/blog/page/24","children":24}],["$","$L6","25",{"className":"","href":"/blog/page/25","children":25}],["$","$L6","26",{"className":"","href":"/blog/page/26","children":26}],["$","$L6","27",{"className":"","href":"/blog/page/27","children":27}],["$","$L6","28",{"className":"","href":"/blog/page/28","children":28}],["$","$L6","29",{"className":"","href":"/blog/page/29","children":29}],["$","$L6","30",{"className":"","href":"/blog/page/30","children":30}],["$","$L6","31",{"className":"","href":"/blog/page/31","children":31}],["$","$L6","32",{"className":"","href":"/blog/page/32","children":32}],["$","$L6","33",{"className":"","href":"/blog/page/33","children":33}],["$","$L6","34",{"className":"","href":"/blog/page/34","children":34}],["$","$L6","35",{"className":"","href":"/blog/page/35","children":35}],["$","$L6","36",{"className":"","href":"/blog/page/36","children":36}],["$","$L6","37",{"className":"","href":"/blog/page/37","children":37}],["$","$L6","38",{"className":"","href":"/blog/page/38","children":38}],["$","$L6","39",{"className":"","href":"/blog/page/39","children":39}],["$","$L6","40",{"className":"","href":"/blog/page/40","children":40}],["$","$L6","41",{"className":"","href":"/blog/page/41","children":41}],["$","$L6","42",{"className":"","href":"/blog/page/42","children":42}],["$","$L6","43",{"className":"","href":"/blog/page/43","children":43}],["$","$L6","44",{"className":"","href":"/blog/page/44","children":44}],["$","$L6","45",{"className":"","href":"/blog/page/45","children":45}],["$","$L6","46",{"className":"","href":"/blog/page/46","children":46}],["$","$L6","47",{"className":"","href":"/blog/page/47","children":47}],["$","$L6","48",{"className":"","href":"/blog/page/48","children":48}],["$","$L6","49",{"className":"","href":"/blog/page/49","children":49}],["$","$L6","50",{"className":"","href":"/blog/page/50","children":50}],["$","$L6","51",{"className":"","href":"/blog/page/51","children":51}],["$","$L6","52",{"className":"","href":"/blog/page/52","children":52}],["$","$L6","53",{"className":"","href":"/blog/page/53","children":53}],["$","$L6","54",{"className":"","href":"/blog/page/54","children":54}],["$","$L6","55",{"className":"","href":"/blog/page/55","children":55}],["$","$L6","56",{"className":"","href":"/blog/page/56","children":56}],["$","$L6","57",{"className":"","href":"/blog/page/57","children":57}],["$","$L6","58",{"className":"","href":"/blog/page/58","children":58}],["$","$L6","59",{"className":"","href":"/blog/page/59","children":59}],["$","$L6","60",{"className":"","href":"/blog/page/60","children":60}],["$","$L6","61",{"className":"","href":"/blog/page/61","children":61}],["$","$L6","62",{"className":"","href":"/blog/page/62","children":62}],["$","$L6","63",{"className":"","href":"/blog/page/63","children":63}],["$","$L6","64",{"className":"","href":"/blog/page/64","children":64}],["$","$L6","65",{"className":"","href":"/blog/page/65","children":65}],["$","$L6","66",{"className":"","href":"/blog/page/66","children":66}],["$","$L6","67",{"className":"","href":"/blog/page/67","children":67}],["$","$L6","68",{"className":"","href":"/blog/page/68","children":68}],["$","$L6","69",{"className":"","href":"/blog/page/69","children":69}],["$","$L6","70",{"className":"","href":"/blog/page/70","children":70}],["$","$L6","71",{"className":"","href":"/blog/page/71","children":71}],["$","$L6","72",{"className":"","href":"/blog/page/72","children":72}],["$","$L6","73",{"className":"","href":"/blog/page/73","children":73}],["$","$L6","74",{"className":"","href":"/blog/page/74","children":74}],["$","$L6","75",{"className":"","href":"/blog/page/75","children":75}],["$","$L6","76",{"className":"","href":"/blog/page/76","children":76}],["$","$L6","77",{"className":"","href":"/blog/page/77","children":77}],["$","$L6","78",{"className":"","href":"/blog/page/78","children":78}]]}]]}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Patrick Desjardins Blog - TypeScript vs Flow (Part 3 of 3) - Syntax Difference"}],["$","meta","3",{"name":"description","content":"TypeScript vs Flow (Part 3 of 3) - Syntax Difference"}]]
1:null
